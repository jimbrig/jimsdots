"use strict";var t=require("obsidian"),e=require("os"),n=require("util"),r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function o(t,e,n,r){var i,o=arguments.length,u=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(u=(o<3?i(u):o>3?i(e,n,u):i(e,n))||u);return o>3&&u&&Object.defineProperty(e,n,u),u}function u(t,e){return function(n,r){e(n,r,t)}}function a(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function s(t,e,n,r){return new(n||(n=Promise))((function(i,o){function u(t){try{s(r.next(t))}catch(t){o(t)}}function a(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(u,a)}s((r=r.apply(t,e||[])).next())}))}function c(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=u.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}function l(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function f(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)u.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return u}function h(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(f(arguments[e]));return t}function p(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],u=0,a=o.length;u<a;u++,i++)r[i]=o[u];return r}var d,v="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function m(t,e,n){return t(n={path:e,exports:{},require:function(t,e){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}
/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */(null==e&&n.path)}},n.exports),n.exports}!function(t){!function(e){var n="object"==typeof v?v:"object"==typeof self?self:"object"==typeof this?this:Function("return this;")(),r=i(t);function i(t,e){return function(n,r){"function"!=typeof t[n]&&Object.defineProperty(t,n,{configurable:!0,writable:!0,value:r}),e&&e(n,r)}}void 0===n.Reflect?n.Reflect=t:r=i(n.Reflect,r),function(t){var e=Object.prototype.hasOwnProperty,n="function"==typeof Symbol,r=n&&void 0!==Symbol.toPrimitive?Symbol.toPrimitive:"@@toPrimitive",i=n&&void 0!==Symbol.iterator?Symbol.iterator:"@@iterator",o="function"==typeof Object.create,u={__proto__:[]}instanceof Array,a=!o&&!u,s={create:o?function(){return rt(Object.create(null))}:u?function(){return rt({__proto__:null})}:function(){return rt({})},has:a?function(t,n){return e.call(t,n)}:function(t,e){return e in t},get:a?function(t,n){return e.call(t,n)?t[n]:void 0}:function(t,e){return t[e]}},c=Object.getPrototypeOf(Function),l="object"==typeof process&&process.env&&"true"===process.env.REFLECT_METADATA_USE_MAP_POLYFILL,f=l||"function"!=typeof Map||"function"!=typeof Map.prototype.entries?tt():Map,h=l||"function"!=typeof Set||"function"!=typeof Set.prototype.entries?et():Set,p=new(l||"function"!=typeof WeakMap?nt():WeakMap);function d(t,e,n,r){if(R(n)){if(!W(t))throw new TypeError;if(!q(e))throw new TypeError;return E(t,e)}if(!W(t))throw new TypeError;if(!P(e))throw new TypeError;if(!P(r)&&!R(r)&&!F(r))throw new TypeError;return F(r)&&(r=void 0),T(t,e,n=U(n),r)}function v(t,e){function n(n,r){if(!P(n))throw new TypeError;if(!R(r)&&!H(r))throw new TypeError;C(t,e,n,r)}return n}function m(t,e,n,r){if(!P(n))throw new TypeError;return R(r)||(r=U(r)),C(t,e,n,r)}function y(t,e,n){if(!P(e))throw new TypeError;return R(n)||(n=U(n)),S(t,e,n)}function g(t,e,n){if(!P(e))throw new TypeError;return R(n)||(n=U(n)),L(t,e,n)}function _(t,e,n){if(!P(e))throw new TypeError;return R(n)||(n=U(n)),A(t,e,n)}function w(t,e,n){if(!P(e))throw new TypeError;return R(n)||(n=U(n)),N(t,e,n)}function b(t,e){if(!P(t))throw new TypeError;return R(e)||(e=U(e)),M(t,e)}function k(t,e){if(!P(t))throw new TypeError;return R(e)||(e=U(e)),I(t,e)}function x(t,e,n){if(!P(e))throw new TypeError;R(n)||(n=U(n));var r=O(e,n,!1);if(R(r))return!1;if(!r.delete(t))return!1;if(r.size>0)return!0;var i=p.get(e);return i.delete(n),i.size>0||p.delete(e),!0}function E(t,e){for(var n=t.length-1;n>=0;--n){var r=(0,t[n])(e);if(!R(r)&&!F(r)){if(!q(r))throw new TypeError;e=r}}return e}function T(t,e,n,r){for(var i=t.length-1;i>=0;--i){var o=(0,t[i])(e,n,r);if(!R(o)&&!F(o)){if(!P(o))throw new TypeError;r=o}}return r}function O(t,e,n){var r=p.get(t);if(R(r)){if(!n)return;r=new f,p.set(t,r)}var i=r.get(e);if(R(i)){if(!n)return;i=new f,r.set(e,i)}return i}function S(t,e,n){if(L(t,e,n))return!0;var r=X(e);return!F(r)&&S(t,r,n)}function L(t,e,n){var r=O(e,n,!1);return!R(r)&&z(r.has(t))}function A(t,e,n){if(L(t,e,n))return N(t,e,n);var r=X(e);return F(r)?void 0:A(t,r,n)}function N(t,e,n){var r=O(e,n,!1);if(!R(r))return r.get(t)}function C(t,e,n,r){O(n,r,!0).set(t,e)}function M(t,e){var n=I(t,e),r=X(t);if(null===r)return n;var i=M(r,e);if(i.length<=0)return n;if(n.length<=0)return i;for(var o=new h,u=[],a=0,s=n;a<s.length;a++){var c=s[a];o.has(c)||(o.add(c),u.push(c))}for(var l=0,f=i;l<f.length;l++){c=f[l];o.has(c)||(o.add(c),u.push(c))}return u}function I(t,e){var n=[],r=O(t,e,!1);if(R(r))return n;for(var i=$(r.keys()),o=0;;){var u=J(i);if(!u)return n.length=o,n;var a=Y(u);try{n[o]=a}catch(t){try{Q(i)}finally{throw t}}o++}}function j(t){if(null===t)return 1;switch(typeof t){case"undefined":return 0;case"boolean":return 2;case"string":return 3;case"symbol":return 4;case"number":return 5;case"object":return null===t?1:6;default:return 6}}function R(t){return void 0===t}function F(t){return null===t}function D(t){return"symbol"==typeof t}function P(t){return"object"==typeof t?null!==t:"function"==typeof t}function V(t,e){switch(j(t)){case 0:case 1:case 2:case 3:case 4:case 5:return t}var n=3===e?"string":5===e?"number":"default",i=G(t,r);if(void 0!==i){var o=i.call(t,n);if(P(o))throw new TypeError;return o}return B(t,"default"===n?"number":n)}function B(t,e){if("string"===e){var n=t.toString;if(Z(n))if(!P(i=n.call(t)))return i;if(Z(r=t.valueOf))if(!P(i=r.call(t)))return i}else{var r;if(Z(r=t.valueOf))if(!P(i=r.call(t)))return i;var i,o=t.toString;if(Z(o))if(!P(i=o.call(t)))return i}throw new TypeError}function z(t){return!!t}function K(t){return""+t}function U(t){var e=V(t,3);return D(e)?e:K(e)}function W(t){return Array.isArray?Array.isArray(t):t instanceof Object?t instanceof Array:"[object Array]"===Object.prototype.toString.call(t)}function Z(t){return"function"==typeof t}function q(t){return"function"==typeof t}function H(t){switch(j(t)){case 3:case 4:return!0;default:return!1}}function G(t,e){var n=t[e];if(null!=n){if(!Z(n))throw new TypeError;return n}}function $(t){var e=G(t,i);if(!Z(e))throw new TypeError;var n=e.call(t);if(!P(n))throw new TypeError;return n}function Y(t){return t.value}function J(t){var e=t.next();return!e.done&&e}function Q(t){var e=t.return;e&&e.call(t)}function X(t){var e=Object.getPrototypeOf(t);if("function"!=typeof t||t===c)return e;if(e!==c)return e;var n=t.prototype,r=n&&Object.getPrototypeOf(n);if(null==r||r===Object.prototype)return e;var i=r.constructor;return"function"!=typeof i||i===t?e:i}function tt(){var t={},e=[],n=function(){function t(t,e,n){this._index=0,this._keys=t,this._values=e,this._selector=n}return t.prototype["@@iterator"]=function(){return this},t.prototype[i]=function(){return this},t.prototype.next=function(){var t=this._index;if(t>=0&&t<this._keys.length){var n=this._selector(this._keys[t],this._values[t]);return t+1>=this._keys.length?(this._index=-1,this._keys=e,this._values=e):this._index++,{value:n,done:!1}}return{value:void 0,done:!0}},t.prototype.throw=function(t){throw this._index>=0&&(this._index=-1,this._keys=e,this._values=e),t},t.prototype.return=function(t){return this._index>=0&&(this._index=-1,this._keys=e,this._values=e),{value:t,done:!0}},t}();return function(){function e(){this._keys=[],this._values=[],this._cacheKey=t,this._cacheIndex=-2}return Object.defineProperty(e.prototype,"size",{get:function(){return this._keys.length},enumerable:!0,configurable:!0}),e.prototype.has=function(t){return this._find(t,!1)>=0},e.prototype.get=function(t){var e=this._find(t,!1);return e>=0?this._values[e]:void 0},e.prototype.set=function(t,e){var n=this._find(t,!0);return this._values[n]=e,this},e.prototype.delete=function(e){var n=this._find(e,!1);if(n>=0){for(var r=this._keys.length,i=n+1;i<r;i++)this._keys[i-1]=this._keys[i],this._values[i-1]=this._values[i];return this._keys.length--,this._values.length--,e===this._cacheKey&&(this._cacheKey=t,this._cacheIndex=-2),!0}return!1},e.prototype.clear=function(){this._keys.length=0,this._values.length=0,this._cacheKey=t,this._cacheIndex=-2},e.prototype.keys=function(){return new n(this._keys,this._values,r)},e.prototype.values=function(){return new n(this._keys,this._values,o)},e.prototype.entries=function(){return new n(this._keys,this._values,u)},e.prototype["@@iterator"]=function(){return this.entries()},e.prototype[i]=function(){return this.entries()},e.prototype._find=function(t,e){return this._cacheKey!==t&&(this._cacheIndex=this._keys.indexOf(this._cacheKey=t)),this._cacheIndex<0&&e&&(this._cacheIndex=this._keys.length,this._keys.push(t),this._values.push(void 0)),this._cacheIndex},e}();function r(t,e){return t}function o(t,e){return e}function u(t,e){return[t,e]}}function et(){return function(){function t(){this._map=new f}return Object.defineProperty(t.prototype,"size",{get:function(){return this._map.size},enumerable:!0,configurable:!0}),t.prototype.has=function(t){return this._map.has(t)},t.prototype.add=function(t){return this._map.set(t,t),this},t.prototype.delete=function(t){return this._map.delete(t)},t.prototype.clear=function(){this._map.clear()},t.prototype.keys=function(){return this._map.keys()},t.prototype.values=function(){return this._map.values()},t.prototype.entries=function(){return this._map.entries()},t.prototype["@@iterator"]=function(){return this.keys()},t.prototype[i]=function(){return this.keys()},t}()}function nt(){var t=16,n=s.create(),r=i();return function(){function t(){this._key=i()}return t.prototype.has=function(t){var e=o(t,!1);return void 0!==e&&s.has(e,this._key)},t.prototype.get=function(t){var e=o(t,!1);return void 0!==e?s.get(e,this._key):void 0},t.prototype.set=function(t,e){return o(t,!0)[this._key]=e,this},t.prototype.delete=function(t){var e=o(t,!1);return void 0!==e&&delete e[this._key]},t.prototype.clear=function(){this._key=i()},t}();function i(){var t;do{t="@@WeakMap@@"+c()}while(s.has(n,t));return n[t]=!0,t}function o(t,n){if(!e.call(t,r)){if(!n)return;Object.defineProperty(t,r,{value:s.create()})}return t[r]}function u(t,e){for(var n=0;n<e;++n)t[n]=255*Math.random()|0;return t}function a(t){return"function"==typeof Uint8Array?"undefined"!=typeof crypto?crypto.getRandomValues(new Uint8Array(t)):"undefined"!=typeof msCrypto?msCrypto.getRandomValues(new Uint8Array(t)):u(new Uint8Array(t),t):u(new Array(t),t)}function c(){var e=a(t);e[6]=79&e[6]|64,e[8]=191&e[8]|128;for(var n="",r=0;r<t;++r){var i=e[r];4!==r&&6!==r&&8!==r||(n+="-"),i<16&&(n+="0"),n+=i.toString(16).toLowerCase()}return n}}function rt(t){return t.__=void 0,delete t.__,t}t("decorate",d),t("metadata",v),t("defineMetadata",m),t("hasMetadata",y),t("hasOwnMetadata",g),t("getMetadata",_),t("getOwnMetadata",w),t("getMetadataKeys",b),t("getOwnMetadataKeys",k),t("deleteMetadata",x)}(r)}()}(d||(d={}));var y,g=function(t,e){void 0===e&&(e=null),this.context=t,this.metadata=e};!function(t){t[t.Transient=0]="Transient",t[t.Singleton=1]="Singleton",t[t.ResolutionScoped=2]="ResolutionScoped",t[t.ContainerScoped=3]="ContainerScoped"}(y||(y={}));var _=y;function w(t,e){return function(n,r,i){var o=Reflect.getOwnMetadata("injectionTokens",n)||{};o[i]=e?{token:t,transform:e.transformToken,transformArgs:e.args||[]}:t,Reflect.defineMetadata("injectionTokens",o,n)}}function b(t){return!!t.useClass}function k(t){return!!t.useFactory}var x=function(){function t(t){this.wrap=t,this.reflectMethods=["get","getPrototypeOf","setPrototypeOf","getOwnPropertyDescriptor","defineProperty","has","set","deleteProperty","apply","construct"]}return t.prototype.createProxy=function(t){var e,n=this,r=!1;return new Proxy({},this.createHandler((function(){return r||(e=t(n.wrap()),r=!0),e})))},t.prototype.createHandler=function(t){var e={};return this.reflectMethods.forEach((function(n){e[n]=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];e[0]=t();var i=Reflect[n];return i.apply(void 0,h(e))}})),e},t}();function E(t){return"string"==typeof t||"symbol"==typeof t}function T(t){return"object"==typeof t&&"token"in t&&"transform"in t}function O(t){return!!t.useToken}function S(t){return null!=t.useValue}var L=function(){function t(){this._registryMap=new Map}return t.prototype.entries=function(){return this._registryMap.entries()},t.prototype.getAll=function(t){return this.ensure(t),this._registryMap.get(t)},t.prototype.get=function(t){this.ensure(t);var e=this._registryMap.get(t);return e[e.length-1]||null},t.prototype.set=function(t,e){this.ensure(t),this._registryMap.get(t).push(e)},t.prototype.setAll=function(t,e){this._registryMap.set(t,e)},t.prototype.has=function(t){return this.ensure(t),this._registryMap.get(t).length>0},t.prototype.clear=function(){this._registryMap.clear()},t.prototype.ensure=function(t){this._registryMap.has(t)||this._registryMap.set(t,[])},t}(),A=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e}(L),N=function(){this.scopedResolutions=new Map};function C(t,e,n){var r,i,o=f(t.toString().match(/constructor\(([\w, ]+)\)/)||[],2)[1],u=function(t,e){return null===t?"at position #"+e:'"'+t.split(",")[e].trim()+'" at position #'+e}(void 0===o?null:o,e);return r="Cannot inject the dependency "+u+' of "'+t.name+'" constructor. Reason:',void 0===i&&(i="    "),h([r],n.message.split("\n").map((function(t){return i+t}))).join("\n")}var M=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e}(L),I=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e}(L),j=function(){this.preResolution=new M,this.postResolution=new I},R=new Map,F=new(function(){function t(t){this.parent=t,this._registry=new A,this.interceptors=new j}return t.prototype.register=function(t,e,n){var r;if(void 0===n&&(n={lifecycle:_.Transient}),r=function(t){return b(t)||S(t)||O(t)||k(t)}(e)?e:{useClass:e},O(r))for(var i=[t],o=r;null!=o;){var u=o.useToken;if(i.includes(u))throw new Error("Token registration cycle detected! "+h(i,[u]).join(" -> "));i.push(u);var a=this._registry.get(u);o=a&&O(a.provider)?a.provider:null}if((n.lifecycle===_.Singleton||n.lifecycle==_.ContainerScoped||n.lifecycle==_.ResolutionScoped)&&(S(r)||k(r)))throw new Error('Cannot use lifecycle "'+_[n.lifecycle]+'" with ValueProviders or FactoryProviders');return this._registry.set(t,{provider:r,options:n}),this},t.prototype.registerType=function(t,e){return E(e)?this.register(t,{useToken:e}):this.register(t,{useClass:e})},t.prototype.registerInstance=function(t,e){return this.register(t,{useValue:e})},t.prototype.registerSingleton=function(t,e){if(E(t)){if(E(e))return this.register(t,{useToken:e},{lifecycle:_.Singleton});if(e)return this.register(t,{useClass:e},{lifecycle:_.Singleton});throw new Error('Cannot register a type name as a singleton without a "to" token')}var n=t;return e&&!E(e)&&(n=e),this.register(t,{useClass:n},{lifecycle:_.Singleton})},t.prototype.resolve=function(t,e){void 0===e&&(e=new N);var n=this.getRegistration(t);if(!n&&E(t))throw new Error('Attempted to resolve unregistered dependency token: "'+t.toString()+'"');if(this.executePreResolutionInterceptor(t,"Single"),n){var r=this.resolveRegistration(n,e);return this.executePostResolutionInterceptor(t,r,"Single"),r}if(function(t){return"function"==typeof t||t instanceof x}(t)){r=this.construct(t,e);return this.executePostResolutionInterceptor(t,r,"Single"),r}throw new Error("Attempted to construct an undefined constructor. Could mean a circular dependency problem. Try using `delay` function.")},t.prototype.executePreResolutionInterceptor=function(t,e){var n,r;if(this.interceptors.preResolution.has(t)){var i=[];try{for(var o=l(this.interceptors.preResolution.getAll(t)),u=o.next();!u.done;u=o.next()){var a=u.value;"Once"!=a.options.frequency&&i.push(a),a.callback(t,e)}}catch(t){n={error:t}}finally{try{u&&!u.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}this.interceptors.preResolution.setAll(t,i)}},t.prototype.executePostResolutionInterceptor=function(t,e,n){var r,i;if(this.interceptors.postResolution.has(t)){var o=[];try{for(var u=l(this.interceptors.postResolution.getAll(t)),a=u.next();!a.done;a=u.next()){var s=a.value;"Once"!=s.options.frequency&&o.push(s),s.callback(t,e,n)}}catch(t){r={error:t}}finally{try{a&&!a.done&&(i=u.return)&&i.call(u)}finally{if(r)throw r.error}}this.interceptors.postResolution.setAll(t,o)}},t.prototype.resolveRegistration=function(t,e){if(t.options.lifecycle===_.ResolutionScoped&&e.scopedResolutions.has(t))return e.scopedResolutions.get(t);var n,r=t.options.lifecycle===_.Singleton,i=t.options.lifecycle===_.ContainerScoped,o=r||i;return n=S(t.provider)?t.provider.useValue:O(t.provider)?o?t.instance||(t.instance=this.resolve(t.provider.useToken,e)):this.resolve(t.provider.useToken,e):b(t.provider)?o?t.instance||(t.instance=this.construct(t.provider.useClass,e)):this.construct(t.provider.useClass,e):k(t.provider)?t.provider.useFactory(this):this.construct(t.provider,e),t.options.lifecycle===_.ResolutionScoped&&e.scopedResolutions.set(t,n),n},t.prototype.resolveAll=function(t,e){var n=this;void 0===e&&(e=new N);var r=this.getAllRegistrations(t);if(!r&&E(t))throw new Error('Attempted to resolve unregistered dependency token: "'+t.toString()+'"');if(this.executePreResolutionInterceptor(t,"All"),r){var i=r.map((function(t){return n.resolveRegistration(t,e)}));return this.executePostResolutionInterceptor(t,i,"All"),i}var o=[this.construct(t,e)];return this.executePostResolutionInterceptor(t,o,"All"),o},t.prototype.isRegistered=function(t,e){return void 0===e&&(e=!1),this._registry.has(t)||e&&(this.parent||!1)&&this.parent.isRegistered(t,!0)},t.prototype.reset=function(){this._registry.clear(),this.interceptors.preResolution.clear(),this.interceptors.postResolution.clear()},t.prototype.clearInstances=function(){var t,e;try{for(var n=l(this._registry.entries()),r=n.next();!r.done;r=n.next()){var i=f(r.value,2),o=i[0],u=i[1];this._registry.setAll(o,u.filter((function(t){return!S(t.provider)})).map((function(t){return t.instance=void 0,t})))}}catch(e){t={error:e}}finally{try{r&&!r.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}},t.prototype.createChildContainer=function(){var e,n,r=new t(this);try{for(var i=l(this._registry.entries()),o=i.next();!o.done;o=i.next()){var u=f(o.value,2),a=u[0],s=u[1];s.some((function(t){return t.options.lifecycle===_.ContainerScoped}))&&r._registry.setAll(a,s.map((function(t){return t.options.lifecycle===_.ContainerScoped?{provider:t.provider,options:t.options}:t})))}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}return r},t.prototype.beforeResolution=function(t,e,n){void 0===n&&(n={frequency:"Always"}),this.interceptors.preResolution.set(t,{callback:e,options:n})},t.prototype.afterResolution=function(t,e,n){void 0===n&&(n={frequency:"Always"}),this.interceptors.postResolution.set(t,{callback:e,options:n})},t.prototype.getRegistration=function(t){return this.isRegistered(t)?this._registry.get(t):this.parent?this.parent.getRegistration(t):null},t.prototype.getAllRegistrations=function(t){return this.isRegistered(t)?this._registry.getAll(t):this.parent?this.parent.getAllRegistrations(t):null},t.prototype.construct=function(t,e){var n=this;if(t instanceof x)return t.createProxy((function(t){return n.resolve(t,e)}));var r=R.get(t);if(!r||0===r.length){if(0===t.length)return new t;throw new Error('TypeInfo not known for "'+t.name+'"')}var i=r.map(this.resolveParams(e,t));return new(t.bind.apply(t,h([void 0],i)))},t.prototype.resolveParams=function(t,e){var n=this;return function(r,i){var o,u,a,s;try{return"object"==typeof(s=r)&&"token"in s&&"multiple"in s?T(r)?r.multiple?(o=n.resolve(r.transform)).transform.apply(o,h([n.resolveAll(r.token)],r.transformArgs)):(u=n.resolve(r.transform)).transform.apply(u,h([n.resolve(r.token,t)],r.transformArgs)):r.multiple?n.resolveAll(r.token):n.resolve(r.token,t):T(r)?(a=n.resolve(r.transform,t)).transform.apply(a,h([n.resolve(r.token,t)],r.transformArgs)):n.resolve(r,t)}catch(t){throw new Error(C(e,i,t))}}},t}());function D(t){return w(t)}function P(){return function(t){R.set(t,function(t){var e=Reflect.getMetadata("design:paramtypes",t)||[],n=Reflect.getOwnMetadata("injectionTokens",t)||{};return Object.keys(n).forEach((function(t){e[+t]=n[t]})),e}(t))}}if("undefined"==typeof Reflect||!Reflect.getMetadata)throw new Error("tsyringe requires a reflect polyfill. Please add 'import \"reflect-metadata\"' to the top of your entry point.");var V=function(){function e(t){this._workspace=t,this.name="file"}return e.prototype.docs=function(){return s(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return t={},[4,this.provide()];case 1:return[2,(t.context=e.sent(),t.template="\n# `file`\n\nExposes Obsidian's internal [`TFile`](https://github.com/obsidianmd/obsidian-api/blob/d10f2f6efc0d0d7c9bf96cd435ef376b18fbd6d8/obsidian.d.ts#L2206) structure for templating.\n\n## Usages\n\n{% raw %}```\npath: {{ file.path }}\nname: {{ file.name }}\nbasename: {{ file.basename }}\nextension: {{ file.extension }}\n```{% endraw %}\n\noutputs:\n\n```\npath: {{ file.path }}\nname: {{ file.name }}\nbasename: {{ file.basename }}\nextension: {{ file.extension }}\n```\n",t)]}}))}))},e.prototype.provide=function(){return s(this,void 0,void 0,(function(){var t;return c(this,(function(e){return null==(t=this._workspace.getActiveFile())?[2,null]:[2,new g(t)]}))}))},e=o([P(),a("design:paramtypes",[t.Workspace])],e)}(),B=function(t){this.now=t},z={TempleSettings:Symbol.for("TempleSettings"),ITempleProvider:Symbol.for("ITempleProvider<any>"),Plugin:Symbol.for("Plugin_2")},K=m((function(t,e){function n(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function r(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}function i(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}function o(t){return(o=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function u(t,e){return(u=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function s(t,e,n){return(s=a()?Reflect.construct:function(t,e,n){var r=[null];r.push.apply(r,e);var i=new(Function.bind.apply(t,r));return n&&u(i,n.prototype),i}).apply(null,arguments)}function c(t){var e="function"==typeof Map?new Map:void 0;return(c=function(t){if(null===t||(n=t,-1===Function.toString.call(n).indexOf("[native code]")))return t;var n;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,r)}function r(){return s(t,arguments,o(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),u(r,t)})(t)}function l(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function f(t){var e=0;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(t=function(t,e){if(t){if("string"==typeof t)return l(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?l(t,e):void 0}}(t)))return function(){return e>=t.length?{done:!0}:{done:!1,value:t[e++]}};throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(e=t[Symbol.iterator]()).next.bind(e)}Object.defineProperty(e,"__esModule",{value:!0});var h=function(t){function e(){return t.apply(this,arguments)||this}return i(e,t),e}(c(Error)),p=function(t){function e(e){return t.call(this,"Invalid DateTime: "+e.toMessage())||this}return i(e,t),e}(h),d=function(t){function e(e){return t.call(this,"Invalid Interval: "+e.toMessage())||this}return i(e,t),e}(h),v=function(t){function e(e){return t.call(this,"Invalid Duration: "+e.toMessage())||this}return i(e,t),e}(h),m=function(t){function e(){return t.apply(this,arguments)||this}return i(e,t),e}(h),y=function(t){function e(e){return t.call(this,"Invalid unit "+e)||this}return i(e,t),e}(h),g=function(t){function e(){return t.apply(this,arguments)||this}return i(e,t),e}(h),_=function(t){function e(){return t.call(this,"Zone is an abstract class")||this}return i(e,t),e}(h),w="numeric",b="short",k="long",x={year:w,month:w,day:w},E={year:w,month:b,day:w},T={year:w,month:b,day:w,weekday:b},O={year:w,month:k,day:w},S={year:w,month:k,day:w,weekday:k},L={hour:w,minute:w},A={hour:w,minute:w,second:w},N={hour:w,minute:w,second:w,timeZoneName:b},C={hour:w,minute:w,second:w,timeZoneName:k},M={hour:w,minute:w,hour12:!1},I={hour:w,minute:w,second:w,hour12:!1},j={hour:w,minute:w,second:w,hour12:!1,timeZoneName:b},R={hour:w,minute:w,second:w,hour12:!1,timeZoneName:k},F={year:w,month:w,day:w,hour:w,minute:w},D={year:w,month:w,day:w,hour:w,minute:w,second:w},P={year:w,month:b,day:w,hour:w,minute:w},V={year:w,month:b,day:w,hour:w,minute:w,second:w},B={year:w,month:b,day:w,weekday:b,hour:w,minute:w},z={year:w,month:k,day:w,hour:w,minute:w,timeZoneName:b},K={year:w,month:k,day:w,hour:w,minute:w,second:w,timeZoneName:b},U={year:w,month:k,day:w,weekday:k,hour:w,minute:w,timeZoneName:k},W={year:w,month:k,day:w,weekday:k,hour:w,minute:w,second:w,timeZoneName:k};function Z(t){return void 0===t}function q(t){return"number"==typeof t}function H(t){return"number"==typeof t&&t%1==0}function G(){try{return"undefined"!=typeof Intl&&Intl.DateTimeFormat}catch(t){return!1}}function $(){return!Z(Intl.DateTimeFormat.prototype.formatToParts)}function Y(){try{return"undefined"!=typeof Intl&&!!Intl.RelativeTimeFormat}catch(t){return!1}}function J(t,e,n){if(0!==t.length)return t.reduce((function(t,r){var i=[e(r),r];return t&&n(t[0],i[0])===t[0]?t:i}),null)[1]}function Q(t,e){return e.reduce((function(e,n){return e[n]=t[n],e}),{})}function X(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function tt(t,e,n){return H(t)&&t>=e&&t<=n}function et(t,e){return void 0===e&&(e=2),t.toString().length<e?("0".repeat(e)+t).slice(-e):t.toString()}function nt(t){return Z(t)||null===t||""===t?void 0:parseInt(t,10)}function rt(t){if(!Z(t)&&null!==t&&""!==t){var e=1e3*parseFloat("0."+t);return Math.floor(e)}}function it(t,e,n){void 0===n&&(n=!1);var r=Math.pow(10,e);return(n?Math.trunc:Math.round)(t*r)/r}function ot(t){return t%4==0&&(t%100!=0||t%400==0)}function ut(t){return ot(t)?366:365}function at(t,e){var n=function(t,e){return t-e*Math.floor(t/e)}(e-1,12)+1;return 2===n?ot(t+(e-n)/12)?29:28:[31,null,31,30,31,30,31,31,30,31,30,31][n-1]}function st(t){var e=Date.UTC(t.year,t.month-1,t.day,t.hour,t.minute,t.second,t.millisecond);return t.year<100&&t.year>=0&&(e=new Date(e)).setUTCFullYear(e.getUTCFullYear()-1900),+e}function ct(t){var e=(t+Math.floor(t/4)-Math.floor(t/100)+Math.floor(t/400))%7,n=t-1,r=(n+Math.floor(n/4)-Math.floor(n/100)+Math.floor(n/400))%7;return 4===e||3===r?53:52}function lt(t){return t>99?t:t>60?1900+t:2e3+t}function ft(t,e,n,r){void 0===r&&(r=null);var i=new Date(t),o={hour12:!1,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit"};r&&(o.timeZone=r);var u=Object.assign({timeZoneName:e},o),a=G();if(a&&$()){var s=new Intl.DateTimeFormat(n,u).formatToParts(i).find((function(t){return"timezonename"===t.type.toLowerCase()}));return s?s.value:null}if(a){var c=new Intl.DateTimeFormat(n,o).format(i);return new Intl.DateTimeFormat(n,u).format(i).substring(c.length).replace(/^[, \u200e]+/,"")}return null}function ht(t,e){var n=parseInt(t,10);Number.isNaN(n)&&(n=0);var r=parseInt(e,10)||0;return 60*n+(n<0||Object.is(n,-0)?-r:r)}function pt(t){var e=Number(t);if("boolean"==typeof t||""===t||Number.isNaN(e))throw new g("Invalid unit value "+t);return e}function dt(t,e,n){var r={};for(var i in t)if(X(t,i)){if(n.indexOf(i)>=0)continue;var o=t[i];if(null==o)continue;r[e(i)]=pt(o)}return r}function vt(t,e){var n=Math.trunc(Math.abs(t/60)),r=Math.trunc(Math.abs(t%60)),i=t>=0?"+":"-";switch(e){case"short":return""+i+et(n,2)+":"+et(r,2);case"narrow":return""+i+n+(r>0?":"+r:"");case"techie":return""+i+et(n,2)+et(r,2);default:throw new RangeError("Value format "+e+" is out of range for property format")}}function mt(t){return Q(t,["hour","minute","second","millisecond"])}var yt=/[A-Za-z_+-]{1,256}(:?\/[A-Za-z_+-]{1,256}(\/[A-Za-z_+-]{1,256})?)?/;function gt(t){return JSON.stringify(t,Object.keys(t).sort())}var _t=["January","February","March","April","May","June","July","August","September","October","November","December"],wt=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],bt=["J","F","M","A","M","J","J","A","S","O","N","D"];function kt(t){switch(t){case"narrow":return bt;case"short":return wt;case"long":return _t;case"numeric":return["1","2","3","4","5","6","7","8","9","10","11","12"];case"2-digit":return["01","02","03","04","05","06","07","08","09","10","11","12"];default:return null}}var xt=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],Et=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"],Tt=["M","T","W","T","F","S","S"];function Ot(t){switch(t){case"narrow":return Tt;case"short":return Et;case"long":return xt;case"numeric":return["1","2","3","4","5","6","7"];default:return null}}var St=["AM","PM"],Lt=["Before Christ","Anno Domini"],At=["BC","AD"],Nt=["B","A"];function Ct(t){switch(t){case"narrow":return Nt;case"short":return At;case"long":return Lt;default:return null}}function Mt(t,e){for(var n,r="",i=f(t);!(n=i()).done;){var o=n.value;o.literal?r+=o.val:r+=e(o.val)}return r}var It={D:x,DD:E,DDD:O,DDDD:S,t:L,tt:A,ttt:N,tttt:C,T:M,TT:I,TTT:j,TTTT:R,f:F,ff:P,fff:z,ffff:U,F:D,FF:V,FFF:K,FFFF:W},jt=function(){function t(t,e){this.opts=e,this.loc=t,this.systemLoc=null}t.create=function(e,n){return void 0===n&&(n={}),new t(e,n)},t.parseFormat=function(t){for(var e=null,n="",r=!1,i=[],o=0;o<t.length;o++){var u=t.charAt(o);"'"===u?(n.length>0&&i.push({literal:r,val:n}),e=null,n="",r=!r):r||u===e?n+=u:(n.length>0&&i.push({literal:!1,val:n}),n=u,e=u)}return n.length>0&&i.push({literal:r,val:n}),i},t.macroTokenToFormatOpts=function(t){return It[t]};var e=t.prototype;return e.formatWithSystemDefault=function(t,e){return null===this.systemLoc&&(this.systemLoc=this.loc.redefaultToSystem()),this.systemLoc.dtFormatter(t,Object.assign({},this.opts,e)).format()},e.formatDateTime=function(t,e){return void 0===e&&(e={}),this.loc.dtFormatter(t,Object.assign({},this.opts,e)).format()},e.formatDateTimeParts=function(t,e){return void 0===e&&(e={}),this.loc.dtFormatter(t,Object.assign({},this.opts,e)).formatToParts()},e.resolvedOptions=function(t,e){return void 0===e&&(e={}),this.loc.dtFormatter(t,Object.assign({},this.opts,e)).resolvedOptions()},e.num=function(t,e){if(void 0===e&&(e=0),this.opts.forceSimple)return et(t,e);var n=Object.assign({},this.opts);return e>0&&(n.padTo=e),this.loc.numberFormatter(n).format(t)},e.formatDateTimeFromString=function(e,n){var r=this,i="en"===this.loc.listingMode(),o=this.loc.outputCalendar&&"gregory"!==this.loc.outputCalendar&&$(),u=function(t,n){return r.loc.extract(e,t,n)},a=function(t){return e.isOffsetFixed&&0===e.offset&&t.allowZ?"Z":e.isValid?e.zone.formatOffset(e.ts,t.format):""},s=function(){return i?function(t){return St[t.hour<12?0:1]}(e):u({hour:"numeric",hour12:!0},"dayperiod")},c=function(t,n){return i?function(t,e){return kt(e)[t.month-1]}(e,t):u(n?{month:t}:{month:t,day:"numeric"},"month")},l=function(t,n){return i?function(t,e){return Ot(e)[t.weekday-1]}(e,t):u(n?{weekday:t}:{weekday:t,month:"long",day:"numeric"},"weekday")},f=function(t){return i?function(t,e){return Ct(e)[t.year<0?0:1]}(e,t):u({era:t},"era")};return Mt(t.parseFormat(n),(function(n){switch(n){case"S":return r.num(e.millisecond);case"u":case"SSS":return r.num(e.millisecond,3);case"s":return r.num(e.second);case"ss":return r.num(e.second,2);case"m":return r.num(e.minute);case"mm":return r.num(e.minute,2);case"h":return r.num(e.hour%12==0?12:e.hour%12);case"hh":return r.num(e.hour%12==0?12:e.hour%12,2);case"H":return r.num(e.hour);case"HH":return r.num(e.hour,2);case"Z":return a({format:"narrow",allowZ:r.opts.allowZ});case"ZZ":return a({format:"short",allowZ:r.opts.allowZ});case"ZZZ":return a({format:"techie",allowZ:r.opts.allowZ});case"ZZZZ":return e.zone.offsetName(e.ts,{format:"short",locale:r.loc.locale});case"ZZZZZ":return e.zone.offsetName(e.ts,{format:"long",locale:r.loc.locale});case"z":return e.zoneName;case"a":return s();case"d":return o?u({day:"numeric"},"day"):r.num(e.day);case"dd":return o?u({day:"2-digit"},"day"):r.num(e.day,2);case"c":return r.num(e.weekday);case"ccc":return l("short",!0);case"cccc":return l("long",!0);case"ccccc":return l("narrow",!0);case"E":return r.num(e.weekday);case"EEE":return l("short",!1);case"EEEE":return l("long",!1);case"EEEEE":return l("narrow",!1);case"L":return o?u({month:"numeric",day:"numeric"},"month"):r.num(e.month);case"LL":return o?u({month:"2-digit",day:"numeric"},"month"):r.num(e.month,2);case"LLL":return c("short",!0);case"LLLL":return c("long",!0);case"LLLLL":return c("narrow",!0);case"M":return o?u({month:"numeric"},"month"):r.num(e.month);case"MM":return o?u({month:"2-digit"},"month"):r.num(e.month,2);case"MMM":return c("short",!1);case"MMMM":return c("long",!1);case"MMMMM":return c("narrow",!1);case"y":return o?u({year:"numeric"},"year"):r.num(e.year);case"yy":return o?u({year:"2-digit"},"year"):r.num(e.year.toString().slice(-2),2);case"yyyy":return o?u({year:"numeric"},"year"):r.num(e.year,4);case"yyyyyy":return o?u({year:"numeric"},"year"):r.num(e.year,6);case"G":return f("short");case"GG":return f("long");case"GGGGG":return f("narrow");case"kk":return r.num(e.weekYear.toString().slice(-2),2);case"kkkk":return r.num(e.weekYear,4);case"W":return r.num(e.weekNumber);case"WW":return r.num(e.weekNumber,2);case"o":return r.num(e.ordinal);case"ooo":return r.num(e.ordinal,3);case"q":return r.num(e.quarter);case"qq":return r.num(e.quarter,2);case"X":return r.num(Math.floor(e.ts/1e3));case"x":return r.num(e.ts);default:return function(n){var i=t.macroTokenToFormatOpts(n);return i?r.formatWithSystemDefault(e,i):n}(n)}}))},e.formatDurationFromString=function(e,n){var r,i=this,o=function(t){switch(t[0]){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":return"hour";case"d":return"day";case"M":return"month";case"y":return"year";default:return null}},u=t.parseFormat(n),a=u.reduce((function(t,e){var n=e.literal,r=e.val;return n?t:t.concat(r)}),[]),s=e.shiftTo.apply(e,a.map(o).filter((function(t){return t})));return Mt(u,(r=s,function(t){var e=o(t);return e?i.num(r.get(e),t.length):t}))},t}(),Rt=function(){function t(t,e){this.reason=t,this.explanation=e}return t.prototype.toMessage=function(){return this.explanation?this.reason+": "+this.explanation:this.reason},t}(),Ft=function(){function t(){}var e=t.prototype;return e.offsetName=function(t,e){throw new _},e.formatOffset=function(t,e){throw new _},e.offset=function(t){throw new _},e.equals=function(t){throw new _},r(t,[{key:"type",get:function(){throw new _}},{key:"name",get:function(){throw new _}},{key:"universal",get:function(){throw new _}},{key:"isValid",get:function(){throw new _}}]),t}(),Dt=null,Pt=function(t){function e(){return t.apply(this,arguments)||this}i(e,t);var n=e.prototype;return n.offsetName=function(t,e){return ft(t,e.format,e.locale)},n.formatOffset=function(t,e){return vt(this.offset(t),e)},n.offset=function(t){return-new Date(t).getTimezoneOffset()},n.equals=function(t){return"local"===t.type},r(e,[{key:"type",get:function(){return"local"}},{key:"name",get:function(){return G()?(new Intl.DateTimeFormat).resolvedOptions().timeZone:"local"}},{key:"universal",get:function(){return!1}},{key:"isValid",get:function(){return!0}}],[{key:"instance",get:function(){return null===Dt&&(Dt=new e),Dt}}]),e}(Ft),Vt=RegExp("^"+yt.source+"$"),Bt={};var zt={year:0,month:1,day:2,hour:3,minute:4,second:5};var Kt={},Ut=function(t){function e(n){var r;return(r=t.call(this)||this).zoneName=n,r.valid=e.isValidZone(n),r}i(e,t),e.create=function(t){return Kt[t]||(Kt[t]=new e(t)),Kt[t]},e.resetCache=function(){Kt={},Bt={}},e.isValidSpecifier=function(t){return!(!t||!t.match(Vt))},e.isValidZone=function(t){try{return new Intl.DateTimeFormat("en-US",{timeZone:t}).format(),!0}catch(t){return!1}},e.parseGMTOffset=function(t){if(t){var e=t.match(/^Etc\/GMT([+-]\d{1,2})$/i);if(e)return-60*parseInt(e[1])}return null};var n=e.prototype;return n.offsetName=function(t,e){return ft(t,e.format,e.locale,this.name)},n.formatOffset=function(t,e){return vt(this.offset(t),e)},n.offset=function(t){var e,n=new Date(t),r=(e=this.name,Bt[e]||(Bt[e]=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:e,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit"})),Bt[e]),i=r.formatToParts?function(t,e){for(var n=t.formatToParts(e),r=[],i=0;i<n.length;i++){var o=n[i],u=o.type,a=o.value,s=zt[u];Z(s)||(r[s]=parseInt(a,10))}return r}(r,n):function(t,e){var n=t.format(e).replace(/\u200E/g,""),r=/(\d+)\/(\d+)\/(\d+),? (\d+):(\d+):(\d+)/.exec(n),i=r[1],o=r[2];return[r[3],i,o,r[4],r[5],r[6]]}(r,n),o=i[0],u=i[1],a=i[2],s=i[3],c=+n,l=c%1e3;return(st({year:o,month:u,day:a,hour:24===s?0:s,minute:i[4],second:i[5],millisecond:0})-(c-=l>=0?l:1e3+l))/6e4},n.equals=function(t){return"iana"===t.type&&t.name===this.name},r(e,[{key:"type",get:function(){return"iana"}},{key:"name",get:function(){return this.zoneName}},{key:"universal",get:function(){return!1}},{key:"isValid",get:function(){return this.valid}}]),e}(Ft),Wt=null,Zt=function(t){function e(e){var n;return(n=t.call(this)||this).fixed=e,n}i(e,t),e.instance=function(t){return 0===t?e.utcInstance:new e(t)},e.parseSpecifier=function(t){if(t){var n=t.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);if(n)return new e(ht(n[1],n[2]))}return null},r(e,null,[{key:"utcInstance",get:function(){return null===Wt&&(Wt=new e(0)),Wt}}]);var n=e.prototype;return n.offsetName=function(){return this.name},n.formatOffset=function(t,e){return vt(this.fixed,e)},n.offset=function(){return this.fixed},n.equals=function(t){return"fixed"===t.type&&t.fixed===this.fixed},r(e,[{key:"type",get:function(){return"fixed"}},{key:"name",get:function(){return 0===this.fixed?"UTC":"UTC"+vt(this.fixed,"narrow")}},{key:"universal",get:function(){return!0}},{key:"isValid",get:function(){return!0}}]),e}(Ft),qt=function(t){function e(e){var n;return(n=t.call(this)||this).zoneName=e,n}i(e,t);var n=e.prototype;return n.offsetName=function(){return null},n.formatOffset=function(){return""},n.offset=function(){return NaN},n.equals=function(){return!1},r(e,[{key:"type",get:function(){return"invalid"}},{key:"name",get:function(){return this.zoneName}},{key:"universal",get:function(){return!1}},{key:"isValid",get:function(){return!1}}]),e}(Ft);function Ht(t,e){var n;if(Z(t)||null===t)return e;if(t instanceof Ft)return t;if("string"==typeof t){var r=t.toLowerCase();return"local"===r?e:"utc"===r||"gmt"===r?Zt.utcInstance:null!=(n=Ut.parseGMTOffset(t))?Zt.instance(n):Ut.isValidSpecifier(r)?Ut.create(t):Zt.parseSpecifier(r)||new qt(t)}return q(t)?Zt.instance(t):"object"==typeof t&&t.offset&&"number"==typeof t.offset?t:new qt(t)}var Gt=function(){return Date.now()},$t=null,Yt=null,Jt=null,Qt=null,Xt=!1,te=function(){function t(){}return t.resetCaches=function(){fe.resetCache(),Ut.resetCache()},r(t,null,[{key:"now",get:function(){return Gt},set:function(t){Gt=t}},{key:"defaultZoneName",get:function(){return t.defaultZone.name},set:function(t){$t=t?Ht(t):null}},{key:"defaultZone",get:function(){return $t||Pt.instance}},{key:"defaultLocale",get:function(){return Yt},set:function(t){Yt=t}},{key:"defaultNumberingSystem",get:function(){return Jt},set:function(t){Jt=t}},{key:"defaultOutputCalendar",get:function(){return Qt},set:function(t){Qt=t}},{key:"throwOnInvalid",get:function(){return Xt},set:function(t){Xt=t}}]),t}(),ee={};function ne(t,e){void 0===e&&(e={});var n=JSON.stringify([t,e]),r=ee[n];return r||(r=new Intl.DateTimeFormat(t,e),ee[n]=r),r}var re={};var ie={};function oe(t,e){void 0===e&&(e={});var n=e,r=(n.base,function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(n,["base"])),i=JSON.stringify([t,r]),o=ie[i];return o||(o=new Intl.RelativeTimeFormat(t,e),ie[i]=o),o}var ue=null;function ae(t,e,n,r,i){var o=t.listingMode(n);return"error"===o?null:"en"===o?r(e):i(e)}var se=function(){function t(t,e,n){if(this.padTo=n.padTo||0,this.floor=n.floor||!1,!e&&G()){var r={useGrouping:!1};n.padTo>0&&(r.minimumIntegerDigits=n.padTo),this.inf=function(t,e){void 0===e&&(e={});var n=JSON.stringify([t,e]),r=re[n];return r||(r=new Intl.NumberFormat(t,e),re[n]=r),r}(t,r)}}return t.prototype.format=function(t){if(this.inf){var e=this.floor?Math.floor(t):t;return this.inf.format(e)}return et(this.floor?Math.floor(t):it(t,3),this.padTo)},t}(),ce=function(){function t(t,e,n){var r;if(this.opts=n,this.hasIntl=G(),t.zone.universal&&this.hasIntl?(r="UTC",n.timeZoneName?this.dt=t:this.dt=0===t.offset?t:fr.fromMillis(t.ts+60*t.offset*1e3)):"local"===t.zone.type?this.dt=t:(this.dt=t,r=t.zone.name),this.hasIntl){var i=Object.assign({},this.opts);r&&(i.timeZone=r),this.dtf=ne(e,i)}}var e=t.prototype;return e.format=function(){if(this.hasIntl)return this.dtf.format(this.dt.toJSDate());var t=function(t){var e="EEEE, LLLL d, yyyy, h:mm a";switch(gt(Q(t,["weekday","era","year","month","day","hour","minute","second","timeZoneName","hour12"]))){case gt(x):return"M/d/yyyy";case gt(E):return"LLL d, yyyy";case gt(T):return"EEE, LLL d, yyyy";case gt(O):return"LLLL d, yyyy";case gt(S):return"EEEE, LLLL d, yyyy";case gt(L):return"h:mm a";case gt(A):return"h:mm:ss a";case gt(N):case gt(C):return"h:mm a";case gt(M):return"HH:mm";case gt(I):return"HH:mm:ss";case gt(j):case gt(R):return"HH:mm";case gt(F):return"M/d/yyyy, h:mm a";case gt(P):return"LLL d, yyyy, h:mm a";case gt(z):return"LLLL d, yyyy, h:mm a";case gt(U):return e;case gt(D):return"M/d/yyyy, h:mm:ss a";case gt(V):return"LLL d, yyyy, h:mm:ss a";case gt(B):return"EEE, d LLL yyyy, h:mm a";case gt(K):return"LLLL d, yyyy, h:mm:ss a";case gt(W):return"EEEE, LLLL d, yyyy, h:mm:ss a";default:return e}}(this.opts),e=fe.create("en-US");return jt.create(e).formatDateTimeFromString(this.dt,t)},e.formatToParts=function(){return this.hasIntl&&$()?this.dtf.formatToParts(this.dt.toJSDate()):[]},e.resolvedOptions=function(){return this.hasIntl?this.dtf.resolvedOptions():{locale:"en-US",numberingSystem:"latn",outputCalendar:"gregory"}},t}(),le=function(){function t(t,e,n){this.opts=Object.assign({style:"long"},n),!e&&Y()&&(this.rtf=oe(t,n))}var e=t.prototype;return e.format=function(t,e){return this.rtf?this.rtf.format(t,e):function(t,e,n,r){void 0===n&&(n="always"),void 0===r&&(r=!1);var i={years:["year","yr."],quarters:["quarter","qtr."],months:["month","mo."],weeks:["week","wk."],days:["day","day","days"],hours:["hour","hr."],minutes:["minute","min."],seconds:["second","sec."]},o=-1===["hours","minutes","seconds"].indexOf(t);if("auto"===n&&o){var u="days"===t;switch(e){case 1:return u?"tomorrow":"next "+i[t][0];case-1:return u?"yesterday":"last "+i[t][0];case 0:return u?"today":"this "+i[t][0]}}var a=Object.is(e,-0)||e<0,s=Math.abs(e),c=1===s,l=i[t],f=r?c?l[1]:l[2]||l[1]:c?i[t][0]:t;return a?s+" "+f+" ago":"in "+s+" "+f}(e,t,this.opts.numeric,"long"!==this.opts.style)},e.formatToParts=function(t,e){return this.rtf?this.rtf.formatToParts(t,e):[]},t}(),fe=function(){function t(t,e,n,r){var i=function(t){var e=t.indexOf("-u-");if(-1===e)return[t];var n,r=t.substring(0,e);try{n=ne(t).resolvedOptions()}catch(t){n=ne(r).resolvedOptions()}var i=n;return[r,i.numberingSystem,i.calendar]}(t),o=i[0],u=i[1],a=i[2];this.locale=o,this.numberingSystem=e||u||null,this.outputCalendar=n||a||null,this.intl=function(t,e,n){return G()?n||e?(t+="-u",n&&(t+="-ca-"+n),e&&(t+="-nu-"+e),t):t:[]}(this.locale,this.numberingSystem,this.outputCalendar),this.weekdaysCache={format:{},standalone:{}},this.monthsCache={format:{},standalone:{}},this.meridiemCache=null,this.eraCache={},this.specifiedLocale=r,this.fastNumbersCached=null}t.fromOpts=function(e){return t.create(e.locale,e.numberingSystem,e.outputCalendar,e.defaultToEN)},t.create=function(e,n,r,i){void 0===i&&(i=!1);var o=e||te.defaultLocale;return new t(o||(i?"en-US":function(){if(ue)return ue;if(G()){var t=(new Intl.DateTimeFormat).resolvedOptions().locale;return ue=t&&"und"!==t?t:"en-US"}return ue="en-US"}()),n||te.defaultNumberingSystem,r||te.defaultOutputCalendar,o)},t.resetCache=function(){ue=null,ee={},re={},ie={}},t.fromObject=function(e){var n=void 0===e?{}:e,r=n.locale,i=n.numberingSystem,o=n.outputCalendar;return t.create(r,i,o)};var e=t.prototype;return e.listingMode=function(t){void 0===t&&(t=!0);var e=G()&&$(),n=this.isEnglish(),r=!(null!==this.numberingSystem&&"latn"!==this.numberingSystem||null!==this.outputCalendar&&"gregory"!==this.outputCalendar);return e||n&&r||t?!e||n&&r?"en":"intl":"error"},e.clone=function(e){return e&&0!==Object.getOwnPropertyNames(e).length?t.create(e.locale||this.specifiedLocale,e.numberingSystem||this.numberingSystem,e.outputCalendar||this.outputCalendar,e.defaultToEN||!1):this},e.redefaultToEN=function(t){return void 0===t&&(t={}),this.clone(Object.assign({},t,{defaultToEN:!0}))},e.redefaultToSystem=function(t){return void 0===t&&(t={}),this.clone(Object.assign({},t,{defaultToEN:!1}))},e.months=function(t,e,n){var r=this;return void 0===e&&(e=!1),void 0===n&&(n=!0),ae(this,t,n,kt,(function(){var n=e?{month:t,day:"numeric"}:{month:t},i=e?"format":"standalone";return r.monthsCache[i][t]||(r.monthsCache[i][t]=function(t){for(var e=[],n=1;n<=12;n++){var r=fr.utc(2016,n,1);e.push(t(r))}return e}((function(t){return r.extract(t,n,"month")}))),r.monthsCache[i][t]}))},e.weekdays=function(t,e,n){var r=this;return void 0===e&&(e=!1),void 0===n&&(n=!0),ae(this,t,n,Ot,(function(){var n=e?{weekday:t,year:"numeric",month:"long",day:"numeric"}:{weekday:t},i=e?"format":"standalone";return r.weekdaysCache[i][t]||(r.weekdaysCache[i][t]=function(t){for(var e=[],n=1;n<=7;n++){var r=fr.utc(2016,11,13+n);e.push(t(r))}return e}((function(t){return r.extract(t,n,"weekday")}))),r.weekdaysCache[i][t]}))},e.meridiems=function(t){var e=this;return void 0===t&&(t=!0),ae(this,void 0,t,(function(){return St}),(function(){if(!e.meridiemCache){var t={hour:"numeric",hour12:!0};e.meridiemCache=[fr.utc(2016,11,13,9),fr.utc(2016,11,13,19)].map((function(n){return e.extract(n,t,"dayperiod")}))}return e.meridiemCache}))},e.eras=function(t,e){var n=this;return void 0===e&&(e=!0),ae(this,t,e,Ct,(function(){var e={era:t};return n.eraCache[t]||(n.eraCache[t]=[fr.utc(-40,1,1),fr.utc(2017,1,1)].map((function(t){return n.extract(t,e,"era")}))),n.eraCache[t]}))},e.extract=function(t,e,n){var r=this.dtFormatter(t,e).formatToParts().find((function(t){return t.type.toLowerCase()===n}));return r?r.value:null},e.numberFormatter=function(t){return void 0===t&&(t={}),new se(this.intl,t.forceSimple||this.fastNumbers,t)},e.dtFormatter=function(t,e){return void 0===e&&(e={}),new ce(t,this.intl,e)},e.relFormatter=function(t){return void 0===t&&(t={}),new le(this.intl,this.isEnglish(),t)},e.isEnglish=function(){return"en"===this.locale||"en-us"===this.locale.toLowerCase()||G()&&new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us")},e.equals=function(t){return this.locale===t.locale&&this.numberingSystem===t.numberingSystem&&this.outputCalendar===t.outputCalendar},r(t,[{key:"fastNumbers",get:function(){var t;return null==this.fastNumbersCached&&(this.fastNumbersCached=(!(t=this).numberingSystem||"latn"===t.numberingSystem)&&("latn"===t.numberingSystem||!t.locale||t.locale.startsWith("en")||G()&&"latn"===new Intl.DateTimeFormat(t.intl).resolvedOptions().numberingSystem)),this.fastNumbersCached}}]),t}();function he(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=e.reduce((function(t,e){return t+e.source}),"");return RegExp("^"+r+"$")}function pe(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t){return e.reduce((function(e,n){var r=e[0],i=e[1],o=e[2],u=n(t,o),a=u[0],s=u[1],c=u[2];return[Object.assign(r,a),i||s,c]}),[{},null,1]).slice(0,2)}}function de(t){if(null==t)return[null,null];for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];for(var i=0,o=n;i<o.length;i++){var u=o[i],a=u[0],s=u[1],c=a.exec(t);if(c)return s(c)}return[null,null]}function ve(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t,n){var r,i={};for(r=0;r<e.length;r++)i[e[r]]=nt(t[n+r]);return[i,null,n+r]}}var me=/(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/,ye=/(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/,ge=RegExp(""+ye.source+me.source+"?"),_e=RegExp("(?:T"+ge.source+")?"),we=ve("weekYear","weekNumber","weekDay"),be=ve("year","ordinal"),ke=RegExp(ye.source+" ?(?:"+me.source+"|("+yt.source+"))?"),xe=RegExp("(?: "+ke.source+")?");function Ee(t,e,n){var r=t[e];return Z(r)?n:nt(r)}function Te(t,e){return[{year:Ee(t,e),month:Ee(t,e+1,1),day:Ee(t,e+2,1)},null,e+3]}function Oe(t,e){return[{hour:Ee(t,e,0),minute:Ee(t,e+1,0),second:Ee(t,e+2,0),millisecond:rt(t[e+3])},null,e+4]}function Se(t,e){var n=!t[e]&&!t[e+1],r=ht(t[e+1],t[e+2]);return[{},n?null:Zt.instance(r),e+3]}function Le(t,e){return[{},t[e]?Ut.create(t[e]):null,e+1]}var Ae=/^-?P(?:(?:(-?\d{1,9})Y)?(?:(-?\d{1,9})M)?(?:(-?\d{1,9})W)?(?:(-?\d{1,9})D)?(?:T(?:(-?\d{1,9})H)?(?:(-?\d{1,9})M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,9}))?S)?)?)$/;function Ne(t){var e=t[0],n=t[1],r=t[2],i=t[3],o=t[4],u=t[5],a=t[6],s=t[7],c=t[8],l="-"===e[0],f=function(t){return t&&l?-t:t};return[{years:f(nt(n)),months:f(nt(r)),weeks:f(nt(i)),days:f(nt(o)),hours:f(nt(u)),minutes:f(nt(a)),seconds:f(nt(s)),milliseconds:f(rt(c))}]}var Ce={GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function Me(t,e,n,r,i,o,u){var a={year:2===e.length?lt(nt(e)):nt(e),month:wt.indexOf(n)+1,day:nt(r),hour:nt(i),minute:nt(o)};return u&&(a.second=nt(u)),t&&(a.weekday=t.length>3?xt.indexOf(t)+1:Et.indexOf(t)+1),a}var Ie=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;function je(t){var e,n=t[1],r=t[2],i=t[3],o=t[4],u=t[5],a=t[6],s=t[7],c=t[8],l=t[9],f=t[10],h=t[11],p=Me(n,o,i,r,u,a,s);return e=c?Ce[c]:l?0:ht(f,h),[p,new Zt(e)]}var Re=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,Fe=/^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,De=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;function Pe(t){var e=t[1],n=t[2],r=t[3];return[Me(e,t[4],r,n,t[5],t[6],t[7]),Zt.utcInstance]}function Ve(t){var e=t[1],n=t[2],r=t[3],i=t[4],o=t[5],u=t[6];return[Me(e,t[7],n,r,i,o,u),Zt.utcInstance]}var Be=he(/([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/,_e),ze=he(/(\d{4})-?W(\d\d)(?:-?(\d))?/,_e),Ke=he(/(\d{4})-?(\d{3})/,_e),Ue=he(ge),We=pe(Te,Oe,Se),Ze=pe(we,Oe,Se),qe=pe(be,Oe),He=pe(Oe,Se);var Ge=he(/(\d{4})-(\d\d)-(\d\d)/,xe),$e=he(ke),Ye=pe(Te,Oe,Se,Le),Je=pe(Oe,Se,Le);var Qe={weeks:{days:7,hours:168,minutes:10080,seconds:604800,milliseconds:6048e5},days:{hours:24,minutes:1440,seconds:86400,milliseconds:864e5},hours:{minutes:60,seconds:3600,milliseconds:36e5},minutes:{seconds:60,milliseconds:6e4},seconds:{milliseconds:1e3}},Xe=Object.assign({years:{quarters:4,months:12,weeks:52,days:365,hours:8760,minutes:525600,seconds:31536e3,milliseconds:31536e6},quarters:{months:3,weeks:13,days:91,hours:2184,minutes:131040,seconds:7862400,milliseconds:78624e5},months:{weeks:4,days:30,hours:720,minutes:43200,seconds:2592e3,milliseconds:2592e6}},Qe),tn=365.2425,en=30.436875,nn=Object.assign({years:{quarters:4,months:12,weeks:52.1775,days:tn,hours:8765.82,minutes:525949.2,seconds:525949.2*60,milliseconds:525949.2*60*1e3},quarters:{months:3,weeks:13.044375,days:91.310625,hours:2191.455,minutes:131487.3,seconds:525949.2*60/4,milliseconds:7889237999.999999},months:{weeks:4.3481250000000005,days:en,hours:730.485,minutes:43829.1,seconds:2629746,milliseconds:2629746e3}},Qe),rn=["years","quarters","months","weeks","days","hours","minutes","seconds","milliseconds"],on=rn.slice(0).reverse();function un(t,e,n){void 0===n&&(n=!1);var r={values:n?e.values:Object.assign({},t.values,e.values||{}),loc:t.loc.clone(e.loc),conversionAccuracy:e.conversionAccuracy||t.conversionAccuracy};return new sn(r)}function an(t,e,n,r,i){var o=t[i][n],u=e[n]/o,a=!(Math.sign(u)===Math.sign(r[i]))&&0!==r[i]&&Math.abs(u)<=1?function(t){return t<0?Math.floor(t):Math.ceil(t)}(u):Math.trunc(u);r[i]+=a,e[n]-=a*o}var sn=function(){function t(t){var e="longterm"===t.conversionAccuracy||!1;this.values=t.values,this.loc=t.loc||fe.create(),this.conversionAccuracy=e?"longterm":"casual",this.invalid=t.invalid||null,this.matrix=e?nn:Xe,this.isLuxonDuration=!0}t.fromMillis=function(e,n){return t.fromObject(Object.assign({milliseconds:e},n))},t.fromObject=function(e){if(null==e||"object"!=typeof e)throw new g("Duration.fromObject: argument expected to be an object, got "+(null===e?"null":typeof e));return new t({values:dt(e,t.normalizeUnit,["locale","numberingSystem","conversionAccuracy","zone"]),loc:fe.fromObject(e),conversionAccuracy:e.conversionAccuracy})},t.fromISO=function(e,n){var r=function(t){return de(t,[Ae,Ne])}(e)[0];if(r){var i=Object.assign(r,n);return t.fromObject(i)}return t.invalid("unparsable",'the input "'+e+"\" can't be parsed as ISO 8601")},t.invalid=function(e,n){if(void 0===n&&(n=null),!e)throw new g("need to specify a reason the Duration is invalid");var r=e instanceof Rt?e:new Rt(e,n);if(te.throwOnInvalid)throw new v(r);return new t({invalid:r})},t.normalizeUnit=function(t){var e={year:"years",years:"years",quarter:"quarters",quarters:"quarters",month:"months",months:"months",week:"weeks",weeks:"weeks",day:"days",days:"days",hour:"hours",hours:"hours",minute:"minutes",minutes:"minutes",second:"seconds",seconds:"seconds",millisecond:"milliseconds",milliseconds:"milliseconds"}[t?t.toLowerCase():t];if(!e)throw new y(t);return e},t.isDuration=function(t){return t&&t.isLuxonDuration||!1};var e=t.prototype;return e.toFormat=function(t,e){void 0===e&&(e={});var n=Object.assign({},e,{floor:!1!==e.round&&!1!==e.floor});return this.isValid?jt.create(this.loc,n).formatDurationFromString(this,t):"Invalid Duration"},e.toObject=function(t){if(void 0===t&&(t={}),!this.isValid)return{};var e=Object.assign({},this.values);return t.includeConfig&&(e.conversionAccuracy=this.conversionAccuracy,e.numberingSystem=this.loc.numberingSystem,e.locale=this.loc.locale),e},e.toISO=function(){if(!this.isValid)return null;var t="P";return 0!==this.years&&(t+=this.years+"Y"),0===this.months&&0===this.quarters||(t+=this.months+3*this.quarters+"M"),0!==this.weeks&&(t+=this.weeks+"W"),0!==this.days&&(t+=this.days+"D"),0===this.hours&&0===this.minutes&&0===this.seconds&&0===this.milliseconds||(t+="T"),0!==this.hours&&(t+=this.hours+"H"),0!==this.minutes&&(t+=this.minutes+"M"),0===this.seconds&&0===this.milliseconds||(t+=it(this.seconds+this.milliseconds/1e3,3)+"S"),"P"===t&&(t+="T0S"),t},e.toJSON=function(){return this.toISO()},e.toString=function(){return this.toISO()},e.valueOf=function(){return this.as("milliseconds")},e.plus=function(t){if(!this.isValid)return this;for(var e,n=cn(t),r={},i=f(rn);!(e=i()).done;){var o=e.value;(X(n.values,o)||X(this.values,o))&&(r[o]=n.get(o)+this.get(o))}return un(this,{values:r},!0)},e.minus=function(t){if(!this.isValid)return this;var e=cn(t);return this.plus(e.negate())},e.mapUnits=function(t){if(!this.isValid)return this;for(var e={},n=0,r=Object.keys(this.values);n<r.length;n++){var i=r[n];e[i]=pt(t(this.values[i],i))}return un(this,{values:e},!0)},e.get=function(e){return this[t.normalizeUnit(e)]},e.set=function(e){return this.isValid?un(this,{values:Object.assign(this.values,dt(e,t.normalizeUnit,[]))}):this},e.reconfigure=function(t){var e=void 0===t?{}:t,n=e.locale,r=e.numberingSystem,i=e.conversionAccuracy,o={loc:this.loc.clone({locale:n,numberingSystem:r})};return i&&(o.conversionAccuracy=i),un(this,o)},e.as=function(t){return this.isValid?this.shiftTo(t).get(t):NaN},e.normalize=function(){if(!this.isValid)return this;var t=this.toObject();return function(t,e){on.reduce((function(n,r){return Z(e[r])?n:(n&&an(t,e,n,e,r),r)}),null)}(this.matrix,t),un(this,{values:t},!0)},e.shiftTo=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];if(!this.isValid)return this;if(0===n.length)return this;n=n.map((function(e){return t.normalizeUnit(e)}));for(var i,o,u={},a={},s=this.toObject(),c=f(rn);!(o=c()).done;){var l=o.value;if(n.indexOf(l)>=0){i=l;var h=0;for(var p in a)h+=this.matrix[p][l]*a[p],a[p]=0;q(s[l])&&(h+=s[l]);var d=Math.trunc(h);for(var v in u[l]=d,a[l]=h-d,s)rn.indexOf(v)>rn.indexOf(l)&&an(this.matrix,s,v,u,l)}else q(s[l])&&(a[l]=s[l])}for(var m in a)0!==a[m]&&(u[i]+=m===i?a[m]:a[m]/this.matrix[i][m]);return un(this,{values:u},!0).normalize()},e.negate=function(){if(!this.isValid)return this;for(var t={},e=0,n=Object.keys(this.values);e<n.length;e++){var r=n[e];t[r]=-this.values[r]}return un(this,{values:t},!0)},e.equals=function(t){if(!this.isValid||!t.isValid)return!1;if(!this.loc.equals(t.loc))return!1;for(var e,n=f(rn);!(e=n()).done;){var r=e.value;if(this.values[r]!==t.values[r])return!1}return!0},r(t,[{key:"locale",get:function(){return this.isValid?this.loc.locale:null}},{key:"numberingSystem",get:function(){return this.isValid?this.loc.numberingSystem:null}},{key:"years",get:function(){return this.isValid?this.values.years||0:NaN}},{key:"quarters",get:function(){return this.isValid?this.values.quarters||0:NaN}},{key:"months",get:function(){return this.isValid?this.values.months||0:NaN}},{key:"weeks",get:function(){return this.isValid?this.values.weeks||0:NaN}},{key:"days",get:function(){return this.isValid?this.values.days||0:NaN}},{key:"hours",get:function(){return this.isValid?this.values.hours||0:NaN}},{key:"minutes",get:function(){return this.isValid?this.values.minutes||0:NaN}},{key:"seconds",get:function(){return this.isValid?this.values.seconds||0:NaN}},{key:"milliseconds",get:function(){return this.isValid?this.values.milliseconds||0:NaN}},{key:"isValid",get:function(){return null===this.invalid}},{key:"invalidReason",get:function(){return this.invalid?this.invalid.reason:null}},{key:"invalidExplanation",get:function(){return this.invalid?this.invalid.explanation:null}}]),t}();function cn(t){if(q(t))return sn.fromMillis(t);if(sn.isDuration(t))return t;if("object"==typeof t)return sn.fromObject(t);throw new g("Unknown duration argument "+t+" of type "+typeof t)}var ln="Invalid Interval";function fn(t,e){return t&&t.isValid?e&&e.isValid?e<t?hn.invalid("end before start","The end of an interval must be after its start, but you had start="+t.toISO()+" and end="+e.toISO()):null:hn.invalid("missing or invalid end"):hn.invalid("missing or invalid start")}var hn=function(){function t(t){this.s=t.start,this.e=t.end,this.invalid=t.invalid||null,this.isLuxonInterval=!0}t.invalid=function(e,n){if(void 0===n&&(n=null),!e)throw new g("need to specify a reason the Interval is invalid");var r=e instanceof Rt?e:new Rt(e,n);if(te.throwOnInvalid)throw new d(r);return new t({invalid:r})},t.fromDateTimes=function(e,n){var r=hr(e),i=hr(n),o=fn(r,i);return null==o?new t({start:r,end:i}):o},t.after=function(e,n){var r=cn(n),i=hr(e);return t.fromDateTimes(i,i.plus(r))},t.before=function(e,n){var r=cn(n),i=hr(e);return t.fromDateTimes(i.minus(r),i)},t.fromISO=function(e,n){var r=(e||"").split("/",2),i=r[0],o=r[1];if(i&&o){var u,a,s,c;try{a=(u=fr.fromISO(i,n)).isValid}catch(o){a=!1}try{c=(s=fr.fromISO(o,n)).isValid}catch(o){c=!1}if(a&&c)return t.fromDateTimes(u,s);if(a){var l=sn.fromISO(o,n);if(l.isValid)return t.after(u,l)}else if(c){var f=sn.fromISO(i,n);if(f.isValid)return t.before(s,f)}}return t.invalid("unparsable",'the input "'+e+"\" can't be parsed as ISO 8601")},t.isInterval=function(t){return t&&t.isLuxonInterval||!1};var e=t.prototype;return e.length=function(t){return void 0===t&&(t="milliseconds"),this.isValid?this.toDuration.apply(this,[t]).get(t):NaN},e.count=function(t){if(void 0===t&&(t="milliseconds"),!this.isValid)return NaN;var e=this.start.startOf(t),n=this.end.startOf(t);return Math.floor(n.diff(e,t).get(t))+1},e.hasSame=function(t){return!!this.isValid&&(this.isEmpty()||this.e.minus(1).hasSame(this.s,t))},e.isEmpty=function(){return this.s.valueOf()===this.e.valueOf()},e.isAfter=function(t){return!!this.isValid&&this.s>t},e.isBefore=function(t){return!!this.isValid&&this.e<=t},e.contains=function(t){return!!this.isValid&&(this.s<=t&&this.e>t)},e.set=function(e){var n=void 0===e?{}:e,r=n.start,i=n.end;return this.isValid?t.fromDateTimes(r||this.s,i||this.e):this},e.splitAt=function(){var e=this;if(!this.isValid)return[];for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];for(var o=r.map(hr).filter((function(t){return e.contains(t)})).sort(),u=[],a=this.s,s=0;a<this.e;){var c=o[s]||this.e,l=+c>+this.e?this.e:c;u.push(t.fromDateTimes(a,l)),a=l,s+=1}return u},e.splitBy=function(e){var n=cn(e);if(!this.isValid||!n.isValid||0===n.as("milliseconds"))return[];for(var r,i,o=this.s,u=[];o<this.e;)i=+(r=o.plus(n))>+this.e?this.e:r,u.push(t.fromDateTimes(o,i)),o=i;return u},e.divideEqually=function(t){return this.isValid?this.splitBy(this.length()/t).slice(0,t):[]},e.overlaps=function(t){return this.e>t.s&&this.s<t.e},e.abutsStart=function(t){return!!this.isValid&&+this.e==+t.s},e.abutsEnd=function(t){return!!this.isValid&&+t.e==+this.s},e.engulfs=function(t){return!!this.isValid&&(this.s<=t.s&&this.e>=t.e)},e.equals=function(t){return!(!this.isValid||!t.isValid)&&(this.s.equals(t.s)&&this.e.equals(t.e))},e.intersection=function(e){if(!this.isValid)return this;var n=this.s>e.s?this.s:e.s,r=this.e<e.e?this.e:e.e;return n>r?null:t.fromDateTimes(n,r)},e.union=function(e){if(!this.isValid)return this;var n=this.s<e.s?this.s:e.s,r=this.e>e.e?this.e:e.e;return t.fromDateTimes(n,r)},t.merge=function(t){var e=t.sort((function(t,e){return t.s-e.s})).reduce((function(t,e){var n=t[0],r=t[1];return r?r.overlaps(e)||r.abutsStart(e)?[n,r.union(e)]:[n.concat([r]),e]:[n,e]}),[[],null]),n=e[0],r=e[1];return r&&n.push(r),n},t.xor=function(e){for(var n,r,i=null,o=0,u=[],a=e.map((function(t){return[{time:t.s,type:"s"},{time:t.e,type:"e"}]})),s=f((n=Array.prototype).concat.apply(n,a).sort((function(t,e){return t.time-e.time})));!(r=s()).done;){var c=r.value;1===(o+="s"===c.type?1:-1)?i=c.time:(i&&+i!=+c.time&&u.push(t.fromDateTimes(i,c.time)),i=null)}return t.merge(u)},e.difference=function(){for(var e=this,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return t.xor([this].concat(r)).map((function(t){return e.intersection(t)})).filter((function(t){return t&&!t.isEmpty()}))},e.toString=function(){return this.isValid?"["+this.s.toISO()+" – "+this.e.toISO()+")":ln},e.toISO=function(t){return this.isValid?this.s.toISO(t)+"/"+this.e.toISO(t):ln},e.toISODate=function(){return this.isValid?this.s.toISODate()+"/"+this.e.toISODate():ln},e.toISOTime=function(t){return this.isValid?this.s.toISOTime(t)+"/"+this.e.toISOTime(t):ln},e.toFormat=function(t,e){var n=(void 0===e?{}:e).separator,r=void 0===n?" – ":n;return this.isValid?""+this.s.toFormat(t)+r+this.e.toFormat(t):ln},e.toDuration=function(t,e){return this.isValid?this.e.diff(this.s,t,e):sn.invalid(this.invalidReason)},e.mapEndpoints=function(e){return t.fromDateTimes(e(this.s),e(this.e))},r(t,[{key:"start",get:function(){return this.isValid?this.s:null}},{key:"end",get:function(){return this.isValid?this.e:null}},{key:"isValid",get:function(){return null===this.invalidReason}},{key:"invalidReason",get:function(){return this.invalid?this.invalid.reason:null}},{key:"invalidExplanation",get:function(){return this.invalid?this.invalid.explanation:null}}]),t}(),pn=function(){function t(){}return t.hasDST=function(t){void 0===t&&(t=te.defaultZone);var e=fr.local().setZone(t).set({month:12});return!t.universal&&e.offset!==e.set({month:6}).offset},t.isValidIANAZone=function(t){return Ut.isValidSpecifier(t)&&Ut.isValidZone(t)},t.normalizeZone=function(t){return Ht(t,te.defaultZone)},t.months=function(t,e){void 0===t&&(t="long");var n=void 0===e?{}:e,r=n.locale,i=void 0===r?null:r,o=n.numberingSystem,u=void 0===o?null:o,a=n.outputCalendar,s=void 0===a?"gregory":a;return fe.create(i,u,s).months(t)},t.monthsFormat=function(t,e){void 0===t&&(t="long");var n=void 0===e?{}:e,r=n.locale,i=void 0===r?null:r,o=n.numberingSystem,u=void 0===o?null:o,a=n.outputCalendar,s=void 0===a?"gregory":a;return fe.create(i,u,s).months(t,!0)},t.weekdays=function(t,e){void 0===t&&(t="long");var n=void 0===e?{}:e,r=n.locale,i=void 0===r?null:r,o=n.numberingSystem,u=void 0===o?null:o;return fe.create(i,u,null).weekdays(t)},t.weekdaysFormat=function(t,e){void 0===t&&(t="long");var n=void 0===e?{}:e,r=n.locale,i=void 0===r?null:r,o=n.numberingSystem,u=void 0===o?null:o;return fe.create(i,u,null).weekdays(t,!0)},t.meridiems=function(t){var e=(void 0===t?{}:t).locale,n=void 0===e?null:e;return fe.create(n).meridiems()},t.eras=function(t,e){void 0===t&&(t="short");var n=(void 0===e?{}:e).locale,r=void 0===n?null:n;return fe.create(r,null,"gregory").eras(t)},t.features=function(){var t=!1,e=!1,n=!1,r=!1;if(G()){t=!0,e=$(),r=Y();try{n="America/New_York"===new Intl.DateTimeFormat("en",{timeZone:"America/New_York"}).resolvedOptions().timeZone}catch(t){n=!1}}return{intl:t,intlTokens:e,zones:n,relative:r}},t}();function dn(t,e){var n=function(t){return t.toUTC(0,{keepLocalTime:!0}).startOf("day").valueOf()},r=n(e)-n(t);return Math.floor(sn.fromMillis(r).as("days"))}function vn(t,e,n,r){var i=function(t,e,n){for(var r,i,o={},u=0,a=[["years",function(t,e){return e.year-t.year}],["months",function(t,e){return e.month-t.month+12*(e.year-t.year)}],["weeks",function(t,e){var n=dn(t,e);return(n-n%7)/7}],["days",dn]];u<a.length;u++){var s=a[u],c=s[0],l=s[1];if(n.indexOf(c)>=0){var f;r=c;var h,p=l(t,e);(i=t.plus(((f={})[c]=p,f)))>e?(t=t.plus(((h={})[c]=p-1,h)),p-=1):t=i,o[c]=p}}return[t,o,i,r]}(t,e,n),o=i[0],u=i[1],a=i[2],s=i[3],c=e-o,l=n.filter((function(t){return["hours","minutes","seconds","milliseconds"].indexOf(t)>=0}));if(0===l.length){var f;if(a<e)a=o.plus(((f={})[s]=1,f));a!==o&&(u[s]=(u[s]||0)+c/(a-o))}var h,p=sn.fromObject(Object.assign(u,r));return l.length>0?(h=sn.fromMillis(c,r)).shiftTo.apply(h,l).plus(p):p}var mn={arab:"[٠-٩]",arabext:"[۰-۹]",bali:"[᭐-᭙]",beng:"[০-৯]",deva:"[०-९]",fullwide:"[０-９]",gujr:"[૦-૯]",hanidec:"[〇|一|二|三|四|五|六|七|八|九]",khmr:"[០-៩]",knda:"[೦-೯]",laoo:"[໐-໙]",limb:"[᥆-᥏]",mlym:"[൦-൯]",mong:"[᠐-᠙]",mymr:"[၀-၉]",orya:"[୦-୯]",tamldec:"[௦-௯]",telu:"[౦-౯]",thai:"[๐-๙]",tibt:"[༠-༩]",latn:"\\d"},yn={arab:[1632,1641],arabext:[1776,1785],bali:[6992,7001],beng:[2534,2543],deva:[2406,2415],fullwide:[65296,65303],gujr:[2790,2799],khmr:[6112,6121],knda:[3302,3311],laoo:[3792,3801],limb:[6470,6479],mlym:[3430,3439],mong:[6160,6169],mymr:[4160,4169],orya:[2918,2927],tamldec:[3046,3055],telu:[3174,3183],thai:[3664,3673],tibt:[3872,3881]},gn=mn.hanidec.replace(/[\[|\]]/g,"").split("");function _n(t,e){var n=t.numberingSystem;return void 0===e&&(e=""),new RegExp(""+mn[n||"latn"]+e)}function wn(t,e){return void 0===e&&(e=function(t){return t}),{regex:t,deser:function(t){var n=t[0];return e(function(t){var e=parseInt(t,10);if(isNaN(e)){e="";for(var n=0;n<t.length;n++){var r=t.charCodeAt(n);if(-1!==t[n].search(mn.hanidec))e+=gn.indexOf(t[n]);else for(var i in yn){var o=yn[i],u=o[0],a=o[1];r>=u&&r<=a&&(e+=r-u)}}return parseInt(e,10)}return e}(n))}}}var bn="( |"+String.fromCharCode(160)+")",kn=new RegExp(bn,"g");function xn(t){return t.replace(/\./g,"\\.?").replace(kn,bn)}function En(t){return t.replace(/\./g,"").replace(kn," ").toLowerCase()}function Tn(t,e){return null===t?null:{regex:RegExp(t.map(xn).join("|")),deser:function(n){var r=n[0];return t.findIndex((function(t){return En(r)===En(t)}))+e}}}function On(t,e){return{regex:t,deser:function(t){return ht(t[1],t[2])},groups:e}}function Sn(t){return{regex:t,deser:function(t){return t[0]}}}var Ln={year:{"2-digit":"yy",numeric:"yyyyy"},month:{numeric:"M","2-digit":"MM",short:"MMM",long:"MMMM"},day:{numeric:"d","2-digit":"dd"},weekday:{short:"EEE",long:"EEEE"},dayperiod:"a",dayPeriod:"a",hour:{numeric:"h","2-digit":"hh"},minute:{numeric:"m","2-digit":"mm"},second:{numeric:"s","2-digit":"ss"}};var An=null;function Nn(t,e){if(t.literal)return t;var n=jt.macroTokenToFormatOpts(t.val);if(!n)return t;var r=jt.create(e,n).formatDateTimeParts((An||(An=fr.fromMillis(1555555555555)),An)).map((function(t){return function(t,e,n){var r=t.type,i=t.value;if("literal"===r)return{literal:!0,val:i};var o=n[r],u=Ln[r];return"object"==typeof u&&(u=u[o]),u?{literal:!1,val:u}:void 0}(t,0,n)}));return r.includes(void 0)?t:r}function Cn(t,e,n){var r=function(t,e){var n;return(n=Array.prototype).concat.apply(n,t.map((function(t){return Nn(t,e)})))}(jt.parseFormat(n),t),i=r.map((function(e){return n=e,i=_n(r=t),o=_n(r,"{2}"),u=_n(r,"{3}"),a=_n(r,"{4}"),s=_n(r,"{6}"),c=_n(r,"{1,2}"),l=_n(r,"{1,3}"),f=_n(r,"{1,6}"),h=_n(r,"{1,9}"),p=_n(r,"{2,4}"),d=_n(r,"{4,6}"),v=function(t){return{regex:RegExp((e=t.val,e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&"))),deser:function(t){return t[0]},literal:!0};var e},(m=function(t){if(n.literal)return v(t);switch(t.val){case"G":return Tn(r.eras("short",!1),0);case"GG":return Tn(r.eras("long",!1),0);case"y":return wn(f);case"yy":return wn(p,lt);case"yyyy":return wn(a);case"yyyyy":return wn(d);case"yyyyyy":return wn(s);case"M":return wn(c);case"MM":return wn(o);case"MMM":return Tn(r.months("short",!0,!1),1);case"MMMM":return Tn(r.months("long",!0,!1),1);case"L":return wn(c);case"LL":return wn(o);case"LLL":return Tn(r.months("short",!1,!1),1);case"LLLL":return Tn(r.months("long",!1,!1),1);case"d":return wn(c);case"dd":return wn(o);case"o":return wn(l);case"ooo":return wn(u);case"HH":return wn(o);case"H":return wn(c);case"hh":return wn(o);case"h":return wn(c);case"mm":return wn(o);case"m":case"q":return wn(c);case"qq":return wn(o);case"s":return wn(c);case"ss":return wn(o);case"S":return wn(l);case"SSS":return wn(u);case"u":return Sn(h);case"a":return Tn(r.meridiems(),0);case"kkkk":return wn(a);case"kk":return wn(p,lt);case"W":return wn(c);case"WW":return wn(o);case"E":case"c":return wn(i);case"EEE":return Tn(r.weekdays("short",!1,!1),1);case"EEEE":return Tn(r.weekdays("long",!1,!1),1);case"ccc":return Tn(r.weekdays("short",!0,!1),1);case"cccc":return Tn(r.weekdays("long",!0,!1),1);case"Z":case"ZZ":return On(new RegExp("([+-]"+c.source+")(?::("+o.source+"))?"),2);case"ZZZ":return On(new RegExp("([+-]"+c.source+")("+o.source+")?"),2);case"z":return Sn(/[a-z_+-/]{1,256}?/i);default:return v(t)}}(n)||{invalidReason:"missing Intl.DateTimeFormat.formatToParts support"}).token=n,m;var n,r,i,o,u,a,s,c,l,f,h,p,d,v,m})),o=i.find((function(t){return t.invalidReason}));if(o)return{input:e,tokens:r,invalidReason:o.invalidReason};var u=function(t){return["^"+t.map((function(t){return t.regex})).reduce((function(t,e){return t+"("+e.source+")"}),"")+"$",t]}(i),a=u[0],s=u[1],c=RegExp(a,"i"),l=function(t,e,n){var r=t.match(e);if(r){var i={},o=1;for(var u in n)if(X(n,u)){var a=n[u],s=a.groups?a.groups+1:1;!a.literal&&a.token&&(i[a.token.val[0]]=a.deser(r.slice(o,o+s))),o+=s}return[r,i]}return[r,{}]}(e,c,s),f=l[0],h=l[1],p=h?function(t){var e;return e=Z(t.Z)?Z(t.z)?null:Ut.create(t.z):new Zt(t.Z),Z(t.q)||(t.M=3*(t.q-1)+1),Z(t.h)||(t.h<12&&1===t.a?t.h+=12:12===t.h&&0===t.a&&(t.h=0)),0===t.G&&t.y&&(t.y=-t.y),Z(t.u)||(t.S=rt(t.u)),[Object.keys(t).reduce((function(e,n){var r=function(t){switch(t){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":case"H":return"hour";case"d":return"day";case"o":return"ordinal";case"L":case"M":return"month";case"y":return"year";case"E":case"c":return"weekday";case"W":return"weekNumber";case"k":return"weekYear";case"q":return"quarter";default:return null}}(n);return r&&(e[r]=t[n]),e}),{}),e]}(h):[null,null],d=p[0],v=p[1];if(X(h,"a")&&X(h,"H"))throw new m("Can't include meridiem when specifying 24-hour format");return{input:e,tokens:r,regex:c,rawMatches:f,matches:h,result:d,zone:v}}var Mn=[0,31,59,90,120,151,181,212,243,273,304,334],In=[0,31,60,91,121,152,182,213,244,274,305,335];function jn(t,e){return new Rt("unit out of range","you specified "+e+" (of type "+typeof e+") as a "+t+", which is invalid")}function Rn(t,e,n){var r=new Date(Date.UTC(t,e-1,n)).getUTCDay();return 0===r?7:r}function Fn(t,e,n){return n+(ot(t)?In:Mn)[e-1]}function Dn(t,e){var n=ot(t)?In:Mn,r=n.findIndex((function(t){return t<e}));return{month:r+1,day:e-n[r]}}function Pn(t){var e,n=t.year,r=t.month,i=t.day,o=Fn(n,r,i),u=Rn(n,r,i),a=Math.floor((o-u+10)/7);return a<1?a=ct(e=n-1):a>ct(n)?(e=n+1,a=1):e=n,Object.assign({weekYear:e,weekNumber:a,weekday:u},mt(t))}function Vn(t){var e,n=t.weekYear,r=t.weekNumber,i=t.weekday,o=Rn(n,1,4),u=ut(n),a=7*r+i-o-3;a<1?a+=ut(e=n-1):a>u?(e=n+1,a-=ut(n)):e=n;var s=Dn(e,a),c=s.month,l=s.day;return Object.assign({year:e,month:c,day:l},mt(t))}function Bn(t){var e=t.year,n=Fn(e,t.month,t.day);return Object.assign({year:e,ordinal:n},mt(t))}function zn(t){var e=t.year,n=Dn(e,t.ordinal),r=n.month,i=n.day;return Object.assign({year:e,month:r,day:i},mt(t))}function Kn(t){var e=H(t.year),n=tt(t.month,1,12),r=tt(t.day,1,at(t.year,t.month));return e?n?!r&&jn("day",t.day):jn("month",t.month):jn("year",t.year)}function Un(t){var e=t.hour,n=t.minute,r=t.second,i=t.millisecond,o=tt(e,0,23)||24===e&&0===n&&0===r&&0===i,u=tt(n,0,59),a=tt(r,0,59),s=tt(i,0,999);return o?u?a?!s&&jn("millisecond",i):jn("second",r):jn("minute",n):jn("hour",e)}var Wn="Invalid DateTime",Zn=864e13;function qn(t){return new Rt("unsupported zone",'the zone "'+t.name+'" is not supported')}function Hn(t){return null===t.weekData&&(t.weekData=Pn(t.c)),t.weekData}function Gn(t,e){var n={ts:t.ts,zone:t.zone,c:t.c,o:t.o,loc:t.loc,invalid:t.invalid};return new fr(Object.assign({},n,e,{old:n}))}function $n(t,e,n){var r=t-60*e*1e3,i=n.offset(r);if(e===i)return[r,e];r-=60*(i-e)*1e3;var o=n.offset(r);return i===o?[r,i]:[t-60*Math.min(i,o)*1e3,Math.max(i,o)]}function Yn(t,e){var n=new Date(t+=60*e*1e3);return{year:n.getUTCFullYear(),month:n.getUTCMonth()+1,day:n.getUTCDate(),hour:n.getUTCHours(),minute:n.getUTCMinutes(),second:n.getUTCSeconds(),millisecond:n.getUTCMilliseconds()}}function Jn(t,e,n){return $n(st(t),e,n)}function Qn(t,e){var n=t.o,r=t.c.year+Math.trunc(e.years),i=t.c.month+Math.trunc(e.months)+3*Math.trunc(e.quarters),o=Object.assign({},t.c,{year:r,month:i,day:Math.min(t.c.day,at(r,i))+Math.trunc(e.days)+7*Math.trunc(e.weeks)}),u=sn.fromObject({years:e.years-Math.trunc(e.years),quarters:e.quarters-Math.trunc(e.quarters),months:e.months-Math.trunc(e.months),weeks:e.weeks-Math.trunc(e.weeks),days:e.days-Math.trunc(e.days),hours:e.hours,minutes:e.minutes,seconds:e.seconds,milliseconds:e.milliseconds}).as("milliseconds"),a=$n(st(o),n,t.zone),s=a[0],c=a[1];return 0!==u&&(s+=u,c=t.zone.offset(s)),{ts:s,o:c}}function Xn(t,e,n,r,i){var o=n.setZone,u=n.zone;if(t&&0!==Object.keys(t).length){var a=e||u,s=fr.fromObject(Object.assign(t,n,{zone:a,setZone:void 0}));return o?s:s.setZone(u)}return fr.invalid(new Rt("unparsable",'the input "'+i+"\" can't be parsed as "+r))}function tr(t,e,n){return void 0===n&&(n=!0),t.isValid?jt.create(fe.create("en-US"),{allowZ:n,forceSimple:!0}).formatDateTimeFromString(t,e):null}function er(t,e){var n=e.suppressSeconds,r=void 0!==n&&n,i=e.suppressMilliseconds,o=void 0!==i&&i,u=e.includeOffset,a=e.includeZone,s=void 0!==a&&a,c=e.spaceZone,l=void 0!==c&&c,f=e.format,h=void 0===f?"extended":f,p="basic"===h?"HHmm":"HH:mm";return r&&0===t.second&&0===t.millisecond||(p+="basic"===h?"ss":":ss",o&&0===t.millisecond||(p+=".SSS")),(s||u)&&l&&(p+=" "),s?p+="z":u&&(p+="basic"===h?"ZZZ":"ZZ"),tr(t,p)}var nr={month:1,day:1,hour:0,minute:0,second:0,millisecond:0},rr={weekNumber:1,weekday:1,hour:0,minute:0,second:0,millisecond:0},ir={ordinal:1,hour:0,minute:0,second:0,millisecond:0},or=["year","month","day","hour","minute","second","millisecond"],ur=["weekYear","weekNumber","weekday","hour","minute","second","millisecond"],ar=["year","ordinal","hour","minute","second","millisecond"];function sr(t){var e={year:"year",years:"year",month:"month",months:"month",day:"day",days:"day",hour:"hour",hours:"hour",minute:"minute",minutes:"minute",quarter:"quarter",quarters:"quarter",second:"second",seconds:"second",millisecond:"millisecond",milliseconds:"millisecond",weekday:"weekday",weekdays:"weekday",weeknumber:"weekNumber",weeksnumber:"weekNumber",weeknumbers:"weekNumber",weekyear:"weekYear",weekyears:"weekYear",ordinal:"ordinal"}[t.toLowerCase()];if(!e)throw new y(t);return e}function cr(t,e){for(var n,r=f(or);!(n=r()).done;){var i=n.value;Z(t[i])&&(t[i]=nr[i])}var o=Kn(t)||Un(t);if(o)return fr.invalid(o);var u=te.now(),a=Jn(t,e.offset(u),e),s=a[0],c=a[1];return new fr({ts:s,zone:e,o:c})}function lr(t,e,n){var r=!!Z(n.round)||n.round,i=function(t,i){return t=it(t,r||n.calendary?0:2,!0),e.loc.clone(n).relFormatter(n).format(t,i)},o=function(r){return n.calendary?e.hasSame(t,r)?0:e.startOf(r).diff(t.startOf(r),r).get(r):e.diff(t,r).get(r)};if(n.unit)return i(o(n.unit),n.unit);for(var u,a=f(n.units);!(u=a()).done;){var s=u.value,c=o(s);if(Math.abs(c)>=1)return i(c,s)}return i(0,n.units[n.units.length-1])}var fr=function(){function t(t){var e=t.zone||te.defaultZone,n=t.invalid||(Number.isNaN(t.ts)?new Rt("invalid input"):null)||(e.isValid?null:qn(e));this.ts=Z(t.ts)?te.now():t.ts;var r=null,i=null;if(!n)if(t.old&&t.old.ts===this.ts&&t.old.zone.equals(e)){var o=[t.old.c,t.old.o];r=o[0],i=o[1]}else{var u=e.offset(this.ts);r=Yn(this.ts,u),r=(n=Number.isNaN(r.year)?new Rt("invalid input"):null)?null:r,i=n?null:u}this._zone=e,this.loc=t.loc||fe.create(),this.invalid=n,this.weekData=null,this.c=r,this.o=i,this.isLuxonDateTime=!0}t.local=function(e,n,r,i,o,u,a){return Z(e)?new t({ts:te.now()}):cr({year:e,month:n,day:r,hour:i,minute:o,second:u,millisecond:a},te.defaultZone)},t.utc=function(e,n,r,i,o,u,a){return Z(e)?new t({ts:te.now(),zone:Zt.utcInstance}):cr({year:e,month:n,day:r,hour:i,minute:o,second:u,millisecond:a},Zt.utcInstance)},t.fromJSDate=function(e,n){void 0===n&&(n={});var r,i=(r=e,"[object Date]"===Object.prototype.toString.call(r)?e.valueOf():NaN);if(Number.isNaN(i))return t.invalid("invalid input");var o=Ht(n.zone,te.defaultZone);return o.isValid?new t({ts:i,zone:o,loc:fe.fromObject(n)}):t.invalid(qn(o))},t.fromMillis=function(e,n){if(void 0===n&&(n={}),q(e))return e<-Zn||e>Zn?t.invalid("Timestamp out of range"):new t({ts:e,zone:Ht(n.zone,te.defaultZone),loc:fe.fromObject(n)});throw new g("fromMillis requires a numerical input, but received a "+typeof e+" with value "+e)},t.fromSeconds=function(e,n){if(void 0===n&&(n={}),q(e))return new t({ts:1e3*e,zone:Ht(n.zone,te.defaultZone),loc:fe.fromObject(n)});throw new g("fromSeconds requires a numerical input")},t.fromObject=function(e){var n=Ht(e.zone,te.defaultZone);if(!n.isValid)return t.invalid(qn(n));var r=te.now(),i=n.offset(r),o=dt(e,sr,["zone","locale","outputCalendar","numberingSystem"]),u=!Z(o.ordinal),a=!Z(o.year),s=!Z(o.month)||!Z(o.day),c=a||s,l=o.weekYear||o.weekNumber,h=fe.fromObject(e);if((c||u)&&l)throw new m("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(s&&u)throw new m("Can't mix ordinal dates with month/day");var p,d,v=l||o.weekday&&!c,y=Yn(r,i);v?(p=ur,d=rr,y=Pn(y)):u?(p=ar,d=ir,y=Bn(y)):(p=or,d=nr);for(var g,_=!1,w=f(p);!(g=w()).done;){var b=g.value;Z(o[b])?o[b]=_?d[b]:y[b]:_=!0}var k=(v?function(t){var e=H(t.weekYear),n=tt(t.weekNumber,1,ct(t.weekYear)),r=tt(t.weekday,1,7);return e?n?!r&&jn("weekday",t.weekday):jn("week",t.week):jn("weekYear",t.weekYear)}(o):u?function(t){var e=H(t.year),n=tt(t.ordinal,1,ut(t.year));return e?!n&&jn("ordinal",t.ordinal):jn("year",t.year)}(o):Kn(o))||Un(o);if(k)return t.invalid(k);var x=Jn(v?Vn(o):u?zn(o):o,i,n),E=new t({ts:x[0],zone:n,o:x[1],loc:h});return o.weekday&&c&&e.weekday!==E.weekday?t.invalid("mismatched weekday","you can't specify both a weekday of "+o.weekday+" and a date of "+E.toISO()):E},t.fromISO=function(t,e){void 0===e&&(e={});var n=function(t){return de(t,[Be,We],[ze,Ze],[Ke,qe],[Ue,He])}(t);return Xn(n[0],n[1],e,"ISO 8601",t)},t.fromRFC2822=function(t,e){void 0===e&&(e={});var n=function(t){return de(function(t){return t.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").trim()}(t),[Ie,je])}(t);return Xn(n[0],n[1],e,"RFC 2822",t)},t.fromHTTP=function(t,e){void 0===e&&(e={});var n=function(t){return de(t,[Re,Pe],[Fe,Pe],[De,Ve])}(t);return Xn(n[0],n[1],e,"HTTP",e)},t.fromFormat=function(e,n,r){if(void 0===r&&(r={}),Z(e)||Z(n))throw new g("fromFormat requires an input string and a format");var i=r,o=i.locale,u=void 0===o?null:o,a=i.numberingSystem,s=void 0===a?null:a,c=function(t,e,n){var r=Cn(t,e,n);return[r.result,r.zone,r.invalidReason]}(fe.fromOpts({locale:u,numberingSystem:s,defaultToEN:!0}),e,n),l=c[0],f=c[1],h=c[2];return h?t.invalid(h):Xn(l,f,r,"format "+n,e)},t.fromString=function(e,n,r){return void 0===r&&(r={}),t.fromFormat(e,n,r)},t.fromSQL=function(t,e){void 0===e&&(e={});var n=function(t){return de(t,[Ge,Ye],[$e,Je])}(t);return Xn(n[0],n[1],e,"SQL",t)},t.invalid=function(e,n){if(void 0===n&&(n=null),!e)throw new g("need to specify a reason the DateTime is invalid");var r=e instanceof Rt?e:new Rt(e,n);if(te.throwOnInvalid)throw new p(r);return new t({invalid:r})},t.isDateTime=function(t){return t&&t.isLuxonDateTime||!1};var e=t.prototype;return e.get=function(t){return this[t]},e.resolvedLocaleOpts=function(t){void 0===t&&(t={});var e=jt.create(this.loc.clone(t),t).resolvedOptions(this);return{locale:e.locale,numberingSystem:e.numberingSystem,outputCalendar:e.calendar}},e.toUTC=function(t,e){return void 0===t&&(t=0),void 0===e&&(e={}),this.setZone(Zt.instance(t),e)},e.toLocal=function(){return this.setZone(te.defaultZone)},e.setZone=function(e,n){var r=void 0===n?{}:n,i=r.keepLocalTime,o=void 0!==i&&i,u=r.keepCalendarTime,a=void 0!==u&&u;if((e=Ht(e,te.defaultZone)).equals(this.zone))return this;if(e.isValid){var s=this.ts;if(o||a){var c=e.offset(this.ts);s=Jn(this.toObject(),c,e)[0]}return Gn(this,{ts:s,zone:e})}return t.invalid(qn(e))},e.reconfigure=function(t){var e=void 0===t?{}:t,n=e.locale,r=e.numberingSystem,i=e.outputCalendar;return Gn(this,{loc:this.loc.clone({locale:n,numberingSystem:r,outputCalendar:i})})},e.setLocale=function(t){return this.reconfigure({locale:t})},e.set=function(t){if(!this.isValid)return this;var e,n=dt(t,sr,[]);!Z(n.weekYear)||!Z(n.weekNumber)||!Z(n.weekday)?e=Vn(Object.assign(Pn(this.c),n)):Z(n.ordinal)?(e=Object.assign(this.toObject(),n),Z(n.day)&&(e.day=Math.min(at(e.year,e.month),e.day))):e=zn(Object.assign(Bn(this.c),n));var r=Jn(e,this.o,this.zone);return Gn(this,{ts:r[0],o:r[1]})},e.plus=function(t){return this.isValid?Gn(this,Qn(this,cn(t))):this},e.minus=function(t){return this.isValid?Gn(this,Qn(this,cn(t).negate())):this},e.startOf=function(t){if(!this.isValid)return this;var e={},n=sn.normalizeUnit(t);switch(n){case"years":e.month=1;case"quarters":case"months":e.day=1;case"weeks":case"days":e.hour=0;case"hours":e.minute=0;case"minutes":e.second=0;case"seconds":e.millisecond=0}if("weeks"===n&&(e.weekday=1),"quarters"===n){var r=Math.ceil(this.month/3);e.month=3*(r-1)+1}return this.set(e)},e.endOf=function(t){var e;return this.isValid?this.plus((e={},e[t]=1,e)).startOf(t).minus(1):this},e.toFormat=function(t,e){return void 0===e&&(e={}),this.isValid?jt.create(this.loc.redefaultToEN(e)).formatDateTimeFromString(this,t):Wn},e.toLocaleString=function(t){return void 0===t&&(t=x),this.isValid?jt.create(this.loc.clone(t),t).formatDateTime(this):Wn},e.toLocaleParts=function(t){return void 0===t&&(t={}),this.isValid?jt.create(this.loc.clone(t),t).formatDateTimeParts(this):[]},e.toISO=function(t){return void 0===t&&(t={}),this.isValid?this.toISODate(t)+"T"+this.toISOTime(t):null},e.toISODate=function(t){var e=(void 0===t?{}:t).format,n="basic"===(void 0===e?"extended":e)?"yyyyMMdd":"yyyy-MM-dd";return this.year>9999&&(n="+"+n),tr(this,n)},e.toISOWeekDate=function(){return tr(this,"kkkk-'W'WW-c")},e.toISOTime=function(t){var e=void 0===t?{}:t,n=e.suppressMilliseconds,r=void 0!==n&&n,i=e.suppressSeconds,o=void 0!==i&&i,u=e.includeOffset,a=void 0===u||u,s=e.format;return er(this,{suppressSeconds:o,suppressMilliseconds:r,includeOffset:a,format:void 0===s?"extended":s})},e.toRFC2822=function(){return tr(this,"EEE, dd LLL yyyy HH:mm:ss ZZZ",!1)},e.toHTTP=function(){return tr(this.toUTC(),"EEE, dd LLL yyyy HH:mm:ss 'GMT'")},e.toSQLDate=function(){return tr(this,"yyyy-MM-dd")},e.toSQLTime=function(t){var e=void 0===t?{}:t,n=e.includeOffset,r=void 0===n||n,i=e.includeZone;return er(this,{includeOffset:r,includeZone:void 0!==i&&i,spaceZone:!0})},e.toSQL=function(t){return void 0===t&&(t={}),this.isValid?this.toSQLDate()+" "+this.toSQLTime(t):null},e.toString=function(){return this.isValid?this.toISO():Wn},e.valueOf=function(){return this.toMillis()},e.toMillis=function(){return this.isValid?this.ts:NaN},e.toSeconds=function(){return this.isValid?this.ts/1e3:NaN},e.toJSON=function(){return this.toISO()},e.toBSON=function(){return this.toJSDate()},e.toObject=function(t){if(void 0===t&&(t={}),!this.isValid)return{};var e=Object.assign({},this.c);return t.includeConfig&&(e.outputCalendar=this.outputCalendar,e.numberingSystem=this.loc.numberingSystem,e.locale=this.loc.locale),e},e.toJSDate=function(){return new Date(this.isValid?this.ts:NaN)},e.diff=function(t,e,n){if(void 0===e&&(e="milliseconds"),void 0===n&&(n={}),!this.isValid||!t.isValid)return sn.invalid(this.invalid||t.invalid,"created by diffing an invalid DateTime");var r,i=Object.assign({locale:this.locale,numberingSystem:this.numberingSystem},n),o=(r=e,Array.isArray(r)?r:[r]).map(sn.normalizeUnit),u=t.valueOf()>this.valueOf(),a=vn(u?this:t,u?t:this,o,i);return u?a.negate():a},e.diffNow=function(e,n){return void 0===e&&(e="milliseconds"),void 0===n&&(n={}),this.diff(t.local(),e,n)},e.until=function(t){return this.isValid?hn.fromDateTimes(this,t):this},e.hasSame=function(t,e){if(!this.isValid)return!1;if("millisecond"===e)return this.valueOf()===t.valueOf();var n=t.valueOf();return this.startOf(e)<=n&&n<=this.endOf(e)},e.equals=function(t){return this.isValid&&t.isValid&&this.valueOf()===t.valueOf()&&this.zone.equals(t.zone)&&this.loc.equals(t.loc)},e.toRelative=function(e){if(void 0===e&&(e={}),!this.isValid)return null;var n=e.base||t.fromObject({zone:this.zone}),r=e.padding?this<n?-e.padding:e.padding:0;return lr(n,this.plus(r),Object.assign(e,{numeric:"always",units:["years","months","days","hours","minutes","seconds"]}))},e.toRelativeCalendar=function(e){return void 0===e&&(e={}),this.isValid?lr(e.base||t.fromObject({zone:this.zone}),this,Object.assign(e,{numeric:"auto",units:["years","months","days"],calendary:!0})):null},t.min=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];if(!n.every(t.isDateTime))throw new g("min requires all arguments be DateTimes");return J(n,(function(t){return t.valueOf()}),Math.min)},t.max=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];if(!n.every(t.isDateTime))throw new g("max requires all arguments be DateTimes");return J(n,(function(t){return t.valueOf()}),Math.max)},t.fromFormatExplain=function(t,e,n){void 0===n&&(n={});var r=n,i=r.locale,o=void 0===i?null:i,u=r.numberingSystem,a=void 0===u?null:u;return Cn(fe.fromOpts({locale:o,numberingSystem:a,defaultToEN:!0}),t,e)},t.fromStringExplain=function(e,n,r){return void 0===r&&(r={}),t.fromFormatExplain(e,n,r)},r(t,[{key:"isValid",get:function(){return null===this.invalid}},{key:"invalidReason",get:function(){return this.invalid?this.invalid.reason:null}},{key:"invalidExplanation",get:function(){return this.invalid?this.invalid.explanation:null}},{key:"locale",get:function(){return this.isValid?this.loc.locale:null}},{key:"numberingSystem",get:function(){return this.isValid?this.loc.numberingSystem:null}},{key:"outputCalendar",get:function(){return this.isValid?this.loc.outputCalendar:null}},{key:"zone",get:function(){return this._zone}},{key:"zoneName",get:function(){return this.isValid?this.zone.name:null}},{key:"year",get:function(){return this.isValid?this.c.year:NaN}},{key:"quarter",get:function(){return this.isValid?Math.ceil(this.c.month/3):NaN}},{key:"month",get:function(){return this.isValid?this.c.month:NaN}},{key:"day",get:function(){return this.isValid?this.c.day:NaN}},{key:"hour",get:function(){return this.isValid?this.c.hour:NaN}},{key:"minute",get:function(){return this.isValid?this.c.minute:NaN}},{key:"second",get:function(){return this.isValid?this.c.second:NaN}},{key:"millisecond",get:function(){return this.isValid?this.c.millisecond:NaN}},{key:"weekYear",get:function(){return this.isValid?Hn(this).weekYear:NaN}},{key:"weekNumber",get:function(){return this.isValid?Hn(this).weekNumber:NaN}},{key:"weekday",get:function(){return this.isValid?Hn(this).weekday:NaN}},{key:"ordinal",get:function(){return this.isValid?Bn(this.c).ordinal:NaN}},{key:"monthShort",get:function(){return this.isValid?pn.months("short",{locale:this.locale})[this.month-1]:null}},{key:"monthLong",get:function(){return this.isValid?pn.months("long",{locale:this.locale})[this.month-1]:null}},{key:"weekdayShort",get:function(){return this.isValid?pn.weekdays("short",{locale:this.locale})[this.weekday-1]:null}},{key:"weekdayLong",get:function(){return this.isValid?pn.weekdays("long",{locale:this.locale})[this.weekday-1]:null}},{key:"offset",get:function(){return this.isValid?+this.o:NaN}},{key:"offsetNameShort",get:function(){return this.isValid?this.zone.offsetName(this.ts,{format:"short",locale:this.locale}):null}},{key:"offsetNameLong",get:function(){return this.isValid?this.zone.offsetName(this.ts,{format:"long",locale:this.locale}):null}},{key:"isOffsetFixed",get:function(){return this.isValid?this.zone.universal:null}},{key:"isInDST",get:function(){return!this.isOffsetFixed&&(this.offset>this.set({month:1}).offset||this.offset>this.set({month:5}).offset)}},{key:"isInLeapYear",get:function(){return ot(this.year)}},{key:"daysInMonth",get:function(){return at(this.year,this.month)}},{key:"daysInYear",get:function(){return this.isValid?ut(this.year):NaN}},{key:"weeksInWeekYear",get:function(){return this.isValid?ct(this.weekYear):NaN}}],[{key:"DATE_SHORT",get:function(){return x}},{key:"DATE_MED",get:function(){return E}},{key:"DATE_MED_WITH_WEEKDAY",get:function(){return T}},{key:"DATE_FULL",get:function(){return O}},{key:"DATE_HUGE",get:function(){return S}},{key:"TIME_SIMPLE",get:function(){return L}},{key:"TIME_WITH_SECONDS",get:function(){return A}},{key:"TIME_WITH_SHORT_OFFSET",get:function(){return N}},{key:"TIME_WITH_LONG_OFFSET",get:function(){return C}},{key:"TIME_24_SIMPLE",get:function(){return M}},{key:"TIME_24_WITH_SECONDS",get:function(){return I}},{key:"TIME_24_WITH_SHORT_OFFSET",get:function(){return j}},{key:"TIME_24_WITH_LONG_OFFSET",get:function(){return R}},{key:"DATETIME_SHORT",get:function(){return F}},{key:"DATETIME_SHORT_WITH_SECONDS",get:function(){return D}},{key:"DATETIME_MED",get:function(){return P}},{key:"DATETIME_MED_WITH_SECONDS",get:function(){return V}},{key:"DATETIME_MED_WITH_WEEKDAY",get:function(){return B}},{key:"DATETIME_FULL",get:function(){return z}},{key:"DATETIME_FULL_WITH_SECONDS",get:function(){return K}},{key:"DATETIME_HUGE",get:function(){return U}},{key:"DATETIME_HUGE_WITH_SECONDS",get:function(){return W}}]),t}();function hr(t){if(fr.isDateTime(t))return t;if(t&&t.valueOf&&q(t.valueOf()))return fr.fromJSDate(t);if(t&&"object"==typeof t)return fr.fromObject(t);throw new g("Unknown datetime argument: "+t+", of type "+typeof t)}e.DateTime=fr,e.Duration=sn,e.FixedOffsetZone=Zt,e.IANAZone=Ut,e.Info=pn,e.Interval=hn,e.InvalidZone=qt,e.LocalZone=Pt,e.Settings=te,e.Zone=Ft})),U=function(){function t(t){this._settings=t}return t.prototype.now=function(){return this.apply(K.DateTime.local())},t.prototype.apply=function(t){return this._settings.datetime.locale&&(t=t.setLocale(this._settings.datetime.locale)),this._settings.datetime.timezone&&(t=t.setZone(this._settings.datetime.timezone)),t},t=o([P(),u(0,D(z.TempleSettings)),a("design:paramtypes",[Object])],t)}(),W=function(){function t(t){this._datetime=t,this.name="datetime"}return t.prototype.docs=function(){return s(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return t={},[4,this.provide()];case 1:return[2,(t.context=e.sent(),t.template='\n# `datetime`\n\nReturns the current date and time as Luxon [`DateTime`](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e5e63b56d6bb52a95cc5e7cfadc5d1bec3023f14/types/luxon/index.d.ts#L151).\n\n## Usage\n\n{% raw %}```\nnow: {{ datetime.now }}\n\nday: {{ datetime.now.day }}\nmonth: {{ datetime.now.month }}\nyear: {{ datetime.now.year }}\n\nhour: {{ datetime.now.hour }}\nminute: {{ datetime.now.minute }}\nsecond: {{ datetime.now.second }}\n```{% endraw %}\n\noutputs:\n\n```\nnow: {{ datetime.now }}\n\nday: {{ datetime.now.day }}\nmonth: {{ datetime.now.month }}\nyear: {{ datetime.now.year }}\n\nhour: {{ datetime.now.hour }}\nminute: {{ datetime.now.minute }}\nsecond: {{ datetime.now.second }}\n```\n\n\n## Formatting with `dateFormat` filter\n\n`dateFormat` uses [Luxon](https://moment.github.io/luxon/index.html) under-the-hood for date formatting. For example:\n\n{% raw %}```\nnow: {{ datetime.now | dateFormat("ffff") }}\n```{% endraw %}\n\noutputs:\n\n```\nnow: {{ datetime.now | dateFormat("ffff") }}\n```\n\nSee [Luxon\'s documentation](https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens) for a complete list of formatting tokens that can be used.\n\n# Settings\n\nYou can override the default locale and timezone under Settings.\n',t)]}}))}))},t.prototype.provide=function(){return s(this,void 0,void 0,(function(){return c(this,(function(t){return[2,new g(new B(this._datetime.now()))]}))}))},t=o([P(),a("design:paramtypes",[U])],t)}(),Z=function(t,e){this.uid=t,this.title=e},q=function(){function e(t,e){this._workspace=t,this._settings=e,this.name="zettel"}return e.prototype.docs=function(){return s(this,void 0,void 0,(function(){return c(this,(function(t){return[2,{context:new g(this.extract("20201224030406 title.md")),template:"\n# `zettel`\n\nExtracts uid and title from notes that have the Zettelkasten ID.\n\n## Usages\n\nGiven a file named `20201224030406 title.md`, the following template\n\n{% raw %}```\nuid: {{ zettel.uid }}\ntitle: {{ zettel.title }}\n```{% endraw %}\n\noutputs:\n\n```\nuid: {{ zettel.uid }}\ntitle: {{ zettel.title }}\n```\n\nWorks even if the `uid` is used as a suffix, eg. `title 20201224030406.md`.\n\n## Settings\n\nYou can override the extraction regex under Settings.\n"}]}))}))},e.prototype.provide=function(){return s(this,void 0,void 0,(function(){var t,e;return c(this,(function(n){return null==(t=this._workspace.getActiveFile())?[2,null]:(e=this.extract(t.basename),[2,new g(e)])}))}))},e.prototype.extract=function(t){var e,n=null!==(e=this.extractPrefix(t))&&void 0!==e?e:this.extractSuffix(t);return this._settings.zettel.regex&&(n=this.extractCustom(t)),n},e.prototype.extractCustom=function(t){var e=new RegExp(this._settings.zettel.regex,"gm");return this.extractRegex(t,e)},e.prototype.extractPrefix=function(t){return this.extractRegex(t,/(?<uid>^\d+)(\s(?<title>.*$))?/gm)},e.prototype.extractSuffix=function(t){return this.extractRegex(t,/((?<title>^.*)\s)?(?<uid>\d+$)/gm)},e.prototype.extractRegex=function(t,e){var n=e.exec(t);if(null==(null==n?void 0:n.groups))return null;var r=n.groups,i=r.uid,o=r.title;return new Z(i,o)},e=o([P(),u(1,D(z.TempleSettings)),a("design:paramtypes",[t.Workspace,Object])],e)}(),H=m((function(t,e){
/*! Browser bundle of nunjucks 3.2.2  */
var n;"undefined"!=typeof self&&self,n=function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=11)}([function(t,e,n){var r=Array.prototype,i=Object.prototype,o={"&":"&amp;",'"':"&quot;","'":"&#39;","<":"&lt;",">":"&gt;"},u=/[&"'<>]/g;function a(t,e){return i.hasOwnProperty.call(t,e)}function s(t){return o[t]}function c(t,e,n){var r,i,o;if(t instanceof Error&&(t=(i=t).name+": "+i.message),Object.setPrototypeOf?(r=new Error(t),Object.setPrototypeOf(r,c.prototype)):(r=this,Object.defineProperty(r,"message",{enumerable:!1,writable:!0,value:t})),Object.defineProperty(r,"name",{value:"Template render error"}),Error.captureStackTrace&&Error.captureStackTrace(r,this.constructor),i){var u=Object.getOwnPropertyDescriptor(i,"stack");(o=u&&(u.get||function(){return u.value}))||(o=function(){return i.stack})}else{var a=new Error(t).stack;o=function(){return a}}return Object.defineProperty(r,"stack",{get:function(){return o.call(r)}}),Object.defineProperty(r,"cause",{value:i}),r.lineno=e,r.colno=n,r.firstUpdate=!0,r.Update=function(t){var e="("+(t||"unknown path")+")";return this.firstUpdate&&(this.lineno&&this.colno?e+=" [Line "+this.lineno+", Column "+this.colno+"]":this.lineno&&(e+=" [Line "+this.lineno+"]")),e+="\n ",this.firstUpdate&&(e+=" "),this.message=e+(this.message||""),this.firstUpdate=!1,this},r}function l(t){return"[object Function]"===i.toString.call(t)}function f(t){return"[object Array]"===i.toString.call(t)}function h(t){return"[object String]"===i.toString.call(t)}function p(t){return"[object Object]"===i.toString.call(t)}function d(t){return Array.prototype.slice.call(t)}function v(t,e,n){return Array.prototype.indexOf.call(t||[],e,n)}function m(t){var e=[];for(var n in t)a(t,n)&&e.push(n);return e}(e=t.exports={}).hasOwnProp=a,e._prettifyError=function(t,n,r){if(r.Update||(r=new e.TemplateError(r)),r.Update(t),!n){var i=r;(r=new Error(i.message)).name=i.name}return r},Object.setPrototypeOf?Object.setPrototypeOf(c.prototype,Error.prototype):c.prototype=Object.create(Error.prototype,{constructor:{value:c}}),e.TemplateError=c,e.escape=function(t){return t.replace(u,s)},e.isFunction=l,e.isArray=f,e.isString=h,e.isObject=p,e.groupBy=function(t,e,n){for(var r,i,o={},u=l(e)?e:(i=(r=e)?"string"==typeof r?r.split("."):[r]:[],function(t){for(var e=t,n=0;n<i.length;n++){var r=i[n];if(!a(e,r))return;e=e[r]}return e}),s=0;s<t.length;s++){var c=t[s],f=u(c,s);if(void 0===f&&!0===n)throw new TypeError('groupby: attribute "'+e+'" resolved to undefined');(o[f]||(o[f]=[])).push(c)}return o},e.toArray=d,e.without=function(t){var e=[];if(!t)return e;for(var n=t.length,r=d(arguments).slice(1),i=-1;++i<n;)-1===v(r,t[i])&&e.push(t[i]);return e},e.repeat=function(t,e){for(var n="",r=0;r<e;r++)n+=t;return n},e.each=function(t,e,n){if(null!=t)if(r.forEach&&t.forEach===r.forEach)t.forEach(e,n);else if(t.length===+t.length)for(var i=0,o=t.length;i<o;i++)e.call(n,t[i],i,t)},e.map=function(t,e){var n=[];if(null==t)return n;if(r.map&&t.map===r.map)return t.map(e);for(var i=0;i<t.length;i++)n[n.length]=e(t[i],i);return t.length===+t.length&&(n.length=t.length),n},e.asyncIter=function(t,e,n){var r=-1;!function i(){++r<t.length?e(t[r],r,i,n):n()}()},e.asyncFor=function(t,e,n){var r=m(t||{}),i=r.length,o=-1;!function u(){o++;var a=r[o];o<i?e(a,t[a],o,i,u):n()}()},e.indexOf=v,e.keys=m,e._entries=function(t){return m(t).map((function(e){return[e,t[e]]}))},e._values=function(t){return m(t).map((function(e){return t[e]}))},e._assign=e.extend=function(t,e){return t=t||{},m(e).forEach((function(n){t[n]=e[n]})),t},e.inOperator=function(t,e){if(f(e)||h(e))return-1!==e.indexOf(t);if(p(e))return t in e;throw new Error('Cannot use "in" operator to search for "'+t+'" in unexpected types.')}},function(t,e,n){function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}function o(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}var u=n(16),a=n(0);function s(t,e,n){n=n||{},a.keys(n).forEach((function(e){var r,i;n[e]=(r=t.prototype[e],i=n[e],"function"!=typeof r||"function"!=typeof i?i:function(){var t=this.parent;this.parent=r;var e=i.apply(this,arguments);return this.parent=t,e})}));var r=function(t){function n(){return t.apply(this,arguments)||this}return o(n,t),i(n,[{key:"typename",get:function(){return e}}]),n}(t);return a._assign(r.prototype,n),r}var c=function(){function t(){this.init.apply(this,arguments)}return t.prototype.init=function(){},t.extend=function(t,e){return"object"==typeof t&&(e=t,t="anonymous"),s(this,t,e)},i(t,[{key:"typename",get:function(){return this.constructor.name}}]),t}(),l=function(t){function e(){var e,n;return(e=n=t.call(this)||this).init.apply(e,arguments),n}return o(e,t),e.prototype.init=function(){},e.extend=function(t,e){return"object"==typeof t&&(e=t,t="anonymous"),s(this,t,e)},i(e,[{key:"typename",get:function(){return this.constructor.name}}]),e}(u);t.exports={Obj:c,EmitterObj:l}},function(t,e,n){var r=n(0),i=Array.from,o="function"==typeof Symbol&&Symbol.iterator&&"function"==typeof i,u=function(){function t(t,e){this.variables={},this.parent=t,this.topLevel=!1,this.isolateWrites=e}var e=t.prototype;return e.set=function(t,e,n){var r=t.split("."),i=this.variables,o=this;if(n&&(o=this.resolve(r[0],!0)))o.set(t,e);else{for(var u=0;u<r.length-1;u++){var a=r[u];i[a]||(i[a]={}),i=i[a]}i[r[r.length-1]]=e}},e.get=function(t){var e=this.variables[t];return void 0!==e?e:null},e.lookup=function(t){var e=this.parent,n=this.variables[t];return void 0!==n?n:e&&e.lookup(t)},e.resolve=function(t,e){var n=e&&this.isolateWrites?void 0:this.parent;return void 0!==this.variables[t]?this:n&&n.resolve(t)},e.push=function(e){return new t(this,e)},e.pop=function(){return this.parent},t}();function a(t){return t&&Object.prototype.hasOwnProperty.call(t,"__keywords")}function s(t){var e=t.length;if(e){var n=t[e-1];if(a(n))return n}return{}}function c(t){var e=t.length;return 0===e?0:a(t[e-1])?e-1:e}function l(t){if("string"!=typeof t)return t;this.val=t,this.length=t.length}l.prototype=Object.create(String.prototype,{length:{writable:!0,configurable:!0,value:0}}),l.prototype.valueOf=function(){return this.val},l.prototype.toString=function(){return this.val},t.exports={Frame:u,makeMacro:function(t,e,n){var r=this;return function(){for(var i=arguments.length,o=new Array(i),u=0;u<i;u++)o[u]=arguments[u];var a,l=c(o),f=s(o);if(l>t.length)a=o.slice(0,t.length),o.slice(a.length,l).forEach((function(t,n){n<e.length&&(f[e[n]]=t)})),a.push(f);else if(l<t.length){a=o.slice(0,l);for(var h=l;h<t.length;h++){var p=t[h];a.push(f[p]),delete f[p]}a.push(f)}else a=o;return n.apply(r,a)}},makeKeywordArgs:function(t){return t.__keywords=!0,t},numArgs:c,suppressValue:function(t,e){return t=null!=t?t:"",!e||t instanceof l||(t=r.escape(t.toString())),t},ensureDefined:function(t,e,n){if(null==t)throw new r.TemplateError("attempted to output null or undefined value",e+1,n+1);return t},memberLookup:function(t,e){if(null!=t)return"function"==typeof t[e]?function(){for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return t[e].apply(t,r)}:t[e]},contextOrFrameLookup:function(t,e,n){var r=e.lookup(n);return void 0!==r?r:t.lookup(n)},callWrap:function(t,e,n,r){if(!t)throw new Error("Unable to call `"+e+"`, which is undefined or falsey");if("function"!=typeof t)throw new Error("Unable to call `"+e+"`, which is not a function");return t.apply(n,r)},handleError:function(t,e,n){return t.lineno?t:new r.TemplateError(t,e,n)},isArray:r.isArray,keys:r.keys,SafeString:l,copySafeness:function(t,e){return t instanceof l?new l(e):e.toString()},markSafe:function(t){var e=typeof t;return"string"===e?new l(t):"function"!==e?t:function(e){var n=t.apply(this,arguments);return"string"==typeof n?new l(n):n}},asyncEach:function(t,e,n,i){if(r.isArray(t)){var o=t.length;r.asyncIter(t,(function(t,r,i){switch(e){case 1:n(t,r,o,i);break;case 2:n(t[0],t[1],r,o,i);break;case 3:n(t[0],t[1],t[2],r,o,i);break;default:t.push(r,o,i),n.apply(this,t)}}),i)}else r.asyncFor(t,(function(t,e,r,i,o){n(t,e,r,i,o)}),i)},asyncAll:function(t,e,n,i){var o,u,a=0;function s(t,e){a++,u[t]=e,a===o&&i(null,u.join(""))}if(r.isArray(t))if(o=t.length,u=new Array(o),0===o)i(null,"");else for(var c=0;c<t.length;c++){var l=t[c];switch(e){case 1:n(l,c,o,s);break;case 2:n(l[0],l[1],c,o,s);break;case 3:n(l[0],l[1],l[2],c,o,s);break;default:l.push(c,o,s),n.apply(this,l)}}else{var f=r.keys(t||{});if(o=f.length,u=new Array(o),0===o)i(null,"");else for(var h=0;h<f.length;h++){var p=f[h];n(p,t[p],h,o,s)}}},inOperator:r.inOperator,fromIterator:function(t){return"object"!=typeof t||null===t||r.isArray(t)?t:o&&Symbol.iterator in t?i(t):t}}},function(t,e,n){function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}function o(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}function u(t,e,n){t instanceof e&&n.push(t),t instanceof a&&t.findAll(e,n)}var a=function(t){function e(){return t.apply(this,arguments)||this}o(e,t);var n=e.prototype;return n.init=function(t,e){for(var n=arguments,r=this,i=arguments.length,o=new Array(i>2?i-2:0),u=2;u<i;u++)o[u-2]=arguments[u];this.lineno=t,this.colno=e,this.fields.forEach((function(t,e){var i=n[e+2];void 0===i&&(i=null),r[t]=i}))},n.findAll=function(t,e){var n=this;return e=e||[],this instanceof c?this.children.forEach((function(n){return u(n,t,e)})):this.fields.forEach((function(r){return u(n[r],t,e)})),e},n.iterFields=function(t){var e=this;this.fields.forEach((function(n){t(e[n],n)}))},e}(n(1).Obj),s=function(t){function e(){return t.apply(this,arguments)||this}return o(e,t),i(e,[{key:"typename",get:function(){return"Value"}},{key:"fields",get:function(){return["value"]}}]),e}(a),c=function(t){function e(){return t.apply(this,arguments)||this}o(e,t);var n=e.prototype;return n.init=function(e,n,r){t.prototype.init.call(this,e,n,r||[])},n.addChild=function(t){this.children.push(t)},i(e,[{key:"typename",get:function(){return"NodeList"}},{key:"fields",get:function(){return["children"]}}]),e}(a),l=c.extend("Root"),f=s.extend("Literal"),h=s.extend("Symbol"),p=c.extend("Group"),d=c.extend("Array"),v=a.extend("Pair",{fields:["key","value"]}),m=c.extend("Dict"),y=a.extend("LookupVal",{fields:["target","val"]}),g=a.extend("If",{fields:["cond","body","else_"]}),_=g.extend("IfAsync"),w=a.extend("InlineIf",{fields:["cond","body","else_"]}),b=a.extend("For",{fields:["arr","name","body","else_"]}),k=b.extend("AsyncEach"),x=b.extend("AsyncAll"),E=a.extend("Macro",{fields:["name","args","body"]}),T=E.extend("Caller"),O=a.extend("Import",{fields:["template","target","withContext"]}),S=function(t){function e(){return t.apply(this,arguments)||this}return o(e,t),e.prototype.init=function(e,n,r,i,o){t.prototype.init.call(this,e,n,r,i||new c,o)},i(e,[{key:"typename",get:function(){return"FromImport"}},{key:"fields",get:function(){return["template","names","withContext"]}}]),e}(a),L=a.extend("FunCall",{fields:["name","args"]}),A=L.extend("Filter"),N=A.extend("FilterAsync",{fields:["name","args","symbol"]}),C=m.extend("KeywordArgs"),M=a.extend("Block",{fields:["name","body"]}),I=a.extend("Super",{fields:["blockName","symbol"]}),j=a.extend("TemplateRef",{fields:["template"]}).extend("Extends"),R=a.extend("Include",{fields:["template","ignoreMissing"]}),F=a.extend("Set",{fields:["targets","value"]}),D=a.extend("Switch",{fields:["expr","cases","default"]}),P=a.extend("Case",{fields:["cond","body"]}),V=c.extend("Output"),B=a.extend("Capture",{fields:["body"]}),z=f.extend("TemplateData"),K=a.extend("UnaryOp",{fields:["target"]}),U=a.extend("BinOp",{fields:["left","right"]}),W=U.extend("In"),Z=U.extend("Is"),q=U.extend("Or"),H=U.extend("And"),G=K.extend("Not"),$=U.extend("Add"),Y=U.extend("Concat"),J=U.extend("Sub"),Q=U.extend("Mul"),X=U.extend("Div"),tt=U.extend("FloorDiv"),et=U.extend("Mod"),nt=U.extend("Pow"),rt=K.extend("Neg"),it=K.extend("Pos"),ot=a.extend("Compare",{fields:["expr","ops"]}),ut=a.extend("CompareOperand",{fields:["expr","type"]}),at=a.extend("CallExtension",{init:function(t,e,n,r){this.parent(),this.extName=t.__name||t,this.prop=e,this.args=n||new c,this.contentArgs=r||[],this.autoescape=t.autoescape},fields:["extName","prop","args","contentArgs"]}),st=at.extend("CallExtensionAsync");function ct(t,e,n){var r=t.split("\n");r.forEach((function(t,i){t&&(n&&i>0||!n)&&process.stdout.write(" ".repeat(e));var o=i===r.length-1?"":"\n";process.stdout.write(""+t+o)}))}t.exports={Node:a,Root:l,NodeList:c,Value:s,Literal:f,Symbol:h,Group:p,Array:d,Pair:v,Dict:m,Output:V,Capture:B,TemplateData:z,If:g,IfAsync:_,InlineIf:w,For:b,AsyncEach:k,AsyncAll:x,Macro:E,Caller:T,Import:O,FromImport:S,FunCall:L,Filter:A,FilterAsync:N,KeywordArgs:C,Block:M,Super:I,Extends:j,Include:R,Set:F,Switch:D,Case:P,LookupVal:y,BinOp:U,In:W,Is:Z,Or:q,And:H,Not:G,Add:$,Concat:Y,Sub:J,Mul:Q,Div:X,FloorDiv:tt,Mod:et,Pow:nt,Neg:rt,Pos:it,Compare:ot,CompareOperand:ut,CallExtension:at,CallExtensionAsync:st,printNodes:function t(e,n){if(n=n||0,ct(e.typename+": ",n),e instanceof c)ct("\n"),e.children.forEach((function(e){t(e,n+2)}));else if(e instanceof at)ct(e.extName+"."+e.prop+"\n"),e.args&&t(e.args,n+2),e.contentArgs&&e.contentArgs.forEach((function(e){t(e,n+2)}));else{var r=[],i=null;e.iterFields((function(t,e){t instanceof a?r.push([e,t]):(i=i||{})[e]=t})),i?ct(JSON.stringify(i,null,2)+"\n",null,!0):ct("\n"),r.forEach((function(e){var r=e[0],i=e[1];ct("["+r+"] =>",n+2),t(i,n+4)}))}}}},function(t,e){},function(t,e,n){var r=n(8),i=n(17),o=n(3),u=n(0).TemplateError,a=n(2).Frame,s=n(1).Obj,c={"==":"==","===":"===","!=":"!=","!==":"!==","<":"<",">":">","<=":"<=",">=":">="},l=function(t){var e,n;function r(){return t.apply(this,arguments)||this}n=t,(e=r).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n;var i=r.prototype;return i.init=function(t,e){this.templateName=t,this.codebuf=[],this.lastId=0,this.buffer=null,this.bufferStack=[],this._scopeClosers="",this.inBlock=!1,this.throwOnUndefined=e},i.fail=function(t,e,n){throw void 0!==e&&(e+=1),void 0!==n&&(n+=1),new u(t,e,n)},i._pushBuffer=function(){var t=this._tmpid();return this.bufferStack.push(this.buffer),this.buffer=t,this._emit("var "+this.buffer+' = "";'),t},i._popBuffer=function(){this.buffer=this.bufferStack.pop()},i._emit=function(t){this.codebuf.push(t)},i._emitLine=function(t){this._emit(t+"\n")},i._emitLines=function(){for(var t=this,e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];n.forEach((function(e){return t._emitLine(e)}))},i._emitFuncBegin=function(t,e){this.buffer="output",this._scopeClosers="",this._emitLine("function "+e+"(env, context, frame, runtime, cb) {"),this._emitLine("var lineno = "+t.lineno+";"),this._emitLine("var colno = "+t.colno+";"),this._emitLine("var "+this.buffer+' = "";'),this._emitLine("try {")},i._emitFuncEnd=function(t){t||this._emitLine("cb(null, "+this.buffer+");"),this._closeScopeLevels(),this._emitLine("} catch (e) {"),this._emitLine("  cb(runtime.handleError(e, lineno, colno));"),this._emitLine("}"),this._emitLine("}"),this.buffer=null},i._addScopeLevel=function(){this._scopeClosers+="})"},i._closeScopeLevels=function(){this._emitLine(this._scopeClosers+";"),this._scopeClosers=""},i._withScopedSyntax=function(t){var e=this._scopeClosers;this._scopeClosers="",t.call(this),this._closeScopeLevels(),this._scopeClosers=e},i._makeCallback=function(t){var e=this._tmpid();return"function("+e+(t?","+t:"")+") {\nif("+e+") { cb("+e+"); return; }"},i._tmpid=function(){return this.lastId++,"t_"+this.lastId},i._templateName=function(){return null==this.templateName?"undefined":JSON.stringify(this.templateName)},i._compileChildren=function(t,e){var n=this;t.children.forEach((function(t){n.compile(t,e)}))},i._compileAggregate=function(t,e,n,r){var i=this;n&&this._emit(n),t.children.forEach((function(t,n){n>0&&i._emit(","),i.compile(t,e)})),r&&this._emit(r)},i._compileExpression=function(t,e){this.assertType(t,o.Literal,o.Symbol,o.Group,o.Array,o.Dict,o.FunCall,o.Caller,o.Filter,o.LookupVal,o.Compare,o.InlineIf,o.In,o.Is,o.And,o.Or,o.Not,o.Add,o.Concat,o.Sub,o.Mul,o.Div,o.FloorDiv,o.Mod,o.Pow,o.Neg,o.Pos,o.Compare,o.NodeList),this.compile(t,e)},i.assertType=function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];n.some((function(e){return t instanceof e}))||this.fail("assertType: invalid type: "+t.typename,t.lineno,t.colno)},i.compileCallExtension=function(t,e,n){var r=this,i=t.args,u=t.contentArgs,a="boolean"!=typeof t.autoescape||t.autoescape;if(n||this._emit(this.buffer+" += runtime.suppressValue("),this._emit('env.getExtension("'+t.extName+'")["'+t.prop+'"]('),this._emit("context"),(i||u)&&this._emit(","),i&&(i instanceof o.NodeList||this.fail("compileCallExtension: arguments must be a NodeList, use `parser.parseSignature`"),i.children.forEach((function(t,n){r._compileExpression(t,e),(n!==i.children.length-1||u.length)&&r._emit(",")}))),u.length&&u.forEach((function(t,n){if(n>0&&r._emit(","),t){r._emitLine("function(cb) {"),r._emitLine("if(!cb) { cb = function(err) { if(err) { throw err; }}}");var i=r._pushBuffer();r._withScopedSyntax((function(){r.compile(t,e),r._emitLine("cb(null, "+i+");")})),r._popBuffer(),r._emitLine("return "+i+";"),r._emitLine("}")}else r._emit("null")})),n){var s=this._tmpid();this._emitLine(", "+this._makeCallback(s)),this._emitLine(this.buffer+" += runtime.suppressValue("+s+", "+a+" && env.opts.autoescape);"),this._addScopeLevel()}else this._emit(")"),this._emit(", "+a+" && env.opts.autoescape);\n")},i.compileCallExtensionAsync=function(t,e){this.compileCallExtension(t,e,!0)},i.compileNodeList=function(t,e){this._compileChildren(t,e)},i.compileLiteral=function(t){if("string"==typeof t.value){var e=t.value.replace(/\\/g,"\\\\");e=(e=(e=(e=(e=e.replace(/"/g,'\\"')).replace(/\n/g,"\\n")).replace(/\r/g,"\\r")).replace(/\t/g,"\\t")).replace(/\u2028/g,"\\u2028"),this._emit('"'+e+'"')}else null===t.value?this._emit("null"):this._emit(t.value.toString())},i.compileSymbol=function(t,e){var n=t.value,r=e.lookup(n);r?this._emit(r):this._emit('runtime.contextOrFrameLookup(context, frame, "'+n+'")')},i.compileGroup=function(t,e){this._compileAggregate(t,e,"(",")")},i.compileArray=function(t,e){this._compileAggregate(t,e,"[","]")},i.compileDict=function(t,e){this._compileAggregate(t,e,"{","}")},i.compilePair=function(t,e){var n=t.key,r=t.value;n instanceof o.Symbol?n=new o.Literal(n.lineno,n.colno,n.value):n instanceof o.Literal&&"string"==typeof n.value||this.fail("compilePair: Dict keys must be strings or names",n.lineno,n.colno),this.compile(n,e),this._emit(": "),this._compileExpression(r,e)},i.compileInlineIf=function(t,e){this._emit("("),this.compile(t.cond,e),this._emit("?"),this.compile(t.body,e),this._emit(":"),null!==t.else_?this.compile(t.else_,e):this._emit('""'),this._emit(")")},i.compileIn=function(t,e){this._emit("runtime.inOperator("),this.compile(t.left,e),this._emit(","),this.compile(t.right,e),this._emit(")")},i.compileIs=function(t,e){var n=t.right.name?t.right.name.value:t.right.value;this._emit('env.getTest("'+n+'").call(context, '),this.compile(t.left,e),t.right.args&&(this._emit(","),this.compile(t.right.args,e)),this._emit(") === true")},i._binOpEmitter=function(t,e,n){this.compile(t.left,e),this._emit(n),this.compile(t.right,e)},i.compileOr=function(t,e){return this._binOpEmitter(t,e," || ")},i.compileAnd=function(t,e){return this._binOpEmitter(t,e," && ")},i.compileAdd=function(t,e){return this._binOpEmitter(t,e," + ")},i.compileConcat=function(t,e){return this._binOpEmitter(t,e,' + "" + ')},i.compileSub=function(t,e){return this._binOpEmitter(t,e," - ")},i.compileMul=function(t,e){return this._binOpEmitter(t,e," * ")},i.compileDiv=function(t,e){return this._binOpEmitter(t,e," / ")},i.compileMod=function(t,e){return this._binOpEmitter(t,e," % ")},i.compileNot=function(t,e){this._emit("!"),this.compile(t.target,e)},i.compileFloorDiv=function(t,e){this._emit("Math.floor("),this.compile(t.left,e),this._emit(" / "),this.compile(t.right,e),this._emit(")")},i.compilePow=function(t,e){this._emit("Math.pow("),this.compile(t.left,e),this._emit(", "),this.compile(t.right,e),this._emit(")")},i.compileNeg=function(t,e){this._emit("-"),this.compile(t.target,e)},i.compilePos=function(t,e){this._emit("+"),this.compile(t.target,e)},i.compileCompare=function(t,e){var n=this;this.compile(t.expr,e),t.ops.forEach((function(t){n._emit(" "+c[t.type]+" "),n.compile(t.expr,e)}))},i.compileLookupVal=function(t,e){this._emit("runtime.memberLookup(("),this._compileExpression(t.target,e),this._emit("),"),this._compileExpression(t.val,e),this._emit(")")},i._getNodeName=function(t){switch(t.typename){case"Symbol":return t.value;case"FunCall":return"the return value of ("+this._getNodeName(t.name)+")";case"LookupVal":return this._getNodeName(t.target)+'["'+this._getNodeName(t.val)+'"]';case"Literal":return t.value.toString();default:return"--expression--"}},i.compileFunCall=function(t,e){this._emit("(lineno = "+t.lineno+", colno = "+t.colno+", "),this._emit("runtime.callWrap("),this._compileExpression(t.name,e),this._emit(', "'+this._getNodeName(t.name).replace(/"/g,'\\"')+'", context, '),this._compileAggregate(t.args,e,"[","])"),this._emit(")")},i.compileFilter=function(t,e){var n=t.name;this.assertType(n,o.Symbol),this._emit('env.getFilter("'+n.value+'").call(context, '),this._compileAggregate(t.args,e),this._emit(")")},i.compileFilterAsync=function(t,e){var n=t.name,r=t.symbol.value;this.assertType(n,o.Symbol),e.set(r,r),this._emit('env.getFilter("'+n.value+'").call(context, '),this._compileAggregate(t.args,e),this._emitLine(", "+this._makeCallback(r)),this._addScopeLevel()},i.compileKeywordArgs=function(t,e){this._emit("runtime.makeKeywordArgs("),this.compileDict(t,e),this._emit(")")},i.compileSet=function(t,e){var n=this,r=[];t.targets.forEach((function(t){var i=t.value,o=e.lookup(i);null==o&&(o=n._tmpid(),n._emitLine("var "+o+";")),r.push(o)})),t.value?(this._emit(r.join(" = ")+" = "),this._compileExpression(t.value,e),this._emitLine(";")):(this._emit(r.join(" = ")+" = "),this.compile(t.body,e),this._emitLine(";")),t.targets.forEach((function(t,e){var i=r[e],o=t.value;n._emitLine('frame.set("'+o+'", '+i+", true);"),n._emitLine("if(frame.topLevel) {"),n._emitLine('context.setVariable("'+o+'", '+i+");"),n._emitLine("}"),"_"!==o.charAt(0)&&(n._emitLine("if(frame.topLevel) {"),n._emitLine('context.addExport("'+o+'", '+i+");"),n._emitLine("}"))}))},i.compileSwitch=function(t,e){var n=this;this._emit("switch ("),this.compile(t.expr,e),this._emit(") {"),t.cases.forEach((function(t,r){n._emit("case "),n.compile(t.cond,e),n._emit(": "),n.compile(t.body,e),t.body.children.length&&n._emitLine("break;")})),t.default&&(this._emit("default:"),this.compile(t.default,e)),this._emit("}")},i.compileIf=function(t,e,n){var r=this;this._emit("if("),this._compileExpression(t.cond,e),this._emitLine(") {"),this._withScopedSyntax((function(){r.compile(t.body,e),n&&r._emit("cb()")})),t.else_?(this._emitLine("}\nelse {"),this._withScopedSyntax((function(){r.compile(t.else_,e),n&&r._emit("cb()")}))):n&&(this._emitLine("}\nelse {"),this._emit("cb()")),this._emitLine("}")},i.compileIfAsync=function(t,e){this._emit("(function(cb) {"),this.compileIf(t,e,!0),this._emit("})("+this._makeCallback()),this._addScopeLevel()},i._emitLoopBindings=function(t,e,n,r){var i=this;[{name:"index",val:n+" + 1"},{name:"index0",val:n},{name:"revindex",val:r+" - "+n},{name:"revindex0",val:r+" - "+n+" - 1"},{name:"first",val:n+" === 0"},{name:"last",val:n+" === "+r+" - 1"},{name:"length",val:r}].forEach((function(t){i._emitLine('frame.set("loop.'+t.name+'", '+t.val+");")}))},i.compileFor=function(t,e){var n=this,r=this._tmpid(),i=this._tmpid(),u=this._tmpid();if(e=e.push(),this._emitLine("frame = frame.push();"),this._emit("var "+u+" = "),this._compileExpression(t.arr,e),this._emitLine(";"),this._emit("if("+u+") {"),this._emitLine(u+" = runtime.fromIterator("+u+");"),t.name instanceof o.Array){this._emitLine("var "+r+";"),this._emitLine("if(runtime.isArray("+u+")) {"),this._emitLine("var "+i+" = "+u+".length;"),this._emitLine("for("+r+"=0; "+r+" < "+u+".length; "+r+"++) {"),t.name.children.forEach((function(i,o){var a=n._tmpid();n._emitLine("var "+a+" = "+u+"["+r+"]["+o+"];"),n._emitLine('frame.set("'+i+'", '+u+"["+r+"]["+o+"]);"),e.set(t.name.children[o].value,a)})),this._emitLoopBindings(t,u,r,i),this._withScopedSyntax((function(){n.compile(t.body,e)})),this._emitLine("}"),this._emitLine("} else {");var a=t.name.children,s=a[0],c=a[1],l=this._tmpid(),f=this._tmpid();e.set(s.value,l),e.set(c.value,f),this._emitLine(r+" = -1;"),this._emitLine("var "+i+" = runtime.keys("+u+").length;"),this._emitLine("for(var "+l+" in "+u+") {"),this._emitLine(r+"++;"),this._emitLine("var "+f+" = "+u+"["+l+"];"),this._emitLine('frame.set("'+s.value+'", '+l+");"),this._emitLine('frame.set("'+c.value+'", '+f+");"),this._emitLoopBindings(t,u,r,i),this._withScopedSyntax((function(){n.compile(t.body,e)})),this._emitLine("}"),this._emitLine("}")}else{var h=this._tmpid();e.set(t.name.value,h),this._emitLine("var "+i+" = "+u+".length;"),this._emitLine("for(var "+r+"=0; "+r+" < "+u+".length; "+r+"++) {"),this._emitLine("var "+h+" = "+u+"["+r+"];"),this._emitLine('frame.set("'+t.name.value+'", '+h+");"),this._emitLoopBindings(t,u,r,i),this._withScopedSyntax((function(){n.compile(t.body,e)})),this._emitLine("}")}this._emitLine("}"),t.else_&&(this._emitLine("if (!"+i+") {"),this.compile(t.else_,e),this._emitLine("}")),this._emitLine("frame = frame.pop();")},i._compileAsyncLoop=function(t,e,n){var r=this,i=this._tmpid(),u=this._tmpid(),a=this._tmpid(),s=n?"asyncAll":"asyncEach";if(e=e.push(),this._emitLine("frame = frame.push();"),this._emit("var "+a+" = runtime.fromIterator("),this._compileExpression(t.arr,e),this._emitLine(");"),t.name instanceof o.Array){var c=t.name.children.length;this._emit("runtime."+s+"("+a+", "+c+", function("),t.name.children.forEach((function(t){r._emit(t.value+",")})),this._emit(i+","+u+",next) {"),t.name.children.forEach((function(t){var n=t.value;e.set(n,n),r._emitLine('frame.set("'+n+'", '+n+");")}))}else{var l=t.name.value;this._emitLine("runtime."+s+"("+a+", 1, function("+l+", "+i+", "+u+",next) {"),this._emitLine('frame.set("'+l+'", '+l+");"),e.set(l,l)}this._emitLoopBindings(t,a,i,u),this._withScopedSyntax((function(){var o;n&&(o=r._pushBuffer()),r.compile(t.body,e),r._emitLine("next("+i+(o?","+o:"")+");"),n&&r._popBuffer()}));var f=this._tmpid();this._emitLine("}, "+this._makeCallback(f)),this._addScopeLevel(),n&&this._emitLine(this.buffer+" += "+f+";"),t.else_&&(this._emitLine("if (!"+a+".length) {"),this.compile(t.else_,e),this._emitLine("}")),this._emitLine("frame = frame.pop();")},i.compileAsyncEach=function(t,e){this._compileAsyncLoop(t,e)},i.compileAsyncAll=function(t,e){this._compileAsyncLoop(t,e,!0)},i._compileMacro=function(t,e){var n=this,r=[],i=null,u="macro_"+this._tmpid(),s=void 0!==e;t.args.children.forEach((function(e,u){u===t.args.children.length-1&&e instanceof o.Dict?i=e:(n.assertType(e,o.Symbol),r.push(e))}));var c,l=[].concat(r.map((function(t){return"l_"+t.value})),["kwargs"]),f=r.map((function(t){return'"'+t.value+'"'})),h=(i&&i.children||[]).map((function(t){return'"'+t.key.value+'"'}));c=s?e.push(!0):new a,this._emitLines("var "+u+" = runtime.makeMacro(","["+f.join(", ")+"], ","["+h.join(", ")+"], ","function ("+l.join(", ")+") {","var callerFrame = frame;","frame = "+(s?"frame.push(true);":"new runtime.Frame();"),"kwargs = kwargs || {};",'if (Object.prototype.hasOwnProperty.call(kwargs, "caller")) {','frame.set("caller", kwargs.caller); }'),r.forEach((function(t){n._emitLine('frame.set("'+t.value+'", l_'+t.value+");"),c.set(t.value,"l_"+t.value)})),i&&i.children.forEach((function(t){var e=t.key.value;n._emit('frame.set("'+e+'", '),n._emit('Object.prototype.hasOwnProperty.call(kwargs, "'+e+'")'),n._emit(' ? kwargs["'+e+'"] : '),n._compileExpression(t.value,c),n._emit(");")}));var p=this._pushBuffer();return this._withScopedSyntax((function(){n.compile(t.body,c)})),this._emitLine("frame = "+(s?"frame.pop();":"callerFrame;")),this._emitLine("return new runtime.SafeString("+p+");"),this._emitLine("});"),this._popBuffer(),u},i.compileMacro=function(t,e){var n=this._compileMacro(t),r=t.name.value;e.set(r,n),e.parent?this._emitLine('frame.set("'+r+'", '+n+");"):("_"!==t.name.value.charAt(0)&&this._emitLine('context.addExport("'+r+'");'),this._emitLine('context.setVariable("'+r+'", '+n+");"))},i.compileCaller=function(t,e){this._emit("(function (){");var n=this._compileMacro(t,e);this._emit("return "+n+";})()")},i._compileGetTemplate=function(t,e,n,r){var i=this._tmpid(),o=this._templateName(),u=this._makeCallback(i),a=n?"true":"false",s=r?"true":"false";return this._emit("env.getTemplate("),this._compileExpression(t.template,e),this._emitLine(", "+a+", "+o+", "+s+", "+u),i},i.compileImport=function(t,e){var n=t.target.value,r=this._compileGetTemplate(t,e,!1,!1);this._addScopeLevel(),this._emitLine(r+".getExported("+(t.withContext?"context.getVariables(), frame, ":"")+this._makeCallback(r)),this._addScopeLevel(),e.set(n,r),e.parent?this._emitLine('frame.set("'+n+'", '+r+");"):this._emitLine('context.setVariable("'+n+'", '+r+");")},i.compileFromImport=function(t,e){var n=this,r=this._compileGetTemplate(t,e,!1,!1);this._addScopeLevel(),this._emitLine(r+".getExported("+(t.withContext?"context.getVariables(), frame, ":"")+this._makeCallback(r)),this._addScopeLevel(),t.names.children.forEach((function(t){var i,u,a=n._tmpid();t instanceof o.Pair?(i=t.key.value,u=t.value.value):u=i=t.value,n._emitLine("if(Object.prototype.hasOwnProperty.call("+r+', "'+i+'")) {'),n._emitLine("var "+a+" = "+r+"."+i+";"),n._emitLine("} else {"),n._emitLine("cb(new Error(\"cannot import '"+i+"'\")); return;"),n._emitLine("}"),e.set(u,a),e.parent?n._emitLine('frame.set("'+u+'", '+a+");"):n._emitLine('context.setVariable("'+u+'", '+a+");")}))},i.compileBlock=function(t){var e=this._tmpid();this.inBlock||this._emit('(parentTemplate ? function(e, c, f, r, cb) { cb(""); } : '),this._emit('context.getBlock("'+t.name.value+'")'),this.inBlock||this._emit(")"),this._emitLine("(env, context, frame, runtime, "+this._makeCallback(e)),this._emitLine(this.buffer+" += "+e+";"),this._addScopeLevel()},i.compileSuper=function(t,e){var n=t.blockName.value,r=t.symbol.value,i=this._makeCallback(r);this._emitLine('context.getSuper(env, "'+n+'", b_'+n+", frame, runtime, "+i),this._emitLine(r+" = runtime.markSafe("+r+");"),this._addScopeLevel(),e.set(r,r)},i.compileExtends=function(t,e){var n=this._tmpid(),r=this._compileGetTemplate(t,e,!0,!1);this._emitLine("parentTemplate = "+r),this._emitLine("for(var "+n+" in parentTemplate.blocks) {"),this._emitLine("context.addBlock("+n+", parentTemplate.blocks["+n+"]);"),this._emitLine("}"),this._addScopeLevel()},i.compileInclude=function(t,e){this._emitLine("var tasks = [];"),this._emitLine("tasks.push("),this._emitLine("function(callback) {");var n=this._compileGetTemplate(t,e,!1,t.ignoreMissing);this._emitLine("callback(null,"+n+");});"),this._emitLine("});");var r=this._tmpid();this._emitLine("tasks.push("),this._emitLine("function(template, callback){"),this._emitLine("template.render(context.getVariables(), frame, "+this._makeCallback(r)),this._emitLine("callback(null,"+r+");});"),this._emitLine("});"),this._emitLine("tasks.push("),this._emitLine("function(result, callback){"),this._emitLine(this.buffer+" += result;"),this._emitLine("callback(null);"),this._emitLine("});"),this._emitLine("env.waterfall(tasks, function(){"),this._addScopeLevel()},i.compileTemplateData=function(t,e){this.compileLiteral(t,e)},i.compileCapture=function(t,e){var n=this,r=this.buffer;this.buffer="output",this._emitLine("(function() {"),this._emitLine('var output = "";'),this._withScopedSyntax((function(){n.compile(t.body,e)})),this._emitLine("return output;"),this._emitLine("})()"),this.buffer=r},i.compileOutput=function(t,e){var n=this;t.children.forEach((function(r){r instanceof o.TemplateData?r.value&&(n._emit(n.buffer+" += "),n.compileLiteral(r,e),n._emitLine(";")):(n._emit(n.buffer+" += runtime.suppressValue("),n.throwOnUndefined&&n._emit("runtime.ensureDefined("),n.compile(r,e),n.throwOnUndefined&&n._emit(","+t.lineno+","+t.colno+")"),n._emit(", env.opts.autoescape);\n"))}))},i.compileRoot=function(t,e){var n=this;e&&this.fail("compileRoot: root node can't have frame"),e=new a,this._emitFuncBegin(t,"root"),this._emitLine("var parentTemplate = null;"),this._compileChildren(t,e),this._emitLine("if(parentTemplate) {"),this._emitLine("parentTemplate.rootRenderFunc(env, context, frame, runtime, cb);"),this._emitLine("} else {"),this._emitLine("cb(null, "+this.buffer+");"),this._emitLine("}"),this._emitFuncEnd(!0),this.inBlock=!0;var r=[],i=t.findAll(o.Block);i.forEach((function(t,e){var i=t.name.value;if(-1!==r.indexOf(i))throw new Error('Block "'+i+'" defined more than once.');r.push(i),n._emitFuncBegin(t,"b_"+i);var o=new a;n._emitLine("var frame = frame.push(true);"),n.compile(t.body,o),n._emitFuncEnd()})),this._emitLine("return {"),i.forEach((function(t,e){var r="b_"+t.name.value;n._emitLine(r+": "+r+",")})),this._emitLine("root: root\n};")},i.compile=function(t,e){var n=this["compile"+t.typename];n?n.call(this,t,e):this.fail("compile: Cannot compile node: "+t.typename,t.lineno,t.colno)},i.getCode=function(){return this.codebuf.join("")},r}(s);t.exports={compile:function(t,e,n,o,u){void 0===u&&(u={});var a=new l(o,u.throwOnUndefined),s=(n||[]).map((function(t){return t.preprocess})).filter((function(t){return!!t})).reduce((function(t,e){return e(t)}),t);return a.compile(i.transform(r.parse(s,n,u),e,o)),a.getCode()},Compiler:l}},function(t,e,n){var r=n(4),i=n(1).EmitterObj;t.exports=function(t){var e,n;function i(){return t.apply(this,arguments)||this}n=t,(e=i).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n;var o=i.prototype;return o.resolve=function(t,e){return r.resolve(r.dirname(t),e)},o.isRelative=function(t){return 0===t.indexOf("./")||0===t.indexOf("../")},i}(i)},function(t,e,n){function r(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}var i=n(12),o=n(15),u=n(0),a=n(5),s=n(18),c=n(10),l=c.FileSystemLoader,f=c.WebLoader,h=c.PrecompiledLoader,p=n(20),d=n(21),v=n(1),m=v.Obj,y=v.EmitterObj,g=n(2),_=g.handleError,w=g.Frame,b=n(22);function k(t,e,n){i((function(){t(e,n)}))}var x={type:"code",obj:{root:function(t,e,n,r,i){try{i(null,"")}catch(t){i(_(t,null,null))}}}},E=function(t){function e(){return t.apply(this,arguments)||this}r(e,t);var n=e.prototype;return n.init=function(t,e){var n=this;e=this.opts=e||{},this.opts.dev=!!e.dev,this.opts.autoescape=null==e.autoescape||e.autoescape,this.opts.throwOnUndefined=!!e.throwOnUndefined,this.opts.trimBlocks=!!e.trimBlocks,this.opts.lstripBlocks=!!e.lstripBlocks,this.loaders=[],t?this.loaders=u.isArray(t)?t:[t]:l?this.loaders=[new l("views")]:f&&(this.loaders=[new f("/views")]),"undefined"!=typeof window&&window.nunjucksPrecompiled&&this.loaders.unshift(new h(window.nunjucksPrecompiled)),this._initLoaders(),this.globals=d(),this.filters={},this.tests={},this.asyncFilters=[],this.extensions={},this.extensionsList=[],u._entries(s).forEach((function(t){var e=t[0],r=t[1];return n.addFilter(e,r)})),u._entries(p).forEach((function(t){var e=t[0],r=t[1];return n.addTest(e,r)}))},n._initLoaders=function(){var t=this;this.loaders.forEach((function(e){e.cache={},"function"==typeof e.on&&(e.on("update",(function(n,r){e.cache[n]=null,t.emit("update",n,r,e)})),e.on("load",(function(n,r){t.emit("load",n,r,e)})))}))},n.invalidateCache=function(){this.loaders.forEach((function(t){t.cache={}}))},n.addExtension=function(t,e){return e.__name=t,this.extensions[t]=e,this.extensionsList.push(e),this},n.removeExtension=function(t){var e=this.getExtension(t);e&&(this.extensionsList=u.without(this.extensionsList,e),delete this.extensions[t])},n.getExtension=function(t){return this.extensions[t]},n.hasExtension=function(t){return!!this.extensions[t]},n.addGlobal=function(t,e){return this.globals[t]=e,this},n.getGlobal=function(t){if(void 0===this.globals[t])throw new Error("global not found: "+t);return this.globals[t]},n.addFilter=function(t,e,n){var r=e;return n&&this.asyncFilters.push(t),this.filters[t]=r,this},n.getFilter=function(t){if(!this.filters[t])throw new Error("filter not found: "+t);return this.filters[t]},n.addTest=function(t,e){return this.tests[t]=e,this},n.getTest=function(t){if(!this.tests[t])throw new Error("test not found: "+t);return this.tests[t]},n.resolveTemplate=function(t,e,n){return t.isRelative&&e&&t.isRelative(n)&&t.resolve?t.resolve(e,n):n},n.getTemplate=function(t,e,n,r,i){var o,a=this,s=this,c=null;if(t&&t.raw&&(t=t.raw),u.isFunction(n)&&(i=n,n=null,e=e||!1),u.isFunction(e)&&(i=e,e=!1),t instanceof O)c=t;else{if("string"!=typeof t)throw new Error("template names must be a string: "+t);for(var l=0;l<this.loaders.length;l++){var f=this.loaders[l];if(c=f.cache[this.resolveTemplate(f,n,t)])break}}return c?(e&&c.compile(),i?void i(null,c):c):(u.asyncIter(this.loaders,(function(e,r,i,o){function u(t,n){t?o(t):n?(n.loader=e,o(null,n)):i()}t=s.resolveTemplate(e,n,t),e.async?e.getSource(t,u):u(null,e.getSource(t))}),(function(n,u){if(u||n||r||(n=new Error("template not found: "+t)),n){if(i)return void i(n);throw n}var s;u?(s=new O(u.src,a,u.path,e),u.noCache||(u.loader.cache[t]=s)):s=new O(x,a,"",e),i?i(null,s):o=s})),o)},n.express=function(t){return b(this,t)},n.render=function(t,e,n){u.isFunction(e)&&(n=e,e=null);var r=null;return this.getTemplate(t,(function(t,i){if(t&&n)k(n,t);else{if(t)throw t;r=i.render(e,n)}})),r},n.renderString=function(t,e,n,r){return u.isFunction(n)&&(r=n,n={}),new O(t,this,(n=n||{}).path).render(e,r)},n.waterfall=function(t,e,n){return o(t,e,n)},e}(y),T=function(t){function e(){return t.apply(this,arguments)||this}r(e,t);var n=e.prototype;return n.init=function(t,e,n){var r=this;this.env=n||new E,this.ctx=u.extend({},t),this.blocks={},this.exported=[],u.keys(e).forEach((function(t){r.addBlock(t,e[t])}))},n.lookup=function(t){return t in this.env.globals&&!(t in this.ctx)?this.env.globals[t]:this.ctx[t]},n.setVariable=function(t,e){this.ctx[t]=e},n.getVariables=function(){return this.ctx},n.addBlock=function(t,e){return this.blocks[t]=this.blocks[t]||[],this.blocks[t].push(e),this},n.getBlock=function(t){if(!this.blocks[t])throw new Error('unknown block "'+t+'"');return this.blocks[t][0]},n.getSuper=function(t,e,n,r,i,o){var a=u.indexOf(this.blocks[e]||[],n),s=this.blocks[e][a+1];if(-1===a||!s)throw new Error('no super block available for "'+e+'"');s(t,this,r,i,o)},n.addExport=function(t){this.exported.push(t)},n.getExported=function(){var t=this,e={};return this.exported.forEach((function(n){e[n]=t.ctx[n]})),e},e}(m),O=function(t){function e(){return t.apply(this,arguments)||this}r(e,t);var n=e.prototype;return n.init=function(t,e,n,r){if(this.env=e||new E,u.isObject(t))switch(t.type){case"code":this.tmplProps=t.obj;break;case"string":this.tmplStr=t.obj;break;default:throw new Error("Unexpected template object type "+t.type+"; expected 'code', or 'string'")}else{if(!u.isString(t))throw new Error("src must be a string or an object describing the source");this.tmplStr=t}if(this.path=n,r)try{this._compile()}catch(t){throw u._prettifyError(this.path,this.env.opts.dev,t)}else this.compiled=!1},n.render=function(t,e,n){var r=this;"function"==typeof t?(n=t,t={}):"function"==typeof e&&(n=e,e=null);var i=!e;try{this.compile()}catch(t){var o=u._prettifyError(this.path,this.env.opts.dev,t);if(n)return k(n,o);throw o}var a=new T(t||{},this.blocks,this.env),s=e?e.push(!0):new w;s.topLevel=!0;var c=null,l=!1;return this.rootRenderFunc(this.env,a,s,g,(function(t,e){if(!l||!n||void 0===e)if(t&&(t=u._prettifyError(r.path,r.env.opts.dev,t),l=!0),n)i?k(n,t,e):n(t,e);else{if(t)throw t;c=e}})),c},n.getExported=function(t,e,n){"function"==typeof t&&(n=t,t={}),"function"==typeof e&&(n=e,e=null);try{this.compile()}catch(t){if(n)return n(t);throw t}var r=e?e.push():new w;r.topLevel=!0;var i=new T(t||{},this.blocks,this.env);this.rootRenderFunc(this.env,i,r,g,(function(t){t?n(t,null):n(null,i.getExported())}))},n.compile=function(){this.compiled||this._compile()},n._compile=function(){var t;if(this.tmplProps)t=this.tmplProps;else{var e=a.compile(this.tmplStr,this.env.asyncFilters,this.env.extensionsList,this.path,this.env.opts);t=new Function(e)()}this.blocks=this._getBlocks(t),this.rootRenderFunc=t.root,this.compiled=!0},n._getBlocks=function(t){var e={};return u.keys(t).forEach((function(n){"b_"===n.slice(0,2)&&(e[n.slice(2)]=t[n])})),e},e}(m);t.exports={Environment:E,Template:O}},function(t,e,n){var r=n(9),i=n(3),o=n(1).Obj,u=n(0),a=function(t){var e,n;function o(){return t.apply(this,arguments)||this}n=t,(e=o).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n;var a=o.prototype;return a.init=function(t){this.tokens=t,this.peeked=null,this.breakOnBlocks=null,this.dropLeadingWhitespace=!1,this.extensions=[]},a.nextToken=function(t){var e;if(this.peeked){if(t||this.peeked.type!==r.TOKEN_WHITESPACE)return e=this.peeked,this.peeked=null,e;this.peeked=null}if(e=this.tokens.nextToken(),!t)for(;e&&e.type===r.TOKEN_WHITESPACE;)e=this.tokens.nextToken();return e},a.peekToken=function(){return this.peeked=this.peeked||this.nextToken(),this.peeked},a.pushToken=function(t){if(this.peeked)throw new Error("pushToken: can only push one token on between reads");this.peeked=t},a.error=function(t,e,n){if(void 0===e||void 0===n){var r=this.peekToken()||{};e=r.lineno,n=r.colno}return void 0!==e&&(e+=1),void 0!==n&&(n+=1),new u.TemplateError(t,e,n)},a.fail=function(t,e,n){throw this.error(t,e,n)},a.skip=function(t){var e=this.nextToken();return!(!e||e.type!==t)||(this.pushToken(e),!1)},a.expect=function(t){var e=this.nextToken();return e.type!==t&&this.fail("expected "+t+", got "+e.type,e.lineno,e.colno),e},a.skipValue=function(t,e){var n=this.nextToken();return!(!n||n.type!==t||n.value!==e)||(this.pushToken(n),!1)},a.skipSymbol=function(t){return this.skipValue(r.TOKEN_SYMBOL,t)},a.advanceAfterBlockEnd=function(t){var e;return t||((e=this.peekToken())||this.fail("unexpected end of file"),e.type!==r.TOKEN_SYMBOL&&this.fail("advanceAfterBlockEnd: expected symbol token or explicit name to be passed"),t=this.nextToken().value),(e=this.nextToken())&&e.type===r.TOKEN_BLOCK_END?"-"===e.value.charAt(0)&&(this.dropLeadingWhitespace=!0):this.fail("expected block end in "+t+" statement"),e},a.advanceAfterVariableEnd=function(){var t=this.nextToken();t&&t.type===r.TOKEN_VARIABLE_END?this.dropLeadingWhitespace="-"===t.value.charAt(t.value.length-this.tokens.tags.VARIABLE_END.length-1):(this.pushToken(t),this.fail("expected variable end"))},a.parseFor=function(){var t,e,n=this.peekToken();if(this.skipSymbol("for")?(t=new i.For(n.lineno,n.colno),e="endfor"):this.skipSymbol("asyncEach")?(t=new i.AsyncEach(n.lineno,n.colno),e="endeach"):this.skipSymbol("asyncAll")?(t=new i.AsyncAll(n.lineno,n.colno),e="endall"):this.fail("parseFor: expected for{Async}",n.lineno,n.colno),t.name=this.parsePrimary(),t.name instanceof i.Symbol||this.fail("parseFor: variable name expected for loop"),this.peekToken().type===r.TOKEN_COMMA){var o=t.name;for(t.name=new i.Array(o.lineno,o.colno),t.name.addChild(o);this.skip(r.TOKEN_COMMA);){var u=this.parsePrimary();t.name.addChild(u)}}return this.skipSymbol("in")||this.fail('parseFor: expected "in" keyword for loop',n.lineno,n.colno),t.arr=this.parseExpression(),this.advanceAfterBlockEnd(n.value),t.body=this.parseUntilBlocks(e,"else"),this.skipSymbol("else")&&(this.advanceAfterBlockEnd("else"),t.else_=this.parseUntilBlocks(e)),this.advanceAfterBlockEnd(),t},a.parseMacro=function(){var t=this.peekToken();this.skipSymbol("macro")||this.fail("expected macro");var e=this.parsePrimary(!0),n=this.parseSignature(),r=new i.Macro(t.lineno,t.colno,e,n);return this.advanceAfterBlockEnd(t.value),r.body=this.parseUntilBlocks("endmacro"),this.advanceAfterBlockEnd(),r},a.parseCall=function(){var t=this.peekToken();this.skipSymbol("call")||this.fail("expected call");var e=this.parseSignature(!0)||new i.NodeList,n=this.parsePrimary();this.advanceAfterBlockEnd(t.value);var r=this.parseUntilBlocks("endcall");this.advanceAfterBlockEnd();var o=new i.Symbol(t.lineno,t.colno,"caller"),u=new i.Caller(t.lineno,t.colno,o,e,r),a=n.args.children;return a[a.length-1]instanceof i.KeywordArgs||a.push(new i.KeywordArgs),a[a.length-1].addChild(new i.Pair(t.lineno,t.colno,o,u)),new i.Output(t.lineno,t.colno,[n])},a.parseWithContext=function(){var t=this.peekToken(),e=null;return this.skipSymbol("with")?e=!0:this.skipSymbol("without")&&(e=!1),null!==e&&(this.skipSymbol("context")||this.fail("parseFrom: expected context after with/without",t.lineno,t.colno)),e},a.parseImport=function(){var t=this.peekToken();this.skipSymbol("import")||this.fail("parseImport: expected import",t.lineno,t.colno);var e=this.parseExpression();this.skipSymbol("as")||this.fail('parseImport: expected "as" keyword',t.lineno,t.colno);var n=this.parseExpression(),r=this.parseWithContext(),o=new i.Import(t.lineno,t.colno,e,n,r);return this.advanceAfterBlockEnd(t.value),o},a.parseFrom=function(){var t=this.peekToken();this.skipSymbol("from")||this.fail("parseFrom: expected from");var e=this.parseExpression();this.skipSymbol("import")||this.fail("parseFrom: expected import",t.lineno,t.colno);for(var n,o=new i.NodeList;;){var u=this.peekToken();if(u.type===r.TOKEN_BLOCK_END){o.children.length||this.fail("parseFrom: Expected at least one import name",t.lineno,t.colno),"-"===u.value.charAt(0)&&(this.dropLeadingWhitespace=!0),this.nextToken();break}o.children.length>0&&!this.skip(r.TOKEN_COMMA)&&this.fail("parseFrom: expected comma",t.lineno,t.colno);var a=this.parsePrimary();if("_"===a.value.charAt(0)&&this.fail("parseFrom: names starting with an underscore cannot be imported",a.lineno,a.colno),this.skipSymbol("as")){var s=this.parsePrimary();o.addChild(new i.Pair(a.lineno,a.colno,a,s))}else o.addChild(a);n=this.parseWithContext()}return new i.FromImport(t.lineno,t.colno,e,o,n)},a.parseBlock=function(){var t=this.peekToken();this.skipSymbol("block")||this.fail("parseBlock: expected block",t.lineno,t.colno);var e=new i.Block(t.lineno,t.colno);e.name=this.parsePrimary(),e.name instanceof i.Symbol||this.fail("parseBlock: variable name expected",t.lineno,t.colno),this.advanceAfterBlockEnd(t.value),e.body=this.parseUntilBlocks("endblock"),this.skipSymbol("endblock"),this.skipSymbol(e.name.value);var n=this.peekToken();return n||this.fail("parseBlock: expected endblock, got end of file"),this.advanceAfterBlockEnd(n.value),e},a.parseExtends=function(){var t="extends",e=this.peekToken();this.skipSymbol(t)||this.fail("parseTemplateRef: expected extends");var n=new i.Extends(e.lineno,e.colno);return n.template=this.parseExpression(),this.advanceAfterBlockEnd(e.value),n},a.parseInclude=function(){var t="include",e=this.peekToken();this.skipSymbol(t)||this.fail("parseInclude: expected include");var n=new i.Include(e.lineno,e.colno);return n.template=this.parseExpression(),this.skipSymbol("ignore")&&this.skipSymbol("missing")&&(n.ignoreMissing=!0),this.advanceAfterBlockEnd(e.value),n},a.parseIf=function(){var t,e=this.peekToken();this.skipSymbol("if")||this.skipSymbol("elif")||this.skipSymbol("elseif")?t=new i.If(e.lineno,e.colno):this.skipSymbol("ifAsync")?t=new i.IfAsync(e.lineno,e.colno):this.fail("parseIf: expected if, elif, or elseif",e.lineno,e.colno),t.cond=this.parseExpression(),this.advanceAfterBlockEnd(e.value),t.body=this.parseUntilBlocks("elif","elseif","else","endif");var n=this.peekToken();switch(n&&n.value){case"elseif":case"elif":t.else_=this.parseIf();break;case"else":this.advanceAfterBlockEnd(),t.else_=this.parseUntilBlocks("endif"),this.advanceAfterBlockEnd();break;case"endif":t.else_=null,this.advanceAfterBlockEnd();break;default:this.fail("parseIf: expected elif, else, or endif, got end of file")}return t},a.parseSet=function(){var t=this.peekToken();this.skipSymbol("set")||this.fail("parseSet: expected set",t.lineno,t.colno);for(var e,n=new i.Set(t.lineno,t.colno,[]);(e=this.parsePrimary())&&(n.targets.push(e),this.skip(r.TOKEN_COMMA)););return this.skipValue(r.TOKEN_OPERATOR,"=")?(n.value=this.parseExpression(),this.advanceAfterBlockEnd(t.value)):this.skip(r.TOKEN_BLOCK_END)?(n.body=new i.Capture(t.lineno,t.colno,this.parseUntilBlocks("endset")),n.value=null,this.advanceAfterBlockEnd()):this.fail("parseSet: expected = or block end in set tag",t.lineno,t.colno),n},a.parseSwitch=function(){var t="switch",e="endswitch",n="case",r="default",o=this.peekToken();this.skipSymbol(t)||this.skipSymbol(n)||this.skipSymbol(r)||this.fail('parseSwitch: expected "switch," "case" or "default"',o.lineno,o.colno);var u=this.parseExpression();this.advanceAfterBlockEnd(t),this.parseUntilBlocks(n,r,e);var a,s=this.peekToken(),c=[];do{this.skipSymbol(n);var l=this.parseExpression();this.advanceAfterBlockEnd(t);var f=this.parseUntilBlocks(n,r,e);c.push(new i.Case(s.line,s.col,l,f)),s=this.peekToken()}while(s&&s.value===n);switch(s.value){case r:this.advanceAfterBlockEnd(),a=this.parseUntilBlocks(e),this.advanceAfterBlockEnd();break;case e:this.advanceAfterBlockEnd();break;default:this.fail('parseSwitch: expected "case," "default" or "endswitch," got EOF.')}return new i.Switch(o.lineno,o.colno,u,c,a)},a.parseStatement=function(){var t=this.peekToken();if(t.type!==r.TOKEN_SYMBOL&&this.fail("tag name expected",t.lineno,t.colno),this.breakOnBlocks&&-1!==u.indexOf(this.breakOnBlocks,t.value))return null;switch(t.value){case"raw":return this.parseRaw();case"verbatim":return this.parseRaw("verbatim");case"if":case"ifAsync":return this.parseIf();case"for":case"asyncEach":case"asyncAll":return this.parseFor();case"block":return this.parseBlock();case"extends":return this.parseExtends();case"include":return this.parseInclude();case"set":return this.parseSet();case"macro":return this.parseMacro();case"call":return this.parseCall();case"import":return this.parseImport();case"from":return this.parseFrom();case"filter":return this.parseFilterStatement();case"switch":return this.parseSwitch();default:if(this.extensions.length)for(var e=0;e<this.extensions.length;e++){var n=this.extensions[e];if(-1!==u.indexOf(n.tags||[],t.value))return n.parse(this,i,r)}this.fail("unknown block tag: "+t.value,t.lineno,t.colno)}},a.parseRaw=function(t){for(var e="end"+(t=t||"raw"),n=new RegExp("([\\s\\S]*?){%\\s*("+t+"|"+e+")\\s*(?=%})%}"),r=1,o="",u=null,a=this.advanceAfterBlockEnd();(u=this.tokens._extractRegex(n))&&r>0;){var s=u[0],c=u[1],l=u[2];l===t?r+=1:l===e&&(r-=1),0===r?(o+=c,this.tokens.backN(s.length-c.length)):o+=s}return new i.Output(a.lineno,a.colno,[new i.TemplateData(a.lineno,a.colno,o)])},a.parsePostfix=function(t){for(var e,n=this.peekToken();n;){if(n.type===r.TOKEN_LEFT_PAREN)t=new i.FunCall(n.lineno,n.colno,t,this.parseSignature());else if(n.type===r.TOKEN_LEFT_BRACKET)(e=this.parseAggregate()).children.length>1&&this.fail("invalid index"),t=new i.LookupVal(n.lineno,n.colno,t,e.children[0]);else{if(n.type!==r.TOKEN_OPERATOR||"."!==n.value)break;this.nextToken();var o=this.nextToken();o.type!==r.TOKEN_SYMBOL&&this.fail("expected name as lookup value, got "+o.value,o.lineno,o.colno),e=new i.Literal(o.lineno,o.colno,o.value),t=new i.LookupVal(n.lineno,n.colno,t,e)}n=this.peekToken()}return t},a.parseExpression=function(){return this.parseInlineIf()},a.parseInlineIf=function(){var t=this.parseOr();if(this.skipSymbol("if")){var e=this.parseOr(),n=t;(t=new i.InlineIf(t.lineno,t.colno)).body=n,t.cond=e,this.skipSymbol("else")?t.else_=this.parseOr():t.else_=null}return t},a.parseOr=function(){for(var t=this.parseAnd();this.skipSymbol("or");){var e=this.parseAnd();t=new i.Or(t.lineno,t.colno,t,e)}return t},a.parseAnd=function(){for(var t=this.parseNot();this.skipSymbol("and");){var e=this.parseNot();t=new i.And(t.lineno,t.colno,t,e)}return t},a.parseNot=function(){var t=this.peekToken();return this.skipSymbol("not")?new i.Not(t.lineno,t.colno,this.parseNot()):this.parseIn()},a.parseIn=function(){for(var t=this.parseIs();;){var e=this.nextToken();if(!e)break;var n=e.type===r.TOKEN_SYMBOL&&"not"===e.value;if(n||this.pushToken(e),!this.skipSymbol("in")){n&&this.pushToken(e);break}var o=this.parseIs();t=new i.In(t.lineno,t.colno,t,o),n&&(t=new i.Not(t.lineno,t.colno,t))}return t},a.parseIs=function(){var t=this.parseCompare();if(this.skipSymbol("is")){var e=this.skipSymbol("not"),n=this.parseCompare();t=new i.Is(t.lineno,t.colno,t,n),e&&(t=new i.Not(t.lineno,t.colno,t))}return t},a.parseCompare=function(){for(var t=["==","===","!=","!==","<",">","<=",">="],e=this.parseConcat(),n=[];;){var r=this.nextToken();if(!r)break;if(-1===t.indexOf(r.value)){this.pushToken(r);break}n.push(new i.CompareOperand(r.lineno,r.colno,this.parseConcat(),r.value))}return n.length?new i.Compare(n[0].lineno,n[0].colno,e,n):e},a.parseConcat=function(){for(var t=this.parseAdd();this.skipValue(r.TOKEN_TILDE,"~");){var e=this.parseAdd();t=new i.Concat(t.lineno,t.colno,t,e)}return t},a.parseAdd=function(){for(var t=this.parseSub();this.skipValue(r.TOKEN_OPERATOR,"+");){var e=this.parseSub();t=new i.Add(t.lineno,t.colno,t,e)}return t},a.parseSub=function(){for(var t=this.parseMul();this.skipValue(r.TOKEN_OPERATOR,"-");){var e=this.parseMul();t=new i.Sub(t.lineno,t.colno,t,e)}return t},a.parseMul=function(){for(var t=this.parseDiv();this.skipValue(r.TOKEN_OPERATOR,"*");){var e=this.parseDiv();t=new i.Mul(t.lineno,t.colno,t,e)}return t},a.parseDiv=function(){for(var t=this.parseFloorDiv();this.skipValue(r.TOKEN_OPERATOR,"/");){var e=this.parseFloorDiv();t=new i.Div(t.lineno,t.colno,t,e)}return t},a.parseFloorDiv=function(){for(var t=this.parseMod();this.skipValue(r.TOKEN_OPERATOR,"//");){var e=this.parseMod();t=new i.FloorDiv(t.lineno,t.colno,t,e)}return t},a.parseMod=function(){for(var t=this.parsePow();this.skipValue(r.TOKEN_OPERATOR,"%");){var e=this.parsePow();t=new i.Mod(t.lineno,t.colno,t,e)}return t},a.parsePow=function(){for(var t=this.parseUnary();this.skipValue(r.TOKEN_OPERATOR,"**");){var e=this.parseUnary();t=new i.Pow(t.lineno,t.colno,t,e)}return t},a.parseUnary=function(t){var e,n=this.peekToken();return e=this.skipValue(r.TOKEN_OPERATOR,"-")?new i.Neg(n.lineno,n.colno,this.parseUnary(!0)):this.skipValue(r.TOKEN_OPERATOR,"+")?new i.Pos(n.lineno,n.colno,this.parseUnary(!0)):this.parsePrimary(),t||(e=this.parseFilter(e)),e},a.parsePrimary=function(t){var e,n=this.nextToken(),o=null;if(n?n.type===r.TOKEN_STRING?e=n.value:n.type===r.TOKEN_INT?e=parseInt(n.value,10):n.type===r.TOKEN_FLOAT?e=parseFloat(n.value):n.type===r.TOKEN_BOOLEAN?"true"===n.value?e=!0:"false"===n.value?e=!1:this.fail("invalid boolean: "+n.value,n.lineno,n.colno):n.type===r.TOKEN_NONE?e=null:n.type===r.TOKEN_REGEX&&(e=new RegExp(n.value.body,n.value.flags)):this.fail("expected expression, got end of file"),void 0!==e?o=new i.Literal(n.lineno,n.colno,e):n.type===r.TOKEN_SYMBOL?o=new i.Symbol(n.lineno,n.colno,n.value):(this.pushToken(n),o=this.parseAggregate()),t||(o=this.parsePostfix(o)),o)return o;throw this.error("unexpected token: "+n.value,n.lineno,n.colno)},a.parseFilterName=function(){for(var t=this.expect(r.TOKEN_SYMBOL),e=t.value;this.skipValue(r.TOKEN_OPERATOR,".");)e+="."+this.expect(r.TOKEN_SYMBOL).value;return new i.Symbol(t.lineno,t.colno,e)},a.parseFilterArgs=function(t){return this.peekToken().type===r.TOKEN_LEFT_PAREN?this.parsePostfix(t).args.children:[]},a.parseFilter=function(t){for(;this.skip(r.TOKEN_PIPE);){var e=this.parseFilterName();t=new i.Filter(e.lineno,e.colno,e,new i.NodeList(e.lineno,e.colno,[t].concat(this.parseFilterArgs(t))))}return t},a.parseFilterStatement=function(){var t=this.peekToken();this.skipSymbol("filter")||this.fail("parseFilterStatement: expected filter");var e=this.parseFilterName(),n=this.parseFilterArgs(e);this.advanceAfterBlockEnd(t.value);var r=new i.Capture(e.lineno,e.colno,this.parseUntilBlocks("endfilter"));this.advanceAfterBlockEnd();var o=new i.Filter(e.lineno,e.colno,e,new i.NodeList(e.lineno,e.colno,[r].concat(n)));return new i.Output(e.lineno,e.colno,[o])},a.parseAggregate=function(){var t,e=this.nextToken();switch(e.type){case r.TOKEN_LEFT_PAREN:t=new i.Group(e.lineno,e.colno);break;case r.TOKEN_LEFT_BRACKET:t=new i.Array(e.lineno,e.colno);break;case r.TOKEN_LEFT_CURLY:t=new i.Dict(e.lineno,e.colno);break;default:return null}for(;;){var n=this.peekToken().type;if(n===r.TOKEN_RIGHT_PAREN||n===r.TOKEN_RIGHT_BRACKET||n===r.TOKEN_RIGHT_CURLY){this.nextToken();break}if(t.children.length>0&&(this.skip(r.TOKEN_COMMA)||this.fail("parseAggregate: expected comma after expression",e.lineno,e.colno)),t instanceof i.Dict){var o=this.parsePrimary();this.skip(r.TOKEN_COLON)||this.fail("parseAggregate: expected colon after dict key",e.lineno,e.colno);var u=this.parseExpression();t.addChild(new i.Pair(o.lineno,o.colno,o,u))}else{var a=this.parseExpression();t.addChild(a)}}return t},a.parseSignature=function(t,e){var n=this.peekToken();if(!e&&n.type!==r.TOKEN_LEFT_PAREN){if(t)return null;this.fail("expected arguments",n.lineno,n.colno)}n.type===r.TOKEN_LEFT_PAREN&&(n=this.nextToken());for(var o=new i.NodeList(n.lineno,n.colno),u=new i.KeywordArgs(n.lineno,n.colno),a=!1;;){if(n=this.peekToken(),!e&&n.type===r.TOKEN_RIGHT_PAREN){this.nextToken();break}if(e&&n.type===r.TOKEN_BLOCK_END)break;if(a&&!this.skip(r.TOKEN_COMMA))this.fail("parseSignature: expected comma after expression",n.lineno,n.colno);else{var s=this.parseExpression();this.skipValue(r.TOKEN_OPERATOR,"=")?u.addChild(new i.Pair(s.lineno,s.colno,s,this.parseExpression())):o.addChild(s)}a=!0}return u.children.length&&o.addChild(u),o},a.parseUntilBlocks=function(){for(var t=this.breakOnBlocks,e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];this.breakOnBlocks=n;var i=this.parse();return this.breakOnBlocks=t,i},a.parseNodes=function(){for(var t,e=[];t=this.nextToken();)if(t.type===r.TOKEN_DATA){var n=t.value,o=this.peekToken(),u=o&&o.value;this.dropLeadingWhitespace&&(n=n.replace(/^\s*/,""),this.dropLeadingWhitespace=!1),o&&(o.type===r.TOKEN_BLOCK_START&&"-"===u.charAt(u.length-1)||o.type===r.TOKEN_VARIABLE_START&&"-"===u.charAt(this.tokens.tags.VARIABLE_START.length)||o.type===r.TOKEN_COMMENT&&"-"===u.charAt(this.tokens.tags.COMMENT_START.length))&&(n=n.replace(/\s*$/,"")),e.push(new i.Output(t.lineno,t.colno,[new i.TemplateData(t.lineno,t.colno,n)]))}else if(t.type===r.TOKEN_BLOCK_START){this.dropLeadingWhitespace=!1;var a=this.parseStatement();if(!a)break;e.push(a)}else if(t.type===r.TOKEN_VARIABLE_START){var s=this.parseExpression();this.dropLeadingWhitespace=!1,this.advanceAfterVariableEnd(),e.push(new i.Output(t.lineno,t.colno,[s]))}else t.type===r.TOKEN_COMMENT?this.dropLeadingWhitespace="-"===t.value.charAt(t.value.length-this.tokens.tags.COMMENT_END.length-1):this.fail("Unexpected token at top-level: "+t.type,t.lineno,t.colno);return e},a.parse=function(){return new i.NodeList(0,0,this.parseNodes())},a.parseAsRoot=function(){return new i.Root(0,0,this.parseNodes())},o}(o);t.exports={parse:function(t,e,n){var i=new a(r.lex(t,n));return void 0!==e&&(i.extensions=e),i.parseAsRoot()},Parser:a}},function(t,e,n){var r=n(0),i=" \n\t\r ",o="()[]{}%*-+~/#,:|.<>=!",u="string",a="whitespace",s="data",c="block-start",l="block-end",f="variable-start",h="variable-end",p="comment",d="left-paren",v="right-paren",m="left-bracket",y="right-bracket",g="left-curly",_="right-curly",w="operator",b="comma",k="colon",x="tilde",E="pipe",T="float",O="boolean",S="none",L="symbol",A="regex";function N(t,e,n,r){return{type:t,value:e,lineno:n,colno:r}}var C=function(){function t(t,e){this.str=t,this.index=0,this.len=t.length,this.lineno=0,this.colno=0,this.in_code=!1;var n=(e=e||{}).tags||{};this.tags={BLOCK_START:n.blockStart||"{%",BLOCK_END:n.blockEnd||"%}",VARIABLE_START:n.variableStart||"{{",VARIABLE_END:n.variableEnd||"}}",COMMENT_START:n.commentStart||"{#",COMMENT_END:n.commentEnd||"#}"},this.trimBlocks=!!e.trimBlocks,this.lstripBlocks=!!e.lstripBlocks}var e=t.prototype;return e.nextToken=function(){var t,e=this.lineno,n=this.colno;if(this.in_code){var C=this.current();if(this.isFinished())return null;if('"'===C||"'"===C)return N(u,this._parseString(C),e,n);if(t=this._extract(i))return N(a,t,e,n);if((t=this._extractString(this.tags.BLOCK_END))||(t=this._extractString("-"+this.tags.BLOCK_END)))return this.in_code=!1,this.trimBlocks&&("\n"===(C=this.current())?this.forward():"\r"===C&&(this.forward(),"\n"===(C=this.current())?this.forward():this.back())),N(l,t,e,n);if((t=this._extractString(this.tags.VARIABLE_END))||(t=this._extractString("-"+this.tags.VARIABLE_END)))return this.in_code=!1,N(h,t,e,n);if("r"===C&&"/"===this.str.charAt(this.index+1)){this.forwardN(2);for(var M="";!this.isFinished();){if("/"===this.current()&&"\\"!==this.previous()){this.forward();break}M+=this.current(),this.forward()}for(var I=["g","i","m","y"],j="";!this.isFinished()&&-1!==I.indexOf(this.current());)j+=this.current(),this.forward();return N(A,{body:M,flags:j},e,n)}if(-1!==o.indexOf(C)){this.forward();var R,F=["==","===","!=","!==","<=",">=","//","**"],D=C+this.current();switch(-1!==r.indexOf(F,D)&&(this.forward(),C=D,-1!==r.indexOf(F,D+this.current())&&(C=D+this.current(),this.forward())),C){case"(":R=d;break;case")":R=v;break;case"[":R=m;break;case"]":R=y;break;case"{":R=g;break;case"}":R=_;break;case",":R=b;break;case":":R=k;break;case"~":R=x;break;case"|":R=E;break;default:R=w}return N(R,C,e,n)}if((t=this._extractUntil(i+o)).match(/^[-+]?[0-9]+$/)){if("."===this.current()){this.forward();var P=this._extract("0123456789");return N(T,t+"."+P,e,n)}return N("int",t,e,n)}if(t.match(/^(true|false)$/))return N(O,t,e,n);if("none"===t)return N(S,t,e,n);if("null"===t)return N(S,t,e,n);if(t)return N(L,t,e,n);throw new Error("Unexpected value while parsing: "+t)}var V,B=this.tags.BLOCK_START.charAt(0)+this.tags.VARIABLE_START.charAt(0)+this.tags.COMMENT_START.charAt(0)+this.tags.COMMENT_END.charAt(0);if(this.isFinished())return null;if((t=this._extractString(this.tags.BLOCK_START+"-"))||(t=this._extractString(this.tags.BLOCK_START)))return this.in_code=!0,N(c,t,e,n);if((t=this._extractString(this.tags.VARIABLE_START+"-"))||(t=this._extractString(this.tags.VARIABLE_START)))return this.in_code=!0,N(f,t,e,n);t="";var z=!1;for(this._matches(this.tags.COMMENT_START)&&(z=!0,t=this._extractString(this.tags.COMMENT_START));null!==(V=this._extractUntil(B));){if(t+=V,(this._matches(this.tags.BLOCK_START)||this._matches(this.tags.VARIABLE_START)||this._matches(this.tags.COMMENT_START))&&!z){if(this.lstripBlocks&&this._matches(this.tags.BLOCK_START)&&this.colno>0&&this.colno<=t.length){var K=t.slice(-this.colno);if(/^\s+$/.test(K)&&!(t=t.slice(0,-this.colno)).length)return this.nextToken()}break}if(this._matches(this.tags.COMMENT_END)){if(!z)throw new Error("unexpected end of comment");t+=this._extractString(this.tags.COMMENT_END);break}t+=this.current(),this.forward()}if(null===V&&z)throw new Error("expected end of comment, got end of file");return N(z?p:s,t,e,n)},e._parseString=function(t){this.forward();for(var e="";!this.isFinished()&&this.current()!==t;){var n=this.current();if("\\"===n){switch(this.forward(),this.current()){case"n":e+="\n";break;case"t":e+="\t";break;case"r":e+="\r";break;default:e+=this.current()}this.forward()}else e+=n,this.forward()}return this.forward(),e},e._matches=function(t){return this.index+t.length>this.len?null:this.str.slice(this.index,this.index+t.length)===t},e._extractString=function(t){return this._matches(t)?(this.forwardN(t.length),t):null},e._extractUntil=function(t){return this._extractMatching(!0,t||"")},e._extract=function(t){return this._extractMatching(!1,t)},e._extractMatching=function(t,e){if(this.isFinished())return null;var n=e.indexOf(this.current());if(t&&-1===n||!t&&-1!==n){var r=this.current();this.forward();for(var i=e.indexOf(this.current());(t&&-1===i||!t&&-1!==i)&&!this.isFinished();)r+=this.current(),this.forward(),i=e.indexOf(this.current());return r}return""},e._extractRegex=function(t){var e=this.currentStr().match(t);return e?(this.forwardN(e[0].length),e):null},e.isFinished=function(){return this.index>=this.len},e.forwardN=function(t){for(var e=0;e<t;e++)this.forward()},e.forward=function(){this.index++,"\n"===this.previous()?(this.lineno++,this.colno=0):this.colno++},e.backN=function(t){for(var e=0;e<t;e++)this.back()},e.back=function(){if(this.index--,"\n"===this.current()){this.lineno--;var t=this.src.lastIndexOf("\n",this.index-1);this.colno=-1===t?this.index:this.index-t}else this.colno--},e.current=function(){return this.isFinished()?"":this.str.charAt(this.index)},e.currentStr=function(){return this.isFinished()?"":this.str.substr(this.index)},e.previous=function(){return this.str.charAt(this.index-1)},t}();t.exports={lex:function(t,e){return new C(t,e)},TOKEN_STRING:u,TOKEN_WHITESPACE:a,TOKEN_DATA:s,TOKEN_BLOCK_START:c,TOKEN_BLOCK_END:l,TOKEN_VARIABLE_START:f,TOKEN_VARIABLE_END:h,TOKEN_COMMENT:p,TOKEN_LEFT_PAREN:d,TOKEN_RIGHT_PAREN:v,TOKEN_LEFT_BRACKET:m,TOKEN_RIGHT_BRACKET:y,TOKEN_LEFT_CURLY:g,TOKEN_RIGHT_CURLY:_,TOKEN_OPERATOR:w,TOKEN_COMMA:b,TOKEN_COLON:k,TOKEN_TILDE:x,TOKEN_PIPE:E,TOKEN_INT:"int",TOKEN_FLOAT:T,TOKEN_BOOLEAN:O,TOKEN_NONE:S,TOKEN_SYMBOL:L,TOKEN_SPECIAL:"special",TOKEN_REGEX:A}},function(t,e,n){var r=n(6),i=n(19).PrecompiledLoader,o=function(t){var e,n;function r(e,n){var r;return(r=t.call(this)||this).baseURL=e||".",n=n||{},r.useCache=!!n.useCache,r.async=!!n.async,r}n=t,(e=r).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n;var i=r.prototype;return i.resolve=function(t,e){throw new Error("relative templates not support in the browser yet")},i.getSource=function(t,e){var n,r=this,i=this.useCache;return this.fetch(this.baseURL+"/"+t,(function(o,u){if(o)if(e)e(o.content);else{if(404!==o.status)throw o.content;n=null}else n={src:u,path:t,noCache:!i},r.emit("load",t,n),e&&e(null,n)})),n},i.fetch=function(t,e){if("undefined"==typeof window)throw new Error("WebLoader can only by used in a browser");var n=new XMLHttpRequest,r=!0;n.onreadystatechange=function(){4===n.readyState&&r&&(r=!1,0===n.status||200===n.status?e(null,n.responseText):e({status:n.status,content:n.responseText}))},t+=(-1===t.indexOf("?")?"?":"&")+"s="+(new Date).getTime(),n.open("GET",t,this.async),n.send()},r}(r);t.exports={WebLoader:o,PrecompiledLoader:i}},function(t,e,n){var r,i=n(0),o=n(7),u=o.Environment,a=o.Template,s=n(6),c=n(10),l=n(23),f=n(5),h=n(8),p=n(9),d=n(2),v=n(3),m=n(25);function y(t,e){var n;return e=e||{},i.isObject(t)&&(e=t,t=null),c.FileSystemLoader?n=new c.FileSystemLoader(t,{watch:e.watch,noCache:e.noCache}):c.WebLoader&&(n=new c.WebLoader(t,{useCache:e.web&&e.web.useCache,async:e.web&&e.web.async})),r=new u(n,e),e&&e.express&&r.express(e.express),r}t.exports={Environment:u,Template:a,Loader:s,FileSystemLoader:c.FileSystemLoader,NodeResolveLoader:c.NodeResolveLoader,PrecompiledLoader:c.PrecompiledLoader,WebLoader:c.WebLoader,compiler:f,parser:h,lexer:p,runtime:d,lib:i,nodes:v,installJinjaCompat:m,configure:y,reset:function(){r=void 0},compile:function(t,e,n,i){return r||y(),new a(t,e,n,i)},render:function(t,e,n){return r||y(),r.render(t,e,n)},renderString:function(t,e,n){return r||y(),r.renderString(t,e,n)},precompile:l?l.precompile:void 0,precompileString:l?l.precompileString:void 0}},function(t,e,n){var r=n(13),i=[],o=[],u=r.makeRequestCallFromTimer((function(){if(o.length)throw o.shift()}));function a(t){var e;(e=i.length?i.pop():new s).task=t,r(e)}function s(){this.task=null}t.exports=a,s.prototype.call=function(){try{this.task.call()}catch(t){a.onerror?a.onerror(t):(o.push(t),u())}finally{this.task=null,i[i.length]=this}}},function(t,e,n){(function(e){function n(t){i.length||r(),i[i.length]=t}t.exports=n;var r,i=[],o=0;function u(){for(;o<i.length;){var t=o;if(o+=1,i[t].call(),o>1024){for(var e=0,n=i.length-o;e<n;e++)i[e]=i[e+o];i.length-=o,o=0}}i.length=0,o=0}var a,s,c,l=void 0!==e?e:self,f=l.MutationObserver||l.WebKitMutationObserver;function h(t){return function(){var e=setTimeout(r,0),n=setInterval(r,50);function r(){clearTimeout(e),clearInterval(n),t()}}}"function"==typeof f?(a=1,s=new f(u),c=document.createTextNode(""),s.observe(c,{characterData:!0}),r=function(){a=-a,c.data=a}):r=h(u),n.requestFlush=r,n.makeRequestCallFromTimer=h}).call(e,n(14))},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r,i,o,u,a;i=function(){var t=Array.prototype.slice.call(arguments);"function"==typeof t[0]&&t[0].apply(null,t.splice(1))},o=function(t){"function"==typeof setImmediate?setImmediate(t):"undefined"!=typeof process&&process.nextTick?process.nextTick(t):setTimeout(t,0)},u=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)},a=function(t,e,n){var r=n?o:i;if(e=e||function(){},!u(t)){var a=new Error("First argument to waterfall must be an array of functions");return e(a)}if(!t.length)return e();var s=function(t){return function(n){if(n)e.apply(null,arguments),e=function(){};else{var i=Array.prototype.slice.call(arguments,1),o=t.next();o?i.push(s(o)):i.push(e),r((function(){t.apply(null,i)}))}}};s(function(t){var e=function(n){var r=function(){return t.length&&t[n].apply(null,arguments),r.next()};return r.next=function(){return n<t.length-1?e(n+1):null},r};return e(0)}(t))()},void 0===(r=function(){return a}.apply(e,[]))||(t.exports=r)},function(t,e,n){var r,i="object"==typeof Reflect?Reflect:null,o=i&&"function"==typeof i.apply?i.apply:function(t,e,n){return Function.prototype.apply.call(t,e,n)};r=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var u=Number.isNaN||function(t){return t!=t};function a(){a.init.call(this)}t.exports=a,a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var s=10;function c(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function l(t){return void 0===t._maxListeners?a.defaultMaxListeners:t._maxListeners}function f(t,e,n,r){var i,o,u,a;if(c(n),void 0===(o=t._events)?(o=t._events=Object.create(null),t._eventsCount=0):(void 0!==o.newListener&&(t.emit("newListener",e,n.listener?n.listener:n),o=t._events),u=o[e]),void 0===u)u=o[e]=n,++t._eventsCount;else if("function"==typeof u?u=o[e]=r?[n,u]:[u,n]:r?u.unshift(n):u.push(n),(i=l(t))>0&&u.length>i&&!u.warned){u.warned=!0;var s=new Error("Possible EventEmitter memory leak detected. "+u.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");s.name="MaxListenersExceededWarning",s.emitter=t,s.type=e,s.count=u.length,a=s,console&&console.warn&&console.warn(a)}return t}function h(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function p(t,e,n){var r={fired:!1,wrapFn:void 0,target:t,type:e,listener:n},i=h.bind(r);return i.listener=n,r.wrapFn=i,i}function d(t,e,n){var r=t._events;if(void 0===r)return[];var i=r[e];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(t){for(var e=new Array(t.length),n=0;n<e.length;++n)e[n]=t[n].listener||t[n];return e}(i):m(i,i.length)}function v(t){var e=this._events;if(void 0!==e){var n=e[t];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function m(t,e){for(var n=new Array(e),r=0;r<e;++r)n[r]=t[r];return n}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return s},set:function(t){if("number"!=typeof t||t<0||u(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");s=t}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||u(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},a.prototype.getMaxListeners=function(){return l(this)},a.prototype.emit=function(t){for(var e=[],n=1;n<arguments.length;n++)e.push(arguments[n]);var r="error"===t,i=this._events;if(void 0!==i)r=r&&void 0===i.error;else if(!r)return!1;if(r){var u;if(e.length>0&&(u=e[0]),u instanceof Error)throw u;var a=new Error("Unhandled error."+(u?" ("+u.message+")":""));throw a.context=u,a}var s=i[t];if(void 0===s)return!1;if("function"==typeof s)o(s,this,e);else{var c=s.length,l=m(s,c);for(n=0;n<c;++n)o(l[n],this,e)}return!0},a.prototype.addListener=function(t,e){return f(this,t,e,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(t,e){return f(this,t,e,!0)},a.prototype.once=function(t,e){return c(e),this.on(t,p(this,t,e)),this},a.prototype.prependOnceListener=function(t,e){return c(e),this.prependListener(t,p(this,t,e)),this},a.prototype.removeListener=function(t,e){var n,r,i,o,u;if(c(e),void 0===(r=this._events))return this;if(void 0===(n=r[t]))return this;if(n===e||n.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete r[t],r.removeListener&&this.emit("removeListener",t,n.listener||e));else if("function"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===e||n[o].listener===e){u=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(n,i),1===n.length&&(r[t]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",t,u||e)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(t){var e,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[t]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)"removeListener"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=n[t]))this.removeListener(t,e);else if(void 0!==e)for(r=e.length-1;r>=0;r--)this.removeListener(t,e[r]);return this},a.prototype.listeners=function(t){return d(this,t,!0)},a.prototype.rawListeners=function(t){return d(this,t,!1)},a.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):v.call(t,e)},a.prototype.listenerCount=v,a.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},function(t,e,n){var r=n(3),i=n(0),o=0;function u(){return"hole_"+o++}function a(t,e){for(var n=null,r=0;r<t.length;r++){var i=e(t[r]);i!==t[r]&&(n||(n=t.slice()),n[r]=i)}return n||t}function s(t,e,n){if(!(t instanceof r.Node))return t;if(!n){var i=e(t);if(i&&i!==t)return i}if(t instanceof r.NodeList){var o=a(t.children,(function(t){return s(t,e,n)}));o!==t.children&&(t=new r[t.typename](t.lineno,t.colno,o))}else if(t instanceof r.CallExtension){var u=s(t.args,e,n),c=a(t.contentArgs,(function(t){return s(t,e,n)}));u===t.args&&c===t.contentArgs||(t=new r[t.typename](t.extName,t.prop,u,c))}else{var l=t.fields.map((function(e){return t[e]})),f=a(l,(function(t){return s(t,e,n)}));f!==l&&(t=new r[t.typename](t.lineno,t.colno),f.forEach((function(e,n){t[t.fields[n]]=e})))}return n&&e(t)||t}function c(t,e){return s(t,e,!0)}function l(t,e,n){var o=[],a=c(n?t[n]:t,(function(t){var n;return t instanceof r.Block?t:((t instanceof r.Filter&&-1!==i.indexOf(e,t.name.value)||t instanceof r.CallExtensionAsync)&&(n=new r.Symbol(t.lineno,t.colno,u()),o.push(new r.FilterAsync(t.lineno,t.colno,t.name,t.args,n))),n)}));return n?t[n]=a:t=a,o.length?(o.push(t),new r.NodeList(t.lineno,t.colno,o)):t}function f(t,e){return function(t){return c(t,(function(t){if(t instanceof r.If||t instanceof r.For){var e=!1;if(s(t,(function(t){if(t instanceof r.FilterAsync||t instanceof r.IfAsync||t instanceof r.AsyncEach||t instanceof r.AsyncAll||t instanceof r.CallExtensionAsync)return e=!0,t})),e){if(t instanceof r.If)return new r.IfAsync(t.lineno,t.colno,t.cond,t.body,t.else_);if(t instanceof r.For&&!(t instanceof r.AsyncAll))return new r.AsyncEach(t.lineno,t.colno,t.arr,t.name,t.body,t.else_)}}}))}(function(t){return s(t,(function(t){if(t instanceof r.Block){var e=!1,n=u();t.body=s(t.body,(function(t){if(t instanceof r.FunCall&&"super"===t.name.value)return e=!0,new r.Symbol(t.lineno,t.colno,n)})),e&&t.body.children.unshift(new r.Super(0,0,t.name,new r.Symbol(0,0,n)))}}))}(function(t,e){return c(t,(function(t){return t instanceof r.Output?l(t,e):t instanceof r.Set?l(t,e,"value"):t instanceof r.For?l(t,e,"arr"):t instanceof r.If?l(t,e,"cond"):t instanceof r.CallExtension?l(t,e,"args"):void 0}))}(t,e)))}t.exports={transform:function(t,e){return f(t,e||[])}}},function(t,e,n){var r=n(0),i=n(2);function o(t,e){return null==t||!1===t?e:t}function u(t){return t!=t}function a(t){var e=(t=o(t,"")).toLowerCase();return i.copySafeness(t,e.charAt(0).toUpperCase()+e.slice(1))}function s(t){if(r.isString(t))return t.split("");if(r.isObject(t))return r._entries(t||{}).map((function(t){return{key:t[0],value:t[1]}}));if(r.isArray(t))return t;throw new r.TemplateError("list filter: type not iterable")}function c(t){return function(e,n,i){void 0===n&&(n="truthy");var o=this,u=o.env.getTest(n);return r.toArray(e).filter((function(e){return u.call(o,e,i)===t}))}}function l(t){return i.copySafeness(t,t.replace(/^\s*|\s*$/g,""))}(e=t.exports={}).abs=Math.abs,e.batch=function(t,e,n){var r,i=[],o=[];for(r=0;r<t.length;r++)r%e==0&&o.length&&(i.push(o),o=[]),o.push(t[r]);if(o.length){if(n)for(r=o.length;r<e;r++)o.push(n);i.push(o)}return i},e.capitalize=a,e.center=function(t,e){if(e=e||80,(t=o(t,"")).length>=e)return t;var n=e-t.length,u=r.repeat(" ",n/2-n%2),a=r.repeat(" ",n/2);return i.copySafeness(t,u+t+a)},e.default=function(t,e,n){return n?t||e:void 0!==t?t:e},e.dictsort=function(t,e,n){if(!r.isObject(t))throw new r.TemplateError("dictsort filter: val must be an object");var i,o=[];for(var u in t)o.push([u,t[u]]);if(void 0===n||"key"===n)i=0;else{if("value"!==n)throw new r.TemplateError("dictsort filter: You can only sort by either key or value");i=1}return o.sort((function(t,n){var o=t[i],u=n[i];return e||(r.isString(o)&&(o=o.toUpperCase()),r.isString(u)&&(u=u.toUpperCase())),o>u?1:o===u?0:-1})),o},e.dump=function(t,e){return JSON.stringify(t,null,e)},e.escape=function(t){return t instanceof i.SafeString?t:(t=null==t?"":t,i.markSafe(r.escape(t.toString())))},e.safe=function(t){return t instanceof i.SafeString?t:(t=null==t?"":t,i.markSafe(t.toString()))},e.first=function(t){return t[0]},e.forceescape=function(t){return t=null==t?"":t,i.markSafe(r.escape(t.toString()))},e.groupby=function(t,e){return r.groupBy(t,e,this.env.opts.throwOnUndefined)},e.indent=function(t,e,n){if(""===(t=o(t,"")))return"";e=e||4;var u=t.split("\n"),a=r.repeat(" ",e),s=u.map((function(t,e){return 0!==e||n?""+a+t:t})).join("\n");return i.copySafeness(t,s)},e.join=function(t,e,n){return e=e||"",n&&(t=r.map(t,(function(t){return t[n]}))),t.join(e)},e.last=function(t){return t[t.length-1]},e.length=function(t){var e=o(t,"");return void 0!==e?"function"==typeof Map&&e instanceof Map||"function"==typeof Set&&e instanceof Set?e.size:!r.isObject(e)||e instanceof i.SafeString?e.length:r.keys(e).length:0},e.list=s,e.lower=function(t){return(t=o(t,"")).toLowerCase()},e.nl2br=function(t){return null==t?"":i.copySafeness(t,t.replace(/\r\n|\n/g,"<br />\n"))},e.random=function(t){return t[Math.floor(Math.random()*t.length)]},e.reject=c(!1),e.rejectattr=function(t,e){return t.filter((function(t){return!t[e]}))},e.select=c(!0),e.selectattr=function(t,e){return t.filter((function(t){return!!t[e]}))},e.replace=function(t,e,n,r){var o=t;if(e instanceof RegExp)return t.replace(e,n);void 0===r&&(r=-1);var u="";if("number"==typeof e)e=""+e;else if("string"!=typeof e)return t;if("number"==typeof t&&(t=""+t),"string"!=typeof t&&!(t instanceof i.SafeString))return t;if(""===e)return u=n+t.split("").join(n)+n,i.copySafeness(t,u);var a=t.indexOf(e);if(0===r||-1===a)return t;for(var s=0,c=0;a>-1&&(-1===r||c<r);)u+=t.substring(s,a)+n,s=a+e.length,c++,a=t.indexOf(e,s);return s<t.length&&(u+=t.substring(s)),i.copySafeness(o,u)},e.reverse=function(t){var e;return(e=r.isString(t)?s(t):r.map(t,(function(t){return t}))).reverse(),r.isString(t)?i.copySafeness(t,e.join("")):e},e.round=function(t,e,n){e=e||0;var r=Math.pow(10,e);return("ceil"===n?Math.ceil:"floor"===n?Math.floor:Math.round)(t*r)/r},e.slice=function(t,e,n){for(var r=Math.floor(t.length/e),i=t.length%e,o=[],u=0,a=0;a<e;a++){var s=u+a*r;a<i&&u++;var c=u+(a+1)*r,l=t.slice(s,c);n&&a>=i&&l.push(n),o.push(l)}return o},e.sum=function(t,e,n){return void 0===n&&(n=0),e&&(t=r.map(t,(function(t){return t[e]}))),n+t.reduce((function(t,e){return t+e}),0)},e.sort=i.makeMacro(["value","reverse","case_sensitive","attribute"],[],(function(t,e,n,i){var o=r.map(t,(function(t){return t}));return o.sort((function(t,o){var u=i?t[i]:t,a=i?o[i]:o;return!n&&r.isString(u)&&r.isString(a)&&(u=u.toLowerCase(),a=a.toLowerCase()),u<a?e?1:-1:u>a?e?-1:1:0})),o})),e.string=function(t){return i.copySafeness(t,t)},e.striptags=function(t,e){var n=l((t=o(t,"")).replace(/<\/?([a-z][a-z0-9]*)\b[^>]*>|<!--[\s\S]*?-->/gi,"")),r="";return r=e?n.replace(/^ +| +$/gm,"").replace(/ +/g," ").replace(/(\r\n)/g,"\n").replace(/\n\n\n+/g,"\n\n"):n.replace(/\s+/gi," "),i.copySafeness(t,r)},e.title=function(t){var e=(t=o(t,"")).split(" ").map((function(t){return a(t)}));return i.copySafeness(t,e.join(" "))},e.trim=l,e.truncate=function(t,e,n,r){var u=t;if(e=e||255,(t=o(t,"")).length<=e)return t;if(n)t=t.substring(0,e);else{var a=t.lastIndexOf(" ",e);-1===a&&(a=e),t=t.substring(0,a)}return t+=null!=r?r:"...",i.copySafeness(u,t)},e.upper=function(t){return(t=o(t,"")).toUpperCase()},e.urlencode=function(t){var e=encodeURIComponent;return r.isString(t)?e(t):(r.isArray(t)?t:r._entries(t)).map((function(t){var n=t[0],r=t[1];return e(n)+"="+e(r)})).join("&")};var f=/^(?:\(|<|&lt;)?(.*?)(?:\.|,|\)|\n|&gt;)?$/,h=/^[\w.!#$%&'*+\-\/=?\^`{|}~]+@[a-z\d\-]+(\.[a-z\d\-]+)+$/i,p=/^https?:\/\/.*$/,d=/^www\./,v=/\.(?:org|net|com)(?:\:|\/|$)/;e.urlize=function(t,e,n){u(e)&&(e=1/0);var r=!0===n?' rel="nofollow"':"";return t.split(/(\s+)/).filter((function(t){return t&&t.length})).map((function(t){var n=t.match(f),i=n?n[1]:t,o=i.substr(0,e);return p.test(i)?'<a href="'+i+'"'+r+">"+o+"</a>":d.test(i)?'<a href="http://'+i+'"'+r+">"+o+"</a>":h.test(i)?'<a href="mailto:'+i+'">'+i+"</a>":v.test(i)?'<a href="http://'+i+'"'+r+">"+o+"</a>":t})).join("")},e.wordcount=function(t){var e=(t=o(t,""))?t.match(/\w+/g):null;return e?e.length:null},e.float=function(t,e){var n=parseFloat(t);return u(n)?e:n},e.int=function(t,e){var n=parseInt(t,10);return u(n)?e:n},e.d=e.default,e.e=e.escape},function(t,e,n){var r=function(t){var e,n;function r(e){var n;return(n=t.call(this)||this).precompiled=e||{},n}return n=t,(e=r).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n,r.prototype.getSource=function(t){return this.precompiled[t]?{src:{type:"code",obj:this.precompiled[t]},path:t}:null},r}(n(6));t.exports={PrecompiledLoader:r}},function(t,e,n){var r=n(2).SafeString;e.callable=function(t){return"function"==typeof t},e.defined=function(t){return void 0!==t},e.divisibleby=function(t,e){return t%e==0},e.escaped=function(t){return t instanceof r},e.equalto=function(t,e){return t===e},e.eq=e.equalto,e.sameas=e.equalto,e.even=function(t){return t%2==0},e.falsy=function(t){return!t},e.ge=function(t,e){return t>=e},e.greaterthan=function(t,e){return t>e},e.gt=e.greaterthan,e.le=function(t,e){return t<=e},e.lessthan=function(t,e){return t<e},e.lt=e.lessthan,e.lower=function(t){return t.toLowerCase()===t},e.ne=function(t,e){return t!==e},e.null=function(t){return null===t},e.number=function(t){return"number"==typeof t},e.odd=function(t){return t%2==1},e.string=function(t){return"string"==typeof t},e.truthy=function(t){return!!t},e.undefined=function(t){return void 0===t},e.upper=function(t){return t.toUpperCase()===t},e.iterable=function(t){return"undefined"!=typeof Symbol?!!t[Symbol.iterator]:Array.isArray(t)||"string"==typeof t},e.mapping=function(t){var e=null!=t&&"object"==typeof t&&!Array.isArray(t);return Set?e&&!(t instanceof Set):e}},function(t,e,n){function r(t){var e=-1;return{current:null,reset:function(){e=-1,this.current=null},next:function(){return++e>=t.length&&(e=0),this.current=t[e],this.current}}}t.exports=function(){return{range:function(t,e,n){void 0===e?(e=t,t=0,n=1):n||(n=1);var r=[];if(n>0)for(var i=t;i<e;i+=n)r.push(i);else for(var o=t;o>e;o+=n)r.push(o);return r},cycler:function(){return r(Array.prototype.slice.call(arguments))},joiner:function(t){return function(t){t=t||",";var e=!0;return function(){var n=e?"":t;return e=!1,n}}(t)}}}},function(t,e,n){var r=n(4);t.exports=function(t,e){function n(t,e){if(this.name=t,this.path=t,this.defaultEngine=e.defaultEngine,this.ext=r.extname(t),!this.ext&&!this.defaultEngine)throw new Error("No default engine was specified and no extension was provided.");this.ext||(this.name+=this.ext=("."!==this.defaultEngine[0]?".":"")+this.defaultEngine)}return n.prototype.render=function(e,n){t.render(this.name,e,n)},e.set("view",n),e.set("nunjucksEnv",t),t}},function(t,e,n){var r=n(4),i=n(4),o=n(0)._prettifyError,u=n(5),a=n(7).Environment,s=n(24);function c(t,e){return!!Array.isArray(e)&&e.some((function(e){return t.match(e)}))}function l(t,e){(e=e||{}).isString=!0;var n=e.env||new a([]),r=e.wrapper||s;if(!e.name)throw new Error('the "name" option is required when compiling a string');return r([f(t,e.name,n)],e)}function f(t,e,n){var r,i=(n=n||new a([])).asyncFilters,s=n.extensionsList;e=e.replace(/\\/g,"/");try{r=u.compile(t,i,s,e,n.opts)}catch(t){throw o(e,!1,t)}return{name:e,template:r}}t.exports={precompile:function(t,e){var n=(e=e||{}).env||new a([]),o=e.wrapper||s;if(e.isString)return l(t,e);var u=r.existsSync(t)&&r.statSync(t),h=[],p=[];if(u.isFile())h.push(f(r.readFileSync(t,"utf-8"),e.name||t,n));else if(u.isDirectory()){!function n(o){r.readdirSync(o).forEach((function(u){var a=i.join(o,u),s=a.substr(i.join(t,"/").length),l=r.statSync(a);l&&l.isDirectory()?c(s+="/",e.exclude)||n(a):c(s,e.include)&&p.push(a)}))}(t);for(var d=0;d<p.length;d++){var v=p[d].replace(i.join(t,"/"),"");try{h.push(f(r.readFileSync(p[d],"utf-8"),v,n))}catch(t){if(!e.force)throw t;console.error(t)}}}return o(h,e)},precompileString:l}},function(t,e,n){t.exports=function(t,e){var n="";e=e||{};for(var r=0;r<t.length;r++){var i=JSON.stringify(t[r].name);n+="(function() {(window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["+i+"] = (function() {\n"+t[r].template+"\n})();\n",e.asFunction&&(n+="return function(ctx, cb) { return nunjucks.render("+i+", ctx, cb); }\n"),n+="})();\n"}return n}},function(t,e,n){t.exports=function(){var t,e,n=this.runtime,r=this.lib,i=this.compiler.Compiler,o=this.parser.Parser,u=this.nodes,a=this.lexer,s=n.contextOrFrameLookup,c=n.memberLookup;function l(t){return{index:t.index,lineno:t.lineno,colno:t.colno}}if(i&&(t=i.prototype.assertType),o&&(e=o.prototype.parseAggregate),n.contextOrFrameLookup=function(t,e,n){var r=s.apply(this,arguments);if(void 0!==r)return r;switch(n){case"True":return!0;case"False":return!1;case"None":return null;default:return}},u&&i&&o){var f=u.Node.extend("Slice",{fields:["start","stop","step"],init:function(t,e,n,r,i){n=n||new u.Literal(t,e,null),r=r||new u.Literal(t,e,null),i=i||new u.Literal(t,e,1),this.parent(t,e,n,r,i)}});i.prototype.assertType=function(e){e instanceof f||t.apply(this,arguments)},i.prototype.compileSlice=function(t,e){this._emit("("),this._compileExpression(t.start,e),this._emit("),("),this._compileExpression(t.stop,e),this._emit("),("),this._compileExpression(t.step,e),this._emit(")")},o.prototype.parseAggregate=function(){var t=this,n=l(this.tokens);n.colno--,n.index--;try{return e.apply(this)}catch(e){var i=l(this.tokens),o=function(){return r._assign(t.tokens,i),e};r._assign(this.tokens,n),this.peeked=!1;var s=this.peekToken();if(s.type!==a.TOKEN_LEFT_BRACKET)throw o();this.nextToken();for(var c=new f(s.lineno,s.colno),h=!1,p=0;p<=c.fields.length&&!this.skip(a.TOKEN_RIGHT_BRACKET);p++){if(p===c.fields.length){if(!h)break;this.fail("parseSlice: too many slice components",s.lineno,s.colno)}this.skip(a.TOKEN_COLON)?h=!0:(c[c.fields[p]]=this.parseExpression(),h=this.skip(a.TOKEN_COLON)||h)}if(!h)throw o();return new u.Array(s.lineno,s.colno,[c])}}}function h(t,e,r,i){t=t||[],null===e&&(e=i<0?t.length-1:0),null===r?r=i<0?-1:t.length:r<0&&(r+=t.length),e<0&&(e+=t.length);for(var o=[],u=e;!(u<0||u>t.length||i>0&&u>=r||i<0&&u<=r);u+=i)o.push(n.memberLookup(t,u));return o}function p(t,e){return Object.prototype.hasOwnProperty.call(t,e)}var d={pop:function(t){if(void 0===t)return this.pop();if(t>=this.length||t<0)throw new Error("KeyError");return this.splice(t,1)},append:function(t){return this.push(t)},remove:function(t){for(var e=0;e<this.length;e++)if(this[e]===t)return this.splice(e,1);throw new Error("ValueError")},count:function(t){for(var e=0,n=0;n<this.length;n++)this[n]===t&&e++;return e},index:function(t){var e;if(-1===(e=this.indexOf(t)))throw new Error("ValueError");return e},find:function(t){return this.indexOf(t)},insert:function(t,e){return this.splice(t,0,e)}},v={items:function(){return r._entries(this)},values:function(){return r._values(this)},keys:function(){return r.keys(this)},get:function(t,e){var n=this[t];return void 0===n&&(n=e),n},has_key:function(t){return p(this,t)},pop:function(t,e){var n=this[t];if(void 0===n&&void 0!==e)n=e;else{if(void 0===n)throw new Error("KeyError");delete this[t]}return n},popitem:function(){var t=r.keys(this);if(!t.length)throw new Error("KeyError");var e=t[0],n=this[e];return delete this[e],[e,n]},setdefault:function(t,e){return void 0===e&&(e=null),t in this||(this[t]=e),this[t]},update:function(t){return r._assign(this,t),null}};return v.iteritems=v.items,v.itervalues=v.values,v.iterkeys=v.keys,n.memberLookup=function(t,e,n){return 4===arguments.length?h.apply(this,arguments):(t=t||{},r.isArray(t)&&p(d,e)?d[e].bind(t):r.isObject(t)&&p(v,e)?v[e].bind(t):c.apply(this,arguments))},function(){n.contextOrFrameLookup=s,n.memberLookup=c,i&&(i.prototype.assertType=t),o&&(o.prototype.parseAggregate=e)}}}])},t.exports=n()})),G=m((function(t,e){(function(){var n,r="Expected a function",i="__lodash_hash_undefined__",o="__lodash_placeholder__",u=16,a=32,s=64,c=128,l=256,f=1/0,h=9007199254740991,p=NaN,d=4294967295,m=[["ary",c],["bind",1],["bindKey",2],["curry",8],["curryRight",u],["flip",512],["partial",a],["partialRight",s],["rearg",l]],y="[object Arguments]",g="[object Array]",_="[object Boolean]",w="[object Date]",b="[object Error]",k="[object Function]",x="[object GeneratorFunction]",E="[object Map]",T="[object Number]",O="[object Object]",S="[object Promise]",L="[object RegExp]",A="[object Set]",N="[object String]",C="[object Symbol]",M="[object WeakMap]",I="[object ArrayBuffer]",j="[object DataView]",R="[object Float32Array]",F="[object Float64Array]",D="[object Int8Array]",P="[object Int16Array]",V="[object Int32Array]",B="[object Uint8Array]",z="[object Uint8ClampedArray]",K="[object Uint16Array]",U="[object Uint32Array]",W=/\b__p \+= '';/g,Z=/\b(__p \+=) '' \+/g,q=/(__e\(.*?\)|\b__t\)) \+\n'';/g,H=/&(?:amp|lt|gt|quot|#39);/g,G=/[&<>"']/g,$=RegExp(H.source),Y=RegExp(G.source),J=/<%-([\s\S]+?)%>/g,Q=/<%([\s\S]+?)%>/g,X=/<%=([\s\S]+?)%>/g,tt=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,et=/^\w*$/,nt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,rt=/[\\^$.*+?()[\]{}|]/g,it=RegExp(rt.source),ot=/^\s+|\s+$/g,ut=/^\s+/,at=/\s+$/,st=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,ct=/\{\n\/\* \[wrapped with (.+)\] \*/,lt=/,? & /,ft=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ht=/\\(\\)?/g,pt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,dt=/\w*$/,vt=/^[-+]0x[0-9a-f]+$/i,mt=/^0b[01]+$/i,yt=/^\[object .+?Constructor\]$/,gt=/^0o[0-7]+$/i,_t=/^(?:0|[1-9]\d*)$/,wt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,bt=/($^)/,kt=/['\n\r\u2028\u2029\\]/g,xt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Et="\\u2700-\\u27bf",Tt="a-z\\xdf-\\xf6\\xf8-\\xff",Ot="A-Z\\xc0-\\xd6\\xd8-\\xde",St="\\ufe0e\\ufe0f",Lt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",At="['’]",Nt="[\\ud800-\\udfff]",Ct="["+Lt+"]",Mt="["+xt+"]",It="\\d+",jt="[\\u2700-\\u27bf]",Rt="["+Tt+"]",Ft="[^\\ud800-\\udfff"+Lt+It+Et+Tt+Ot+"]",Dt="\\ud83c[\\udffb-\\udfff]",Pt="[^\\ud800-\\udfff]",Vt="(?:\\ud83c[\\udde6-\\uddff]){2}",Bt="[\\ud800-\\udbff][\\udc00-\\udfff]",zt="["+Ot+"]",Kt="(?:"+Rt+"|"+Ft+")",Ut="(?:"+zt+"|"+Ft+")",Wt="(?:['’](?:d|ll|m|re|s|t|ve))?",Zt="(?:['’](?:D|LL|M|RE|S|T|VE))?",qt="(?:"+Mt+"|"+Dt+")"+"?",Ht="[\\ufe0e\\ufe0f]?",Gt=Ht+qt+("(?:\\u200d(?:"+[Pt,Vt,Bt].join("|")+")"+Ht+qt+")*"),$t="(?:"+[jt,Vt,Bt].join("|")+")"+Gt,Yt="(?:"+[Pt+Mt+"?",Mt,Vt,Bt,Nt].join("|")+")",Jt=RegExp(At,"g"),Qt=RegExp(Mt,"g"),Xt=RegExp(Dt+"(?="+Dt+")|"+Yt+Gt,"g"),te=RegExp([zt+"?"+Rt+"+"+Wt+"(?="+[Ct,zt,"$"].join("|")+")",Ut+"+"+Zt+"(?="+[Ct,zt+Kt,"$"].join("|")+")",zt+"?"+Kt+"+"+Wt,zt+"+"+Zt,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",It,$t].join("|"),"g"),ee=RegExp("[\\u200d\\ud800-\\udfff"+xt+St+"]"),ne=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,re=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],ie=-1,oe={};oe[R]=oe[F]=oe[D]=oe[P]=oe[V]=oe[B]=oe[z]=oe[K]=oe[U]=!0,oe[y]=oe[g]=oe[I]=oe[_]=oe[j]=oe[w]=oe[b]=oe[k]=oe[E]=oe[T]=oe[O]=oe[L]=oe[A]=oe[N]=oe[M]=!1;var ue={};ue[y]=ue[g]=ue[I]=ue[j]=ue[_]=ue[w]=ue[R]=ue[F]=ue[D]=ue[P]=ue[V]=ue[E]=ue[T]=ue[O]=ue[L]=ue[A]=ue[N]=ue[C]=ue[B]=ue[z]=ue[K]=ue[U]=!0,ue[b]=ue[k]=ue[M]=!1;var ae={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},se=parseFloat,ce=parseInt,le="object"==typeof v&&v&&v.Object===Object&&v,fe="object"==typeof self&&self&&self.Object===Object&&self,he=le||fe||Function("return this")(),pe=e&&!e.nodeType&&e,de=pe&&t&&!t.nodeType&&t,ve=de&&de.exports===pe,me=ve&&le.process,ye=function(){try{var t=de&&de.require&&de.require("util").types;return t||me&&me.binding&&me.binding("util")}catch(t){}}(),ge=ye&&ye.isArrayBuffer,_e=ye&&ye.isDate,we=ye&&ye.isMap,be=ye&&ye.isRegExp,ke=ye&&ye.isSet,xe=ye&&ye.isTypedArray;function Ee(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function Te(t,e,n,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var u=t[i];e(r,u,n(u),t)}return r}function Oe(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function Se(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function Le(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function Ae(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var u=t[n];e(u,n,t)&&(o[i++]=u)}return o}function Ne(t,e){return!!(null==t?0:t.length)&&Be(t,e,0)>-1}function Ce(t,e,n){for(var r=-1,i=null==t?0:t.length;++r<i;)if(n(e,t[r]))return!0;return!1}function Me(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}function Ie(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}function je(t,e,n,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(n=t[++i]);++i<o;)n=e(n,t[i],i,t);return n}function Re(t,e,n,r){var i=null==t?0:t.length;for(r&&i&&(n=t[--i]);i--;)n=e(n,t[i],i,t);return n}function Fe(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}var De=We("length");function Pe(t,e,n){var r;return n(t,(function(t,n,i){if(e(t,n,i))return r=n,!1})),r}function Ve(t,e,n,r){for(var i=t.length,o=n+(r?1:-1);r?o--:++o<i;)if(e(t[o],o,t))return o;return-1}function Be(t,e,n){return e==e?function(t,e,n){var r=n-1,i=t.length;for(;++r<i;)if(t[r]===e)return r;return-1}(t,e,n):Ve(t,Ke,n)}function ze(t,e,n,r){for(var i=n-1,o=t.length;++i<o;)if(r(t[i],e))return i;return-1}function Ke(t){return t!=t}function Ue(t,e){var n=null==t?0:t.length;return n?He(t,e)/n:p}function We(t){return function(e){return null==e?n:e[t]}}function Ze(t){return function(e){return null==t?n:t[e]}}function qe(t,e,n,r,i){return i(t,(function(t,i,o){n=r?(r=!1,t):e(n,t,i,o)})),n}function He(t,e){for(var r,i=-1,o=t.length;++i<o;){var u=e(t[i]);u!==n&&(r=r===n?u:r+u)}return r}function Ge(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function $e(t){return function(e){return t(e)}}function Ye(t,e){return Me(e,(function(e){return t[e]}))}function Je(t,e){return t.has(e)}function Qe(t,e){for(var n=-1,r=t.length;++n<r&&Be(e,t[n],0)>-1;);return n}function Xe(t,e){for(var n=t.length;n--&&Be(e,t[n],0)>-1;);return n}function tn(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}var en=Ze({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),nn=Ze({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function rn(t){return"\\"+ae[t]}function on(t){return ee.test(t)}function un(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n}function an(t,e){return function(n){return t(e(n))}}function sn(t,e){for(var n=-1,r=t.length,i=0,u=[];++n<r;){var a=t[n];a!==e&&a!==o||(t[n]=o,u[i++]=n)}return u}function cn(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}function ln(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=[t,t]})),n}function fn(t){return on(t)?function(t){var e=Xt.lastIndex=0;for(;Xt.test(t);)++e;return e}(t):De(t)}function hn(t){return on(t)?function(t){return t.match(Xt)||[]}(t):function(t){return t.split("")}(t)}var pn=Ze({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var dn=function t(e){var v,xt=(e=null==e?he:dn.defaults(he.Object(),e,dn.pick(he,re))).Array,Et=e.Date,Tt=e.Error,Ot=e.Function,St=e.Math,Lt=e.Object,At=e.RegExp,Nt=e.String,Ct=e.TypeError,Mt=xt.prototype,It=Ot.prototype,jt=Lt.prototype,Rt=e["__core-js_shared__"],Ft=It.toString,Dt=jt.hasOwnProperty,Pt=0,Vt=(v=/[^.]+$/.exec(Rt&&Rt.keys&&Rt.keys.IE_PROTO||""))?"Symbol(src)_1."+v:"",Bt=jt.toString,zt=Ft.call(Lt),Kt=he._,Ut=At("^"+Ft.call(Dt).replace(rt,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Wt=ve?e.Buffer:n,Zt=e.Symbol,qt=e.Uint8Array,Ht=Wt?Wt.allocUnsafe:n,Gt=an(Lt.getPrototypeOf,Lt),$t=Lt.create,Yt=jt.propertyIsEnumerable,Xt=Mt.splice,ee=Zt?Zt.isConcatSpreadable:n,ae=Zt?Zt.iterator:n,le=Zt?Zt.toStringTag:n,fe=function(){try{var t=ho(Lt,"defineProperty");return t({},"",{}),t}catch(t){}}(),pe=e.clearTimeout!==he.clearTimeout&&e.clearTimeout,de=Et&&Et.now!==he.Date.now&&Et.now,me=e.setTimeout!==he.setTimeout&&e.setTimeout,ye=St.ceil,De=St.floor,Ze=Lt.getOwnPropertySymbols,vn=Wt?Wt.isBuffer:n,mn=e.isFinite,yn=Mt.join,gn=an(Lt.keys,Lt),_n=St.max,wn=St.min,bn=Et.now,kn=e.parseInt,xn=St.random,En=Mt.reverse,Tn=ho(e,"DataView"),On=ho(e,"Map"),Sn=ho(e,"Promise"),Ln=ho(e,"Set"),An=ho(e,"WeakMap"),Nn=ho(Lt,"create"),Cn=An&&new An,Mn={},In=Bo(Tn),jn=Bo(On),Rn=Bo(Sn),Fn=Bo(Ln),Dn=Bo(An),Pn=Zt?Zt.prototype:n,Vn=Pn?Pn.valueOf:n,Bn=Pn?Pn.toString:n;function zn(t){if(ra(t)&&!qu(t)&&!(t instanceof Zn)){if(t instanceof Wn)return t;if(Dt.call(t,"__wrapped__"))return zo(t)}return new Wn(t)}var Kn=function(){function t(){}return function(e){if(!na(e))return{};if($t)return $t(e);t.prototype=e;var r=new t;return t.prototype=n,r}}();function Un(){}function Wn(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=n}function Zn(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=d,this.__views__=[]}function qn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Hn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Gn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function $n(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new Gn;++e<n;)this.add(t[e])}function Yn(t){var e=this.__data__=new Hn(t);this.size=e.size}function Jn(t,e){var n=qu(t),r=!n&&Zu(t),i=!n&&!r&&Yu(t),o=!n&&!r&&!i&&fa(t),u=n||r||i||o,a=u?Ge(t.length,Nt):[],s=a.length;for(var c in t)!e&&!Dt.call(t,c)||u&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||wo(c,s))||a.push(c);return a}function Qn(t){var e=t.length;return e?t[$r(0,e-1)]:n}function Xn(t,e){return Do(Ni(t),sr(e,0,t.length))}function tr(t){return Do(Ni(t))}function er(t,e,r){(r!==n&&!Ku(t[e],r)||r===n&&!(e in t))&&ur(t,e,r)}function nr(t,e,r){var i=t[e];Dt.call(t,e)&&Ku(i,r)&&(r!==n||e in t)||ur(t,e,r)}function rr(t,e){for(var n=t.length;n--;)if(Ku(t[n][0],e))return n;return-1}function ir(t,e,n,r){return pr(t,(function(t,i,o){e(r,t,n(t),o)})),r}function or(t,e){return t&&Ci(e,Ia(e),t)}function ur(t,e,n){"__proto__"==e&&fe?fe(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function ar(t,e){for(var r=-1,i=e.length,o=xt(i),u=null==t;++r<i;)o[r]=u?n:La(t,e[r]);return o}function sr(t,e,r){return t==t&&(r!==n&&(t=t<=r?t:r),e!==n&&(t=t>=e?t:e)),t}function cr(t,e,r,i,o,u){var a,s=1&e,c=2&e,l=4&e;if(r&&(a=o?r(t,i,o,u):r(t)),a!==n)return a;if(!na(t))return t;var f=qu(t);if(f){if(a=function(t){var e=t.length,n=new t.constructor(e);e&&"string"==typeof t[0]&&Dt.call(t,"index")&&(n.index=t.index,n.input=t.input);return n}(t),!s)return Ni(t,a)}else{var h=mo(t),p=h==k||h==x;if(Yu(t))return Ei(t,s);if(h==O||h==y||p&&!o){if(a=c||p?{}:go(t),!s)return c?function(t,e){return Ci(t,vo(t),e)}(t,function(t,e){return t&&Ci(e,ja(e),t)}(a,t)):function(t,e){return Ci(t,po(t),e)}(t,or(a,t))}else{if(!ue[h])return o?t:{};a=function(t,e,n){var r=t.constructor;switch(e){case I:return Ti(t);case _:case w:return new r(+t);case j:return function(t,e){var n=e?Ti(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case R:case F:case D:case P:case V:case B:case z:case K:case U:return Oi(t,n);case E:return new r;case T:case N:return new r(t);case L:return function(t){var e=new t.constructor(t.source,dt.exec(t));return e.lastIndex=t.lastIndex,e}(t);case A:return new r;case C:return i=t,Vn?Lt(Vn.call(i)):{}}var i}(t,h,s)}}u||(u=new Yn);var d=u.get(t);if(d)return d;u.set(t,a),sa(t)?t.forEach((function(n){a.add(cr(n,e,r,n,t,u))})):ia(t)&&t.forEach((function(n,i){a.set(i,cr(n,e,r,i,t,u))}));var v=f?n:(l?c?oo:io:c?ja:Ia)(t);return Oe(v||t,(function(n,i){v&&(n=t[i=n]),nr(a,i,cr(n,e,r,i,t,u))})),a}function lr(t,e,r){var i=r.length;if(null==t)return!i;for(t=Lt(t);i--;){var o=r[i],u=e[o],a=t[o];if(a===n&&!(o in t)||!u(a))return!1}return!0}function fr(t,e,i){if("function"!=typeof t)throw new Ct(r);return Io((function(){t.apply(n,i)}),e)}function hr(t,e,n,r){var i=-1,o=Ne,u=!0,a=t.length,s=[],c=e.length;if(!a)return s;n&&(e=Me(e,$e(n))),r?(o=Ce,u=!1):e.length>=200&&(o=Je,u=!1,e=new $n(e));t:for(;++i<a;){var l=t[i],f=null==n?l:n(l);if(l=r||0!==l?l:0,u&&f==f){for(var h=c;h--;)if(e[h]===f)continue t;s.push(l)}else o(e,f,r)||s.push(l)}return s}zn.templateSettings={escape:J,evaluate:Q,interpolate:X,variable:"",imports:{_:zn}},zn.prototype=Un.prototype,zn.prototype.constructor=zn,Wn.prototype=Kn(Un.prototype),Wn.prototype.constructor=Wn,Zn.prototype=Kn(Un.prototype),Zn.prototype.constructor=Zn,qn.prototype.clear=function(){this.__data__=Nn?Nn(null):{},this.size=0},qn.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},qn.prototype.get=function(t){var e=this.__data__;if(Nn){var r=e[t];return r===i?n:r}return Dt.call(e,t)?e[t]:n},qn.prototype.has=function(t){var e=this.__data__;return Nn?e[t]!==n:Dt.call(e,t)},qn.prototype.set=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=Nn&&e===n?i:e,this},Hn.prototype.clear=function(){this.__data__=[],this.size=0},Hn.prototype.delete=function(t){var e=this.__data__,n=rr(e,t);return!(n<0)&&(n==e.length-1?e.pop():Xt.call(e,n,1),--this.size,!0)},Hn.prototype.get=function(t){var e=this.__data__,r=rr(e,t);return r<0?n:e[r][1]},Hn.prototype.has=function(t){return rr(this.__data__,t)>-1},Hn.prototype.set=function(t,e){var n=this.__data__,r=rr(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},Gn.prototype.clear=function(){this.size=0,this.__data__={hash:new qn,map:new(On||Hn),string:new qn}},Gn.prototype.delete=function(t){var e=lo(this,t).delete(t);return this.size-=e?1:0,e},Gn.prototype.get=function(t){return lo(this,t).get(t)},Gn.prototype.has=function(t){return lo(this,t).has(t)},Gn.prototype.set=function(t,e){var n=lo(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},$n.prototype.add=$n.prototype.push=function(t){return this.__data__.set(t,i),this},$n.prototype.has=function(t){return this.__data__.has(t)},Yn.prototype.clear=function(){this.__data__=new Hn,this.size=0},Yn.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},Yn.prototype.get=function(t){return this.__data__.get(t)},Yn.prototype.has=function(t){return this.__data__.has(t)},Yn.prototype.set=function(t,e){var n=this.__data__;if(n instanceof Hn){var r=n.__data__;if(!On||r.length<199)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new Gn(r)}return n.set(t,e),this.size=n.size,this};var pr=ji(br),dr=ji(kr,!0);function vr(t,e){var n=!0;return pr(t,(function(t,r,i){return n=!!e(t,r,i)})),n}function mr(t,e,r){for(var i=-1,o=t.length;++i<o;){var u=t[i],a=e(u);if(null!=a&&(s===n?a==a&&!la(a):r(a,s)))var s=a,c=u}return c}function yr(t,e){var n=[];return pr(t,(function(t,r,i){e(t,r,i)&&n.push(t)})),n}function gr(t,e,n,r,i){var o=-1,u=t.length;for(n||(n=_o),i||(i=[]);++o<u;){var a=t[o];e>0&&n(a)?e>1?gr(a,e-1,n,r,i):Ie(i,a):r||(i[i.length]=a)}return i}var _r=Ri(),wr=Ri(!0);function br(t,e){return t&&_r(t,e,Ia)}function kr(t,e){return t&&wr(t,e,Ia)}function xr(t,e){return Ae(e,(function(e){return Xu(t[e])}))}function Er(t,e){for(var r=0,i=(e=wi(e,t)).length;null!=t&&r<i;)t=t[Vo(e[r++])];return r&&r==i?t:n}function Tr(t,e,n){var r=e(t);return qu(t)?r:Ie(r,n(t))}function Or(t){return null==t?t===n?"[object Undefined]":"[object Null]":le&&le in Lt(t)?function(t){var e=Dt.call(t,le),r=t[le];try{t[le]=n;var i=!0}catch(t){}var o=Bt.call(t);i&&(e?t[le]=r:delete t[le]);return o}(t):function(t){return Bt.call(t)}(t)}function Sr(t,e){return t>e}function Lr(t,e){return null!=t&&Dt.call(t,e)}function Ar(t,e){return null!=t&&e in Lt(t)}function Nr(t,e,r){for(var i=r?Ce:Ne,o=t[0].length,u=t.length,a=u,s=xt(u),c=1/0,l=[];a--;){var f=t[a];a&&e&&(f=Me(f,$e(e))),c=wn(f.length,c),s[a]=!r&&(e||o>=120&&f.length>=120)?new $n(a&&f):n}f=t[0];var h=-1,p=s[0];t:for(;++h<o&&l.length<c;){var d=f[h],v=e?e(d):d;if(d=r||0!==d?d:0,!(p?Je(p,v):i(l,v,r))){for(a=u;--a;){var m=s[a];if(!(m?Je(m,v):i(t[a],v,r)))continue t}p&&p.push(v),l.push(d)}}return l}function Cr(t,e,r){var i=null==(t=Ao(t,e=wi(e,t)))?t:t[Vo(Qo(e))];return null==i?n:Ee(i,t,r)}function Mr(t){return ra(t)&&Or(t)==y}function Ir(t,e,r,i,o){return t===e||(null==t||null==e||!ra(t)&&!ra(e)?t!=t&&e!=e:function(t,e,r,i,o,u){var a=qu(t),s=qu(e),c=a?g:mo(t),l=s?g:mo(e),f=(c=c==y?O:c)==O,h=(l=l==y?O:l)==O,p=c==l;if(p&&Yu(t)){if(!Yu(e))return!1;a=!0,f=!1}if(p&&!f)return u||(u=new Yn),a||fa(t)?no(t,e,r,i,o,u):function(t,e,n,r,i,o,u){switch(n){case j:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case I:return!(t.byteLength!=e.byteLength||!o(new qt(t),new qt(e)));case _:case w:case T:return Ku(+t,+e);case b:return t.name==e.name&&t.message==e.message;case L:case N:return t==e+"";case E:var a=un;case A:var s=1&r;if(a||(a=cn),t.size!=e.size&&!s)return!1;var c=u.get(t);if(c)return c==e;r|=2,u.set(t,e);var l=no(a(t),a(e),r,i,o,u);return u.delete(t),l;case C:if(Vn)return Vn.call(t)==Vn.call(e)}return!1}(t,e,c,r,i,o,u);if(!(1&r)){var d=f&&Dt.call(t,"__wrapped__"),v=h&&Dt.call(e,"__wrapped__");if(d||v){var m=d?t.value():t,k=v?e.value():e;return u||(u=new Yn),o(m,k,r,i,u)}}if(!p)return!1;return u||(u=new Yn),function(t,e,r,i,o,u){var a=1&r,s=io(t),c=s.length,l=io(e).length;if(c!=l&&!a)return!1;var f=c;for(;f--;){var h=s[f];if(!(a?h in e:Dt.call(e,h)))return!1}var p=u.get(t),d=u.get(e);if(p&&d)return p==e&&d==t;var v=!0;u.set(t,e),u.set(e,t);var m=a;for(;++f<c;){var y=t[h=s[f]],g=e[h];if(i)var _=a?i(g,y,h,e,t,u):i(y,g,h,t,e,u);if(!(_===n?y===g||o(y,g,r,i,u):_)){v=!1;break}m||(m="constructor"==h)}if(v&&!m){var w=t.constructor,b=e.constructor;w==b||!("constructor"in t)||!("constructor"in e)||"function"==typeof w&&w instanceof w&&"function"==typeof b&&b instanceof b||(v=!1)}return u.delete(t),u.delete(e),v}(t,e,r,i,o,u)}(t,e,r,i,Ir,o))}function jr(t,e,r,i){var o=r.length,u=o,a=!i;if(null==t)return!u;for(t=Lt(t);o--;){var s=r[o];if(a&&s[2]?s[1]!==t[s[0]]:!(s[0]in t))return!1}for(;++o<u;){var c=(s=r[o])[0],l=t[c],f=s[1];if(a&&s[2]){if(l===n&&!(c in t))return!1}else{var h=new Yn;if(i)var p=i(l,f,c,t,e,h);if(!(p===n?Ir(f,l,3,i,h):p))return!1}}return!0}function Rr(t){return!(!na(t)||(e=t,Vt&&Vt in e))&&(Xu(t)?Ut:yt).test(Bo(t));var e}function Fr(t){return"function"==typeof t?t:null==t?os:"object"==typeof t?qu(t)?Kr(t[0],t[1]):zr(t):ds(t)}function Dr(t){if(!To(t))return gn(t);var e=[];for(var n in Lt(t))Dt.call(t,n)&&"constructor"!=n&&e.push(n);return e}function Pr(t){if(!na(t))return function(t){var e=[];if(null!=t)for(var n in Lt(t))e.push(n);return e}(t);var e=To(t),n=[];for(var r in t)("constructor"!=r||!e&&Dt.call(t,r))&&n.push(r);return n}function Vr(t,e){return t<e}function Br(t,e){var n=-1,r=Gu(t)?xt(t.length):[];return pr(t,(function(t,i,o){r[++n]=e(t,i,o)})),r}function zr(t){var e=fo(t);return 1==e.length&&e[0][2]?So(e[0][0],e[0][1]):function(n){return n===t||jr(n,t,e)}}function Kr(t,e){return ko(t)&&Oo(e)?So(Vo(t),e):function(r){var i=La(r,t);return i===n&&i===e?Aa(r,t):Ir(e,i,3)}}function Ur(t,e,r,i,o){t!==e&&_r(e,(function(u,a){if(o||(o=new Yn),na(u))!function(t,e,r,i,o,u,a){var s=Co(t,r),c=Co(e,r),l=a.get(c);if(l)return void er(t,r,l);var f=u?u(s,c,r+"",t,e,a):n,h=f===n;if(h){var p=qu(c),d=!p&&Yu(c),v=!p&&!d&&fa(c);f=c,p||d||v?qu(s)?f=s:$u(s)?f=Ni(s):d?(h=!1,f=Ei(c,!0)):v?(h=!1,f=Oi(c,!0)):f=[]:ua(c)||Zu(c)?(f=s,Zu(s)?f=_a(s):na(s)&&!Xu(s)||(f=go(c))):h=!1}h&&(a.set(c,f),o(f,c,i,u,a),a.delete(c));er(t,r,f)}(t,e,a,r,Ur,i,o);else{var s=i?i(Co(t,a),u,a+"",t,e,o):n;s===n&&(s=u),er(t,a,s)}}),ja)}function Wr(t,e){var r=t.length;if(r)return wo(e+=e<0?r:0,r)?t[e]:n}function Zr(t,e,n){e=e.length?Me(e,(function(t){return qu(t)?function(e){return Er(e,1===t.length?t[0]:t)}:t})):[os];var r=-1;return e=Me(e,$e(co())),function(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}(Br(t,(function(t,n,i){return{criteria:Me(e,(function(e){return e(t)})),index:++r,value:t}})),(function(t,e){return function(t,e,n){var r=-1,i=t.criteria,o=e.criteria,u=i.length,a=n.length;for(;++r<u;){var s=Si(i[r],o[r]);if(s)return r>=a?s:s*("desc"==n[r]?-1:1)}return t.index-e.index}(t,e,n)}))}function qr(t,e,n){for(var r=-1,i=e.length,o={};++r<i;){var u=e[r],a=Er(t,u);n(a,u)&&ti(o,wi(u,t),a)}return o}function Hr(t,e,n,r){var i=r?ze:Be,o=-1,u=e.length,a=t;for(t===e&&(e=Ni(e)),n&&(a=Me(t,$e(n)));++o<u;)for(var s=0,c=e[o],l=n?n(c):c;(s=i(a,l,s,r))>-1;)a!==t&&Xt.call(a,s,1),Xt.call(t,s,1);return t}function Gr(t,e){for(var n=t?e.length:0,r=n-1;n--;){var i=e[n];if(n==r||i!==o){var o=i;wo(i)?Xt.call(t,i,1):hi(t,i)}}return t}function $r(t,e){return t+De(xn()*(e-t+1))}function Yr(t,e){var n="";if(!t||e<1||e>h)return n;do{e%2&&(n+=t),(e=De(e/2))&&(t+=t)}while(e);return n}function Jr(t,e){return jo(Lo(t,e,os),t+"")}function Qr(t){return Qn(Ka(t))}function Xr(t,e){var n=Ka(t);return Do(n,sr(e,0,n.length))}function ti(t,e,r,i){if(!na(t))return t;for(var o=-1,u=(e=wi(e,t)).length,a=u-1,s=t;null!=s&&++o<u;){var c=Vo(e[o]),l=r;if("__proto__"===c||"constructor"===c||"prototype"===c)return t;if(o!=a){var f=s[c];(l=i?i(f,c,s):n)===n&&(l=na(f)?f:wo(e[o+1])?[]:{})}nr(s,c,l),s=s[c]}return t}var ei=Cn?function(t,e){return Cn.set(t,e),t}:os,ni=fe?function(t,e){return fe(t,"toString",{configurable:!0,enumerable:!1,value:ns(e),writable:!0})}:os;function ri(t){return Do(Ka(t))}function ii(t,e,n){var r=-1,i=t.length;e<0&&(e=-e>i?0:i+e),(n=n>i?i:n)<0&&(n+=i),i=e>n?0:n-e>>>0,e>>>=0;for(var o=xt(i);++r<i;)o[r]=t[r+e];return o}function oi(t,e){var n;return pr(t,(function(t,r,i){return!(n=e(t,r,i))})),!!n}function ui(t,e,n){var r=0,i=null==t?r:t.length;if("number"==typeof e&&e==e&&i<=2147483647){for(;r<i;){var o=r+i>>>1,u=t[o];null!==u&&!la(u)&&(n?u<=e:u<e)?r=o+1:i=o}return i}return ai(t,e,os,n)}function ai(t,e,r,i){var o=0,u=null==t?0:t.length;if(0===u)return 0;for(var a=(e=r(e))!=e,s=null===e,c=la(e),l=e===n;o<u;){var f=De((o+u)/2),h=r(t[f]),p=h!==n,d=null===h,v=h==h,m=la(h);if(a)var y=i||v;else y=l?v&&(i||p):s?v&&p&&(i||!d):c?v&&p&&!d&&(i||!m):!d&&!m&&(i?h<=e:h<e);y?o=f+1:u=f}return wn(u,4294967294)}function si(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var u=t[n],a=e?e(u):u;if(!n||!Ku(a,s)){var s=a;o[i++]=0===u?0:u}}return o}function ci(t){return"number"==typeof t?t:la(t)?p:+t}function li(t){if("string"==typeof t)return t;if(qu(t))return Me(t,li)+"";if(la(t))return Bn?Bn.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function fi(t,e,n){var r=-1,i=Ne,o=t.length,u=!0,a=[],s=a;if(n)u=!1,i=Ce;else if(o>=200){var c=e?null:Yi(t);if(c)return cn(c);u=!1,i=Je,s=new $n}else s=e?[]:a;t:for(;++r<o;){var l=t[r],f=e?e(l):l;if(l=n||0!==l?l:0,u&&f==f){for(var h=s.length;h--;)if(s[h]===f)continue t;e&&s.push(f),a.push(l)}else i(s,f,n)||(s!==a&&s.push(f),a.push(l))}return a}function hi(t,e){return null==(t=Ao(t,e=wi(e,t)))||delete t[Vo(Qo(e))]}function pi(t,e,n,r){return ti(t,e,n(Er(t,e)),r)}function di(t,e,n,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&e(t[o],o,t););return n?ii(t,r?0:o,r?o+1:i):ii(t,r?o+1:0,r?i:o)}function vi(t,e){var n=t;return n instanceof Zn&&(n=n.value()),je(e,(function(t,e){return e.func.apply(e.thisArg,Ie([t],e.args))}),n)}function mi(t,e,n){var r=t.length;if(r<2)return r?fi(t[0]):[];for(var i=-1,o=xt(r);++i<r;)for(var u=t[i],a=-1;++a<r;)a!=i&&(o[i]=hr(o[i]||u,t[a],e,n));return fi(gr(o,1),e,n)}function yi(t,e,r){for(var i=-1,o=t.length,u=e.length,a={};++i<o;){var s=i<u?e[i]:n;r(a,t[i],s)}return a}function gi(t){return $u(t)?t:[]}function _i(t){return"function"==typeof t?t:os}function wi(t,e){return qu(t)?t:ko(t,e)?[t]:Po(wa(t))}var bi=Jr;function ki(t,e,r){var i=t.length;return r=r===n?i:r,!e&&r>=i?t:ii(t,e,r)}var xi=pe||function(t){return he.clearTimeout(t)};function Ei(t,e){if(e)return t.slice();var n=t.length,r=Ht?Ht(n):new t.constructor(n);return t.copy(r),r}function Ti(t){var e=new t.constructor(t.byteLength);return new qt(e).set(new qt(t)),e}function Oi(t,e){var n=e?Ti(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function Si(t,e){if(t!==e){var r=t!==n,i=null===t,o=t==t,u=la(t),a=e!==n,s=null===e,c=e==e,l=la(e);if(!s&&!l&&!u&&t>e||u&&a&&c&&!s&&!l||i&&a&&c||!r&&c||!o)return 1;if(!i&&!u&&!l&&t<e||l&&r&&o&&!i&&!u||s&&r&&o||!a&&o||!c)return-1}return 0}function Li(t,e,n,r){for(var i=-1,o=t.length,u=n.length,a=-1,s=e.length,c=_n(o-u,0),l=xt(s+c),f=!r;++a<s;)l[a]=e[a];for(;++i<u;)(f||i<o)&&(l[n[i]]=t[i]);for(;c--;)l[a++]=t[i++];return l}function Ai(t,e,n,r){for(var i=-1,o=t.length,u=-1,a=n.length,s=-1,c=e.length,l=_n(o-a,0),f=xt(l+c),h=!r;++i<l;)f[i]=t[i];for(var p=i;++s<c;)f[p+s]=e[s];for(;++u<a;)(h||i<o)&&(f[p+n[u]]=t[i++]);return f}function Ni(t,e){var n=-1,r=t.length;for(e||(e=xt(r));++n<r;)e[n]=t[n];return e}function Ci(t,e,r,i){var o=!r;r||(r={});for(var u=-1,a=e.length;++u<a;){var s=e[u],c=i?i(r[s],t[s],s,r,t):n;c===n&&(c=t[s]),o?ur(r,s,c):nr(r,s,c)}return r}function Mi(t,e){return function(n,r){var i=qu(n)?Te:ir,o=e?e():{};return i(n,t,co(r,2),o)}}function Ii(t){return Jr((function(e,r){var i=-1,o=r.length,u=o>1?r[o-1]:n,a=o>2?r[2]:n;for(u=t.length>3&&"function"==typeof u?(o--,u):n,a&&bo(r[0],r[1],a)&&(u=o<3?n:u,o=1),e=Lt(e);++i<o;){var s=r[i];s&&t(e,s,i,u)}return e}))}function ji(t,e){return function(n,r){if(null==n)return n;if(!Gu(n))return t(n,r);for(var i=n.length,o=e?i:-1,u=Lt(n);(e?o--:++o<i)&&!1!==r(u[o],o,u););return n}}function Ri(t){return function(e,n,r){for(var i=-1,o=Lt(e),u=r(e),a=u.length;a--;){var s=u[t?a:++i];if(!1===n(o[s],s,o))break}return e}}function Fi(t){return function(e){var r=on(e=wa(e))?hn(e):n,i=r?r[0]:e.charAt(0),o=r?ki(r,1).join(""):e.slice(1);return i[t]()+o}}function Di(t){return function(e){return je(Xa(Za(e).replace(Jt,"")),t,"")}}function Pi(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=Kn(t.prototype),r=t.apply(n,e);return na(r)?r:n}}function Vi(t){return function(e,r,i){var o=Lt(e);if(!Gu(e)){var u=co(r,3);e=Ia(e),r=function(t){return u(o[t],t,o)}}var a=t(e,r,i);return a>-1?o[u?e[a]:a]:n}}function Bi(t){return ro((function(e){var i=e.length,o=i,u=Wn.prototype.thru;for(t&&e.reverse();o--;){var a=e[o];if("function"!=typeof a)throw new Ct(r);if(u&&!s&&"wrapper"==ao(a))var s=new Wn([],!0)}for(o=s?o:i;++o<i;){var c=ao(a=e[o]),l="wrapper"==c?uo(a):n;s=l&&xo(l[0])&&424==l[1]&&!l[4].length&&1==l[9]?s[ao(l[0])].apply(s,l[3]):1==a.length&&xo(a)?s[c]():s.thru(a)}return function(){var t=arguments,n=t[0];if(s&&1==t.length&&qu(n))return s.plant(n).value();for(var r=0,o=i?e[r].apply(this,t):n;++r<i;)o=e[r].call(this,o);return o}}))}function zi(t,e,r,i,o,u,a,s,l,f){var h=e&c,p=1&e,d=2&e,v=24&e,m=512&e,y=d?n:Pi(t);return function n(){for(var c=arguments.length,g=xt(c),_=c;_--;)g[_]=arguments[_];if(v)var w=so(n),b=tn(g,w);if(i&&(g=Li(g,i,o,v)),u&&(g=Ai(g,u,a,v)),c-=b,v&&c<f){var k=sn(g,w);return Gi(t,e,zi,n.placeholder,r,g,k,s,l,f-c)}var x=p?r:this,E=d?x[t]:t;return c=g.length,s?g=No(g,s):m&&c>1&&g.reverse(),h&&l<c&&(g.length=l),this&&this!==he&&this instanceof n&&(E=y||Pi(E)),E.apply(x,g)}}function Ki(t,e){return function(n,r){return function(t,e,n,r){return br(t,(function(t,i,o){e(r,n(t),i,o)})),r}(n,t,e(r),{})}}function Ui(t,e){return function(r,i){var o;if(r===n&&i===n)return e;if(r!==n&&(o=r),i!==n){if(o===n)return i;"string"==typeof r||"string"==typeof i?(r=li(r),i=li(i)):(r=ci(r),i=ci(i)),o=t(r,i)}return o}}function Wi(t){return ro((function(e){return e=Me(e,$e(co())),Jr((function(n){var r=this;return t(e,(function(t){return Ee(t,r,n)}))}))}))}function Zi(t,e){var r=(e=e===n?" ":li(e)).length;if(r<2)return r?Yr(e,t):e;var i=Yr(e,ye(t/fn(e)));return on(e)?ki(hn(i),0,t).join(""):i.slice(0,t)}function qi(t){return function(e,r,i){return i&&"number"!=typeof i&&bo(e,r,i)&&(r=i=n),e=va(e),r===n?(r=e,e=0):r=va(r),function(t,e,n,r){for(var i=-1,o=_n(ye((e-t)/(n||1)),0),u=xt(o);o--;)u[r?o:++i]=t,t+=n;return u}(e,r,i=i===n?e<r?1:-1:va(i),t)}}function Hi(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=ga(e),n=ga(n)),t(e,n)}}function Gi(t,e,r,i,o,u,c,l,f,h){var p=8&e;e|=p?a:s,4&(e&=~(p?s:a))||(e&=-4);var d=[t,e,o,p?u:n,p?c:n,p?n:u,p?n:c,l,f,h],v=r.apply(n,d);return xo(t)&&Mo(v,d),v.placeholder=i,Ro(v,t,e)}function $i(t){var e=St[t];return function(t,n){if(t=ga(t),(n=null==n?0:wn(ma(n),292))&&mn(t)){var r=(wa(t)+"e").split("e");return+((r=(wa(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return e(t)}}var Yi=Ln&&1/cn(new Ln([,-0]))[1]==f?function(t){return new Ln(t)}:ls;function Ji(t){return function(e){var n=mo(e);return n==E?un(e):n==A?ln(e):function(t,e){return Me(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function Qi(t,e,i,f,h,p,d,v){var m=2&e;if(!m&&"function"!=typeof t)throw new Ct(r);var y=f?f.length:0;if(y||(e&=-97,f=h=n),d=d===n?d:_n(ma(d),0),v=v===n?v:ma(v),y-=h?h.length:0,e&s){var g=f,_=h;f=h=n}var w=m?n:uo(t),b=[t,e,i,f,h,g,_,p,d,v];if(w&&function(t,e){var n=t[1],r=e[1],i=n|r,u=i<131,a=r==c&&8==n||r==c&&n==l&&t[7].length<=e[8]||384==r&&e[7].length<=e[8]&&8==n;if(!u&&!a)return t;1&r&&(t[2]=e[2],i|=1&n?0:4);var s=e[3];if(s){var f=t[3];t[3]=f?Li(f,s,e[4]):s,t[4]=f?sn(t[3],o):e[4]}(s=e[5])&&(f=t[5],t[5]=f?Ai(f,s,e[6]):s,t[6]=f?sn(t[5],o):e[6]);(s=e[7])&&(t[7]=s);r&c&&(t[8]=null==t[8]?e[8]:wn(t[8],e[8]));null==t[9]&&(t[9]=e[9]);t[0]=e[0],t[1]=i}(b,w),t=b[0],e=b[1],i=b[2],f=b[3],h=b[4],!(v=b[9]=b[9]===n?m?0:t.length:_n(b[9]-y,0))&&24&e&&(e&=-25),e&&1!=e)k=8==e||e==u?function(t,e,r){var i=Pi(t);return function o(){for(var u=arguments.length,a=xt(u),s=u,c=so(o);s--;)a[s]=arguments[s];var l=u<3&&a[0]!==c&&a[u-1]!==c?[]:sn(a,c);return(u-=l.length)<r?Gi(t,e,zi,o.placeholder,n,a,l,n,n,r-u):Ee(this&&this!==he&&this instanceof o?i:t,this,a)}}(t,e,v):e!=a&&33!=e||h.length?zi.apply(n,b):function(t,e,n,r){var i=1&e,o=Pi(t);return function e(){for(var u=-1,a=arguments.length,s=-1,c=r.length,l=xt(c+a),f=this&&this!==he&&this instanceof e?o:t;++s<c;)l[s]=r[s];for(;a--;)l[s++]=arguments[++u];return Ee(f,i?n:this,l)}}(t,e,i,f);else var k=function(t,e,n){var r=1&e,i=Pi(t);return function e(){return(this&&this!==he&&this instanceof e?i:t).apply(r?n:this,arguments)}}(t,e,i);return Ro((w?ei:Mo)(k,b),t,e)}function Xi(t,e,r,i){return t===n||Ku(t,jt[r])&&!Dt.call(i,r)?e:t}function to(t,e,r,i,o,u){return na(t)&&na(e)&&(u.set(e,t),Ur(t,e,n,to,u),u.delete(e)),t}function eo(t){return ua(t)?n:t}function no(t,e,r,i,o,u){var a=1&r,s=t.length,c=e.length;if(s!=c&&!(a&&c>s))return!1;var l=u.get(t),f=u.get(e);if(l&&f)return l==e&&f==t;var h=-1,p=!0,d=2&r?new $n:n;for(u.set(t,e),u.set(e,t);++h<s;){var v=t[h],m=e[h];if(i)var y=a?i(m,v,h,e,t,u):i(v,m,h,t,e,u);if(y!==n){if(y)continue;p=!1;break}if(d){if(!Fe(e,(function(t,e){if(!Je(d,e)&&(v===t||o(v,t,r,i,u)))return d.push(e)}))){p=!1;break}}else if(v!==m&&!o(v,m,r,i,u)){p=!1;break}}return u.delete(t),u.delete(e),p}function ro(t){return jo(Lo(t,n,Ho),t+"")}function io(t){return Tr(t,Ia,po)}function oo(t){return Tr(t,ja,vo)}var uo=Cn?function(t){return Cn.get(t)}:ls;function ao(t){for(var e=t.name+"",n=Mn[e],r=Dt.call(Mn,e)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==t)return i.name}return e}function so(t){return(Dt.call(zn,"placeholder")?zn:t).placeholder}function co(){var t=zn.iteratee||us;return t=t===us?Fr:t,arguments.length?t(arguments[0],arguments[1]):t}function lo(t,e){var n,r,i=t.__data__;return("string"==(r=typeof(n=e))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof e?"string":"hash"]:i.map}function fo(t){for(var e=Ia(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,Oo(i)]}return e}function ho(t,e){var r=function(t,e){return null==t?n:t[e]}(t,e);return Rr(r)?r:n}var po=Ze?function(t){return null==t?[]:(t=Lt(t),Ae(Ze(t),(function(e){return Yt.call(t,e)})))}:ys,vo=Ze?function(t){for(var e=[];t;)Ie(e,po(t)),t=Gt(t);return e}:ys,mo=Or;function yo(t,e,n){for(var r=-1,i=(e=wi(e,t)).length,o=!1;++r<i;){var u=Vo(e[r]);if(!(o=null!=t&&n(t,u)))break;t=t[u]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&ea(i)&&wo(u,i)&&(qu(t)||Zu(t))}function go(t){return"function"!=typeof t.constructor||To(t)?{}:Kn(Gt(t))}function _o(t){return qu(t)||Zu(t)||!!(ee&&t&&t[ee])}function wo(t,e){var n=typeof t;return!!(e=null==e?h:e)&&("number"==n||"symbol"!=n&&_t.test(t))&&t>-1&&t%1==0&&t<e}function bo(t,e,n){if(!na(n))return!1;var r=typeof e;return!!("number"==r?Gu(n)&&wo(e,n.length):"string"==r&&e in n)&&Ku(n[e],t)}function ko(t,e){if(qu(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!la(t))||(et.test(t)||!tt.test(t)||null!=e&&t in Lt(e))}function xo(t){var e=ao(t),n=zn[e];if("function"!=typeof n||!(e in Zn.prototype))return!1;if(t===n)return!0;var r=uo(n);return!!r&&t===r[0]}(Tn&&mo(new Tn(new ArrayBuffer(1)))!=j||On&&mo(new On)!=E||Sn&&mo(Sn.resolve())!=S||Ln&&mo(new Ln)!=A||An&&mo(new An)!=M)&&(mo=function(t){var e=Or(t),r=e==O?t.constructor:n,i=r?Bo(r):"";if(i)switch(i){case In:return j;case jn:return E;case Rn:return S;case Fn:return A;case Dn:return M}return e});var Eo=Rt?Xu:gs;function To(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||jt)}function Oo(t){return t==t&&!na(t)}function So(t,e){return function(r){return null!=r&&(r[t]===e&&(e!==n||t in Lt(r)))}}function Lo(t,e,r){return e=_n(e===n?t.length-1:e,0),function(){for(var n=arguments,i=-1,o=_n(n.length-e,0),u=xt(o);++i<o;)u[i]=n[e+i];i=-1;for(var a=xt(e+1);++i<e;)a[i]=n[i];return a[e]=r(u),Ee(t,this,a)}}function Ao(t,e){return e.length<2?t:Er(t,ii(e,0,-1))}function No(t,e){for(var r=t.length,i=wn(e.length,r),o=Ni(t);i--;){var u=e[i];t[i]=wo(u,r)?o[u]:n}return t}function Co(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var Mo=Fo(ei),Io=me||function(t,e){return he.setTimeout(t,e)},jo=Fo(ni);function Ro(t,e,n){var r=e+"";return jo(t,function(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(n>1?"& ":"")+e[r],e=e.join(n>2?", ":" "),t.replace(st,"{\n/* [wrapped with "+e+"] */\n")}(r,function(t,e){return Oe(m,(function(n){var r="_."+n[0];e&n[1]&&!Ne(t,r)&&t.push(r)})),t.sort()}(function(t){var e=t.match(ct);return e?e[1].split(lt):[]}(r),n)))}function Fo(t){var e=0,r=0;return function(){var i=bn(),o=16-(i-r);if(r=i,o>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(n,arguments)}}function Do(t,e){var r=-1,i=t.length,o=i-1;for(e=e===n?i:e;++r<e;){var u=$r(r,o),a=t[u];t[u]=t[r],t[r]=a}return t.length=e,t}var Po=function(t){var e=Fu(t,(function(t){return 500===n.size&&n.clear(),t})),n=e.cache;return e}((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(nt,(function(t,n,r,i){e.push(r?i.replace(ht,"$1"):n||t)})),e}));function Vo(t){if("string"==typeof t||la(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Bo(t){if(null!=t){try{return Ft.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function zo(t){if(t instanceof Zn)return t.clone();var e=new Wn(t.__wrapped__,t.__chain__);return e.__actions__=Ni(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var Ko=Jr((function(t,e){return $u(t)?hr(t,gr(e,1,$u,!0)):[]})),Uo=Jr((function(t,e){var r=Qo(e);return $u(r)&&(r=n),$u(t)?hr(t,gr(e,1,$u,!0),co(r,2)):[]})),Wo=Jr((function(t,e){var r=Qo(e);return $u(r)&&(r=n),$u(t)?hr(t,gr(e,1,$u,!0),n,r):[]}));function Zo(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:ma(n);return i<0&&(i=_n(r+i,0)),Ve(t,co(e,3),i)}function qo(t,e,r){var i=null==t?0:t.length;if(!i)return-1;var o=i-1;return r!==n&&(o=ma(r),o=r<0?_n(i+o,0):wn(o,i-1)),Ve(t,co(e,3),o,!0)}function Ho(t){return(null==t?0:t.length)?gr(t,1):[]}function Go(t){return t&&t.length?t[0]:n}var $o=Jr((function(t){var e=Me(t,gi);return e.length&&e[0]===t[0]?Nr(e):[]})),Yo=Jr((function(t){var e=Qo(t),r=Me(t,gi);return e===Qo(r)?e=n:r.pop(),r.length&&r[0]===t[0]?Nr(r,co(e,2)):[]})),Jo=Jr((function(t){var e=Qo(t),r=Me(t,gi);return(e="function"==typeof e?e:n)&&r.pop(),r.length&&r[0]===t[0]?Nr(r,n,e):[]}));function Qo(t){var e=null==t?0:t.length;return e?t[e-1]:n}var Xo=Jr(tu);function tu(t,e){return t&&t.length&&e&&e.length?Hr(t,e):t}var eu=ro((function(t,e){var n=null==t?0:t.length,r=ar(t,e);return Gr(t,Me(e,(function(t){return wo(t,n)?+t:t})).sort(Si)),r}));function nu(t){return null==t?t:En.call(t)}var ru=Jr((function(t){return fi(gr(t,1,$u,!0))})),iu=Jr((function(t){var e=Qo(t);return $u(e)&&(e=n),fi(gr(t,1,$u,!0),co(e,2))})),ou=Jr((function(t){var e=Qo(t);return e="function"==typeof e?e:n,fi(gr(t,1,$u,!0),n,e)}));function uu(t){if(!t||!t.length)return[];var e=0;return t=Ae(t,(function(t){if($u(t))return e=_n(t.length,e),!0})),Ge(e,(function(e){return Me(t,We(e))}))}function au(t,e){if(!t||!t.length)return[];var r=uu(t);return null==e?r:Me(r,(function(t){return Ee(e,n,t)}))}var su=Jr((function(t,e){return $u(t)?hr(t,e):[]})),cu=Jr((function(t){return mi(Ae(t,$u))})),lu=Jr((function(t){var e=Qo(t);return $u(e)&&(e=n),mi(Ae(t,$u),co(e,2))})),fu=Jr((function(t){var e=Qo(t);return e="function"==typeof e?e:n,mi(Ae(t,$u),n,e)})),hu=Jr(uu);var pu=Jr((function(t){var e=t.length,r=e>1?t[e-1]:n;return r="function"==typeof r?(t.pop(),r):n,au(t,r)}));function du(t){var e=zn(t);return e.__chain__=!0,e}function vu(t,e){return e(t)}var mu=ro((function(t){var e=t.length,r=e?t[0]:0,i=this.__wrapped__,o=function(e){return ar(e,t)};return!(e>1||this.__actions__.length)&&i instanceof Zn&&wo(r)?((i=i.slice(r,+r+(e?1:0))).__actions__.push({func:vu,args:[o],thisArg:n}),new Wn(i,this.__chain__).thru((function(t){return e&&!t.length&&t.push(n),t}))):this.thru(o)}));var yu=Mi((function(t,e,n){Dt.call(t,n)?++t[n]:ur(t,n,1)}));var gu=Vi(Zo),_u=Vi(qo);function wu(t,e){return(qu(t)?Oe:pr)(t,co(e,3))}function bu(t,e){return(qu(t)?Se:dr)(t,co(e,3))}var ku=Mi((function(t,e,n){Dt.call(t,n)?t[n].push(e):ur(t,n,[e])}));var xu=Jr((function(t,e,n){var r=-1,i="function"==typeof e,o=Gu(t)?xt(t.length):[];return pr(t,(function(t){o[++r]=i?Ee(e,t,n):Cr(t,e,n)})),o})),Eu=Mi((function(t,e,n){ur(t,n,e)}));function Tu(t,e){return(qu(t)?Me:Br)(t,co(e,3))}var Ou=Mi((function(t,e,n){t[n?0:1].push(e)}),(function(){return[[],[]]}));var Su=Jr((function(t,e){if(null==t)return[];var n=e.length;return n>1&&bo(t,e[0],e[1])?e=[]:n>2&&bo(e[0],e[1],e[2])&&(e=[e[0]]),Zr(t,gr(e,1),[])})),Lu=de||function(){return he.Date.now()};function Au(t,e,r){return e=r?n:e,e=t&&null==e?t.length:e,Qi(t,c,n,n,n,n,e)}function Nu(t,e){var i;if("function"!=typeof e)throw new Ct(r);return t=ma(t),function(){return--t>0&&(i=e.apply(this,arguments)),t<=1&&(e=n),i}}var Cu=Jr((function(t,e,n){var r=1;if(n.length){var i=sn(n,so(Cu));r|=a}return Qi(t,r,e,n,i)})),Mu=Jr((function(t,e,n){var r=3;if(n.length){var i=sn(n,so(Mu));r|=a}return Qi(e,r,t,n,i)}));function Iu(t,e,i){var o,u,a,s,c,l,f=0,h=!1,p=!1,d=!0;if("function"!=typeof t)throw new Ct(r);function v(e){var r=o,i=u;return o=u=n,f=e,s=t.apply(i,r)}function m(t){return f=t,c=Io(g,e),h?v(t):s}function y(t){var r=t-l;return l===n||r>=e||r<0||p&&t-f>=a}function g(){var t=Lu();if(y(t))return _(t);c=Io(g,function(t){var n=e-(t-l);return p?wn(n,a-(t-f)):n}(t))}function _(t){return c=n,d&&o?v(t):(o=u=n,s)}function w(){var t=Lu(),r=y(t);if(o=arguments,u=this,l=t,r){if(c===n)return m(l);if(p)return xi(c),c=Io(g,e),v(l)}return c===n&&(c=Io(g,e)),s}return e=ga(e)||0,na(i)&&(h=!!i.leading,a=(p="maxWait"in i)?_n(ga(i.maxWait)||0,e):a,d="trailing"in i?!!i.trailing:d),w.cancel=function(){c!==n&&xi(c),f=0,o=l=u=c=n},w.flush=function(){return c===n?s:_(Lu())},w}var ju=Jr((function(t,e){return fr(t,1,e)})),Ru=Jr((function(t,e,n){return fr(t,ga(e)||0,n)}));function Fu(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new Ct(r);var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var u=t.apply(this,r);return n.cache=o.set(i,u)||o,u};return n.cache=new(Fu.Cache||Gn),n}function Du(t){if("function"!=typeof t)throw new Ct(r);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}Fu.Cache=Gn;var Pu=bi((function(t,e){var n=(e=1==e.length&&qu(e[0])?Me(e[0],$e(co())):Me(gr(e,1),$e(co()))).length;return Jr((function(r){for(var i=-1,o=wn(r.length,n);++i<o;)r[i]=e[i].call(this,r[i]);return Ee(t,this,r)}))})),Vu=Jr((function(t,e){var r=sn(e,so(Vu));return Qi(t,a,n,e,r)})),Bu=Jr((function(t,e){var r=sn(e,so(Bu));return Qi(t,s,n,e,r)})),zu=ro((function(t,e){return Qi(t,l,n,n,n,e)}));function Ku(t,e){return t===e||t!=t&&e!=e}var Uu=Hi(Sr),Wu=Hi((function(t,e){return t>=e})),Zu=Mr(function(){return arguments}())?Mr:function(t){return ra(t)&&Dt.call(t,"callee")&&!Yt.call(t,"callee")},qu=xt.isArray,Hu=ge?$e(ge):function(t){return ra(t)&&Or(t)==I};function Gu(t){return null!=t&&ea(t.length)&&!Xu(t)}function $u(t){return ra(t)&&Gu(t)}var Yu=vn||gs,Ju=_e?$e(_e):function(t){return ra(t)&&Or(t)==w};function Qu(t){if(!ra(t))return!1;var e=Or(t);return e==b||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!ua(t)}function Xu(t){if(!na(t))return!1;var e=Or(t);return e==k||e==x||"[object AsyncFunction]"==e||"[object Proxy]"==e}function ta(t){return"number"==typeof t&&t==ma(t)}function ea(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=h}function na(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function ra(t){return null!=t&&"object"==typeof t}var ia=we?$e(we):function(t){return ra(t)&&mo(t)==E};function oa(t){return"number"==typeof t||ra(t)&&Or(t)==T}function ua(t){if(!ra(t)||Or(t)!=O)return!1;var e=Gt(t);if(null===e)return!0;var n=Dt.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&Ft.call(n)==zt}var aa=be?$e(be):function(t){return ra(t)&&Or(t)==L};var sa=ke?$e(ke):function(t){return ra(t)&&mo(t)==A};function ca(t){return"string"==typeof t||!qu(t)&&ra(t)&&Or(t)==N}function la(t){return"symbol"==typeof t||ra(t)&&Or(t)==C}var fa=xe?$e(xe):function(t){return ra(t)&&ea(t.length)&&!!oe[Or(t)]};var ha=Hi(Vr),pa=Hi((function(t,e){return t<=e}));function da(t){if(!t)return[];if(Gu(t))return ca(t)?hn(t):Ni(t);if(ae&&t[ae])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[ae]());var e=mo(t);return(e==E?un:e==A?cn:Ka)(t)}function va(t){return t?(t=ga(t))===f||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function ma(t){var e=va(t),n=e%1;return e==e?n?e-n:e:0}function ya(t){return t?sr(ma(t),0,d):0}function ga(t){if("number"==typeof t)return t;if(la(t))return p;if(na(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=na(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(ot,"");var n=mt.test(t);return n||gt.test(t)?ce(t.slice(2),n?2:8):vt.test(t)?p:+t}function _a(t){return Ci(t,ja(t))}function wa(t){return null==t?"":li(t)}var ba=Ii((function(t,e){if(To(e)||Gu(e))Ci(e,Ia(e),t);else for(var n in e)Dt.call(e,n)&&nr(t,n,e[n])})),ka=Ii((function(t,e){Ci(e,ja(e),t)})),xa=Ii((function(t,e,n,r){Ci(e,ja(e),t,r)})),Ea=Ii((function(t,e,n,r){Ci(e,Ia(e),t,r)})),Ta=ro(ar);var Oa=Jr((function(t,e){t=Lt(t);var r=-1,i=e.length,o=i>2?e[2]:n;for(o&&bo(e[0],e[1],o)&&(i=1);++r<i;)for(var u=e[r],a=ja(u),s=-1,c=a.length;++s<c;){var l=a[s],f=t[l];(f===n||Ku(f,jt[l])&&!Dt.call(t,l))&&(t[l]=u[l])}return t})),Sa=Jr((function(t){return t.push(n,to),Ee(Fa,n,t)}));function La(t,e,r){var i=null==t?n:Er(t,e);return i===n?r:i}function Aa(t,e){return null!=t&&yo(t,e,Ar)}var Na=Ki((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=Bt.call(e)),t[e]=n}),ns(os)),Ca=Ki((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=Bt.call(e)),Dt.call(t,e)?t[e].push(n):t[e]=[n]}),co),Ma=Jr(Cr);function Ia(t){return Gu(t)?Jn(t):Dr(t)}function ja(t){return Gu(t)?Jn(t,!0):Pr(t)}var Ra=Ii((function(t,e,n){Ur(t,e,n)})),Fa=Ii((function(t,e,n,r){Ur(t,e,n,r)})),Da=ro((function(t,e){var n={};if(null==t)return n;var r=!1;e=Me(e,(function(e){return e=wi(e,t),r||(r=e.length>1),e})),Ci(t,oo(t),n),r&&(n=cr(n,7,eo));for(var i=e.length;i--;)hi(n,e[i]);return n}));var Pa=ro((function(t,e){return null==t?{}:function(t,e){return qr(t,e,(function(e,n){return Aa(t,n)}))}(t,e)}));function Va(t,e){if(null==t)return{};var n=Me(oo(t),(function(t){return[t]}));return e=co(e),qr(t,n,(function(t,n){return e(t,n[0])}))}var Ba=Ji(Ia),za=Ji(ja);function Ka(t){return null==t?[]:Ye(t,Ia(t))}var Ua=Di((function(t,e,n){return e=e.toLowerCase(),t+(n?Wa(e):e)}));function Wa(t){return Qa(wa(t).toLowerCase())}function Za(t){return(t=wa(t))&&t.replace(wt,en).replace(Qt,"")}var qa=Di((function(t,e,n){return t+(n?"-":"")+e.toLowerCase()})),Ha=Di((function(t,e,n){return t+(n?" ":"")+e.toLowerCase()})),Ga=Fi("toLowerCase");var $a=Di((function(t,e,n){return t+(n?"_":"")+e.toLowerCase()}));var Ya=Di((function(t,e,n){return t+(n?" ":"")+Qa(e)}));var Ja=Di((function(t,e,n){return t+(n?" ":"")+e.toUpperCase()})),Qa=Fi("toUpperCase");function Xa(t,e,r){return t=wa(t),(e=r?n:e)===n?function(t){return ne.test(t)}(t)?function(t){return t.match(te)||[]}(t):function(t){return t.match(ft)||[]}(t):t.match(e)||[]}var ts=Jr((function(t,e){try{return Ee(t,n,e)}catch(t){return Qu(t)?t:new Tt(t)}})),es=ro((function(t,e){return Oe(e,(function(e){e=Vo(e),ur(t,e,Cu(t[e],t))})),t}));function ns(t){return function(){return t}}var rs=Bi(),is=Bi(!0);function os(t){return t}function us(t){return Fr("function"==typeof t?t:cr(t,1))}var as=Jr((function(t,e){return function(n){return Cr(n,t,e)}})),ss=Jr((function(t,e){return function(n){return Cr(t,n,e)}}));function cs(t,e,n){var r=Ia(e),i=xr(e,r);null!=n||na(e)&&(i.length||!r.length)||(n=e,e=t,t=this,i=xr(e,Ia(e)));var o=!(na(n)&&"chain"in n&&!n.chain),u=Xu(t);return Oe(i,(function(n){var r=e[n];t[n]=r,u&&(t.prototype[n]=function(){var e=this.__chain__;if(o||e){var n=t(this.__wrapped__),i=n.__actions__=Ni(this.__actions__);return i.push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,Ie([this.value()],arguments))})})),t}function ls(){}var fs=Wi(Me),hs=Wi(Le),ps=Wi(Fe);function ds(t){return ko(t)?We(Vo(t)):function(t){return function(e){return Er(e,t)}}(t)}var vs=qi(),ms=qi(!0);function ys(){return[]}function gs(){return!1}var _s=Ui((function(t,e){return t+e}),0),ws=$i("ceil"),bs=Ui((function(t,e){return t/e}),1),ks=$i("floor");var xs,Es=Ui((function(t,e){return t*e}),1),Ts=$i("round"),Os=Ui((function(t,e){return t-e}),0);return zn.after=function(t,e){if("function"!=typeof e)throw new Ct(r);return t=ma(t),function(){if(--t<1)return e.apply(this,arguments)}},zn.ary=Au,zn.assign=ba,zn.assignIn=ka,zn.assignInWith=xa,zn.assignWith=Ea,zn.at=Ta,zn.before=Nu,zn.bind=Cu,zn.bindAll=es,zn.bindKey=Mu,zn.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return qu(t)?t:[t]},zn.chain=du,zn.chunk=function(t,e,r){e=(r?bo(t,e,r):e===n)?1:_n(ma(e),0);var i=null==t?0:t.length;if(!i||e<1)return[];for(var o=0,u=0,a=xt(ye(i/e));o<i;)a[u++]=ii(t,o,o+=e);return a},zn.compact=function(t){for(var e=-1,n=null==t?0:t.length,r=0,i=[];++e<n;){var o=t[e];o&&(i[r++]=o)}return i},zn.concat=function(){var t=arguments.length;if(!t)return[];for(var e=xt(t-1),n=arguments[0],r=t;r--;)e[r-1]=arguments[r];return Ie(qu(n)?Ni(n):[n],gr(e,1))},zn.cond=function(t){var e=null==t?0:t.length,n=co();return t=e?Me(t,(function(t){if("function"!=typeof t[1])throw new Ct(r);return[n(t[0]),t[1]]})):[],Jr((function(n){for(var r=-1;++r<e;){var i=t[r];if(Ee(i[0],this,n))return Ee(i[1],this,n)}}))},zn.conforms=function(t){return function(t){var e=Ia(t);return function(n){return lr(n,t,e)}}(cr(t,1))},zn.constant=ns,zn.countBy=yu,zn.create=function(t,e){var n=Kn(t);return null==e?n:or(n,e)},zn.curry=function t(e,r,i){var o=Qi(e,8,n,n,n,n,n,r=i?n:r);return o.placeholder=t.placeholder,o},zn.curryRight=function t(e,r,i){var o=Qi(e,u,n,n,n,n,n,r=i?n:r);return o.placeholder=t.placeholder,o},zn.debounce=Iu,zn.defaults=Oa,zn.defaultsDeep=Sa,zn.defer=ju,zn.delay=Ru,zn.difference=Ko,zn.differenceBy=Uo,zn.differenceWith=Wo,zn.drop=function(t,e,r){var i=null==t?0:t.length;return i?ii(t,(e=r||e===n?1:ma(e))<0?0:e,i):[]},zn.dropRight=function(t,e,r){var i=null==t?0:t.length;return i?ii(t,0,(e=i-(e=r||e===n?1:ma(e)))<0?0:e):[]},zn.dropRightWhile=function(t,e){return t&&t.length?di(t,co(e,3),!0,!0):[]},zn.dropWhile=function(t,e){return t&&t.length?di(t,co(e,3),!0):[]},zn.fill=function(t,e,r,i){var o=null==t?0:t.length;return o?(r&&"number"!=typeof r&&bo(t,e,r)&&(r=0,i=o),function(t,e,r,i){var o=t.length;for((r=ma(r))<0&&(r=-r>o?0:o+r),(i=i===n||i>o?o:ma(i))<0&&(i+=o),i=r>i?0:ya(i);r<i;)t[r++]=e;return t}(t,e,r,i)):[]},zn.filter=function(t,e){return(qu(t)?Ae:yr)(t,co(e,3))},zn.flatMap=function(t,e){return gr(Tu(t,e),1)},zn.flatMapDeep=function(t,e){return gr(Tu(t,e),f)},zn.flatMapDepth=function(t,e,r){return r=r===n?1:ma(r),gr(Tu(t,e),r)},zn.flatten=Ho,zn.flattenDeep=function(t){return(null==t?0:t.length)?gr(t,f):[]},zn.flattenDepth=function(t,e){return(null==t?0:t.length)?gr(t,e=e===n?1:ma(e)):[]},zn.flip=function(t){return Qi(t,512)},zn.flow=rs,zn.flowRight=is,zn.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var i=t[e];r[i[0]]=i[1]}return r},zn.functions=function(t){return null==t?[]:xr(t,Ia(t))},zn.functionsIn=function(t){return null==t?[]:xr(t,ja(t))},zn.groupBy=ku,zn.initial=function(t){return(null==t?0:t.length)?ii(t,0,-1):[]},zn.intersection=$o,zn.intersectionBy=Yo,zn.intersectionWith=Jo,zn.invert=Na,zn.invertBy=Ca,zn.invokeMap=xu,zn.iteratee=us,zn.keyBy=Eu,zn.keys=Ia,zn.keysIn=ja,zn.map=Tu,zn.mapKeys=function(t,e){var n={};return e=co(e,3),br(t,(function(t,r,i){ur(n,e(t,r,i),t)})),n},zn.mapValues=function(t,e){var n={};return e=co(e,3),br(t,(function(t,r,i){ur(n,r,e(t,r,i))})),n},zn.matches=function(t){return zr(cr(t,1))},zn.matchesProperty=function(t,e){return Kr(t,cr(e,1))},zn.memoize=Fu,zn.merge=Ra,zn.mergeWith=Fa,zn.method=as,zn.methodOf=ss,zn.mixin=cs,zn.negate=Du,zn.nthArg=function(t){return t=ma(t),Jr((function(e){return Wr(e,t)}))},zn.omit=Da,zn.omitBy=function(t,e){return Va(t,Du(co(e)))},zn.once=function(t){return Nu(2,t)},zn.orderBy=function(t,e,r,i){return null==t?[]:(qu(e)||(e=null==e?[]:[e]),qu(r=i?n:r)||(r=null==r?[]:[r]),Zr(t,e,r))},zn.over=fs,zn.overArgs=Pu,zn.overEvery=hs,zn.overSome=ps,zn.partial=Vu,zn.partialRight=Bu,zn.partition=Ou,zn.pick=Pa,zn.pickBy=Va,zn.property=ds,zn.propertyOf=function(t){return function(e){return null==t?n:Er(t,e)}},zn.pull=Xo,zn.pullAll=tu,zn.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?Hr(t,e,co(n,2)):t},zn.pullAllWith=function(t,e,r){return t&&t.length&&e&&e.length?Hr(t,e,n,r):t},zn.pullAt=eu,zn.range=vs,zn.rangeRight=ms,zn.rearg=zu,zn.reject=function(t,e){return(qu(t)?Ae:yr)(t,Du(co(e,3)))},zn.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,i=[],o=t.length;for(e=co(e,3);++r<o;){var u=t[r];e(u,r,t)&&(n.push(u),i.push(r))}return Gr(t,i),n},zn.rest=function(t,e){if("function"!=typeof t)throw new Ct(r);return Jr(t,e=e===n?e:ma(e))},zn.reverse=nu,zn.sampleSize=function(t,e,r){return e=(r?bo(t,e,r):e===n)?1:ma(e),(qu(t)?Xn:Xr)(t,e)},zn.set=function(t,e,n){return null==t?t:ti(t,e,n)},zn.setWith=function(t,e,r,i){return i="function"==typeof i?i:n,null==t?t:ti(t,e,r,i)},zn.shuffle=function(t){return(qu(t)?tr:ri)(t)},zn.slice=function(t,e,r){var i=null==t?0:t.length;return i?(r&&"number"!=typeof r&&bo(t,e,r)?(e=0,r=i):(e=null==e?0:ma(e),r=r===n?i:ma(r)),ii(t,e,r)):[]},zn.sortBy=Su,zn.sortedUniq=function(t){return t&&t.length?si(t):[]},zn.sortedUniqBy=function(t,e){return t&&t.length?si(t,co(e,2)):[]},zn.split=function(t,e,r){return r&&"number"!=typeof r&&bo(t,e,r)&&(e=r=n),(r=r===n?d:r>>>0)?(t=wa(t))&&("string"==typeof e||null!=e&&!aa(e))&&!(e=li(e))&&on(t)?ki(hn(t),0,r):t.split(e,r):[]},zn.spread=function(t,e){if("function"!=typeof t)throw new Ct(r);return e=null==e?0:_n(ma(e),0),Jr((function(n){var r=n[e],i=ki(n,0,e);return r&&Ie(i,r),Ee(t,this,i)}))},zn.tail=function(t){var e=null==t?0:t.length;return e?ii(t,1,e):[]},zn.take=function(t,e,r){return t&&t.length?ii(t,0,(e=r||e===n?1:ma(e))<0?0:e):[]},zn.takeRight=function(t,e,r){var i=null==t?0:t.length;return i?ii(t,(e=i-(e=r||e===n?1:ma(e)))<0?0:e,i):[]},zn.takeRightWhile=function(t,e){return t&&t.length?di(t,co(e,3),!1,!0):[]},zn.takeWhile=function(t,e){return t&&t.length?di(t,co(e,3)):[]},zn.tap=function(t,e){return e(t),t},zn.throttle=function(t,e,n){var i=!0,o=!0;if("function"!=typeof t)throw new Ct(r);return na(n)&&(i="leading"in n?!!n.leading:i,o="trailing"in n?!!n.trailing:o),Iu(t,e,{leading:i,maxWait:e,trailing:o})},zn.thru=vu,zn.toArray=da,zn.toPairs=Ba,zn.toPairsIn=za,zn.toPath=function(t){return qu(t)?Me(t,Vo):la(t)?[t]:Ni(Po(wa(t)))},zn.toPlainObject=_a,zn.transform=function(t,e,n){var r=qu(t),i=r||Yu(t)||fa(t);if(e=co(e,4),null==n){var o=t&&t.constructor;n=i?r?new o:[]:na(t)&&Xu(o)?Kn(Gt(t)):{}}return(i?Oe:br)(t,(function(t,r,i){return e(n,t,r,i)})),n},zn.unary=function(t){return Au(t,1)},zn.union=ru,zn.unionBy=iu,zn.unionWith=ou,zn.uniq=function(t){return t&&t.length?fi(t):[]},zn.uniqBy=function(t,e){return t&&t.length?fi(t,co(e,2)):[]},zn.uniqWith=function(t,e){return e="function"==typeof e?e:n,t&&t.length?fi(t,n,e):[]},zn.unset=function(t,e){return null==t||hi(t,e)},zn.unzip=uu,zn.unzipWith=au,zn.update=function(t,e,n){return null==t?t:pi(t,e,_i(n))},zn.updateWith=function(t,e,r,i){return i="function"==typeof i?i:n,null==t?t:pi(t,e,_i(r),i)},zn.values=Ka,zn.valuesIn=function(t){return null==t?[]:Ye(t,ja(t))},zn.without=su,zn.words=Xa,zn.wrap=function(t,e){return Vu(_i(e),t)},zn.xor=cu,zn.xorBy=lu,zn.xorWith=fu,zn.zip=hu,zn.zipObject=function(t,e){return yi(t||[],e||[],nr)},zn.zipObjectDeep=function(t,e){return yi(t||[],e||[],ti)},zn.zipWith=pu,zn.entries=Ba,zn.entriesIn=za,zn.extend=ka,zn.extendWith=xa,cs(zn,zn),zn.add=_s,zn.attempt=ts,zn.camelCase=Ua,zn.capitalize=Wa,zn.ceil=ws,zn.clamp=function(t,e,r){return r===n&&(r=e,e=n),r!==n&&(r=(r=ga(r))==r?r:0),e!==n&&(e=(e=ga(e))==e?e:0),sr(ga(t),e,r)},zn.clone=function(t){return cr(t,4)},zn.cloneDeep=function(t){return cr(t,5)},zn.cloneDeepWith=function(t,e){return cr(t,5,e="function"==typeof e?e:n)},zn.cloneWith=function(t,e){return cr(t,4,e="function"==typeof e?e:n)},zn.conformsTo=function(t,e){return null==e||lr(t,e,Ia(e))},zn.deburr=Za,zn.defaultTo=function(t,e){return null==t||t!=t?e:t},zn.divide=bs,zn.endsWith=function(t,e,r){t=wa(t),e=li(e);var i=t.length,o=r=r===n?i:sr(ma(r),0,i);return(r-=e.length)>=0&&t.slice(r,o)==e},zn.eq=Ku,zn.escape=function(t){return(t=wa(t))&&Y.test(t)?t.replace(G,nn):t},zn.escapeRegExp=function(t){return(t=wa(t))&&it.test(t)?t.replace(rt,"\\$&"):t},zn.every=function(t,e,r){var i=qu(t)?Le:vr;return r&&bo(t,e,r)&&(e=n),i(t,co(e,3))},zn.find=gu,zn.findIndex=Zo,zn.findKey=function(t,e){return Pe(t,co(e,3),br)},zn.findLast=_u,zn.findLastIndex=qo,zn.findLastKey=function(t,e){return Pe(t,co(e,3),kr)},zn.floor=ks,zn.forEach=wu,zn.forEachRight=bu,zn.forIn=function(t,e){return null==t?t:_r(t,co(e,3),ja)},zn.forInRight=function(t,e){return null==t?t:wr(t,co(e,3),ja)},zn.forOwn=function(t,e){return t&&br(t,co(e,3))},zn.forOwnRight=function(t,e){return t&&kr(t,co(e,3))},zn.get=La,zn.gt=Uu,zn.gte=Wu,zn.has=function(t,e){return null!=t&&yo(t,e,Lr)},zn.hasIn=Aa,zn.head=Go,zn.identity=os,zn.includes=function(t,e,n,r){t=Gu(t)?t:Ka(t),n=n&&!r?ma(n):0;var i=t.length;return n<0&&(n=_n(i+n,0)),ca(t)?n<=i&&t.indexOf(e,n)>-1:!!i&&Be(t,e,n)>-1},zn.indexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:ma(n);return i<0&&(i=_n(r+i,0)),Be(t,e,i)},zn.inRange=function(t,e,r){return e=va(e),r===n?(r=e,e=0):r=va(r),function(t,e,n){return t>=wn(e,n)&&t<_n(e,n)}(t=ga(t),e,r)},zn.invoke=Ma,zn.isArguments=Zu,zn.isArray=qu,zn.isArrayBuffer=Hu,zn.isArrayLike=Gu,zn.isArrayLikeObject=$u,zn.isBoolean=function(t){return!0===t||!1===t||ra(t)&&Or(t)==_},zn.isBuffer=Yu,zn.isDate=Ju,zn.isElement=function(t){return ra(t)&&1===t.nodeType&&!ua(t)},zn.isEmpty=function(t){if(null==t)return!0;if(Gu(t)&&(qu(t)||"string"==typeof t||"function"==typeof t.splice||Yu(t)||fa(t)||Zu(t)))return!t.length;var e=mo(t);if(e==E||e==A)return!t.size;if(To(t))return!Dr(t).length;for(var n in t)if(Dt.call(t,n))return!1;return!0},zn.isEqual=function(t,e){return Ir(t,e)},zn.isEqualWith=function(t,e,r){var i=(r="function"==typeof r?r:n)?r(t,e):n;return i===n?Ir(t,e,n,r):!!i},zn.isError=Qu,zn.isFinite=function(t){return"number"==typeof t&&mn(t)},zn.isFunction=Xu,zn.isInteger=ta,zn.isLength=ea,zn.isMap=ia,zn.isMatch=function(t,e){return t===e||jr(t,e,fo(e))},zn.isMatchWith=function(t,e,r){return r="function"==typeof r?r:n,jr(t,e,fo(e),r)},zn.isNaN=function(t){return oa(t)&&t!=+t},zn.isNative=function(t){if(Eo(t))throw new Tt("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Rr(t)},zn.isNil=function(t){return null==t},zn.isNull=function(t){return null===t},zn.isNumber=oa,zn.isObject=na,zn.isObjectLike=ra,zn.isPlainObject=ua,zn.isRegExp=aa,zn.isSafeInteger=function(t){return ta(t)&&t>=-9007199254740991&&t<=h},zn.isSet=sa,zn.isString=ca,zn.isSymbol=la,zn.isTypedArray=fa,zn.isUndefined=function(t){return t===n},zn.isWeakMap=function(t){return ra(t)&&mo(t)==M},zn.isWeakSet=function(t){return ra(t)&&"[object WeakSet]"==Or(t)},zn.join=function(t,e){return null==t?"":yn.call(t,e)},zn.kebabCase=qa,zn.last=Qo,zn.lastIndexOf=function(t,e,r){var i=null==t?0:t.length;if(!i)return-1;var o=i;return r!==n&&(o=(o=ma(r))<0?_n(i+o,0):wn(o,i-1)),e==e?function(t,e,n){for(var r=n+1;r--;)if(t[r]===e)return r;return r}(t,e,o):Ve(t,Ke,o,!0)},zn.lowerCase=Ha,zn.lowerFirst=Ga,zn.lt=ha,zn.lte=pa,zn.max=function(t){return t&&t.length?mr(t,os,Sr):n},zn.maxBy=function(t,e){return t&&t.length?mr(t,co(e,2),Sr):n},zn.mean=function(t){return Ue(t,os)},zn.meanBy=function(t,e){return Ue(t,co(e,2))},zn.min=function(t){return t&&t.length?mr(t,os,Vr):n},zn.minBy=function(t,e){return t&&t.length?mr(t,co(e,2),Vr):n},zn.stubArray=ys,zn.stubFalse=gs,zn.stubObject=function(){return{}},zn.stubString=function(){return""},zn.stubTrue=function(){return!0},zn.multiply=Es,zn.nth=function(t,e){return t&&t.length?Wr(t,ma(e)):n},zn.noConflict=function(){return he._===this&&(he._=Kt),this},zn.noop=ls,zn.now=Lu,zn.pad=function(t,e,n){t=wa(t);var r=(e=ma(e))?fn(t):0;if(!e||r>=e)return t;var i=(e-r)/2;return Zi(De(i),n)+t+Zi(ye(i),n)},zn.padEnd=function(t,e,n){t=wa(t);var r=(e=ma(e))?fn(t):0;return e&&r<e?t+Zi(e-r,n):t},zn.padStart=function(t,e,n){t=wa(t);var r=(e=ma(e))?fn(t):0;return e&&r<e?Zi(e-r,n)+t:t},zn.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),kn(wa(t).replace(ut,""),e||0)},zn.random=function(t,e,r){if(r&&"boolean"!=typeof r&&bo(t,e,r)&&(e=r=n),r===n&&("boolean"==typeof e?(r=e,e=n):"boolean"==typeof t&&(r=t,t=n)),t===n&&e===n?(t=0,e=1):(t=va(t),e===n?(e=t,t=0):e=va(e)),t>e){var i=t;t=e,e=i}if(r||t%1||e%1){var o=xn();return wn(t+o*(e-t+se("1e-"+((o+"").length-1))),e)}return $r(t,e)},zn.reduce=function(t,e,n){var r=qu(t)?je:qe,i=arguments.length<3;return r(t,co(e,4),n,i,pr)},zn.reduceRight=function(t,e,n){var r=qu(t)?Re:qe,i=arguments.length<3;return r(t,co(e,4),n,i,dr)},zn.repeat=function(t,e,r){return e=(r?bo(t,e,r):e===n)?1:ma(e),Yr(wa(t),e)},zn.replace=function(){var t=arguments,e=wa(t[0]);return t.length<3?e:e.replace(t[1],t[2])},zn.result=function(t,e,r){var i=-1,o=(e=wi(e,t)).length;for(o||(o=1,t=n);++i<o;){var u=null==t?n:t[Vo(e[i])];u===n&&(i=o,u=r),t=Xu(u)?u.call(t):u}return t},zn.round=Ts,zn.runInContext=t,zn.sample=function(t){return(qu(t)?Qn:Qr)(t)},zn.size=function(t){if(null==t)return 0;if(Gu(t))return ca(t)?fn(t):t.length;var e=mo(t);return e==E||e==A?t.size:Dr(t).length},zn.snakeCase=$a,zn.some=function(t,e,r){var i=qu(t)?Fe:oi;return r&&bo(t,e,r)&&(e=n),i(t,co(e,3))},zn.sortedIndex=function(t,e){return ui(t,e)},zn.sortedIndexBy=function(t,e,n){return ai(t,e,co(n,2))},zn.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var r=ui(t,e);if(r<n&&Ku(t[r],e))return r}return-1},zn.sortedLastIndex=function(t,e){return ui(t,e,!0)},zn.sortedLastIndexBy=function(t,e,n){return ai(t,e,co(n,2),!0)},zn.sortedLastIndexOf=function(t,e){if(null==t?0:t.length){var n=ui(t,e,!0)-1;if(Ku(t[n],e))return n}return-1},zn.startCase=Ya,zn.startsWith=function(t,e,n){return t=wa(t),n=null==n?0:sr(ma(n),0,t.length),e=li(e),t.slice(n,n+e.length)==e},zn.subtract=Os,zn.sum=function(t){return t&&t.length?He(t,os):0},zn.sumBy=function(t,e){return t&&t.length?He(t,co(e,2)):0},zn.template=function(t,e,r){var i=zn.templateSettings;r&&bo(t,e,r)&&(e=n),t=wa(t),e=xa({},e,i,Xi);var o,u,a=xa({},e.imports,i.imports,Xi),s=Ia(a),c=Ye(a,s),l=0,f=e.interpolate||bt,h="__p += '",p=At((e.escape||bt).source+"|"+f.source+"|"+(f===X?pt:bt).source+"|"+(e.evaluate||bt).source+"|$","g"),d="//# sourceURL="+(Dt.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++ie+"]")+"\n";t.replace(p,(function(e,n,r,i,a,s){return r||(r=i),h+=t.slice(l,s).replace(kt,rn),n&&(o=!0,h+="' +\n__e("+n+") +\n'"),a&&(u=!0,h+="';\n"+a+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=s+e.length,e})),h+="';\n";var v=Dt.call(e,"variable")&&e.variable;v||(h="with (obj) {\n"+h+"\n}\n"),h=(u?h.replace(W,""):h).replace(Z,"$1").replace(q,"$1;"),h="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(u?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var m=ts((function(){return Ot(s,d+"return "+h).apply(n,c)}));if(m.source=h,Qu(m))throw m;return m},zn.times=function(t,e){if((t=ma(t))<1||t>h)return[];var n=d,r=wn(t,d);e=co(e),t-=d;for(var i=Ge(r,e);++n<t;)e(n);return i},zn.toFinite=va,zn.toInteger=ma,zn.toLength=ya,zn.toLower=function(t){return wa(t).toLowerCase()},zn.toNumber=ga,zn.toSafeInteger=function(t){return t?sr(ma(t),-9007199254740991,h):0===t?t:0},zn.toString=wa,zn.toUpper=function(t){return wa(t).toUpperCase()},zn.trim=function(t,e,r){if((t=wa(t))&&(r||e===n))return t.replace(ot,"");if(!t||!(e=li(e)))return t;var i=hn(t),o=hn(e);return ki(i,Qe(i,o),Xe(i,o)+1).join("")},zn.trimEnd=function(t,e,r){if((t=wa(t))&&(r||e===n))return t.replace(at,"");if(!t||!(e=li(e)))return t;var i=hn(t);return ki(i,0,Xe(i,hn(e))+1).join("")},zn.trimStart=function(t,e,r){if((t=wa(t))&&(r||e===n))return t.replace(ut,"");if(!t||!(e=li(e)))return t;var i=hn(t);return ki(i,Qe(i,hn(e))).join("")},zn.truncate=function(t,e){var r=30,i="...";if(na(e)){var o="separator"in e?e.separator:o;r="length"in e?ma(e.length):r,i="omission"in e?li(e.omission):i}var u=(t=wa(t)).length;if(on(t)){var a=hn(t);u=a.length}if(r>=u)return t;var s=r-fn(i);if(s<1)return i;var c=a?ki(a,0,s).join(""):t.slice(0,s);if(o===n)return c+i;if(a&&(s+=c.length-s),aa(o)){if(t.slice(s).search(o)){var l,f=c;for(o.global||(o=At(o.source,wa(dt.exec(o))+"g")),o.lastIndex=0;l=o.exec(f);)var h=l.index;c=c.slice(0,h===n?s:h)}}else if(t.indexOf(li(o),s)!=s){var p=c.lastIndexOf(o);p>-1&&(c=c.slice(0,p))}return c+i},zn.unescape=function(t){return(t=wa(t))&&$.test(t)?t.replace(H,pn):t},zn.uniqueId=function(t){var e=++Pt;return wa(t)+e},zn.upperCase=Ja,zn.upperFirst=Qa,zn.each=wu,zn.eachRight=bu,zn.first=Go,cs(zn,(xs={},br(zn,(function(t,e){Dt.call(zn.prototype,e)||(xs[e]=t)})),xs),{chain:!1}),zn.VERSION="4.17.20",Oe(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){zn[t].placeholder=zn})),Oe(["drop","take"],(function(t,e){Zn.prototype[t]=function(r){r=r===n?1:_n(ma(r),0);var i=this.__filtered__&&!e?new Zn(this):this.clone();return i.__filtered__?i.__takeCount__=wn(r,i.__takeCount__):i.__views__.push({size:wn(r,d),type:t+(i.__dir__<0?"Right":"")}),i},Zn.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),Oe(["filter","map","takeWhile"],(function(t,e){var n=e+1,r=1==n||3==n;Zn.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:co(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}})),Oe(["head","last"],(function(t,e){var n="take"+(e?"Right":"");Zn.prototype[t]=function(){return this[n](1).value()[0]}})),Oe(["initial","tail"],(function(t,e){var n="drop"+(e?"":"Right");Zn.prototype[t]=function(){return this.__filtered__?new Zn(this):this[n](1)}})),Zn.prototype.compact=function(){return this.filter(os)},Zn.prototype.find=function(t){return this.filter(t).head()},Zn.prototype.findLast=function(t){return this.reverse().find(t)},Zn.prototype.invokeMap=Jr((function(t,e){return"function"==typeof t?new Zn(this):this.map((function(n){return Cr(n,t,e)}))})),Zn.prototype.reject=function(t){return this.filter(Du(co(t)))},Zn.prototype.slice=function(t,e){t=ma(t);var r=this;return r.__filtered__&&(t>0||e<0)?new Zn(r):(t<0?r=r.takeRight(-t):t&&(r=r.drop(t)),e!==n&&(r=(e=ma(e))<0?r.dropRight(-e):r.take(e-t)),r)},Zn.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Zn.prototype.toArray=function(){return this.take(d)},br(Zn.prototype,(function(t,e){var r=/^(?:filter|find|map|reject)|While$/.test(e),i=/^(?:head|last)$/.test(e),o=zn[i?"take"+("last"==e?"Right":""):e],u=i||/^find/.test(e);o&&(zn.prototype[e]=function(){var e=this.__wrapped__,a=i?[1]:arguments,s=e instanceof Zn,c=a[0],l=s||qu(e),f=function(t){var e=o.apply(zn,Ie([t],a));return i&&h?e[0]:e};l&&r&&"function"==typeof c&&1!=c.length&&(s=l=!1);var h=this.__chain__,p=!!this.__actions__.length,d=u&&!h,v=s&&!p;if(!u&&l){e=v?e:new Zn(this);var m=t.apply(e,a);return m.__actions__.push({func:vu,args:[f],thisArg:n}),new Wn(m,h)}return d&&v?t.apply(this,a):(m=this.thru(f),d?i?m.value()[0]:m.value():m)})})),Oe(["pop","push","shift","sort","splice","unshift"],(function(t){var e=Mt[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);zn.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return e.apply(qu(i)?i:[],t)}return this[n]((function(n){return e.apply(qu(n)?n:[],t)}))}})),br(Zn.prototype,(function(t,e){var n=zn[e];if(n){var r=n.name+"";Dt.call(Mn,r)||(Mn[r]=[]),Mn[r].push({name:e,func:n})}})),Mn[zi(n,2).name]=[{name:"wrapper",func:n}],Zn.prototype.clone=function(){var t=new Zn(this.__wrapped__);return t.__actions__=Ni(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=Ni(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=Ni(this.__views__),t},Zn.prototype.reverse=function(){if(this.__filtered__){var t=new Zn(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Zn.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=qu(t),r=e<0,i=n?t.length:0,o=function(t,e,n){var r=-1,i=n.length;for(;++r<i;){var o=n[r],u=o.size;switch(o.type){case"drop":t+=u;break;case"dropRight":e-=u;break;case"take":e=wn(e,t+u);break;case"takeRight":t=_n(t,e-u)}}return{start:t,end:e}}(0,i,this.__views__),u=o.start,a=o.end,s=a-u,c=r?a:u-1,l=this.__iteratees__,f=l.length,h=0,p=wn(s,this.__takeCount__);if(!n||!r&&i==s&&p==s)return vi(t,this.__actions__);var d=[];t:for(;s--&&h<p;){for(var v=-1,m=t[c+=e];++v<f;){var y=l[v],g=y.iteratee,_=y.type,w=g(m);if(2==_)m=w;else if(!w){if(1==_)continue t;break t}}d[h++]=m}return d},zn.prototype.at=mu,zn.prototype.chain=function(){return du(this)},zn.prototype.commit=function(){return new Wn(this.value(),this.__chain__)},zn.prototype.next=function(){this.__values__===n&&(this.__values__=da(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?n:this.__values__[this.__index__++]}},zn.prototype.plant=function(t){for(var e,r=this;r instanceof Un;){var i=zo(r);i.__index__=0,i.__values__=n,e?o.__wrapped__=i:e=i;var o=i;r=r.__wrapped__}return o.__wrapped__=t,e},zn.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Zn){var e=t;return this.__actions__.length&&(e=new Zn(this)),(e=e.reverse()).__actions__.push({func:vu,args:[nu],thisArg:n}),new Wn(e,this.__chain__)}return this.thru(nu)},zn.prototype.toJSON=zn.prototype.valueOf=zn.prototype.value=function(){return vi(this.__wrapped__,this.__actions__)},zn.prototype.first=zn.prototype.head,ae&&(zn.prototype[ae]=function(){return this}),zn}();de?((de.exports=dn)._=dn,pe._=dn):he._=dn}).call(v)})),$=function(){function t(t){this._datetime=t}return t.prototype.format=function(t,e){return this._datetime.apply(t).toFormat(e)},t=o([P(),a("design:paramtypes",[U])],t)}(),Y=function(){function t(t,e){this._dateTimeFilters=t,this._providers=e,this._env=new H.Environment,this.installFilters()}var r;return t.prototype.installFilters=function(){var t=this;this._env.addFilter("dateFormat",(function(e,n){return t._dateTimeFilters.format(e,n)})),this._env.addFilter("inspect",(function(t,e){return n.inspect(t,void 0,e)}))},t.prototype.resolve=function(){return s(this,void 0,void 0,(function(){var t,e=this;return c(this,(function(n){switch(n.label){case 0:return[4,Promise.all(this._providers.map((function(t){return s(e,void 0,void 0,(function(){var e;return c(this,(function(n){switch(n.label){case 0:return e={name:t.name},[4,t.provide()];case 1:return[2,(e.value=n.sent(),e)]}}))}))})))];case 1:return t=n.sent().filter((function(t){return null!=t.value})).map((function(t){var e;return(e={})[t.name]=t.value,e})),[2,Object.assign.apply(Object,p([{}],t))]}}))}))},t.prototype.render=function(t,e){return void 0===e&&(e=null),s(this,void 0,void 0,(function(){var n;return c(this,(function(r){switch(r.label){case 0:return null==e?[3,1]:(e,[3,3]);case 1:return[4,this.resolve()];case 2:e=r.sent(),r.label=3;case 3:return n=G.mapValues(e,(function(t){return t.context})),[2,this._env.renderString(t,n)]}}))}))},t.prototype.renderDoc=function(){return s(this,void 0,void 0,(function(){var t=this;return c(this,(function(n){switch(n.label){case 0:return[4,Promise.all(this._providers.map((function(e){return s(t,void 0,void 0,(function(){var t,n;return c(this,(function(r){switch(r.label){case 0:return[4,e.docs()];case 1:return t=r.sent(),[2,this._env.renderString(t.template,(n={},n[e.name]=t.context.context,n))]}}))}))})))];case 1:return[2,n.sent().join(e.EOL+"---"+e.EOL)]}}))}))},t=o([P(),u(1,(r=z.ITempleProvider,w({token:r,multiple:!0}))),a("design:paramtypes",[$,Array])],t)}(),J={templatesDir:"/_templates",zettel:{regex:""},datetime:{locale:"",timezone:""}},Q=function(){function e(t){this._plugin=t}return e.prototype.load=function(){return s(this,void 0,void 0,(function(){var t,e,n,r;return c(this,(function(i){switch(i.label){case 0:return t=this,n=(e=Object).assign,r=[J],[4,this._plugin.loadData()];case 1:return t.value=n.apply(e,r.concat([i.sent()])),[2]}}))}))},e.prototype.save=function(){return s(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,this._plugin.saveData(this.value)];case 1:return t.sent(),[2]}}))}))},e=o([P(),u(0,D(z.Plugin)),a("design:paramtypes",[t.Plugin_2])],e)}(),X=function(e){function n(t,n,r){var i=e.call(this,t,n)||this;return i._plugin=n,i._settings=r,i}return i(n,e),n.prototype.display=function(){var e=this,n=this.containerEl;n.empty(),n.createEl("h1",{text:this._plugin.manifest.id}),n.createEl("p",{text:this._plugin.manifest.description}),n.createEl("br"),this.createSection(n,"common"),new t.Setting(n).setName("Templates directory location").setDesc("Directory that stores nunjucks templates.").addText((function(t){return t.setPlaceholder("Example: /_templates").setValue(e._settings.value.templatesDir).onChange((function(t){return s(e,void 0,void 0,(function(){return c(this,(function(e){switch(e.label){case 0:return t=t.replace(/^(\/|\\)+|(\/|\\)+$/g,""),this._settings.value.templatesDir=t,[4,this._settings.save()];case 1:return e.sent(),[2]}}))}))}))})),this.createSection(n,"zettel"),new t.Setting(n).setName("Override extraction regex").setDesc('Override the regex for extracting UID and title from filename. Regex must return capture groups named "uid" and "title". For example: (?<uid>^\\d+)(\\s(?<title>.*$))?').addText((function(t){return t.setValue(e._settings.value.zettel.regex).onChange((function(t){return s(e,void 0,void 0,(function(){return c(this,(function(e){switch(e.label){case 0:return this._settings.value.zettel.regex=t,[4,this._settings.save()];case 1:return e.sent(),[2]}}))}))}))})),n.createEl("h3",{text:"datetime"}),new t.Setting(n).setName("Override timezone").setDesc('Defaults to system timezone ("'+K.DateTime.local().zoneName+'").').addText((function(t){return t.setValue(e._settings.value.datetime.timezone).onChange((function(t){return s(e,void 0,void 0,(function(){return c(this,(function(e){switch(e.label){case 0:return this._settings.value.datetime.timezone=t,[4,this._settings.save()];case 1:return e.sent(),[2]}}))}))}))})),new t.Setting(n).setName("Override locale").setDesc('Defaults to system local ("'+K.DateTime.local().locale+'").').addText((function(t){return t.setValue(e._settings.value.datetime.locale).onChange((function(t){return s(e,void 0,void 0,(function(){return c(this,(function(e){switch(e.label){case 0:return this._settings.value.datetime.locale=t,[4,this._settings.save()];case 1:return e.sent(),[2]}}))}))}))}))},n.prototype.createSection=function(t,e){t.createEl("h3",{text:e})},n=o([P(),u(1,D(z.Plugin)),a("design:paramtypes",[t.App,t.Plugin_2,Q])],n)}(t.PluginSettingTab),tt=function(t){function e(e,n){var r=t.call(this,e)||this;return r._obs=n,r}return i(e,t),e.prototype.getItems=function(){return this._obs.getTemplatePaths()},e.prototype.getItemText=function(t){return t},e.prototype.onChooseItem=function(t,e){this._obs.insertTemplate(t)},e}(t.FuzzySuggestModal),et=function(){function e(t,e,n){this._obs=t,this._temple=e,this._settings=n,this._prompt=new tt(t.app,this)}return e.prototype.promptTemplate=function(){return s(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return(t=this.getTemplatePaths()).length>1?(this._prompt.open(),[3,3]):[3,1];case 1:return[4,this.insertTemplate(t[0])];case 2:e.sent(),e.label=3;case 3:return[2]}}))}))},e.prototype.getTemplatePaths=function(){var e=[],n=this._obs.app.vault.getAbstractFileByPath(this._settings.templatesDir);return n instanceof t.TFolder&&t.Vault.recurseChildren(n,(function(n){n instanceof t.TFile&&e.push(n.path)})),e},e.prototype.insertTemplate=function(t){return s(this,void 0,void 0,(function(){var e,n;return c(this,(function(r){switch(r.label){case 0:return[4,this.readFile(t)];case 1:return e=r.sent(),[4,this._temple.render(e)];case 2:return n=r.sent(),this.insertAtCursor(n),[2]}}))}))},e.prototype.insertAtCursor=function(e){var n=this._obs.app.workspace.getActiveViewOfType(t.MarkdownView);n&&n.currentMode instanceof t.MarkdownSourceView&&n.sourceMode.cmEditor.getDoc().replaceSelection(e)},e.prototype.insertDocs=function(){return s(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return[4,this._temple.renderDoc()];case 1:return t=e.sent(),this.insertAtCursor(t),[2]}}))}))},e.prototype.readFile=function(e){return s(this,void 0,void 0,(function(){var n;return c(this,(function(r){switch(r.label){case 0:return(n=this._obs.app.vault.getAbstractFileByPath(e))instanceof t.TFile?[4,this._obs.app.vault.read(n)]:[3,2];case 1:return[2,r.sent()];case 2:throw new Error("Unable to read '"+(null==n?void 0:n.path)+"'")}}))}))},e=o([P(),u(0,D(z.Plugin)),u(2,D(z.TempleSettings)),a("design:paramtypes",[t.Plugin_2,Y,Object])],e)}();const nt=async()=>navigator.clipboard.readText();var rt=function(t){this.text=t},it=function(){function t(){this.name="clipboard"}return t.prototype.docs=function(){return s(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return t={},[4,this.provide()];case 1:return[2,(t.context=e.sent(),t.template="\n# `clipboard`\nExtracts data from your system clipboard. Uses [sindresorhus/clipboardy](https://github.com/sindresorhus/clipboardy).\n\n## Usages\n\n{% raw %}```\ntext: {{ clipboard.text }}\n```{% endraw %}\n\noutputs:\n\n```\ntext: {{ clipboard.text }}\n```\n",t)]}}))}))},t.prototype.provide=function(){return s(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return[4,nt()];case 1:return t=e.sent(),[2,new g(new rt(t))]}}))}))},t=o([P()],t)}(),ot=function(e){function n(t,n){return e.call(this,t,n)||this}return i(n,e),n.prototype.onload=function(){return s(this,void 0,void 0,(function(){var e,n,r=this;return c(this,(function(i){switch(i.label){case 0:return F.registerInstance(z.Plugin,this),F.registerSingleton(Q,Q),[4,(e=F.resolve(Q)).load()];case 1:return i.sent(),F.registerInstance(t.App,this.app),F.registerInstance(t.Workspace,this.app.workspace),F.registerInstance(z.TempleSettings,e.value),F.registerSingleton(X,X),F.registerSingleton(U),F.registerSingleton($),F.registerSingleton(Y,Y),F.registerSingleton(z.ITempleProvider,V),F.registerSingleton(z.ITempleProvider,W),F.registerSingleton(z.ITempleProvider,q),F.registerSingleton(z.ITempleProvider,it),n=F.resolve(et),t.addIcon("temple",'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M277.3 416h-42.7c-23.6 0-42.7 19.1-42.7 42.7V504c0 4.4 3.6 8 8 8h16c4.4 0 8-3.6 8-8v-45.3c0-5.9 4.8-10.7 10.7-10.7h42.7c5.9 0 10.7 4.8 10.7 10.7V504c0 4.4 3.6 8 8 8h16c4.4 0 8-3.6 8-8v-45.3c0-23.6-19.1-42.7-42.7-42.7zM496 352h-16V240c0-8.8-7.2-16-16-16h-16v-80c0-8.8-7.2-16-16-16h-16V16c0-8.8-7.2-16-16-16s-16 7.2-16 16v16h-64V16c0-8.8-7.2-16-16-16s-16 7.2-16 16v16h-64V16c0-8.8-7.2-16-16-16s-16 7.2-16 16v16h-64V16c0-8.8-7.2-16-16-16S96 7.2 96 16v112H80c-8.8 0-16 7.2-16 16v80H48c-8.8 0-16 7.2-16 16v112H16c-8.8 0-16 7.2-16 16v136c0 4.4 3.6 8 8 8h16c4.4 0 8-3.6 8-8V384h64v120c0 4.4 3.6 8 8 8h16c4.4 0 8-3.6 8-8V384h256v120c0 4.4 3.6 8 8 8h16c4.4 0 8-3.6 8-8V384h64v120c0 4.4 3.6 8 8 8h16c4.4 0 8-3.6 8-8V368c0-8.8-7.2-16-16-16zM128 64h256v64H128zm133.3 128h-10.7c-5.9 0-10.7 4.8-10.7 10.7V224h-48v-64h128v64h-48v-21.3c.1-5.9-4.7-10.7-10.6-10.7zM128 352H64v-96h64zm32-128H96v-64h64zm112 128h-32v-26.7c0-3 2.4-5.3 5.3-5.3h21.3c3 0 5.3 2.4 5.3 5.3V352zm80 0h-48v-26.7c0-20.6-16.8-37.3-37.3-37.3h-21.3c-20.6 0-37.3 16.8-37.3 37.3V352h-48v-96h192v96zm0-128v-64h64v64zm96 128h-64v-96h64z"/></svg>'),this.addSettingTab(F.resolve(X)),this.addRibbonIcon("temple","Temple",(function(){return s(r,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,n.promptTemplate()];case 1:return t.sent(),[2]}}))}))})),this.addCommand({id:"obsidian-temple-insert",name:"Insert template",callback:function(){return s(r,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,n.promptTemplate()];case 1:return t.sent(),[2]}}))}))}}),this.addCommand({id:"obsidian-temple-insert-doc",name:"Insert documentation of all providers",callback:function(){return s(r,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,n.insertDocs()];case 1:return t.sent(),[2]}}))}))}}),[2]}}))}))},n}(t.Plugin);module.exports=ot;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsiLi4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZWZsZWN0LW1ldGFkYXRhL1JlZmxlY3QuanMiLCIuLi9zcmMvY29uc3RhbnRzLnRzIiwiLi4vbm9kZV9tb2R1bGVzL3RzeXJpbmdlL2Rpc3QvZXNtNS90eXBlcy9saWZlY3ljbGUuanMiLCIuLi9zcmMvcHJvdmlkZXJzL1RlbXBsZUNvbnRleHQudHMiLCIuLi9ub2RlX21vZHVsZXMvdHN5cmluZ2UvZGlzdC9lc201L3JlZmxlY3Rpb24taGVscGVycy5qcyIsIi4uL25vZGVfbW9kdWxlcy90c3lyaW5nZS9kaXN0L2VzbTUvcHJvdmlkZXJzL2NsYXNzLXByb3ZpZGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3RzeXJpbmdlL2Rpc3QvZXNtNS9wcm92aWRlcnMvZmFjdG9yeS1wcm92aWRlci5qcyIsIi4uL25vZGVfbW9kdWxlcy90c3lyaW5nZS9kaXN0L2VzbTUvbGF6eS1oZWxwZXJzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3RzeXJpbmdlL2Rpc3QvZXNtNS9wcm92aWRlcnMvaW5qZWN0aW9uLXRva2VuLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3RzeXJpbmdlL2Rpc3QvZXNtNS9wcm92aWRlcnMvdG9rZW4tcHJvdmlkZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvdHN5cmluZ2UvZGlzdC9lc201L3Byb3ZpZGVycy92YWx1ZS1wcm92aWRlci5qcyIsIi4uL25vZGVfbW9kdWxlcy90c3lyaW5nZS9kaXN0L2VzbTUvcmVnaXN0cnktYmFzZS5qcyIsIi4uL25vZGVfbW9kdWxlcy90c3lyaW5nZS9kaXN0L2VzbTUvcmVnaXN0cnkuanMiLCIuLi9ub2RlX21vZHVsZXMvdHN5cmluZ2UvZGlzdC9lc201L3Jlc29sdXRpb24tY29udGV4dC5qcyIsIi4uL25vZGVfbW9kdWxlcy90c3lyaW5nZS9kaXN0L2VzbTUvZXJyb3ItaGVscGVycy5qcyIsIi4uL25vZGVfbW9kdWxlcy90c3lyaW5nZS9kaXN0L2VzbTUvaW50ZXJjZXB0b3JzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3RzeXJpbmdlL2Rpc3QvZXNtNS9kZXBlbmRlbmN5LWNvbnRhaW5lci5qcyIsIi4uL25vZGVfbW9kdWxlcy90c3lyaW5nZS9kaXN0L2VzbTUvcHJvdmlkZXJzL3Byb3ZpZGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3RzeXJpbmdlL2Rpc3QvZXNtNS9kZWNvcmF0b3JzL2luamVjdC5qcyIsIi4uL25vZGVfbW9kdWxlcy90c3lyaW5nZS9kaXN0L2VzbTUvZGVjb3JhdG9ycy9pbmplY3RhYmxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3RzeXJpbmdlL2Rpc3QvZXNtNS9pbmRleC5qcyIsIi4uL3NyYy9wcm92aWRlcnMvRmlsZUluZm9UZW1wbGVQcm92aWRlci50cyIsIi4uL3NyYy9wcm92aWRlcnMvRGF0ZVRpbWVDb250ZXh0LnRzIiwiLi4vc3JjL1N5bWJvbHMudHMiLCIuLi9ub2RlX21vZHVsZXMvbHV4b24vYnVpbGQvY2pzLWJyb3dzZXIvbHV4b24uanMiLCIuLi9zcmMvcHJvdmlkZXJzL0RhdGVUaW1lUHJvdmlkZXIudHMiLCIuLi9zcmMvcHJvdmlkZXJzL0RhdGVUaW1lVGVtcGxlUHJvdmlkZXIudHMiLCIuLi9zcmMvcHJvdmlkZXJzL1pldHRlbENvbnRleHQudHMiLCIuLi9zcmMvcHJvdmlkZXJzL1pldHRlbFRlbXBsZVByb3ZpZGVyLnRzIiwiLi4vbm9kZV9tb2R1bGVzL251bmp1Y2tzL2Jyb3dzZXIvbnVuanVja3MuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoL2xvZGFzaC5qcyIsIi4uL3NyYy9wcm92aWRlcnMvRGF0ZVRpbWVGaWx0ZXJzLnRzIiwiLi4vc3JjL1RlbXBsZVNlcnZpY2UudHMiLCIuLi9ub2RlX21vZHVsZXMvdHN5cmluZ2UvZGlzdC9lc201L2RlY29yYXRvcnMvaW5qZWN0LWFsbC5qcyIsIi4uL3NyYy9zZXR0aW5ncy9UZW1wbGVTZXR0aW5ncy50cyIsIi4uL3NyYy9zZXR0aW5ncy9UZW1wbGVTZXR0aW5nc1Byb3ZpZGVyLnRzIiwiLi4vc3JjL3NldHRpbmdzL1RlbXBsZVNldHRpbmdzVGFiLnRzIiwiLi4vc3JjL1RlbXBsZUZ1enp5U3VnZ2VzdE1vZGFsLnRzIiwiLi4vc3JjL09ic2lkaWFuU2VydmljZS50cyIsIi4uL25vZGVfbW9kdWxlcy9jbGlwYm9hcmR5L2Jyb3dzZXIuanMiLCIuLi9zcmMvcHJvdmlkZXJzL0NsaXBib2FyZENvbnRleHQudHMiLCIuLi9zcmMvcHJvdmlkZXJzL0NsaXBib2FyZFRlbXBsZVByb3ZpZGVyLnRzIiwiLi4vc3JjL21haW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XHJcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59KTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgX19jcmVhdGVCaW5kaW5nKG8sIG0sIHApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xyXG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xyXG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgcHJpdmF0ZU1hcCkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIGdldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcml2YXRlTWFwLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwLCB2YWx1ZSkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHByaXZhdGVNYXAuc2V0KHJlY2VpdmVyLCB2YWx1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5Db3B5cmlnaHQgKEMpIE1pY3Jvc29mdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxuXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG52YXIgUmVmbGVjdDtcbihmdW5jdGlvbiAoUmVmbGVjdCkge1xuICAgIC8vIE1ldGFkYXRhIFByb3Bvc2FsXG4gICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS9cbiAgICAoZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgICAgICAgdmFyIHJvb3QgPSB0eXBlb2YgZ2xvYmFsID09PSBcIm9iamVjdFwiID8gZ2xvYmFsIDpcbiAgICAgICAgICAgIHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiID8gc2VsZiA6XG4gICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMgPT09IFwib2JqZWN0XCIgPyB0aGlzIDpcbiAgICAgICAgICAgICAgICAgICAgRnVuY3Rpb24oXCJyZXR1cm4gdGhpcztcIikoKTtcbiAgICAgICAgdmFyIGV4cG9ydGVyID0gbWFrZUV4cG9ydGVyKFJlZmxlY3QpO1xuICAgICAgICBpZiAodHlwZW9mIHJvb3QuUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgcm9vdC5SZWZsZWN0ID0gUmVmbGVjdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGV4cG9ydGVyID0gbWFrZUV4cG9ydGVyKHJvb3QuUmVmbGVjdCwgZXhwb3J0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGZhY3RvcnkoZXhwb3J0ZXIpO1xuICAgICAgICBmdW5jdGlvbiBtYWtlRXhwb3J0ZXIodGFyZ2V0LCBwcmV2aW91cykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXRba2V5XSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgeyBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwcmV2aW91cylcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSkoZnVuY3Rpb24gKGV4cG9ydGVyKSB7XG4gICAgICAgIHZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuICAgICAgICAvLyBmZWF0dXJlIHRlc3QgZm9yIFN5bWJvbCBzdXBwb3J0XG4gICAgICAgIHZhciBzdXBwb3J0c1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIjtcbiAgICAgICAgdmFyIHRvUHJpbWl0aXZlU3ltYm9sID0gc3VwcG9ydHNTeW1ib2wgJiYgdHlwZW9mIFN5bWJvbC50b1ByaW1pdGl2ZSAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbC50b1ByaW1pdGl2ZSA6IFwiQEB0b1ByaW1pdGl2ZVwiO1xuICAgICAgICB2YXIgaXRlcmF0b3JTeW1ib2wgPSBzdXBwb3J0c1N5bWJvbCAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sLml0ZXJhdG9yIDogXCJAQGl0ZXJhdG9yXCI7XG4gICAgICAgIHZhciBzdXBwb3J0c0NyZWF0ZSA9IHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSBcImZ1bmN0aW9uXCI7IC8vIGZlYXR1cmUgdGVzdCBmb3IgT2JqZWN0LmNyZWF0ZSBzdXBwb3J0XG4gICAgICAgIHZhciBzdXBwb3J0c1Byb3RvID0geyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheTsgLy8gZmVhdHVyZSB0ZXN0IGZvciBfX3Byb3RvX18gc3VwcG9ydFxuICAgICAgICB2YXIgZG93bkxldmVsID0gIXN1cHBvcnRzQ3JlYXRlICYmICFzdXBwb3J0c1Byb3RvO1xuICAgICAgICB2YXIgSGFzaE1hcCA9IHtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhbiBvYmplY3QgaW4gZGljdGlvbmFyeSBtb2RlIChhLmsuYS4gXCJzbG93XCIgbW9kZSBpbiB2OClcbiAgICAgICAgICAgIGNyZWF0ZTogc3VwcG9ydHNDcmVhdGVcbiAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE1ha2VEaWN0aW9uYXJ5KE9iamVjdC5jcmVhdGUobnVsbCkpOyB9XG4gICAgICAgICAgICAgICAgOiBzdXBwb3J0c1Byb3RvXG4gICAgICAgICAgICAgICAgICAgID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gTWFrZURpY3Rpb25hcnkoeyBfX3Byb3RvX186IG51bGwgfSk7IH1cbiAgICAgICAgICAgICAgICAgICAgOiBmdW5jdGlvbiAoKSB7IHJldHVybiBNYWtlRGljdGlvbmFyeSh7fSk7IH0sXG4gICAgICAgICAgICBoYXM6IGRvd25MZXZlbFxuICAgICAgICAgICAgICAgID8gZnVuY3Rpb24gKG1hcCwga2V5KSB7IHJldHVybiBoYXNPd24uY2FsbChtYXAsIGtleSk7IH1cbiAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uIChtYXAsIGtleSkgeyByZXR1cm4ga2V5IGluIG1hcDsgfSxcbiAgICAgICAgICAgIGdldDogZG93bkxldmVsXG4gICAgICAgICAgICAgICAgPyBmdW5jdGlvbiAobWFwLCBrZXkpIHsgcmV0dXJuIGhhc093bi5jYWxsKG1hcCwga2V5KSA/IG1hcFtrZXldIDogdW5kZWZpbmVkOyB9XG4gICAgICAgICAgICAgICAgOiBmdW5jdGlvbiAobWFwLCBrZXkpIHsgcmV0dXJuIG1hcFtrZXldOyB9LFxuICAgICAgICB9O1xuICAgICAgICAvLyBMb2FkIGdsb2JhbCBvciBzaGltIHZlcnNpb25zIG9mIE1hcCwgU2V0LCBhbmQgV2Vha01hcFxuICAgICAgICB2YXIgZnVuY3Rpb25Qcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRnVuY3Rpb24pO1xuICAgICAgICB2YXIgdXNlUG9seWZpbGwgPSB0eXBlb2YgcHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBwcm9jZXNzLmVudiAmJiBwcm9jZXNzLmVudltcIlJFRkxFQ1RfTUVUQURBVEFfVVNFX01BUF9QT0xZRklMTFwiXSA9PT0gXCJ0cnVlXCI7XG4gICAgICAgIHZhciBfTWFwID0gIXVzZVBvbHlmaWxsICYmIHR5cGVvZiBNYXAgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgTWFwLnByb3RvdHlwZS5lbnRyaWVzID09PSBcImZ1bmN0aW9uXCIgPyBNYXAgOiBDcmVhdGVNYXBQb2x5ZmlsbCgpO1xuICAgICAgICB2YXIgX1NldCA9ICF1c2VQb2x5ZmlsbCAmJiB0eXBlb2YgU2V0ID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFNldC5wcm90b3R5cGUuZW50cmllcyA9PT0gXCJmdW5jdGlvblwiID8gU2V0IDogQ3JlYXRlU2V0UG9seWZpbGwoKTtcbiAgICAgICAgdmFyIF9XZWFrTWFwID0gIXVzZVBvbHlmaWxsICYmIHR5cGVvZiBXZWFrTWFwID09PSBcImZ1bmN0aW9uXCIgPyBXZWFrTWFwIDogQ3JlYXRlV2Vha01hcFBvbHlmaWxsKCk7XG4gICAgICAgIC8vIFtbTWV0YWRhdGFdXSBpbnRlcm5hbCBzbG90XG4gICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5LW9iamVjdC1pbnRlcm5hbC1tZXRob2RzLWFuZC1pbnRlcm5hbC1zbG90c1xuICAgICAgICB2YXIgTWV0YWRhdGEgPSBuZXcgX1dlYWtNYXAoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFwcGxpZXMgYSBzZXQgb2YgZGVjb3JhdG9ycyB0byBhIHByb3BlcnR5IG9mIGEgdGFyZ2V0IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIGRlY29yYXRvcnMgQW4gYXJyYXkgb2YgZGVjb3JhdG9ycy5cbiAgICAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSB0byBkZWNvcmF0ZS5cbiAgICAgICAgICogQHBhcmFtIGF0dHJpYnV0ZXMgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkgZGVzY3JpcHRvciBmb3IgdGhlIHRhcmdldCBrZXkuXG4gICAgICAgICAqIEByZW1hcmtzIERlY29yYXRvcnMgYXJlIGFwcGxpZWQgaW4gcmV2ZXJzZSBvcmRlci5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcbiAgICAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICAgKiAgICAgRXhhbXBsZSA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9yc0FycmF5LCBFeGFtcGxlKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9yc0FycmF5LCBFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9yc0FycmF5LCBFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIixcbiAgICAgICAgICogICAgICAgICBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnNBcnJheSwgRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIixcbiAgICAgICAgICogICAgICAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKSkpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIsXG4gICAgICAgICAqICAgICAgICAgUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzQXJyYXksIEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiLFxuICAgICAgICAgKiAgICAgICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKSkpO1xuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUlzQXJyYXkoZGVjb3JhdG9ycykpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICBpZiAoIUlzT2JqZWN0KGF0dHJpYnV0ZXMpICYmICFJc1VuZGVmaW5lZChhdHRyaWJ1dGVzKSAmJiAhSXNOdWxsKGF0dHJpYnV0ZXMpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgaWYgKElzTnVsbChhdHRyaWJ1dGVzKSlcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBEZWNvcmF0ZVByb3BlcnR5KGRlY29yYXRvcnMsIHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCFJc0FycmF5KGRlY29yYXRvcnMpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFJc0NvbnN0cnVjdG9yKHRhcmdldCkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gRGVjb3JhdGVDb25zdHJ1Y3RvcihkZWNvcmF0b3JzLCB0YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwiZGVjb3JhdGVcIiwgZGVjb3JhdGUpO1xuICAgICAgICAvLyA0LjEuMiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKVxuICAgICAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhLyNyZWZsZWN0Lm1ldGFkYXRhXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGRlZmF1bHQgbWV0YWRhdGEgZGVjb3JhdG9yIGZhY3RvcnkgdGhhdCBjYW4gYmUgdXNlZCBvbiBhIGNsYXNzLCBjbGFzcyBtZW1iZXIsIG9yIHBhcmFtZXRlci5cbiAgICAgICAgICogQHBhcmFtIG1ldGFkYXRhS2V5IFRoZSBrZXkgZm9yIHRoZSBtZXRhZGF0YSBlbnRyeS5cbiAgICAgICAgICogQHBhcmFtIG1ldGFkYXRhVmFsdWUgVGhlIHZhbHVlIGZvciB0aGUgbWV0YWRhdGEgZW50cnkuXG4gICAgICAgICAqIEByZXR1cm5zIEEgZGVjb3JhdG9yIGZ1bmN0aW9uLlxuICAgICAgICAgKiBAcmVtYXJrc1xuICAgICAgICAgKiBJZiBgbWV0YWRhdGFLZXlgIGlzIGFscmVhZHkgZGVmaW5lZCBmb3IgdGhlIHRhcmdldCBhbmQgdGFyZ2V0IGtleSwgdGhlXG4gICAgICAgICAqIG1ldGFkYXRhVmFsdWUgZm9yIHRoYXQga2V5IHdpbGwgYmUgb3ZlcndyaXR0ZW4uXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICAgKiAgICAgQFJlZmxlY3QubWV0YWRhdGEoa2V5LCB2YWx1ZSlcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yLCBUeXBlU2NyaXB0IG9ubHkpXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICBAUmVmbGVjdC5tZXRhZGF0YShrZXksIHZhbHVlKVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUsIFR5cGVTY3JpcHQgb25seSlcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIEBSZWZsZWN0Lm1ldGFkYXRhKGtleSwgdmFsdWUpXG4gICAgICAgICAqICAgICAgICAgcHJvcGVydHk7XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgQFJlZmxlY3QubWV0YWRhdGEoa2V5LCB2YWx1ZSlcbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIEBSZWZsZWN0Lm1ldGFkYXRhKGtleSwgdmFsdWUpXG4gICAgICAgICAqICAgICAgICAgbWV0aG9kKCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBtZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xuICAgICAgICAgICAgZnVuY3Rpb24gZGVjb3JhdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSAmJiAhSXNQcm9wZXJ0eUtleShwcm9wZXJ0eUtleSkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICBPcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkZWNvcmF0b3I7XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0ZXIoXCJtZXRhZGF0YVwiLCBtZXRhZGF0YSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmUgYSB1bmlxdWUgbWV0YWRhdGEgZW50cnkgb24gdGhlIHRhcmdldC5cbiAgICAgICAgICogQHBhcmFtIG1ldGFkYXRhS2V5IEEga2V5IHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlIG1ldGFkYXRhLlxuICAgICAgICAgKiBAcGFyYW0gbWV0YWRhdGFWYWx1ZSBBIHZhbHVlIHRoYXQgY29udGFpbnMgYXR0YWNoZWQgbWV0YWRhdGEuXG4gICAgICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3Qgb24gd2hpY2ggdG8gZGVmaW5lIG1ldGFkYXRhLlxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IGZvciB0aGUgdGFyZ2V0LlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxuICAgICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgICAqICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgb3B0aW9ucywgRXhhbXBsZSk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgb3B0aW9ucywgRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgb3B0aW9ucywgRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIG9wdGlvbnMsIEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgb3B0aW9ucywgRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gZGVjb3JhdG9yIGZhY3RvcnkgYXMgbWV0YWRhdGEtcHJvZHVjaW5nIGFubm90YXRpb24uXG4gICAgICAgICAqICAgICBmdW5jdGlvbiBNeUFubm90YXRpb24ob3B0aW9ucyk6IERlY29yYXRvciB7XG4gICAgICAgICAqICAgICAgICAgcmV0dXJuICh0YXJnZXQsIGtleT8pID0+IFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBvcHRpb25zLCB0YXJnZXQsIGtleSk7XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKVxuICAgICAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0ZXIoXCJkZWZpbmVNZXRhZGF0YVwiLCBkZWZpbmVNZXRhZGF0YSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIGEgdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIHRoZSB0YXJnZXQgb2JqZWN0IG9yIGl0cyBwcm90b3R5cGUgY2hhaW4gaGFzIHRoZSBwcm92aWRlZCBtZXRhZGF0YSBrZXkgZGVmaW5lZC5cbiAgICAgICAgICogQHBhcmFtIG1ldGFkYXRhS2V5IEEga2V5IHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlIG1ldGFkYXRhLlxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0IG9uIHdoaWNoIHRoZSBtZXRhZGF0YSBpcyBkZWZpbmVkLlxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IGZvciB0aGUgdGFyZ2V0LlxuICAgICAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG1ldGFkYXRhIGtleSB3YXMgZGVmaW5lZCBvbiB0aGUgdGFyZ2V0IG9iamVjdCBvciBpdHMgcHJvdG90eXBlIGNoYWluOyBvdGhlcndpc2UsIGBmYWxzZWAuXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XG4gICAgICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc01ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBoYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKVxuICAgICAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlIYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0ZXIoXCJoYXNNZXRhZGF0YVwiLCBoYXNNZXRhZGF0YSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIGEgdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIHRoZSB0YXJnZXQgb2JqZWN0IGhhcyB0aGUgcHJvdmlkZWQgbWV0YWRhdGEga2V5IGRlZmluZWQuXG4gICAgICAgICAqIEBwYXJhbSBtZXRhZGF0YUtleSBBIGtleSB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBtZXRhZGF0YS5cbiAgICAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0aGUgbWV0YWRhdGEgaXMgZGVmaW5lZC5cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cbiAgICAgICAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBtZXRhZGF0YSBrZXkgd2FzIGRlZmluZWQgb24gdGhlIHRhcmdldCBvYmplY3Q7IG90aGVyd2lzZSwgYGZhbHNlYC5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcbiAgICAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzT3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXG4gICAgICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeUhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBleHBvcnRlcihcImhhc093bk1ldGFkYXRhXCIsIGhhc093bk1ldGFkYXRhKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIG1ldGFkYXRhIHZhbHVlIGZvciB0aGUgcHJvdmlkZWQgbWV0YWRhdGEga2V5IG9uIHRoZSB0YXJnZXQgb2JqZWN0IG9yIGl0cyBwcm90b3R5cGUgY2hhaW4uXG4gICAgICAgICAqIEBwYXJhbSBtZXRhZGF0YUtleSBBIGtleSB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBtZXRhZGF0YS5cbiAgICAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0aGUgbWV0YWRhdGEgaXMgZGVmaW5lZC5cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cbiAgICAgICAgICogQHJldHVybnMgVGhlIG1ldGFkYXRhIHZhbHVlIGZvciB0aGUgbWV0YWRhdGEga2V5IGlmIGZvdW5kOyBvdGhlcndpc2UsIGB1bmRlZmluZWRgLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxuICAgICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gZ2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5R2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwiZ2V0TWV0YWRhdGFcIiwgZ2V0TWV0YWRhdGEpO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgbWV0YWRhdGEgdmFsdWUgZm9yIHRoZSBwcm92aWRlZCBtZXRhZGF0YSBrZXkgb24gdGhlIHRhcmdldCBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSBtZXRhZGF0YUtleSBBIGtleSB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBtZXRhZGF0YS5cbiAgICAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0aGUgbWV0YWRhdGEgaXMgZGVmaW5lZC5cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cbiAgICAgICAgICogQHJldHVybnMgVGhlIG1ldGFkYXRhIHZhbHVlIGZvciB0aGUgbWV0YWRhdGEga2V5IGlmIGZvdW5kOyBvdGhlcndpc2UsIGB1bmRlZmluZWRgLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxuICAgICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5R2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwiZ2V0T3duTWV0YWRhdGFcIiwgZ2V0T3duTWV0YWRhdGEpO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgbWV0YWRhdGEga2V5cyBkZWZpbmVkIG9uIHRoZSB0YXJnZXQgb2JqZWN0IG9yIGl0cyBwcm90b3R5cGUgY2hhaW4uXG4gICAgICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3Qgb24gd2hpY2ggdGhlIG1ldGFkYXRhIGlzIGRlZmluZWQuXG4gICAgICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgZm9yIHRoZSB0YXJnZXQuXG4gICAgICAgICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHVuaXF1ZSBtZXRhZGF0YSBrZXlzLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxuICAgICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhS2V5cyhFeGFtcGxlKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGFLZXlzKEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YUtleXMoRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YUtleXMoRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGFLZXlzKEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGdldE1ldGFkYXRhS2V5cyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXG4gICAgICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeU1ldGFkYXRhS2V5cyh0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBleHBvcnRlcihcImdldE1ldGFkYXRhS2V5c1wiLCBnZXRNZXRhZGF0YUtleXMpO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgdW5pcXVlIG1ldGFkYXRhIGtleXMgZGVmaW5lZCBvbiB0aGUgdGFyZ2V0IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0aGUgbWV0YWRhdGEgaXMgZGVmaW5lZC5cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cbiAgICAgICAgICogQHJldHVybnMgQW4gYXJyYXkgb2YgdW5pcXVlIG1ldGFkYXRhIGtleXMuXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XG4gICAgICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGFLZXlzKEV4YW1wbGUpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YUtleXMoRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhS2V5cyhFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhS2V5cyhFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YUtleXMoRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGFLZXlzKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwiZ2V0T3duTWV0YWRhdGFLZXlzXCIsIGdldE93bk1ldGFkYXRhS2V5cyk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWxldGVzIHRoZSBtZXRhZGF0YSBlbnRyeSBmcm9tIHRoZSB0YXJnZXQgb2JqZWN0IHdpdGggdGhlIHByb3ZpZGVkIGtleS5cbiAgICAgICAgICogQHBhcmFtIG1ldGFkYXRhS2V5IEEga2V5IHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlIG1ldGFkYXRhLlxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0IG9uIHdoaWNoIHRoZSBtZXRhZGF0YSBpcyBkZWZpbmVkLlxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IGZvciB0aGUgdGFyZ2V0LlxuICAgICAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG1ldGFkYXRhIGVudHJ5IHdhcyBmb3VuZCBhbmQgZGVsZXRlZDsgb3RoZXJ3aXNlLCBmYWxzZS5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcbiAgICAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5kZWxldGVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5kZWxldGVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5kZWxldGVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZGVsZXRlTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5kZWxldGVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGRlbGV0ZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXG4gICAgICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIHZhciBtZXRhZGF0YU1hcCA9IEdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCBwcm9wZXJ0eUtleSwgLypDcmVhdGUqLyBmYWxzZSk7XG4gICAgICAgICAgICBpZiAoSXNVbmRlZmluZWQobWV0YWRhdGFNYXApKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghbWV0YWRhdGFNYXAuZGVsZXRlKG1ldGFkYXRhS2V5KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBpZiAobWV0YWRhdGFNYXAuc2l6ZSA+IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBNZXRhZGF0YS5nZXQodGFyZ2V0KTtcbiAgICAgICAgICAgIHRhcmdldE1ldGFkYXRhLmRlbGV0ZShwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICBpZiAodGFyZ2V0TWV0YWRhdGEuc2l6ZSA+IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBNZXRhZGF0YS5kZWxldGUodGFyZ2V0KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwiZGVsZXRlTWV0YWRhdGFcIiwgZGVsZXRlTWV0YWRhdGEpO1xuICAgICAgICBmdW5jdGlvbiBEZWNvcmF0ZUNvbnN0cnVjdG9yKGRlY29yYXRvcnMsIHRhcmdldCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVjb3JhdG9yID0gZGVjb3JhdG9yc1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgZGVjb3JhdGVkID0gZGVjb3JhdG9yKHRhcmdldCk7XG4gICAgICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChkZWNvcmF0ZWQpICYmICFJc051bGwoZGVjb3JhdGVkKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIUlzQ29uc3RydWN0b3IoZGVjb3JhdGVkKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gZGVjb3JhdGVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gRGVjb3JhdGVQcm9wZXJ0eShkZWNvcmF0b3JzLCB0YXJnZXQsIHByb3BlcnR5S2V5LCBkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgICAgIHZhciBkZWNvcmF0b3IgPSBkZWNvcmF0b3JzW2ldO1xuICAgICAgICAgICAgICAgIHZhciBkZWNvcmF0ZWQgPSBkZWNvcmF0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChkZWNvcmF0ZWQpICYmICFJc051bGwoZGVjb3JhdGVkKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIUlzT2JqZWN0KGRlY29yYXRlZCkpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IgPSBkZWNvcmF0ZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gR2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBDcmVhdGUpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXRNZXRhZGF0YSA9IE1ldGFkYXRhLmdldChPKTtcbiAgICAgICAgICAgIGlmIChJc1VuZGVmaW5lZCh0YXJnZXRNZXRhZGF0YSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUNyZWF0ZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB0YXJnZXRNZXRhZGF0YSA9IG5ldyBfTWFwKCk7XG4gICAgICAgICAgICAgICAgTWV0YWRhdGEuc2V0KE8sIHRhcmdldE1ldGFkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBtZXRhZGF0YU1hcCA9IHRhcmdldE1ldGFkYXRhLmdldChQKTtcbiAgICAgICAgICAgIGlmIChJc1VuZGVmaW5lZChtZXRhZGF0YU1hcCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUNyZWF0ZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBtZXRhZGF0YU1hcCA9IG5ldyBfTWFwKCk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0TWV0YWRhdGEuc2V0KFAsIG1ldGFkYXRhTWFwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtZXRhZGF0YU1hcDtcbiAgICAgICAgfVxuICAgICAgICAvLyAzLjEuMS4xIE9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApXG4gICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5aGFzbWV0YWRhdGFcbiAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlIYXNNZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCkge1xuICAgICAgICAgICAgdmFyIGhhc093biA9IE9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICAgICAgICAgICAgaWYgKGhhc093bilcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBPcmRpbmFyeUdldFByb3RvdHlwZU9mKE8pO1xuICAgICAgICAgICAgaWYgKCFJc051bGwocGFyZW50KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlIYXNNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyAzLjEuMi4xIE9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApXG4gICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5aGFzb3dubWV0YWRhdGFcbiAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCkge1xuICAgICAgICAgICAgdmFyIG1ldGFkYXRhTWFwID0gR2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCAvKkNyZWF0ZSovIGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChJc1VuZGVmaW5lZChtZXRhZGF0YU1hcCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIFRvQm9vbGVhbihtZXRhZGF0YU1hcC5oYXMoTWV0YWRhdGFLZXkpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyAzLjEuMy4xIE9yZGluYXJ5R2V0TWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApXG4gICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5Z2V0bWV0YWRhdGFcbiAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCkge1xuICAgICAgICAgICAgdmFyIGhhc093biA9IE9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICAgICAgICAgICAgaWYgKGhhc093bilcbiAgICAgICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlHZXRPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gT3JkaW5hcnlHZXRQcm90b3R5cGVPZihPKTtcbiAgICAgICAgICAgIGlmICghSXNOdWxsKHBhcmVudCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5R2V0TWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCk7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIDMuMS40LjEgT3JkaW5hcnlHZXRPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUClcbiAgICAgICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnlnZXRvd25tZXRhZGF0YVxuICAgICAgICBmdW5jdGlvbiBPcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gICAgICAgICAgICB2YXIgbWV0YWRhdGFNYXAgPSBHZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIC8qQ3JlYXRlKi8gZmFsc2UpO1xuICAgICAgICAgICAgaWYgKElzVW5kZWZpbmVkKG1ldGFkYXRhTWFwKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmV0dXJuIG1ldGFkYXRhTWFwLmdldChNZXRhZGF0YUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gMy4xLjUuMSBPcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlLCBPLCBQKVxuICAgICAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhLyNvcmRpbmFyeWRlZmluZW93bm1ldGFkYXRhXG4gICAgICAgIGZ1bmN0aW9uIE9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApIHtcbiAgICAgICAgICAgIHZhciBtZXRhZGF0YU1hcCA9IEdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgLypDcmVhdGUqLyB0cnVlKTtcbiAgICAgICAgICAgIG1ldGFkYXRhTWFwLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gMy4xLjYuMSBPcmRpbmFyeU1ldGFkYXRhS2V5cyhPLCBQKVxuICAgICAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhLyNvcmRpbmFyeW1ldGFkYXRha2V5c1xuICAgICAgICBmdW5jdGlvbiBPcmRpbmFyeU1ldGFkYXRhS2V5cyhPLCBQKSB7XG4gICAgICAgICAgICB2YXIgb3duS2V5cyA9IE9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKE8sIFApO1xuICAgICAgICAgICAgdmFyIHBhcmVudCA9IE9yZGluYXJ5R2V0UHJvdG90eXBlT2YoTyk7XG4gICAgICAgICAgICBpZiAocGFyZW50ID09PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiBvd25LZXlzO1xuICAgICAgICAgICAgdmFyIHBhcmVudEtleXMgPSBPcmRpbmFyeU1ldGFkYXRhS2V5cyhwYXJlbnQsIFApO1xuICAgICAgICAgICAgaWYgKHBhcmVudEtleXMubGVuZ3RoIDw9IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIG93bktleXM7XG4gICAgICAgICAgICBpZiAob3duS2V5cy5sZW5ndGggPD0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50S2V5cztcbiAgICAgICAgICAgIHZhciBzZXQgPSBuZXcgX1NldCgpO1xuICAgICAgICAgICAgdmFyIGtleXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgb3duS2V5c18xID0gb3duS2V5czsgX2kgPCBvd25LZXlzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IG93bktleXNfMVtfaV07XG4gICAgICAgICAgICAgICAgdmFyIGhhc0tleSA9IHNldC5oYXMoa2V5KTtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc0tleSkge1xuICAgICAgICAgICAgICAgICAgICBzZXQuYWRkKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgcGFyZW50S2V5c18xID0gcGFyZW50S2V5czsgX2EgPCBwYXJlbnRLZXlzXzEubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IHBhcmVudEtleXNfMVtfYV07XG4gICAgICAgICAgICAgICAgdmFyIGhhc0tleSA9IHNldC5oYXMoa2V5KTtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc0tleSkge1xuICAgICAgICAgICAgICAgICAgICBzZXQuYWRkKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBrZXlzO1xuICAgICAgICB9XG4gICAgICAgIC8vIDMuMS43LjEgT3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUClcbiAgICAgICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnlvd25tZXRhZGF0YWtleXNcbiAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUCkge1xuICAgICAgICAgICAgdmFyIGtleXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBtZXRhZGF0YU1hcCA9IEdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgLypDcmVhdGUqLyBmYWxzZSk7XG4gICAgICAgICAgICBpZiAoSXNVbmRlZmluZWQobWV0YWRhdGFNYXApKVxuICAgICAgICAgICAgICAgIHJldHVybiBrZXlzO1xuICAgICAgICAgICAgdmFyIGtleXNPYmogPSBtZXRhZGF0YU1hcC5rZXlzKCk7XG4gICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBHZXRJdGVyYXRvcihrZXlzT2JqKTtcbiAgICAgICAgICAgIHZhciBrID0gMDtcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5leHQgPSBJdGVyYXRvclN0ZXAoaXRlcmF0b3IpO1xuICAgICAgICAgICAgICAgIGlmICghbmV4dCkge1xuICAgICAgICAgICAgICAgICAgICBrZXlzLmxlbmd0aCA9IGs7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbmV4dFZhbHVlID0gSXRlcmF0b3JWYWx1ZShuZXh0KTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBrZXlzW2tdID0gbmV4dFZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgSXRlcmF0b3JDbG9zZShpdGVyYXRvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGsrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyA2IEVDTUFTY3JpcHQgRGF0YSBUeXAwZXMgYW5kIFZhbHVlc1xuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1lY21hc2NyaXB0LWRhdGEtdHlwZXMtYW5kLXZhbHVlc1xuICAgICAgICBmdW5jdGlvbiBUeXBlKHgpIHtcbiAgICAgICAgICAgIGlmICh4ID09PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiAxIC8qIE51bGwgKi87XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiB4KSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOiByZXR1cm4gMCAvKiBVbmRlZmluZWQgKi87XG4gICAgICAgICAgICAgICAgY2FzZSBcImJvb2xlYW5cIjogcmV0dXJuIDIgLyogQm9vbGVhbiAqLztcbiAgICAgICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6IHJldHVybiAzIC8qIFN0cmluZyAqLztcbiAgICAgICAgICAgICAgICBjYXNlIFwic3ltYm9sXCI6IHJldHVybiA0IC8qIFN5bWJvbCAqLztcbiAgICAgICAgICAgICAgICBjYXNlIFwibnVtYmVyXCI6IHJldHVybiA1IC8qIE51bWJlciAqLztcbiAgICAgICAgICAgICAgICBjYXNlIFwib2JqZWN0XCI6IHJldHVybiB4ID09PSBudWxsID8gMSAvKiBOdWxsICovIDogNiAvKiBPYmplY3QgKi87XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIDYgLyogT2JqZWN0ICovO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIDYuMS4xIFRoZSBVbmRlZmluZWQgVHlwZVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzLXVuZGVmaW5lZC10eXBlXG4gICAgICAgIGZ1bmN0aW9uIElzVW5kZWZpbmVkKHgpIHtcbiAgICAgICAgICAgIHJldHVybiB4ID09PSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNi4xLjIgVGhlIE51bGwgVHlwZVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzLW51bGwtdHlwZVxuICAgICAgICBmdW5jdGlvbiBJc051bGwoeCkge1xuICAgICAgICAgICAgcmV0dXJuIHggPT09IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNi4xLjUgVGhlIFN5bWJvbCBUeXBlXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMtc3ltYm9sLXR5cGVcbiAgICAgICAgZnVuY3Rpb24gSXNTeW1ib2woeCkge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSBcInN5bWJvbFwiO1xuICAgICAgICB9XG4gICAgICAgIC8vIDYuMS43IFRoZSBPYmplY3QgVHlwZVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QtdHlwZVxuICAgICAgICBmdW5jdGlvbiBJc09iamVjdCh4KSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHggPT09IFwib2JqZWN0XCIgPyB4ICE9PSBudWxsIDogdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIjtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjEgVHlwZSBDb252ZXJzaW9uXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXR5cGUtY29udmVyc2lvblxuICAgICAgICAvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmVcbiAgICAgICAgZnVuY3Rpb24gVG9QcmltaXRpdmUoaW5wdXQsIFByZWZlcnJlZFR5cGUpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoVHlwZShpbnB1dCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDAgLyogVW5kZWZpbmVkICovOiByZXR1cm4gaW5wdXQ7XG4gICAgICAgICAgICAgICAgY2FzZSAxIC8qIE51bGwgKi86IHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgICAgICBjYXNlIDIgLyogQm9vbGVhbiAqLzogcmV0dXJuIGlucHV0O1xuICAgICAgICAgICAgICAgIGNhc2UgMyAvKiBTdHJpbmcgKi86IHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgICAgICBjYXNlIDQgLyogU3ltYm9sICovOiByZXR1cm4gaW5wdXQ7XG4gICAgICAgICAgICAgICAgY2FzZSA1IC8qIE51bWJlciAqLzogcmV0dXJuIGlucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGhpbnQgPSBQcmVmZXJyZWRUeXBlID09PSAzIC8qIFN0cmluZyAqLyA/IFwic3RyaW5nXCIgOiBQcmVmZXJyZWRUeXBlID09PSA1IC8qIE51bWJlciAqLyA/IFwibnVtYmVyXCIgOiBcImRlZmF1bHRcIjtcbiAgICAgICAgICAgIHZhciBleG90aWNUb1ByaW0gPSBHZXRNZXRob2QoaW5wdXQsIHRvUHJpbWl0aXZlU3ltYm9sKTtcbiAgICAgICAgICAgIGlmIChleG90aWNUb1ByaW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBleG90aWNUb1ByaW0uY2FsbChpbnB1dCwgaGludCk7XG4gICAgICAgICAgICAgICAgaWYgKElzT2JqZWN0KHJlc3VsdCkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5VG9QcmltaXRpdmUoaW5wdXQsIGhpbnQgPT09IFwiZGVmYXVsdFwiID8gXCJudW1iZXJcIiA6IGhpbnQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuMS4xLjEgT3JkaW5hcnlUb1ByaW1pdGl2ZShPLCBoaW50KVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vcmRpbmFyeXRvcHJpbWl0aXZlXG4gICAgICAgIGZ1bmN0aW9uIE9yZGluYXJ5VG9QcmltaXRpdmUoTywgaGludCkge1xuICAgICAgICAgICAgaWYgKGhpbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgdG9TdHJpbmdfMSA9IE8udG9TdHJpbmc7XG4gICAgICAgICAgICAgICAgaWYgKElzQ2FsbGFibGUodG9TdHJpbmdfMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRvU3RyaW5nXzEuY2FsbChPKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFJc09iamVjdChyZXN1bHQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlT2YgPSBPLnZhbHVlT2Y7XG4gICAgICAgICAgICAgICAgaWYgKElzQ2FsbGFibGUodmFsdWVPZikpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlT2YuY2FsbChPKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFJc09iamVjdChyZXN1bHQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVPZiA9IE8udmFsdWVPZjtcbiAgICAgICAgICAgICAgICBpZiAoSXNDYWxsYWJsZSh2YWx1ZU9mKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdmFsdWVPZi5jYWxsKE8pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHJlc3VsdCkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdG9TdHJpbmdfMiA9IE8udG9TdHJpbmc7XG4gICAgICAgICAgICAgICAgaWYgKElzQ2FsbGFibGUodG9TdHJpbmdfMikpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRvU3RyaW5nXzIuY2FsbChPKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFJc09iamVjdChyZXN1bHQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy4xLjIgVG9Cb29sZWFuKGFyZ3VtZW50KVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvMjAxNi8jc2VjLXRvYm9vbGVhblxuICAgICAgICBmdW5jdGlvbiBUb0Jvb2xlYW4oYXJndW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiAhIWFyZ3VtZW50O1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuMS4xMiBUb1N0cmluZyhhcmd1bWVudClcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9zdHJpbmdcbiAgICAgICAgZnVuY3Rpb24gVG9TdHJpbmcoYXJndW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBcIlwiICsgYXJndW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy4xLjE0IFRvUHJvcGVydHlLZXkoYXJndW1lbnQpXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvcHJvcGVydHlrZXlcbiAgICAgICAgZnVuY3Rpb24gVG9Qcm9wZXJ0eUtleShhcmd1bWVudCkge1xuICAgICAgICAgICAgdmFyIGtleSA9IFRvUHJpbWl0aXZlKGFyZ3VtZW50LCAzIC8qIFN0cmluZyAqLyk7XG4gICAgICAgICAgICBpZiAoSXNTeW1ib2woa2V5KSlcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICAgICAgcmV0dXJuIFRvU3RyaW5nKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy4yIFRlc3RpbmcgYW5kIENvbXBhcmlzb24gT3BlcmF0aW9uc1xuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10ZXN0aW5nLWFuZC1jb21wYXJpc29uLW9wZXJhdGlvbnNcbiAgICAgICAgLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXNhcnJheVxuICAgICAgICBmdW5jdGlvbiBJc0FycmF5KGFyZ3VtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheVxuICAgICAgICAgICAgICAgID8gQXJyYXkuaXNBcnJheShhcmd1bWVudClcbiAgICAgICAgICAgICAgICA6IGFyZ3VtZW50IGluc3RhbmNlb2YgT2JqZWN0XG4gICAgICAgICAgICAgICAgICAgID8gYXJndW1lbnQgaW5zdGFuY2VvZiBBcnJheVxuICAgICAgICAgICAgICAgICAgICA6IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCkgPT09IFwiW29iamVjdCBBcnJheV1cIjtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjIuMyBJc0NhbGxhYmxlKGFyZ3VtZW50KVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pc2NhbGxhYmxlXG4gICAgICAgIGZ1bmN0aW9uIElzQ2FsbGFibGUoYXJndW1lbnQpIHtcbiAgICAgICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgYW4gYXBwcm94aW1hdGlvbiBhcyB3ZSBjYW5ub3QgY2hlY2sgZm9yIFtbQ2FsbF1dIGludGVybmFsIG1ldGhvZC5cbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgYXJndW1lbnQgPT09IFwiZnVuY3Rpb25cIjtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjIuNCBJc0NvbnN0cnVjdG9yKGFyZ3VtZW50KVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pc2NvbnN0cnVjdG9yXG4gICAgICAgIGZ1bmN0aW9uIElzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcbiAgICAgICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgYW4gYXBwcm94aW1hdGlvbiBhcyB3ZSBjYW5ub3QgY2hlY2sgZm9yIFtbQ29uc3RydWN0XV0gaW50ZXJuYWwgbWV0aG9kLlxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PT0gXCJmdW5jdGlvblwiO1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuMi43IElzUHJvcGVydHlLZXkoYXJndW1lbnQpXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWlzcHJvcGVydHlrZXlcbiAgICAgICAgZnVuY3Rpb24gSXNQcm9wZXJ0eUtleShhcmd1bWVudCkge1xuICAgICAgICAgICAgc3dpdGNoIChUeXBlKGFyZ3VtZW50KSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMyAvKiBTdHJpbmcgKi86IHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNCAvKiBTeW1ib2wgKi86IHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyA3LjMgT3BlcmF0aW9ucyBvbiBPYmplY3RzXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9wZXJhdGlvbnMtb24tb2JqZWN0c1xuICAgICAgICAvLyA3LjMuOSBHZXRNZXRob2QoViwgUClcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0bWV0aG9kXG4gICAgICAgIGZ1bmN0aW9uIEdldE1ldGhvZChWLCBQKSB7XG4gICAgICAgICAgICB2YXIgZnVuYyA9IFZbUF07XG4gICAgICAgICAgICBpZiAoZnVuYyA9PT0gdW5kZWZpbmVkIHx8IGZ1bmMgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmICghSXNDYWxsYWJsZShmdW5jKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICByZXR1cm4gZnVuYztcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjQgT3BlcmF0aW9ucyBvbiBJdGVyYXRvciBPYmplY3RzXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9wZXJhdGlvbnMtb24taXRlcmF0b3Itb2JqZWN0c1xuICAgICAgICBmdW5jdGlvbiBHZXRJdGVyYXRvcihvYmopIHtcbiAgICAgICAgICAgIHZhciBtZXRob2QgPSBHZXRNZXRob2Qob2JqLCBpdGVyYXRvclN5bWJvbCk7XG4gICAgICAgICAgICBpZiAoIUlzQ2FsbGFibGUobWV0aG9kKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7IC8vIGZyb20gQ2FsbFxuICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gbWV0aG9kLmNhbGwob2JqKTtcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QoaXRlcmF0b3IpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgIHJldHVybiBpdGVyYXRvcjtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjQuNCBJdGVyYXRvclZhbHVlKGl0ZXJSZXN1bHQpXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8yMDE2LyNzZWMtaXRlcmF0b3J2YWx1ZVxuICAgICAgICBmdW5jdGlvbiBJdGVyYXRvclZhbHVlKGl0ZXJSZXN1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVyUmVzdWx0LnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuNC41IEl0ZXJhdG9yU3RlcChpdGVyYXRvcilcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXRlcmF0b3JzdGVwXG4gICAgICAgIGZ1bmN0aW9uIEl0ZXJhdG9yU3RlcChpdGVyYXRvcikge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IGZhbHNlIDogcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWl0ZXJhdG9yY2xvc2VcbiAgICAgICAgZnVuY3Rpb24gSXRlcmF0b3JDbG9zZShpdGVyYXRvcikge1xuICAgICAgICAgICAgdmFyIGYgPSBpdGVyYXRvcltcInJldHVyblwiXTtcbiAgICAgICAgICAgIGlmIChmKVxuICAgICAgICAgICAgICAgIGYuY2FsbChpdGVyYXRvcik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gOS4xIE9yZGluYXJ5IE9iamVjdCBJbnRlcm5hbCBNZXRob2RzIGFuZCBJbnRlcm5hbCBTbG90c1xuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vcmRpbmFyeS1vYmplY3QtaW50ZXJuYWwtbWV0aG9kcy1hbmQtaW50ZXJuYWwtc2xvdHNcbiAgICAgICAgLy8gOS4xLjEuMSBPcmRpbmFyeUdldFByb3RvdHlwZU9mKE8pXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9yZGluYXJ5Z2V0cHJvdG90eXBlb2ZcbiAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlHZXRQcm90b3R5cGVPZihPKSB7XG4gICAgICAgICAgICB2YXIgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTyk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIE8gIT09IFwiZnVuY3Rpb25cIiB8fCBPID09PSBmdW5jdGlvblByb3RvdHlwZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdG87XG4gICAgICAgICAgICAvLyBUeXBlU2NyaXB0IGRvZXNuJ3Qgc2V0IF9fcHJvdG9fXyBpbiBFUzUsIGFzIGl0J3Mgbm9uLXN0YW5kYXJkLlxuICAgICAgICAgICAgLy8gVHJ5IHRvIGRldGVybWluZSB0aGUgc3VwZXJjbGFzcyBjb25zdHJ1Y3Rvci4gQ29tcGF0aWJsZSBpbXBsZW1lbnRhdGlvbnNcbiAgICAgICAgICAgIC8vIG11c3QgZWl0aGVyIHNldCBfX3Byb3RvX18gb24gYSBzdWJjbGFzcyBjb25zdHJ1Y3RvciB0byB0aGUgc3VwZXJjbGFzcyBjb25zdHJ1Y3RvcixcbiAgICAgICAgICAgIC8vIG9yIGVuc3VyZSBlYWNoIGNsYXNzIGhhcyBhIHZhbGlkIGBjb25zdHJ1Y3RvcmAgcHJvcGVydHkgb24gaXRzIHByb3RvdHlwZSB0aGF0XG4gICAgICAgICAgICAvLyBwb2ludHMgYmFjayB0byB0aGUgY29uc3RydWN0b3IuXG4gICAgICAgICAgICAvLyBJZiB0aGlzIGlzIG5vdCB0aGUgc2FtZSBhcyBGdW5jdGlvbi5bW1Byb3RvdHlwZV1dLCB0aGVuIHRoaXMgaXMgZGVmaW5hdGVseSBpbmhlcml0ZWQuXG4gICAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBjYXNlIHdoZW4gaW4gRVM2IG9yIHdoZW4gdXNpbmcgX19wcm90b19fIGluIGEgY29tcGF0aWJsZSBicm93c2VyLlxuICAgICAgICAgICAgaWYgKHByb3RvICE9PSBmdW5jdGlvblByb3RvdHlwZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdG87XG4gICAgICAgICAgICAvLyBJZiB0aGUgc3VwZXIgcHJvdG90eXBlIGlzIE9iamVjdC5wcm90b3R5cGUsIG51bGwsIG9yIHVuZGVmaW5lZCwgdGhlbiB3ZSBjYW5ub3QgZGV0ZXJtaW5lIHRoZSBoZXJpdGFnZS5cbiAgICAgICAgICAgIHZhciBwcm90b3R5cGUgPSBPLnByb3RvdHlwZTtcbiAgICAgICAgICAgIHZhciBwcm90b3R5cGVQcm90byA9IHByb3RvdHlwZSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG90eXBlKTtcbiAgICAgICAgICAgIGlmIChwcm90b3R5cGVQcm90byA9PSBudWxsIHx8IHByb3RvdHlwZVByb3RvID09PSBPYmplY3QucHJvdG90eXBlKVxuICAgICAgICAgICAgICAgIHJldHVybiBwcm90bztcbiAgICAgICAgICAgIC8vIElmIHRoZSBjb25zdHJ1Y3RvciB3YXMgbm90IGEgZnVuY3Rpb24sIHRoZW4gd2UgY2Fubm90IGRldGVybWluZSB0aGUgaGVyaXRhZ2UuXG4gICAgICAgICAgICB2YXIgY29uc3RydWN0b3IgPSBwcm90b3R5cGVQcm90by5jb25zdHJ1Y3RvcjtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc3RydWN0b3IgIT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdG87XG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIHNvbWUga2luZCBvZiBzZWxmLXJlZmVyZW5jZSwgdGhlbiB3ZSBjYW5ub3QgZGV0ZXJtaW5lIHRoZSBoZXJpdGFnZS5cbiAgICAgICAgICAgIGlmIChjb25zdHJ1Y3RvciA9PT0gTylcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdG87XG4gICAgICAgICAgICAvLyB3ZSBoYXZlIGEgcHJldHR5IGdvb2QgZ3Vlc3MgYXQgdGhlIGhlcml0YWdlLlxuICAgICAgICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yO1xuICAgICAgICB9XG4gICAgICAgIC8vIG5haXZlIE1hcCBzaGltXG4gICAgICAgIGZ1bmN0aW9uIENyZWF0ZU1hcFBvbHlmaWxsKCkge1xuICAgICAgICAgICAgdmFyIGNhY2hlU2VudGluZWwgPSB7fTtcbiAgICAgICAgICAgIHZhciBhcnJheVNlbnRpbmVsID0gW107XG4gICAgICAgICAgICB2YXIgTWFwSXRlcmF0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gTWFwSXRlcmF0b3Ioa2V5cywgdmFsdWVzLCBzZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMgPSBrZXlzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMgPSB2YWx1ZXM7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIE1hcEl0ZXJhdG9yLnByb3RvdHlwZVtcIkBAaXRlcmF0b3JcIl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuICAgICAgICAgICAgICAgIE1hcEl0ZXJhdG9yLnByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuICAgICAgICAgICAgICAgIE1hcEl0ZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9pbmRleDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLl9rZXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX3NlbGVjdG9yKHRoaXMuX2tleXNbaW5kZXhdLCB0aGlzLl92YWx1ZXNbaW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCArIDEgPj0gdGhpcy5fa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMgPSBhcnJheVNlbnRpbmVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcyA9IGFycmF5U2VudGluZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHJlc3VsdCwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBNYXBJdGVyYXRvci5wcm90b3R5cGUudGhyb3cgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2luZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlzID0gYXJyYXlTZW50aW5lbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcyA9IGFycmF5U2VudGluZWw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBNYXBJdGVyYXRvci5wcm90b3R5cGUucmV0dXJuID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5cyA9IGFycmF5U2VudGluZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMgPSBhcnJheVNlbnRpbmVsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogdHJ1ZSB9O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hcEl0ZXJhdG9yO1xuICAgICAgICAgICAgfSgpKTtcbiAgICAgICAgICAgIHJldHVybiAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gTWFwKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlzID0gW107XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUtleSA9IGNhY2hlU2VudGluZWw7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlSW5kZXggPSAtMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1hcC5wcm90b3R5cGUsIFwic2l6ZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fa2V5cy5sZW5ndGg7IH0sXG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gdGhpcy5fZmluZChrZXksIC8qaW5zZXJ0Ki8gZmFsc2UpID49IDA7IH07XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmQoa2V5LCAvKmluc2VydCovIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4ID49IDAgPyB0aGlzLl92YWx1ZXNbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kKGtleSwgLyppbnNlcnQqLyB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kKGtleSwgLyppbnNlcnQqLyBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2l6ZSA9IHRoaXMuX2tleXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGluZGV4ICsgMTsgaSA8IHNpemU7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXNbaSAtIDFdID0gdGhpcy5fa2V5c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXNbaSAtIDFdID0gdGhpcy5fdmFsdWVzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5cy5sZW5ndGgtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcy5sZW5ndGgtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT09IHRoaXMuX2NhY2hlS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVLZXkgPSBjYWNoZVNlbnRpbmVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlSW5kZXggPSAtMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlS2V5ID0gY2FjaGVTZW50aW5lbDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVJbmRleCA9IC0yO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IE1hcEl0ZXJhdG9yKHRoaXMuX2tleXMsIHRoaXMuX3ZhbHVlcywgZ2V0S2V5KTsgfTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBNYXBJdGVyYXRvcih0aGlzLl9rZXlzLCB0aGlzLl92YWx1ZXMsIGdldFZhbHVlKTsgfTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgTWFwSXRlcmF0b3IodGhpcy5fa2V5cywgdGhpcy5fdmFsdWVzLCBnZXRFbnRyeSk7IH07XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZVtcIkBAaXRlcmF0b3JcIl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmVudHJpZXMoKTsgfTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuZW50cmllcygpOyB9O1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuX2ZpbmQgPSBmdW5jdGlvbiAoa2V5LCBpbnNlcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NhY2hlS2V5ICE9PSBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlSW5kZXggPSB0aGlzLl9rZXlzLmluZGV4T2YodGhpcy5fY2FjaGVLZXkgPSBrZXkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jYWNoZUluZGV4IDwgMCAmJiBpbnNlcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlSW5kZXggPSB0aGlzLl9rZXlzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVJbmRleDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXA7XG4gICAgICAgICAgICB9KCkpO1xuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0S2V5KGtleSwgXykge1xuICAgICAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRWYWx1ZShfLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEVudHJ5KGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW2tleSwgdmFsdWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIG5haXZlIFNldCBzaGltXG4gICAgICAgIGZ1bmN0aW9uIENyZWF0ZVNldFBvbHlmaWxsKCkge1xuICAgICAgICAgICAgcmV0dXJuIC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBTZXQoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21hcCA9IG5ldyBfTWFwKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTZXQucHJvdG90eXBlLCBcInNpemVcIiwge1xuICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX21hcC5zaXplOyB9LFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdGhpcy5fbWFwLmhhcyh2YWx1ZSk7IH07XG4gICAgICAgICAgICAgICAgU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHRoaXMuX21hcC5zZXQodmFsdWUsIHZhbHVlKSwgdGhpczsgfTtcbiAgICAgICAgICAgICAgICBTZXQucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdGhpcy5fbWFwLmRlbGV0ZSh2YWx1ZSk7IH07XG4gICAgICAgICAgICAgICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHsgdGhpcy5fbWFwLmNsZWFyKCk7IH07XG4gICAgICAgICAgICAgICAgU2V0LnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fbWFwLmtleXMoKTsgfTtcbiAgICAgICAgICAgICAgICBTZXQucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX21hcC52YWx1ZXMoKTsgfTtcbiAgICAgICAgICAgICAgICBTZXQucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9tYXAuZW50cmllcygpOyB9O1xuICAgICAgICAgICAgICAgIFNldC5wcm90b3R5cGVbXCJAQGl0ZXJhdG9yXCJdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5rZXlzKCk7IH07XG4gICAgICAgICAgICAgICAgU2V0LnByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmtleXMoKTsgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gU2V0O1xuICAgICAgICAgICAgfSgpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBuYWl2ZSBXZWFrTWFwIHNoaW1cbiAgICAgICAgZnVuY3Rpb24gQ3JlYXRlV2Vha01hcFBvbHlmaWxsKCkge1xuICAgICAgICAgICAgdmFyIFVVSURfU0laRSA9IDE2O1xuICAgICAgICAgICAgdmFyIGtleXMgPSBIYXNoTWFwLmNyZWF0ZSgpO1xuICAgICAgICAgICAgdmFyIHJvb3RLZXkgPSBDcmVhdGVVbmlxdWVLZXkoKTtcbiAgICAgICAgICAgIHJldHVybiAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5ID0gQ3JlYXRlVW5pcXVlS2V5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFdlYWtNYXAucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlID0gR2V0T3JDcmVhdGVXZWFrTWFwVGFibGUodGFyZ2V0LCAvKmNyZWF0ZSovIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlICE9PSB1bmRlZmluZWQgPyBIYXNoTWFwLmhhcyh0YWJsZSwgdGhpcy5fa2V5KSA6IGZhbHNlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgV2Vha01hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSBHZXRPckNyZWF0ZVdlYWtNYXBUYWJsZSh0YXJnZXQsIC8qY3JlYXRlKi8gZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFibGUgIT09IHVuZGVmaW5lZCA/IEhhc2hNYXAuZ2V0KHRhYmxlLCB0aGlzLl9rZXkpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgV2Vha01hcC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHRhcmdldCwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlID0gR2V0T3JDcmVhdGVXZWFrTWFwVGFibGUodGFyZ2V0LCAvKmNyZWF0ZSovIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0YWJsZVt0aGlzLl9rZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSBHZXRPckNyZWF0ZVdlYWtNYXBUYWJsZSh0YXJnZXQsIC8qY3JlYXRlKi8gZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFibGUgIT09IHVuZGVmaW5lZCA/IGRlbGV0ZSB0YWJsZVt0aGlzLl9rZXldIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBXZWFrTWFwLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTk9URTogbm90IGEgcmVhbCBjbGVhciwganVzdCBtYWtlcyB0aGUgcHJldmlvdXMgZGF0YSB1bnJlYWNoYWJsZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXkgPSBDcmVhdGVVbmlxdWVLZXkoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBXZWFrTWFwO1xuICAgICAgICAgICAgfSgpKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIENyZWF0ZVVuaXF1ZUtleSgpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5O1xuICAgICAgICAgICAgICAgIGRvXG4gICAgICAgICAgICAgICAgICAgIGtleSA9IFwiQEBXZWFrTWFwQEBcIiArIENyZWF0ZVVVSUQoKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoSGFzaE1hcC5oYXMoa2V5cywga2V5KSk7XG4gICAgICAgICAgICAgICAga2V5c1trZXldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gR2V0T3JDcmVhdGVXZWFrTWFwVGFibGUodGFyZ2V0LCBjcmVhdGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc093bi5jYWxsKHRhcmdldCwgcm9vdEtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjcmVhdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCByb290S2V5LCB7IHZhbHVlOiBIYXNoTWFwLmNyZWF0ZSgpIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0W3Jvb3RLZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gRmlsbFJhbmRvbUJ5dGVzKGJ1ZmZlciwgc2l6ZSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKVxuICAgICAgICAgICAgICAgICAgICBidWZmZXJbaV0gPSBNYXRoLnJhbmRvbSgpICogMHhmZiB8IDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIEdlblJhbmRvbUJ5dGVzKHNpemUpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNyeXB0byAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KHNpemUpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtc0NyeXB0byAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoc2l6ZSkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmlsbFJhbmRvbUJ5dGVzKG5ldyBVaW50OEFycmF5KHNpemUpLCBzaXplKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIEZpbGxSYW5kb21CeXRlcyhuZXcgQXJyYXkoc2l6ZSksIHNpemUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gQ3JlYXRlVVVJRCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IEdlblJhbmRvbUJ5dGVzKFVVSURfU0laRSk7XG4gICAgICAgICAgICAgICAgLy8gbWFyayBhcyByYW5kb20gLSBSRkMgNDEyMiDCpyA0LjRcbiAgICAgICAgICAgICAgICBkYXRhWzZdID0gZGF0YVs2XSAmIDB4NGYgfCAweDQwO1xuICAgICAgICAgICAgICAgIGRhdGFbOF0gPSBkYXRhWzhdICYgMHhiZiB8IDB4ODA7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgVVVJRF9TSVpFOyArK29mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYnl0ZSA9IGRhdGFbb2Zmc2V0XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9mZnNldCA9PT0gNCB8fCBvZmZzZXQgPT09IDYgfHwgb2Zmc2V0ID09PSA4KVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiLVwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYnl0ZSA8IDE2KVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiMFwiO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gYnl0ZS50b1N0cmluZygxNikudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyB1c2VzIGEgaGV1cmlzdGljIHVzZWQgYnkgdjggYW5kIGNoYWtyYSB0byBmb3JjZSBhbiBvYmplY3QgaW50byBkaWN0aW9uYXJ5IG1vZGUuXG4gICAgICAgIGZ1bmN0aW9uIE1ha2VEaWN0aW9uYXJ5KG9iaikge1xuICAgICAgICAgICAgb2JqLl9fID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgZGVsZXRlIG9iai5fXztcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pKFJlZmxlY3QgfHwgKFJlZmxlY3QgPSB7fSkpO1xuIiwiZXhwb3J0IGNvbnN0IElDT04gPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCA1MTIgNTEyXCI+PHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJNMjc3LjMgNDE2aC00Mi43Yy0yMy42IDAtNDIuNyAxOS4xLTQyLjcgNDIuN1Y1MDRjMCA0LjQgMy42IDggOCA4aDE2YzQuNCAwIDgtMy42IDgtOHYtNDUuM2MwLTUuOSA0LjgtMTAuNyAxMC43LTEwLjdoNDIuN2M1LjkgMCAxMC43IDQuOCAxMC43IDEwLjdWNTA0YzAgNC40IDMuNiA4IDggOGgxNmM0LjQgMCA4LTMuNiA4LTh2LTQ1LjNjMC0yMy42LTE5LjEtNDIuNy00Mi43LTQyLjd6TTQ5NiAzNTJoLTE2VjI0MGMwLTguOC03LjItMTYtMTYtMTZoLTE2di04MGMwLTguOC03LjItMTYtMTYtMTZoLTE2VjE2YzAtOC44LTcuMi0xNi0xNi0xNnMtMTYgNy4yLTE2IDE2djE2aC02NFYxNmMwLTguOC03LjItMTYtMTYtMTZzLTE2IDcuMi0xNiAxNnYxNmgtNjRWMTZjMC04LjgtNy4yLTE2LTE2LTE2cy0xNiA3LjItMTYgMTZ2MTZoLTY0VjE2YzAtOC44LTcuMi0xNi0xNi0xNlM5NiA3LjIgOTYgMTZ2MTEySDgwYy04LjggMC0xNiA3LjItMTYgMTZ2ODBINDhjLTguOCAwLTE2IDcuMi0xNiAxNnYxMTJIMTZjLTguOCAwLTE2IDcuMi0xNiAxNnYxMzZjMCA0LjQgMy42IDggOCA4aDE2YzQuNCAwIDgtMy42IDgtOFYzODRoNjR2MTIwYzAgNC40IDMuNiA4IDggOGgxNmM0LjQgMCA4LTMuNiA4LThWMzg0aDI1NnYxMjBjMCA0LjQgMy42IDggOCA4aDE2YzQuNCAwIDgtMy42IDgtOFYzODRoNjR2MTIwYzAgNC40IDMuNiA4IDggOGgxNmM0LjQgMCA4LTMuNiA4LThWMzY4YzAtOC44LTcuMi0xNi0xNi0xNnpNMTI4IDY0aDI1NnY2NEgxMjh6bTEzMy4zIDEyOGgtMTAuN2MtNS45IDAtMTAuNyA0LjgtMTAuNyAxMC43VjIyNGgtNDh2LTY0aDEyOHY2NGgtNDh2LTIxLjNjLjEtNS45LTQuNy0xMC43LTEwLjYtMTAuN3pNMTI4IDM1Mkg2NHYtOTZoNjR6bTMyLTEyOEg5NnYtNjRoNjR6bTExMiAxMjhoLTMydi0yNi43YzAtMyAyLjQtNS4zIDUuMy01LjNoMjEuM2MzIDAgNS4zIDIuNCA1LjMgNS4zVjM1MnptODAgMGgtNDh2LTI2LjdjMC0yMC42LTE2LjgtMzcuMy0zNy4zLTM3LjNoLTIxLjNjLTIwLjYgMC0zNy4zIDE2LjgtMzcuMyAzNy4zVjM1MmgtNDh2LTk2aDE5MnY5NnptMC0xMjh2LTY0aDY0djY0em05NiAxMjhoLTY0di05Nmg2NHpcIi8+PC9zdmc+JzsiLCJ2YXIgTGlmZWN5Y2xlO1xuKGZ1bmN0aW9uIChMaWZlY3ljbGUpIHtcbiAgICBMaWZlY3ljbGVbTGlmZWN5Y2xlW1wiVHJhbnNpZW50XCJdID0gMF0gPSBcIlRyYW5zaWVudFwiO1xuICAgIExpZmVjeWNsZVtMaWZlY3ljbGVbXCJTaW5nbGV0b25cIl0gPSAxXSA9IFwiU2luZ2xldG9uXCI7XG4gICAgTGlmZWN5Y2xlW0xpZmVjeWNsZVtcIlJlc29sdXRpb25TY29wZWRcIl0gPSAyXSA9IFwiUmVzb2x1dGlvblNjb3BlZFwiO1xuICAgIExpZmVjeWNsZVtMaWZlY3ljbGVbXCJDb250YWluZXJTY29wZWRcIl0gPSAzXSA9IFwiQ29udGFpbmVyU2NvcGVkXCI7XG59KShMaWZlY3ljbGUgfHwgKExpZmVjeWNsZSA9IHt9KSk7XG5leHBvcnQgZGVmYXVsdCBMaWZlY3ljbGU7XG4iLCJleHBvcnQgY2xhc3MgVGVtcGxlQ29udGV4dDxUPiB7XHJcblx0Ly8gdG9kbzogaW5jbHVkZSBhZGRpdGlvbmFsIG1ldGFkYXRhXHJcblx0Y29uc3RydWN0b3IocHVibGljIGNvbnRleHQ6IFQsIHB1YmxpYyBtZXRhZGF0YTogYW55ID0gbnVsbCkge1xyXG5cdH1cclxufVxyXG4iLCJleHBvcnQgdmFyIElOSkVDVElPTl9UT0tFTl9NRVRBREFUQV9LRVkgPSBcImluamVjdGlvblRva2Vuc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBhcmFtSW5mbyh0YXJnZXQpIHtcbiAgICB2YXIgcGFyYW1zID0gUmVmbGVjdC5nZXRNZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIHRhcmdldCkgfHwgW107XG4gICAgdmFyIGluamVjdGlvblRva2VucyA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGEoSU5KRUNUSU9OX1RPS0VOX01FVEFEQVRBX0tFWSwgdGFyZ2V0KSB8fCB7fTtcbiAgICBPYmplY3Qua2V5cyhpbmplY3Rpb25Ub2tlbnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBwYXJhbXNbK2tleV0gPSBpbmplY3Rpb25Ub2tlbnNba2V5XTtcbiAgICB9KTtcbiAgICByZXR1cm4gcGFyYW1zO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZUluamVjdGlvblRva2VuTWV0YWRhdGEoZGF0YSwgdHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIF9wcm9wZXJ0eUtleSwgcGFyYW1ldGVySW5kZXgpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3JzID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YShJTkpFQ1RJT05fVE9LRU5fTUVUQURBVEFfS0VZLCB0YXJnZXQpIHx8IHt9O1xuICAgICAgICBkZXNjcmlwdG9yc1twYXJhbWV0ZXJJbmRleF0gPSB0cmFuc2Zvcm1cbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIHRva2VuOiBkYXRhLFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLnRyYW5zZm9ybVRva2VuLFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybUFyZ3M6IHRyYW5zZm9ybS5hcmdzIHx8IFtdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IGRhdGE7XG4gICAgICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoSU5KRUNUSU9OX1RPS0VOX01FVEFEQVRBX0tFWSwgZGVzY3JpcHRvcnMsIHRhcmdldCk7XG4gICAgfTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBpc0NsYXNzUHJvdmlkZXIocHJvdmlkZXIpIHtcbiAgICByZXR1cm4gISFwcm92aWRlci51c2VDbGFzcztcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBpc0ZhY3RvcnlQcm92aWRlcihwcm92aWRlcikge1xuICAgIHJldHVybiAhIXByb3ZpZGVyLnVzZUZhY3Rvcnk7XG59XG4iLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkIH0gZnJvbSBcInRzbGliXCI7XG52YXIgRGVsYXllZENvbnN0cnVjdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZWxheWVkQ29uc3RydWN0b3Iod3JhcCkge1xuICAgICAgICB0aGlzLndyYXAgPSB3cmFwO1xuICAgICAgICB0aGlzLnJlZmxlY3RNZXRob2RzID0gW1xuICAgICAgICAgICAgXCJnZXRcIixcbiAgICAgICAgICAgIFwiZ2V0UHJvdG90eXBlT2ZcIixcbiAgICAgICAgICAgIFwic2V0UHJvdG90eXBlT2ZcIixcbiAgICAgICAgICAgIFwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXCIsXG4gICAgICAgICAgICBcImRlZmluZVByb3BlcnR5XCIsXG4gICAgICAgICAgICBcImhhc1wiLFxuICAgICAgICAgICAgXCJzZXRcIixcbiAgICAgICAgICAgIFwiZGVsZXRlUHJvcGVydHlcIixcbiAgICAgICAgICAgIFwiYXBwbHlcIixcbiAgICAgICAgICAgIFwiY29uc3RydWN0XCJcbiAgICAgICAgXTtcbiAgICB9XG4gICAgRGVsYXllZENvbnN0cnVjdG9yLnByb3RvdHlwZS5jcmVhdGVQcm94eSA9IGZ1bmN0aW9uIChjcmVhdGVPYmplY3QpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHRhcmdldCA9IHt9O1xuICAgICAgICB2YXIgaW5pdCA9IGZhbHNlO1xuICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgIHZhciBkZWxheWVkT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFpbml0KSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBjcmVhdGVPYmplY3QoX3RoaXMud3JhcCgpKTtcbiAgICAgICAgICAgICAgICBpbml0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm94eSh0YXJnZXQsIHRoaXMuY3JlYXRlSGFuZGxlcihkZWxheWVkT2JqZWN0KSk7XG4gICAgfTtcbiAgICBEZWxheWVkQ29uc3RydWN0b3IucHJvdG90eXBlLmNyZWF0ZUhhbmRsZXIgPSBmdW5jdGlvbiAoZGVsYXllZE9iamVjdCkge1xuICAgICAgICB2YXIgaGFuZGxlciA9IHt9O1xuICAgICAgICB2YXIgaW5zdGFsbCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICBoYW5kbGVyW25hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhcmdzWzBdID0gZGVsYXllZE9iamVjdCgpO1xuICAgICAgICAgICAgICAgIHZhciBtZXRob2QgPSBSZWZsZWN0W25hbWVdO1xuICAgICAgICAgICAgICAgIHJldHVybiBtZXRob2QuYXBwbHkodm9pZCAwLCBfX3NwcmVhZChhcmdzKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnJlZmxlY3RNZXRob2RzLmZvckVhY2goaW5zdGFsbCk7XG4gICAgICAgIHJldHVybiBoYW5kbGVyO1xuICAgIH07XG4gICAgcmV0dXJuIERlbGF5ZWRDb25zdHJ1Y3Rvcjtcbn0oKSk7XG5leHBvcnQgeyBEZWxheWVkQ29uc3RydWN0b3IgfTtcbmV4cG9ydCBmdW5jdGlvbiBkZWxheSh3cmFwcGVkQ29uc3RydWN0b3IpIHtcbiAgICBpZiAodHlwZW9mIHdyYXBwZWRDb25zdHJ1Y3RvciA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdHRlbXB0IHRvIGBkZWxheWAgdW5kZWZpbmVkLiBDb25zdHJ1Y3RvciBtdXN0IGJlIHdyYXBwZWQgaW4gYSBjYWxsYmFja1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEZWxheWVkQ29uc3RydWN0b3Iod3JhcHBlZENvbnN0cnVjdG9yKTtcbn1cbiIsImltcG9ydCB7IERlbGF5ZWRDb25zdHJ1Y3RvciB9IGZyb20gXCIuLi9sYXp5LWhlbHBlcnNcIjtcbmV4cG9ydCBmdW5jdGlvbiBpc05vcm1hbFRva2VuKHRva2VuKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0b2tlbiA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgdG9rZW4gPT09IFwic3ltYm9sXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNUb2tlbkRlc2NyaXB0b3IoZGVzY3JpcHRvcikge1xuICAgIHJldHVybiAodHlwZW9mIGRlc2NyaXB0b3IgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgXCJ0b2tlblwiIGluIGRlc2NyaXB0b3IgJiZcbiAgICAgICAgXCJtdWx0aXBsZVwiIGluIGRlc2NyaXB0b3IpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVHJhbnNmb3JtRGVzY3JpcHRvcihkZXNjcmlwdG9yKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgZGVzY3JpcHRvciA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICBcInRva2VuXCIgaW4gZGVzY3JpcHRvciAmJlxuICAgICAgICBcInRyYW5zZm9ybVwiIGluIGRlc2NyaXB0b3IpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQ29uc3RydWN0b3JUb2tlbih0b2tlbikge1xuICAgIHJldHVybiB0eXBlb2YgdG9rZW4gPT09IFwiZnVuY3Rpb25cIiB8fCB0b2tlbiBpbnN0YW5jZW9mIERlbGF5ZWRDb25zdHJ1Y3Rvcjtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBpc1Rva2VuUHJvdmlkZXIocHJvdmlkZXIpIHtcbiAgICByZXR1cm4gISFwcm92aWRlci51c2VUb2tlbjtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBpc1ZhbHVlUHJvdmlkZXIocHJvdmlkZXIpIHtcbiAgICByZXR1cm4gcHJvdmlkZXIudXNlVmFsdWUgIT0gdW5kZWZpbmVkO1xufVxuIiwidmFyIFJlZ2lzdHJ5QmFzZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVnaXN0cnlCYXNlKCkge1xuICAgICAgICB0aGlzLl9yZWdpc3RyeU1hcCA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgUmVnaXN0cnlCYXNlLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVnaXN0cnlNYXAuZW50cmllcygpO1xuICAgIH07XG4gICAgUmVnaXN0cnlCYXNlLnByb3RvdHlwZS5nZXRBbGwgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHRoaXMuZW5zdXJlKGtleSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWdpc3RyeU1hcC5nZXQoa2V5KTtcbiAgICB9O1xuICAgIFJlZ2lzdHJ5QmFzZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB0aGlzLmVuc3VyZShrZXkpO1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9yZWdpc3RyeU1hcC5nZXQoa2V5KTtcbiAgICAgICAgcmV0dXJuIHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdIHx8IG51bGw7XG4gICAgfTtcbiAgICBSZWdpc3RyeUJhc2UucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZW5zdXJlKGtleSk7XG4gICAgICAgIHRoaXMuX3JlZ2lzdHJ5TWFwLmdldChrZXkpLnB1c2godmFsdWUpO1xuICAgIH07XG4gICAgUmVnaXN0cnlCYXNlLnByb3RvdHlwZS5zZXRBbGwgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLl9yZWdpc3RyeU1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfTtcbiAgICBSZWdpc3RyeUJhc2UucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdGhpcy5lbnN1cmUoa2V5KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlZ2lzdHJ5TWFwLmdldChrZXkpLmxlbmd0aCA+IDA7XG4gICAgfTtcbiAgICBSZWdpc3RyeUJhc2UucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9yZWdpc3RyeU1hcC5jbGVhcigpO1xuICAgIH07XG4gICAgUmVnaXN0cnlCYXNlLnByb3RvdHlwZS5lbnN1cmUgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghdGhpcy5fcmVnaXN0cnlNYXAuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlZ2lzdHJ5TWFwLnNldChrZXksIFtdKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFJlZ2lzdHJ5QmFzZTtcbn0oKSk7XG5leHBvcnQgZGVmYXVsdCBSZWdpc3RyeUJhc2U7XG4iLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCBSZWdpc3RyeUJhc2UgZnJvbSBcIi4vcmVnaXN0cnktYmFzZVwiO1xudmFyIFJlZ2lzdHJ5ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmVnaXN0cnksIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVnaXN0cnkoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFJlZ2lzdHJ5O1xufShSZWdpc3RyeUJhc2UpKTtcbmV4cG9ydCBkZWZhdWx0IFJlZ2lzdHJ5O1xuIiwidmFyIFJlc29sdXRpb25Db250ZXh0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXNvbHV0aW9uQ29udGV4dCgpIHtcbiAgICAgICAgdGhpcy5zY29wZWRSZXNvbHV0aW9ucyA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgcmV0dXJuIFJlc29sdXRpb25Db250ZXh0O1xufSgpKTtcbmV4cG9ydCBkZWZhdWx0IFJlc29sdXRpb25Db250ZXh0O1xuIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZCB9IGZyb20gXCJ0c2xpYlwiO1xuZnVuY3Rpb24gZm9ybWF0RGVwZW5kZW5jeShwYXJhbXMsIGlkeCkge1xuICAgIGlmIChwYXJhbXMgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFwiYXQgcG9zaXRpb24gI1wiICsgaWR4O1xuICAgIH1cbiAgICB2YXIgYXJnTmFtZSA9IHBhcmFtcy5zcGxpdChcIixcIilbaWR4XS50cmltKCk7XG4gICAgcmV0dXJuIFwiXFxcIlwiICsgYXJnTmFtZSArIFwiXFxcIiBhdCBwb3NpdGlvbiAjXCIgKyBpZHg7XG59XG5mdW5jdGlvbiBjb21wb3NlRXJyb3JNZXNzYWdlKG1zZywgZSwgaW5kZW50KSB7XG4gICAgaWYgKGluZGVudCA9PT0gdm9pZCAwKSB7IGluZGVudCA9IFwiICAgIFwiOyB9XG4gICAgcmV0dXJuIF9fc3ByZWFkKFttc2ddLCBlLm1lc3NhZ2Uuc3BsaXQoXCJcXG5cIikubWFwKGZ1bmN0aW9uIChsKSB7IHJldHVybiBpbmRlbnQgKyBsOyB9KSkuam9pbihcIlxcblwiKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRFcnJvckN0b3IoY3RvciwgcGFyYW1JZHgsIGVycm9yKSB7XG4gICAgdmFyIF9hID0gX19yZWFkKGN0b3IudG9TdHJpbmcoKS5tYXRjaCgvY29uc3RydWN0b3JcXCgoW1xcdywgXSspXFwpLykgfHwgW10sIDIpLCBfYiA9IF9hWzFdLCBwYXJhbXMgPSBfYiA9PT0gdm9pZCAwID8gbnVsbCA6IF9iO1xuICAgIHZhciBkZXAgPSBmb3JtYXREZXBlbmRlbmN5KHBhcmFtcywgcGFyYW1JZHgpO1xuICAgIHJldHVybiBjb21wb3NlRXJyb3JNZXNzYWdlKFwiQ2Fubm90IGluamVjdCB0aGUgZGVwZW5kZW5jeSBcIiArIGRlcCArIFwiIG9mIFxcXCJcIiArIGN0b3IubmFtZSArIFwiXFxcIiBjb25zdHJ1Y3Rvci4gUmVhc29uOlwiLCBlcnJvcik7XG59XG4iLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCBSZWdpc3RyeUJhc2UgZnJvbSBcIi4vcmVnaXN0cnktYmFzZVwiO1xudmFyIFByZVJlc29sdXRpb25JbnRlcmNlcHRvcnMgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQcmVSZXNvbHV0aW9uSW50ZXJjZXB0b3JzLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFByZVJlc29sdXRpb25JbnRlcmNlcHRvcnMoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFByZVJlc29sdXRpb25JbnRlcmNlcHRvcnM7XG59KFJlZ2lzdHJ5QmFzZSkpO1xuZXhwb3J0IHsgUHJlUmVzb2x1dGlvbkludGVyY2VwdG9ycyB9O1xudmFyIFBvc3RSZXNvbHV0aW9uSW50ZXJjZXB0b3JzID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUG9zdFJlc29sdXRpb25JbnRlcmNlcHRvcnMsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUG9zdFJlc29sdXRpb25JbnRlcmNlcHRvcnMoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFBvc3RSZXNvbHV0aW9uSW50ZXJjZXB0b3JzO1xufShSZWdpc3RyeUJhc2UpKTtcbmV4cG9ydCB7IFBvc3RSZXNvbHV0aW9uSW50ZXJjZXB0b3JzIH07XG52YXIgSW50ZXJjZXB0b3JzID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJbnRlcmNlcHRvcnMoKSB7XG4gICAgICAgIHRoaXMucHJlUmVzb2x1dGlvbiA9IG5ldyBQcmVSZXNvbHV0aW9uSW50ZXJjZXB0b3JzKCk7XG4gICAgICAgIHRoaXMucG9zdFJlc29sdXRpb24gPSBuZXcgUG9zdFJlc29sdXRpb25JbnRlcmNlcHRvcnMoKTtcbiAgICB9XG4gICAgcmV0dXJuIEludGVyY2VwdG9ycztcbn0oKSk7XG5leHBvcnQgZGVmYXVsdCBJbnRlcmNlcHRvcnM7XG4iLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkLCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNDbGFzc1Byb3ZpZGVyLCBpc0ZhY3RvcnlQcm92aWRlciwgaXNOb3JtYWxUb2tlbiwgaXNUb2tlblByb3ZpZGVyLCBpc1ZhbHVlUHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlcnNcIjtcbmltcG9ydCB7IGlzUHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlcnMvcHJvdmlkZXJcIjtcbmltcG9ydCB7IGlzQ29uc3RydWN0b3JUb2tlbiwgaXNUb2tlbkRlc2NyaXB0b3IsIGlzVHJhbnNmb3JtRGVzY3JpcHRvciB9IGZyb20gXCIuL3Byb3ZpZGVycy9pbmplY3Rpb24tdG9rZW5cIjtcbmltcG9ydCBSZWdpc3RyeSBmcm9tIFwiLi9yZWdpc3RyeVwiO1xuaW1wb3J0IExpZmVjeWNsZSBmcm9tIFwiLi90eXBlcy9saWZlY3ljbGVcIjtcbmltcG9ydCBSZXNvbHV0aW9uQ29udGV4dCBmcm9tIFwiLi9yZXNvbHV0aW9uLWNvbnRleHRcIjtcbmltcG9ydCB7IGZvcm1hdEVycm9yQ3RvciB9IGZyb20gXCIuL2Vycm9yLWhlbHBlcnNcIjtcbmltcG9ydCB7IERlbGF5ZWRDb25zdHJ1Y3RvciB9IGZyb20gXCIuL2xhenktaGVscGVyc1wiO1xuaW1wb3J0IEludGVyY2VwdG9ycyBmcm9tIFwiLi9pbnRlcmNlcHRvcnNcIjtcbmV4cG9ydCB2YXIgdHlwZUluZm8gPSBuZXcgTWFwKCk7XG52YXIgSW50ZXJuYWxEZXBlbmRlbmN5Q29udGFpbmVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJbnRlcm5hbERlcGVuZGVuY3lDb250YWluZXIocGFyZW50KSB7XG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICB0aGlzLl9yZWdpc3RyeSA9IG5ldyBSZWdpc3RyeSgpO1xuICAgICAgICB0aGlzLmludGVyY2VwdG9ycyA9IG5ldyBJbnRlcmNlcHRvcnMoKTtcbiAgICB9XG4gICAgSW50ZXJuYWxEZXBlbmRlbmN5Q29udGFpbmVyLnByb3RvdHlwZS5yZWdpc3RlciA9IGZ1bmN0aW9uICh0b2tlbiwgcHJvdmlkZXJPckNvbnN0cnVjdG9yLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHsgbGlmZWN5Y2xlOiBMaWZlY3ljbGUuVHJhbnNpZW50IH07IH1cbiAgICAgICAgdmFyIHByb3ZpZGVyO1xuICAgICAgICBpZiAoIWlzUHJvdmlkZXIocHJvdmlkZXJPckNvbnN0cnVjdG9yKSkge1xuICAgICAgICAgICAgcHJvdmlkZXIgPSB7IHVzZUNsYXNzOiBwcm92aWRlck9yQ29uc3RydWN0b3IgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHByb3ZpZGVyID0gcHJvdmlkZXJPckNvbnN0cnVjdG9yO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Rva2VuUHJvdmlkZXIocHJvdmlkZXIpKSB7XG4gICAgICAgICAgICB2YXIgcGF0aCA9IFt0b2tlbl07XG4gICAgICAgICAgICB2YXIgdG9rZW5Qcm92aWRlciA9IHByb3ZpZGVyO1xuICAgICAgICAgICAgd2hpbGUgKHRva2VuUHJvdmlkZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50VG9rZW4gPSB0b2tlblByb3ZpZGVyLnVzZVRva2VuO1xuICAgICAgICAgICAgICAgIGlmIChwYXRoLmluY2x1ZGVzKGN1cnJlbnRUb2tlbikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVG9rZW4gcmVnaXN0cmF0aW9uIGN5Y2xlIGRldGVjdGVkISBcIiArIF9fc3ByZWFkKHBhdGgsIFtjdXJyZW50VG9rZW5dKS5qb2luKFwiIC0+IFwiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBhdGgucHVzaChjdXJyZW50VG9rZW4pO1xuICAgICAgICAgICAgICAgIHZhciByZWdpc3RyYXRpb24gPSB0aGlzLl9yZWdpc3RyeS5nZXQoY3VycmVudFRva2VuKTtcbiAgICAgICAgICAgICAgICBpZiAocmVnaXN0cmF0aW9uICYmIGlzVG9rZW5Qcm92aWRlcihyZWdpc3RyYXRpb24ucHJvdmlkZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuUHJvdmlkZXIgPSByZWdpc3RyYXRpb24ucHJvdmlkZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b2tlblByb3ZpZGVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMubGlmZWN5Y2xlID09PSBMaWZlY3ljbGUuU2luZ2xldG9uIHx8XG4gICAgICAgICAgICBvcHRpb25zLmxpZmVjeWNsZSA9PSBMaWZlY3ljbGUuQ29udGFpbmVyU2NvcGVkIHx8XG4gICAgICAgICAgICBvcHRpb25zLmxpZmVjeWNsZSA9PSBMaWZlY3ljbGUuUmVzb2x1dGlvblNjb3BlZCkge1xuICAgICAgICAgICAgaWYgKGlzVmFsdWVQcm92aWRlcihwcm92aWRlcikgfHwgaXNGYWN0b3J5UHJvdmlkZXIocHJvdmlkZXIpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHVzZSBsaWZlY3ljbGUgXFxcIlwiICsgTGlmZWN5Y2xlW29wdGlvbnMubGlmZWN5Y2xlXSArIFwiXFxcIiB3aXRoIFZhbHVlUHJvdmlkZXJzIG9yIEZhY3RvcnlQcm92aWRlcnNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVnaXN0cnkuc2V0KHRva2VuLCB7IHByb3ZpZGVyOiBwcm92aWRlciwgb3B0aW9uczogb3B0aW9ucyB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBJbnRlcm5hbERlcGVuZGVuY3lDb250YWluZXIucHJvdG90eXBlLnJlZ2lzdGVyVHlwZSA9IGZ1bmN0aW9uIChmcm9tLCB0bykge1xuICAgICAgICBpZiAoaXNOb3JtYWxUb2tlbih0bykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdGVyKGZyb20sIHtcbiAgICAgICAgICAgICAgICB1c2VUb2tlbjogdG9cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdGVyKGZyb20sIHtcbiAgICAgICAgICAgIHVzZUNsYXNzOiB0b1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEludGVybmFsRGVwZW5kZW5jeUNvbnRhaW5lci5wcm90b3R5cGUucmVnaXN0ZXJJbnN0YW5jZSA9IGZ1bmN0aW9uICh0b2tlbiwgaW5zdGFuY2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0ZXIodG9rZW4sIHtcbiAgICAgICAgICAgIHVzZVZhbHVlOiBpbnN0YW5jZVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEludGVybmFsRGVwZW5kZW5jeUNvbnRhaW5lci5wcm90b3R5cGUucmVnaXN0ZXJTaW5nbGV0b24gPSBmdW5jdGlvbiAoZnJvbSwgdG8pIHtcbiAgICAgICAgaWYgKGlzTm9ybWFsVG9rZW4oZnJvbSkpIHtcbiAgICAgICAgICAgIGlmIChpc05vcm1hbFRva2VuKHRvKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdGVyKGZyb20sIHtcbiAgICAgICAgICAgICAgICAgICAgdXNlVG9rZW46IHRvXG4gICAgICAgICAgICAgICAgfSwgeyBsaWZlY3ljbGU6IExpZmVjeWNsZS5TaW5nbGV0b24gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0bykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdGVyKGZyb20sIHtcbiAgICAgICAgICAgICAgICAgICAgdXNlQ2xhc3M6IHRvXG4gICAgICAgICAgICAgICAgfSwgeyBsaWZlY3ljbGU6IExpZmVjeWNsZS5TaW5nbGV0b24gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCByZWdpc3RlciBhIHR5cGUgbmFtZSBhcyBhIHNpbmdsZXRvbiB3aXRob3V0IGEgXCJ0b1wiIHRva2VuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHVzZUNsYXNzID0gZnJvbTtcbiAgICAgICAgaWYgKHRvICYmICFpc05vcm1hbFRva2VuKHRvKSkge1xuICAgICAgICAgICAgdXNlQ2xhc3MgPSB0bztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3Rlcihmcm9tLCB7XG4gICAgICAgICAgICB1c2VDbGFzczogdXNlQ2xhc3NcbiAgICAgICAgfSwgeyBsaWZlY3ljbGU6IExpZmVjeWNsZS5TaW5nbGV0b24gfSk7XG4gICAgfTtcbiAgICBJbnRlcm5hbERlcGVuZGVuY3lDb250YWluZXIucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbiAodG9rZW4sIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkgeyBjb250ZXh0ID0gbmV3IFJlc29sdXRpb25Db250ZXh0KCk7IH1cbiAgICAgICAgdmFyIHJlZ2lzdHJhdGlvbiA9IHRoaXMuZ2V0UmVnaXN0cmF0aW9uKHRva2VuKTtcbiAgICAgICAgaWYgKCFyZWdpc3RyYXRpb24gJiYgaXNOb3JtYWxUb2tlbih0b2tlbikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRlZCB0byByZXNvbHZlIHVucmVnaXN0ZXJlZCBkZXBlbmRlbmN5IHRva2VuOiBcXFwiXCIgKyB0b2tlbi50b1N0cmluZygpICsgXCJcXFwiXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZXhlY3V0ZVByZVJlc29sdXRpb25JbnRlcmNlcHRvcih0b2tlbiwgXCJTaW5nbGVcIik7XG4gICAgICAgIGlmIChyZWdpc3RyYXRpb24pIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnJlc29sdmVSZWdpc3RyYXRpb24ocmVnaXN0cmF0aW9uLCBjb250ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuZXhlY3V0ZVBvc3RSZXNvbHV0aW9uSW50ZXJjZXB0b3IodG9rZW4sIHJlc3VsdCwgXCJTaW5nbGVcIik7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0NvbnN0cnVjdG9yVG9rZW4odG9rZW4pKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5jb25zdHJ1Y3QodG9rZW4sIGNvbnRleHQpO1xuICAgICAgICAgICAgdGhpcy5leGVjdXRlUG9zdFJlc29sdXRpb25JbnRlcmNlcHRvcih0b2tlbiwgcmVzdWx0LCBcIlNpbmdsZVwiKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXR0ZW1wdGVkIHRvIGNvbnN0cnVjdCBhbiB1bmRlZmluZWQgY29uc3RydWN0b3IuIENvdWxkIG1lYW4gYSBjaXJjdWxhciBkZXBlbmRlbmN5IHByb2JsZW0uIFRyeSB1c2luZyBgZGVsYXlgIGZ1bmN0aW9uLlwiKTtcbiAgICB9O1xuICAgIEludGVybmFsRGVwZW5kZW5jeUNvbnRhaW5lci5wcm90b3R5cGUuZXhlY3V0ZVByZVJlc29sdXRpb25JbnRlcmNlcHRvciA9IGZ1bmN0aW9uICh0b2tlbiwgcmVzb2x1dGlvblR5cGUpIHtcbiAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgIGlmICh0aGlzLmludGVyY2VwdG9ycy5wcmVSZXNvbHV0aW9uLmhhcyh0b2tlbikpIHtcbiAgICAgICAgICAgIHZhciByZW1haW5pbmdJbnRlcmNlcHRvcnMgPSBbXTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyh0aGlzLmludGVyY2VwdG9ycy5wcmVSZXNvbHV0aW9uLmdldEFsbCh0b2tlbikpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnRlcmNlcHRvciA9IF9jLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW50ZXJjZXB0b3Iub3B0aW9ucy5mcmVxdWVuY3kgIT0gXCJPbmNlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbWFpbmluZ0ludGVyY2VwdG9ycy5wdXNoKGludGVyY2VwdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpbnRlcmNlcHRvci5jYWxsYmFjayh0b2tlbiwgcmVzb2x1dGlvblR5cGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaW50ZXJjZXB0b3JzLnByZVJlc29sdXRpb24uc2V0QWxsKHRva2VuLCByZW1haW5pbmdJbnRlcmNlcHRvcnMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnRlcm5hbERlcGVuZGVuY3lDb250YWluZXIucHJvdG90eXBlLmV4ZWN1dGVQb3N0UmVzb2x1dGlvbkludGVyY2VwdG9yID0gZnVuY3Rpb24gKHRva2VuLCByZXN1bHQsIHJlc29sdXRpb25UeXBlKSB7XG4gICAgICAgIHZhciBlXzIsIF9hO1xuICAgICAgICBpZiAodGhpcy5pbnRlcmNlcHRvcnMucG9zdFJlc29sdXRpb24uaGFzKHRva2VuKSkge1xuICAgICAgICAgICAgdmFyIHJlbWFpbmluZ0ludGVyY2VwdG9ycyA9IFtdO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKHRoaXMuaW50ZXJjZXB0b3JzLnBvc3RSZXNvbHV0aW9uLmdldEFsbCh0b2tlbikpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnRlcmNlcHRvciA9IF9jLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW50ZXJjZXB0b3Iub3B0aW9ucy5mcmVxdWVuY3kgIT0gXCJPbmNlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbWFpbmluZ0ludGVyY2VwdG9ycy5wdXNoKGludGVyY2VwdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpbnRlcmNlcHRvci5jYWxsYmFjayh0b2tlbiwgcmVzdWx0LCByZXNvbHV0aW9uVHlwZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVfMl8xKSB7IGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07IH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pbnRlcmNlcHRvcnMucG9zdFJlc29sdXRpb24uc2V0QWxsKHRva2VuLCByZW1haW5pbmdJbnRlcmNlcHRvcnMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnRlcm5hbERlcGVuZGVuY3lDb250YWluZXIucHJvdG90eXBlLnJlc29sdmVSZWdpc3RyYXRpb24gPSBmdW5jdGlvbiAocmVnaXN0cmF0aW9uLCBjb250ZXh0KSB7XG4gICAgICAgIGlmIChyZWdpc3RyYXRpb24ub3B0aW9ucy5saWZlY3ljbGUgPT09IExpZmVjeWNsZS5SZXNvbHV0aW9uU2NvcGVkICYmXG4gICAgICAgICAgICBjb250ZXh0LnNjb3BlZFJlc29sdXRpb25zLmhhcyhyZWdpc3RyYXRpb24pKSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5zY29wZWRSZXNvbHV0aW9ucy5nZXQocmVnaXN0cmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaXNTaW5nbGV0b24gPSByZWdpc3RyYXRpb24ub3B0aW9ucy5saWZlY3ljbGUgPT09IExpZmVjeWNsZS5TaW5nbGV0b247XG4gICAgICAgIHZhciBpc0NvbnRhaW5lclNjb3BlZCA9IHJlZ2lzdHJhdGlvbi5vcHRpb25zLmxpZmVjeWNsZSA9PT0gTGlmZWN5Y2xlLkNvbnRhaW5lclNjb3BlZDtcbiAgICAgICAgdmFyIHJldHVybkluc3RhbmNlID0gaXNTaW5nbGV0b24gfHwgaXNDb250YWluZXJTY29wZWQ7XG4gICAgICAgIHZhciByZXNvbHZlZDtcbiAgICAgICAgaWYgKGlzVmFsdWVQcm92aWRlcihyZWdpc3RyYXRpb24ucHJvdmlkZXIpKSB7XG4gICAgICAgICAgICByZXNvbHZlZCA9IHJlZ2lzdHJhdGlvbi5wcm92aWRlci51c2VWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1Rva2VuUHJvdmlkZXIocmVnaXN0cmF0aW9uLnByb3ZpZGVyKSkge1xuICAgICAgICAgICAgcmVzb2x2ZWQgPSByZXR1cm5JbnN0YW5jZVxuICAgICAgICAgICAgICAgID8gcmVnaXN0cmF0aW9uLmluc3RhbmNlIHx8XG4gICAgICAgICAgICAgICAgICAgIChyZWdpc3RyYXRpb24uaW5zdGFuY2UgPSB0aGlzLnJlc29sdmUocmVnaXN0cmF0aW9uLnByb3ZpZGVyLnVzZVRva2VuLCBjb250ZXh0KSlcbiAgICAgICAgICAgICAgICA6IHRoaXMucmVzb2x2ZShyZWdpc3RyYXRpb24ucHJvdmlkZXIudXNlVG9rZW4sIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzQ2xhc3NQcm92aWRlcihyZWdpc3RyYXRpb24ucHJvdmlkZXIpKSB7XG4gICAgICAgICAgICByZXNvbHZlZCA9IHJldHVybkluc3RhbmNlXG4gICAgICAgICAgICAgICAgPyByZWdpc3RyYXRpb24uaW5zdGFuY2UgfHxcbiAgICAgICAgICAgICAgICAgICAgKHJlZ2lzdHJhdGlvbi5pbnN0YW5jZSA9IHRoaXMuY29uc3RydWN0KHJlZ2lzdHJhdGlvbi5wcm92aWRlci51c2VDbGFzcywgY29udGV4dCkpXG4gICAgICAgICAgICAgICAgOiB0aGlzLmNvbnN0cnVjdChyZWdpc3RyYXRpb24ucHJvdmlkZXIudXNlQ2xhc3MsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzRmFjdG9yeVByb3ZpZGVyKHJlZ2lzdHJhdGlvbi5wcm92aWRlcikpIHtcbiAgICAgICAgICAgIHJlc29sdmVkID0gcmVnaXN0cmF0aW9uLnByb3ZpZGVyLnVzZUZhY3RvcnkodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlZCA9IHRoaXMuY29uc3RydWN0KHJlZ2lzdHJhdGlvbi5wcm92aWRlciwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlZ2lzdHJhdGlvbi5vcHRpb25zLmxpZmVjeWNsZSA9PT0gTGlmZWN5Y2xlLlJlc29sdXRpb25TY29wZWQpIHtcbiAgICAgICAgICAgIGNvbnRleHQuc2NvcGVkUmVzb2x1dGlvbnMuc2V0KHJlZ2lzdHJhdGlvbiwgcmVzb2x2ZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNvbHZlZDtcbiAgICB9O1xuICAgIEludGVybmFsRGVwZW5kZW5jeUNvbnRhaW5lci5wcm90b3R5cGUucmVzb2x2ZUFsbCA9IGZ1bmN0aW9uICh0b2tlbiwgY29udGV4dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7IGNvbnRleHQgPSBuZXcgUmVzb2x1dGlvbkNvbnRleHQoKTsgfVxuICAgICAgICB2YXIgcmVnaXN0cmF0aW9ucyA9IHRoaXMuZ2V0QWxsUmVnaXN0cmF0aW9ucyh0b2tlbik7XG4gICAgICAgIGlmICghcmVnaXN0cmF0aW9ucyAmJiBpc05vcm1hbFRva2VuKHRva2VuKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXR0ZW1wdGVkIHRvIHJlc29sdmUgdW5yZWdpc3RlcmVkIGRlcGVuZGVuY3kgdG9rZW46IFxcXCJcIiArIHRva2VuLnRvU3RyaW5nKCkgKyBcIlxcXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5leGVjdXRlUHJlUmVzb2x1dGlvbkludGVyY2VwdG9yKHRva2VuLCBcIkFsbFwiKTtcbiAgICAgICAgaWYgKHJlZ2lzdHJhdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHRfMSA9IHJlZ2lzdHJhdGlvbnMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJlc29sdmVSZWdpc3RyYXRpb24oaXRlbSwgY29udGV4dCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuZXhlY3V0ZVBvc3RSZXNvbHV0aW9uSW50ZXJjZXB0b3IodG9rZW4sIHJlc3VsdF8xLCBcIkFsbFwiKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRfMTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gW3RoaXMuY29uc3RydWN0KHRva2VuLCBjb250ZXh0KV07XG4gICAgICAgIHRoaXMuZXhlY3V0ZVBvc3RSZXNvbHV0aW9uSW50ZXJjZXB0b3IodG9rZW4sIHJlc3VsdCwgXCJBbGxcIik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBJbnRlcm5hbERlcGVuZGVuY3lDb250YWluZXIucHJvdG90eXBlLmlzUmVnaXN0ZXJlZCA9IGZ1bmN0aW9uICh0b2tlbiwgcmVjdXJzaXZlKSB7XG4gICAgICAgIGlmIChyZWN1cnNpdmUgPT09IHZvaWQgMCkgeyByZWN1cnNpdmUgPSBmYWxzZTsgfVxuICAgICAgICByZXR1cm4gKHRoaXMuX3JlZ2lzdHJ5Lmhhcyh0b2tlbikgfHxcbiAgICAgICAgICAgIChyZWN1cnNpdmUgJiZcbiAgICAgICAgICAgICAgICAodGhpcy5wYXJlbnQgfHwgZmFsc2UpICYmXG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQuaXNSZWdpc3RlcmVkKHRva2VuLCB0cnVlKSkpO1xuICAgIH07XG4gICAgSW50ZXJuYWxEZXBlbmRlbmN5Q29udGFpbmVyLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fcmVnaXN0cnkuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5pbnRlcmNlcHRvcnMucHJlUmVzb2x1dGlvbi5jbGVhcigpO1xuICAgICAgICB0aGlzLmludGVyY2VwdG9ycy5wb3N0UmVzb2x1dGlvbi5jbGVhcigpO1xuICAgIH07XG4gICAgSW50ZXJuYWxEZXBlbmRlbmN5Q29udGFpbmVyLnByb3RvdHlwZS5jbGVhckluc3RhbmNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVfMywgX2E7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKHRoaXMuX3JlZ2lzdHJ5LmVudHJpZXMoKSksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2QgPSBfX3JlYWQoX2MudmFsdWUsIDIpLCB0b2tlbiA9IF9kWzBdLCByZWdpc3RyYXRpb25zID0gX2RbMV07XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVnaXN0cnkuc2V0QWxsKHRva2VuLCByZWdpc3RyYXRpb25zXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHJlZ2lzdHJhdGlvbikgeyByZXR1cm4gIWlzVmFsdWVQcm92aWRlcihyZWdpc3RyYXRpb24ucHJvdmlkZXIpOyB9KVxuICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChyZWdpc3RyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgcmVnaXN0cmF0aW9uLmluc3RhbmNlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnaXN0cmF0aW9uO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV8zXzEpIHsgZV8zID0geyBlcnJvcjogZV8zXzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzMpIHRocm93IGVfMy5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnRlcm5hbERlcGVuZGVuY3lDb250YWluZXIucHJvdG90eXBlLmNyZWF0ZUNoaWxkQ29udGFpbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZV80LCBfYTtcbiAgICAgICAgdmFyIGNoaWxkQ29udGFpbmVyID0gbmV3IEludGVybmFsRGVwZW5kZW5jeUNvbnRhaW5lcih0aGlzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIF9iID0gX192YWx1ZXModGhpcy5fcmVnaXN0cnkuZW50cmllcygpKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xuICAgICAgICAgICAgICAgIHZhciBfZCA9IF9fcmVhZChfYy52YWx1ZSwgMiksIHRva2VuID0gX2RbMF0sIHJlZ2lzdHJhdGlvbnMgPSBfZFsxXTtcbiAgICAgICAgICAgICAgICBpZiAocmVnaXN0cmF0aW9ucy5zb21lKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IF9hLm9wdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmxpZmVjeWNsZSA9PT0gTGlmZWN5Y2xlLkNvbnRhaW5lclNjb3BlZDtcbiAgICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZENvbnRhaW5lci5fcmVnaXN0cnkuc2V0QWxsKHRva2VuLCByZWdpc3RyYXRpb25zLm1hcChmdW5jdGlvbiAocmVnaXN0cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVnaXN0cmF0aW9uLm9wdGlvbnMubGlmZWN5Y2xlID09PSBMaWZlY3ljbGUuQ29udGFpbmVyU2NvcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXI6IHJlZ2lzdHJhdGlvbi5wcm92aWRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogcmVnaXN0cmF0aW9uLm9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2lzdHJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV80XzEpIHsgZV80ID0geyBlcnJvcjogZV80XzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzQpIHRocm93IGVfNC5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGlsZENvbnRhaW5lcjtcbiAgICB9O1xuICAgIEludGVybmFsRGVwZW5kZW5jeUNvbnRhaW5lci5wcm90b3R5cGUuYmVmb3JlUmVzb2x1dGlvbiA9IGZ1bmN0aW9uICh0b2tlbiwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0geyBmcmVxdWVuY3k6IFwiQWx3YXlzXCIgfTsgfVxuICAgICAgICB0aGlzLmludGVyY2VwdG9ycy5wcmVSZXNvbHV0aW9uLnNldCh0b2tlbiwge1xuICAgICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEludGVybmFsRGVwZW5kZW5jeUNvbnRhaW5lci5wcm90b3R5cGUuYWZ0ZXJSZXNvbHV0aW9uID0gZnVuY3Rpb24gKHRva2VuLCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7IGZyZXF1ZW5jeTogXCJBbHdheXNcIiB9OyB9XG4gICAgICAgIHRoaXMuaW50ZXJjZXB0b3JzLnBvc3RSZXNvbHV0aW9uLnNldCh0b2tlbiwge1xuICAgICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEludGVybmFsRGVwZW5kZW5jeUNvbnRhaW5lci5wcm90b3R5cGUuZ2V0UmVnaXN0cmF0aW9uID0gZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgICAgIGlmICh0aGlzLmlzUmVnaXN0ZXJlZCh0b2tlbikpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWdpc3RyeS5nZXQodG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LmdldFJlZ2lzdHJhdGlvbih0b2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBJbnRlcm5hbERlcGVuZGVuY3lDb250YWluZXIucHJvdG90eXBlLmdldEFsbFJlZ2lzdHJhdGlvbnMgPSBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgaWYgKHRoaXMuaXNSZWdpc3RlcmVkKHRva2VuKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlZ2lzdHJ5LmdldEFsbCh0b2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuZ2V0QWxsUmVnaXN0cmF0aW9ucyh0b2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBJbnRlcm5hbERlcGVuZGVuY3lDb250YWluZXIucHJvdG90eXBlLmNvbnN0cnVjdCA9IGZ1bmN0aW9uIChjdG9yLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChjdG9yIGluc3RhbmNlb2YgRGVsYXllZENvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gY3Rvci5jcmVhdGVQcm94eShmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJlc29sdmUodGFyZ2V0LCBjb250ZXh0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYXJhbUluZm8gPSB0eXBlSW5mby5nZXQoY3Rvcik7XG4gICAgICAgIGlmICghcGFyYW1JbmZvIHx8IHBhcmFtSW5mby5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGlmIChjdG9yLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgY3RvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVHlwZUluZm8gbm90IGtub3duIGZvciBcXFwiXCIgKyBjdG9yLm5hbWUgKyBcIlxcXCJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBhcmFtcyA9IHBhcmFtSW5mby5tYXAodGhpcy5yZXNvbHZlUGFyYW1zKGNvbnRleHQsIGN0b3IpKTtcbiAgICAgICAgcmV0dXJuIG5ldyAoY3Rvci5iaW5kLmFwcGx5KGN0b3IsIF9fc3ByZWFkKFt2b2lkIDBdLCBwYXJhbXMpKSkoKTtcbiAgICB9O1xuICAgIEludGVybmFsRGVwZW5kZW5jeUNvbnRhaW5lci5wcm90b3R5cGUucmVzb2x2ZVBhcmFtcyA9IGZ1bmN0aW9uIChjb250ZXh0LCBjdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAocGFyYW0sIGlkeCkge1xuICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChpc1Rva2VuRGVzY3JpcHRvcihwYXJhbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVHJhbnNmb3JtRGVzY3JpcHRvcihwYXJhbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJhbS5tdWx0aXBsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKF9hID0gX3RoaXMucmVzb2x2ZShwYXJhbS50cmFuc2Zvcm0pKS50cmFuc2Zvcm0uYXBwbHkoX2EsIF9fc3ByZWFkKFtfdGhpcy5yZXNvbHZlQWxsKHBhcmFtLnRva2VuKV0sIHBhcmFtLnRyYW5zZm9ybUFyZ3MpKSA6IChfYiA9IF90aGlzLnJlc29sdmUocGFyYW0udHJhbnNmb3JtKSkudHJhbnNmb3JtLmFwcGx5KF9iLCBfX3NwcmVhZChbX3RoaXMucmVzb2x2ZShwYXJhbS50b2tlbiwgY29udGV4dCldLCBwYXJhbS50cmFuc2Zvcm1BcmdzKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW0ubXVsdGlwbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IF90aGlzLnJlc29sdmVBbGwocGFyYW0udG9rZW4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdGhpcy5yZXNvbHZlKHBhcmFtLnRva2VuLCBjb250ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc1RyYW5zZm9ybURlc2NyaXB0b3IocGFyYW0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoX2MgPSBfdGhpcy5yZXNvbHZlKHBhcmFtLnRyYW5zZm9ybSwgY29udGV4dCkpLnRyYW5zZm9ybS5hcHBseShfYywgX19zcHJlYWQoW190aGlzLnJlc29sdmUocGFyYW0udG9rZW4sIGNvbnRleHQpXSwgcGFyYW0udHJhbnNmb3JtQXJncykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucmVzb2x2ZShwYXJhbSwgY29udGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXRFcnJvckN0b3IoY3RvciwgaWR4LCBlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gSW50ZXJuYWxEZXBlbmRlbmN5Q29udGFpbmVyO1xufSgpKTtcbmV4cG9ydCB2YXIgaW5zdGFuY2UgPSBuZXcgSW50ZXJuYWxEZXBlbmRlbmN5Q29udGFpbmVyKCk7XG5leHBvcnQgZGVmYXVsdCBpbnN0YW5jZTtcbiIsImltcG9ydCB7IGlzQ2xhc3NQcm92aWRlciB9IGZyb20gXCIuL2NsYXNzLXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBpc1ZhbHVlUHJvdmlkZXIgfSBmcm9tIFwiLi92YWx1ZS1wcm92aWRlclwiO1xuaW1wb3J0IHsgaXNUb2tlblByb3ZpZGVyIH0gZnJvbSBcIi4vdG9rZW4tcHJvdmlkZXJcIjtcbmltcG9ydCB7IGlzRmFjdG9yeVByb3ZpZGVyIH0gZnJvbSBcIi4vZmFjdG9yeS1wcm92aWRlclwiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdmlkZXIocHJvdmlkZXIpIHtcbiAgICByZXR1cm4gKGlzQ2xhc3NQcm92aWRlcihwcm92aWRlcikgfHxcbiAgICAgICAgaXNWYWx1ZVByb3ZpZGVyKHByb3ZpZGVyKSB8fFxuICAgICAgICBpc1Rva2VuUHJvdmlkZXIocHJvdmlkZXIpIHx8XG4gICAgICAgIGlzRmFjdG9yeVByb3ZpZGVyKHByb3ZpZGVyKSk7XG59XG4iLCJpbXBvcnQgeyBkZWZpbmVJbmplY3Rpb25Ub2tlbk1ldGFkYXRhIH0gZnJvbSBcIi4uL3JlZmxlY3Rpb24taGVscGVyc1wiO1xuZnVuY3Rpb24gaW5qZWN0KHRva2VuKSB7XG4gICAgcmV0dXJuIGRlZmluZUluamVjdGlvblRva2VuTWV0YWRhdGEodG9rZW4pO1xufVxuZXhwb3J0IGRlZmF1bHQgaW5qZWN0O1xuIiwiaW1wb3J0IHsgZ2V0UGFyYW1JbmZvIH0gZnJvbSBcIi4uL3JlZmxlY3Rpb24taGVscGVyc1wiO1xuaW1wb3J0IHsgdHlwZUluZm8gfSBmcm9tIFwiLi4vZGVwZW5kZW5jeS1jb250YWluZXJcIjtcbmZ1bmN0aW9uIGluamVjdGFibGUoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgdHlwZUluZm8uc2V0KHRhcmdldCwgZ2V0UGFyYW1JbmZvKHRhcmdldCkpO1xuICAgIH07XG59XG5leHBvcnQgZGVmYXVsdCBpbmplY3RhYmxlO1xuIiwiaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmdldE1ldGFkYXRhKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwidHN5cmluZ2UgcmVxdWlyZXMgYSByZWZsZWN0IHBvbHlmaWxsLiBQbGVhc2UgYWRkICdpbXBvcnQgXFxcInJlZmxlY3QtbWV0YWRhdGFcXFwiJyB0byB0aGUgdG9wIG9mIHlvdXIgZW50cnkgcG9pbnQuXCIpO1xufVxuZXhwb3J0IHsgTGlmZWN5Y2xlIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2RlY29yYXRvcnNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2ZhY3Rvcmllc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcHJvdmlkZXJzXCI7XG5leHBvcnQgeyBkZWxheSB9IGZyb20gXCIuL2xhenktaGVscGVyc1wiO1xuZXhwb3J0IHsgaW5zdGFuY2UgYXMgY29udGFpbmVyIH0gZnJvbSBcIi4vZGVwZW5kZW5jeS1jb250YWluZXJcIjtcbiIsImltcG9ydCB7IFdvcmtzcGFjZSB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgSVRlbXBsZVByb3ZpZGVyIH0gZnJvbSAnLi9JVGVtcGxlUHJvdmlkZXInO1xyXG5pbXBvcnQgeyBGaWxlSW5mb0NvbnRleHQgfSBmcm9tICcuL0ZpbGVJbmZvQ29udGV4dCc7XHJcbmltcG9ydCB7IFRlbXBsZUNvbnRleHQgfSBmcm9tICcuL1RlbXBsZUNvbnRleHQnO1xyXG5pbXBvcnQgeyBpbmplY3RhYmxlIH0gZnJvbSAndHN5cmluZ2UnO1xyXG5pbXBvcnQgeyBUZW1wbGVEb2NzQ29udGV4dCB9IGZyb20gJy4vVGVtcGxlRG9jc0NvbnRleHQnO1xyXG5cclxuQGluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRmlsZUluZm9UZW1wbGVQcm92aWRlciBpbXBsZW1lbnRzIElUZW1wbGVQcm92aWRlcjxGaWxlSW5mb0NvbnRleHQ+IHtcclxuXHRuYW1lID0gJ2ZpbGUnO1xyXG5cclxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIF93b3Jrc3BhY2U6IFdvcmtzcGFjZSkge1xyXG5cdH1cclxuXHRcclxuICAgIGFzeW5jIGRvY3MoKTogUHJvbWlzZTxUZW1wbGVEb2NzQ29udGV4dDxGaWxlSW5mb0NvbnRleHQ+PiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY29udGV4dDogYXdhaXQgdGhpcy5wcm92aWRlKCksXHJcblx0XHRcdHRlbXBsYXRlOiBgXHJcbiMgXFxgZmlsZVxcYFxyXG5cclxuRXhwb3NlcyBPYnNpZGlhbidzIGludGVybmFsIFtcXGBURmlsZVxcYF0oaHR0cHM6Ly9naXRodWIuY29tL29ic2lkaWFubWQvb2JzaWRpYW4tYXBpL2Jsb2IvZDEwZjJmNmVmYzBkMGQ3YzliZjk2Y2Q0MzVlZjM3NmIxOGZiZDZkOC9vYnNpZGlhbi5kLnRzI0wyMjA2KSBzdHJ1Y3R1cmUgZm9yIHRlbXBsYXRpbmcuXHJcblxyXG4jIyBVc2FnZXNcclxuXHJcbnslIHJhdyAlfVxcYFxcYFxcYFxyXG5wYXRoOiB7eyBmaWxlLnBhdGggfX1cclxubmFtZToge3sgZmlsZS5uYW1lIH19XHJcbmJhc2VuYW1lOiB7eyBmaWxlLmJhc2VuYW1lIH19XHJcbmV4dGVuc2lvbjoge3sgZmlsZS5leHRlbnNpb24gfX1cclxuXFxgXFxgXFxgeyUgZW5kcmF3ICV9XHJcblxyXG5vdXRwdXRzOlxyXG5cclxuXFxgXFxgXFxgXHJcbnBhdGg6IHt7IGZpbGUucGF0aCB9fVxyXG5uYW1lOiB7eyBmaWxlLm5hbWUgfX1cclxuYmFzZW5hbWU6IHt7IGZpbGUuYmFzZW5hbWUgfX1cclxuZXh0ZW5zaW9uOiB7eyBmaWxlLmV4dGVuc2lvbiB9fVxyXG5cXGBcXGBcXGBcclxuYCxcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cdGFzeW5jIHByb3ZpZGUoKTogUHJvbWlzZTxUZW1wbGVDb250ZXh0PEZpbGVJbmZvQ29udGV4dD4+IHtcclxuXHRcdGNvbnN0IGZpbGUgPSB0aGlzLl93b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xyXG5cdFx0aWYgKGZpbGUgPT0gbnVsbClcclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRyZXR1cm4gbmV3IFRlbXBsZUNvbnRleHQoZmlsZSk7XHJcblx0fVxyXG59XHJcbiIsImltcG9ydCB7IERhdGVUaW1lIH0gZnJvbSAnbHV4b24nO1xyXG5cclxuZXhwb3J0IGNsYXNzIERhdGVUaW1lQ29udGV4dCB7XHJcblx0Y29uc3RydWN0b3IocHVibGljIG5vdzogRGF0ZVRpbWUpIHsgfVxyXG59XHJcbiIsImV4cG9ydCBjb25zdCBTeW1ib2xzID0ge1xyXG5cdFRlbXBsZVNldHRpbmdzOiBTeW1ib2wuZm9yKCdUZW1wbGVTZXR0aW5ncycpLFxyXG5cdElUZW1wbGVQcm92aWRlcjogU3ltYm9sLmZvcignSVRlbXBsZVByb3ZpZGVyPGFueT4nKSxcclxuXHRQbHVnaW46IFN5bWJvbC5mb3IoJ1BsdWdpbl8yJylcclxufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTtcbiAgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTtcblxuICB0cnkge1xuICAgIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gIGlmIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkpIHtcbiAgICBfY29uc3RydWN0ID0gUmVmbGVjdC5jb25zdHJ1Y3Q7XG4gIH0gZWxzZSB7XG4gICAgX2NvbnN0cnVjdCA9IGZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICAgICAgdmFyIGEgPSBbbnVsbF07XG4gICAgICBhLnB1c2guYXBwbHkoYSwgYXJncyk7XG4gICAgICB2YXIgQ29uc3RydWN0b3IgPSBGdW5jdGlvbi5iaW5kLmFwcGx5KFBhcmVudCwgYSk7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICAgIGlmIChDbGFzcykgX3NldFByb3RvdHlwZU9mKGluc3RhbmNlLCBDbGFzcy5wcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVGdW5jdGlvbihmbikge1xuICByZXR1cm4gRnVuY3Rpb24udG9TdHJpbmcuY2FsbChmbikuaW5kZXhPZihcIltuYXRpdmUgY29kZV1cIikgIT09IC0xO1xufVxuXG5mdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gIHZhciBfY2FjaGUgPSB0eXBlb2YgTWFwID09PSBcImZ1bmN0aW9uXCIgPyBuZXcgTWFwKCkgOiB1bmRlZmluZWQ7XG5cbiAgX3dyYXBOYXRpdmVTdXBlciA9IGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgICBpZiAoQ2xhc3MgPT09IG51bGwgfHwgIV9pc05hdGl2ZUZ1bmN0aW9uKENsYXNzKSkgcmV0dXJuIENsYXNzO1xuXG4gICAgaWYgKHR5cGVvZiBDbGFzcyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBfY2FjaGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlmIChfY2FjaGUuaGFzKENsYXNzKSkgcmV0dXJuIF9jYWNoZS5nZXQoQ2xhc3MpO1xuXG4gICAgICBfY2FjaGUuc2V0KENsYXNzLCBXcmFwcGVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBXcmFwcGVyKCkge1xuICAgICAgcmV0dXJuIF9jb25zdHJ1Y3QoQ2xhc3MsIGFyZ3VtZW50cywgX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yKTtcbiAgICB9XG5cbiAgICBXcmFwcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogV3JhcHBlcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX3NldFByb3RvdHlwZU9mKFdyYXBwZXIsIENsYXNzKTtcbiAgfTtcblxuICByZXR1cm4gX3dyYXBOYXRpdmVTdXBlcihDbGFzcyk7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG4pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTtcblxuICByZXR1cm4gYXJyMjtcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShvKSB7XG4gIHZhciBpID0gMDtcblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCBvW1N5bWJvbC5pdGVyYXRvcl0gPT0gbnVsbCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChvID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSkgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4ge1xuICAgICAgICBkb25lOiB0cnVlXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBvW2krK11cbiAgICAgIH07XG4gICAgfTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG4gIH1cblxuICBpID0gb1tTeW1ib2wuaXRlcmF0b3JdKCk7XG4gIHJldHVybiBpLm5leHQuYmluZChpKTtcbn1cblxuLy8gdGhlc2UgYXJlbid0IHJlYWxseSBwcml2YXRlLCBidXQgbm9yIGFyZSB0aGV5IHJlYWxseSB1c2VmdWwgdG8gZG9jdW1lbnRcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgTHV4b25FcnJvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Vycm9yKSB7XG4gIF9pbmhlcml0c0xvb3NlKEx1eG9uRXJyb3IsIF9FcnJvcik7XG5cbiAgZnVuY3Rpb24gTHV4b25FcnJvcigpIHtcbiAgICByZXR1cm4gX0Vycm9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHJldHVybiBMdXhvbkVycm9yO1xufSggLyojX19QVVJFX18qL193cmFwTmF0aXZlU3VwZXIoRXJyb3IpKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5cbnZhciBJbnZhbGlkRGF0ZVRpbWVFcnJvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0x1eG9uRXJyb3IpIHtcbiAgX2luaGVyaXRzTG9vc2UoSW52YWxpZERhdGVUaW1lRXJyb3IsIF9MdXhvbkVycm9yKTtcblxuICBmdW5jdGlvbiBJbnZhbGlkRGF0ZVRpbWVFcnJvcihyZWFzb24pIHtcbiAgICByZXR1cm4gX0x1eG9uRXJyb3IuY2FsbCh0aGlzLCBcIkludmFsaWQgRGF0ZVRpbWU6IFwiICsgcmVhc29uLnRvTWVzc2FnZSgpKSB8fCB0aGlzO1xuICB9XG5cbiAgcmV0dXJuIEludmFsaWREYXRlVGltZUVycm9yO1xufShMdXhvbkVycm9yKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgSW52YWxpZEludGVydmFsRXJyb3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9MdXhvbkVycm9yMikge1xuICBfaW5oZXJpdHNMb29zZShJbnZhbGlkSW50ZXJ2YWxFcnJvciwgX0x1eG9uRXJyb3IyKTtcblxuICBmdW5jdGlvbiBJbnZhbGlkSW50ZXJ2YWxFcnJvcihyZWFzb24pIHtcbiAgICByZXR1cm4gX0x1eG9uRXJyb3IyLmNhbGwodGhpcywgXCJJbnZhbGlkIEludGVydmFsOiBcIiArIHJlYXNvbi50b01lc3NhZ2UoKSkgfHwgdGhpcztcbiAgfVxuXG4gIHJldHVybiBJbnZhbGlkSW50ZXJ2YWxFcnJvcjtcbn0oTHV4b25FcnJvcik7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIEludmFsaWREdXJhdGlvbkVycm9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTHV4b25FcnJvcjMpIHtcbiAgX2luaGVyaXRzTG9vc2UoSW52YWxpZER1cmF0aW9uRXJyb3IsIF9MdXhvbkVycm9yMyk7XG5cbiAgZnVuY3Rpb24gSW52YWxpZER1cmF0aW9uRXJyb3IocmVhc29uKSB7XG4gICAgcmV0dXJuIF9MdXhvbkVycm9yMy5jYWxsKHRoaXMsIFwiSW52YWxpZCBEdXJhdGlvbjogXCIgKyByZWFzb24udG9NZXNzYWdlKCkpIHx8IHRoaXM7XG4gIH1cblxuICByZXR1cm4gSW52YWxpZER1cmF0aW9uRXJyb3I7XG59KEx1eG9uRXJyb3IpO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBDb25mbGljdGluZ1NwZWNpZmljYXRpb25FcnJvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0x1eG9uRXJyb3I0KSB7XG4gIF9pbmhlcml0c0xvb3NlKENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yLCBfTHV4b25FcnJvcjQpO1xuXG4gIGZ1bmN0aW9uIENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yKCkge1xuICAgIHJldHVybiBfTHV4b25FcnJvcjQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgcmV0dXJuIENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yO1xufShMdXhvbkVycm9yKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgSW52YWxpZFVuaXRFcnJvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0x1eG9uRXJyb3I1KSB7XG4gIF9pbmhlcml0c0xvb3NlKEludmFsaWRVbml0RXJyb3IsIF9MdXhvbkVycm9yNSk7XG5cbiAgZnVuY3Rpb24gSW52YWxpZFVuaXRFcnJvcih1bml0KSB7XG4gICAgcmV0dXJuIF9MdXhvbkVycm9yNS5jYWxsKHRoaXMsIFwiSW52YWxpZCB1bml0IFwiICsgdW5pdCkgfHwgdGhpcztcbiAgfVxuXG4gIHJldHVybiBJbnZhbGlkVW5pdEVycm9yO1xufShMdXhvbkVycm9yKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgSW52YWxpZEFyZ3VtZW50RXJyb3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9MdXhvbkVycm9yNikge1xuICBfaW5oZXJpdHNMb29zZShJbnZhbGlkQXJndW1lbnRFcnJvciwgX0x1eG9uRXJyb3I2KTtcblxuICBmdW5jdGlvbiBJbnZhbGlkQXJndW1lbnRFcnJvcigpIHtcbiAgICByZXR1cm4gX0x1eG9uRXJyb3I2LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHJldHVybiBJbnZhbGlkQXJndW1lbnRFcnJvcjtcbn0oTHV4b25FcnJvcik7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIFpvbmVJc0Fic3RyYWN0RXJyb3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9MdXhvbkVycm9yNykge1xuICBfaW5oZXJpdHNMb29zZShab25lSXNBYnN0cmFjdEVycm9yLCBfTHV4b25FcnJvcjcpO1xuXG4gIGZ1bmN0aW9uIFpvbmVJc0Fic3RyYWN0RXJyb3IoKSB7XG4gICAgcmV0dXJuIF9MdXhvbkVycm9yNy5jYWxsKHRoaXMsIFwiWm9uZSBpcyBhbiBhYnN0cmFjdCBjbGFzc1wiKSB8fCB0aGlzO1xuICB9XG5cbiAgcmV0dXJuIFpvbmVJc0Fic3RyYWN0RXJyb3I7XG59KEx1eG9uRXJyb3IpO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBuID0gXCJudW1lcmljXCIsXG4gICAgcyA9IFwic2hvcnRcIixcbiAgICBsID0gXCJsb25nXCI7XG52YXIgREFURV9TSE9SVCA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IG4sXG4gIGRheTogblxufTtcbnZhciBEQVRFX01FRCA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IHMsXG4gIGRheTogblxufTtcbnZhciBEQVRFX01FRF9XSVRIX1dFRUtEQVkgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBzLFxuICBkYXk6IG4sXG4gIHdlZWtkYXk6IHNcbn07XG52YXIgREFURV9GVUxMID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogbCxcbiAgZGF5OiBuXG59O1xudmFyIERBVEVfSFVHRSA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IGwsXG4gIGRheTogbixcbiAgd2Vla2RheTogbFxufTtcbnZhciBUSU1FX1NJTVBMRSA9IHtcbiAgaG91cjogbixcbiAgbWludXRlOiBuXG59O1xudmFyIFRJTUVfV0lUSF9TRUNPTkRTID0ge1xuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogblxufTtcbnZhciBUSU1FX1dJVEhfU0hPUlRfT0ZGU0VUID0ge1xuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgdGltZVpvbmVOYW1lOiBzXG59O1xudmFyIFRJTUVfV0lUSF9MT05HX09GRlNFVCA9IHtcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG4sXG4gIHRpbWVab25lTmFtZTogbFxufTtcbnZhciBUSU1FXzI0X1NJTVBMRSA9IHtcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBob3VyMTI6IGZhbHNlXG59O1xuLyoqXG4gKiB7QGxpbmsgdG9Mb2NhbGVTdHJpbmd9OyBmb3JtYXQgbGlrZSAnMDk6MzA6MjMnLCBhbHdheXMgMjQtaG91ci5cbiAqL1xuXG52YXIgVElNRV8yNF9XSVRIX1NFQ09ORFMgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuLFxuICBob3VyMTI6IGZhbHNlXG59O1xuLyoqXG4gKiB7QGxpbmsgdG9Mb2NhbGVTdHJpbmd9OyBmb3JtYXQgbGlrZSAnMDk6MzA6MjMgRURUJywgYWx3YXlzIDI0LWhvdXIuXG4gKi9cblxudmFyIFRJTUVfMjRfV0lUSF9TSE9SVF9PRkZTRVQgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuLFxuICBob3VyMTI6IGZhbHNlLFxuICB0aW1lWm9uZU5hbWU6IHNcbn07XG4vKipcbiAqIHtAbGluayB0b0xvY2FsZVN0cmluZ307IGZvcm1hdCBsaWtlICcwOTozMDoyMyBFYXN0ZXJuIERheWxpZ2h0IFRpbWUnLCBhbHdheXMgMjQtaG91ci5cbiAqL1xuXG52YXIgVElNRV8yNF9XSVRIX0xPTkdfT0ZGU0VUID0ge1xuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgaG91cjEyOiBmYWxzZSxcbiAgdGltZVpvbmVOYW1lOiBsXG59O1xuLyoqXG4gKiB7QGxpbmsgdG9Mb2NhbGVTdHJpbmd9OyBmb3JtYXQgbGlrZSAnMTAvMTQvMTk4MywgOTozMCBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICovXG5cbnZhciBEQVRFVElNRV9TSE9SVCA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IG4sXG4gIGRheTogbixcbiAgaG91cjogbixcbiAgbWludXRlOiBuXG59O1xuLyoqXG4gKiB7QGxpbmsgdG9Mb2NhbGVTdHJpbmd9OyBmb3JtYXQgbGlrZSAnMTAvMTQvMTk4MywgOTozMDozMyBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICovXG5cbnZhciBEQVRFVElNRV9TSE9SVF9XSVRIX1NFQ09ORFMgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBuLFxuICBkYXk6IG4sXG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuXG59O1xudmFyIERBVEVUSU1FX01FRCA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IHMsXG4gIGRheTogbixcbiAgaG91cjogbixcbiAgbWludXRlOiBuXG59O1xudmFyIERBVEVUSU1FX01FRF9XSVRIX1NFQ09ORFMgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBzLFxuICBkYXk6IG4sXG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuXG59O1xudmFyIERBVEVUSU1FX01FRF9XSVRIX1dFRUtEQVkgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBzLFxuICBkYXk6IG4sXG4gIHdlZWtkYXk6IHMsXG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogblxufTtcbnZhciBEQVRFVElNRV9GVUxMID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogbCxcbiAgZGF5OiBuLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHRpbWVab25lTmFtZTogc1xufTtcbnZhciBEQVRFVElNRV9GVUxMX1dJVEhfU0VDT05EUyA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IGwsXG4gIGRheTogbixcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG4sXG4gIHRpbWVab25lTmFtZTogc1xufTtcbnZhciBEQVRFVElNRV9IVUdFID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogbCxcbiAgZGF5OiBuLFxuICB3ZWVrZGF5OiBsLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHRpbWVab25lTmFtZTogbFxufTtcbnZhciBEQVRFVElNRV9IVUdFX1dJVEhfU0VDT05EUyA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IGwsXG4gIGRheTogbixcbiAgd2Vla2RheTogbCxcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG4sXG4gIHRpbWVab25lTmFtZTogbFxufTtcblxuLypcbiAgVGhpcyBpcyBqdXN0IGEganVuayBkcmF3ZXIsIGNvbnRhaW5pbmcgYW55dGhpbmcgdXNlZCBhY3Jvc3MgbXVsdGlwbGUgY2xhc3Nlcy5cbiAgQmVjYXVzZSBMdXhvbiBpcyBzbWFsbChpc2gpLCB0aGlzIHNob3VsZCBzdGF5IHNtYWxsIGFuZCB3ZSB3b24ndCB3b3JyeSBhYm91dCBzcGxpdHRpbmdcbiAgaXQgdXAgaW50bywgc2F5LCBwYXJzaW5nVXRpbC5qcyBhbmQgYmFzaWNVdGlsLmpzIGFuZCBzbyBvbi4gQnV0IHRoZXkgYXJlIGRpdmlkZWQgdXAgYnkgZmVhdHVyZSBhcmVhLlxuKi9cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuLy8gVFlQRVNcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09IFwidW5kZWZpbmVkXCI7XG59XG5mdW5jdGlvbiBpc051bWJlcihvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gXCJudW1iZXJcIjtcbn1cbmZ1bmN0aW9uIGlzSW50ZWdlcihvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gXCJudW1iZXJcIiAmJiBvICUgMSA9PT0gMDtcbn1cbmZ1bmN0aW9uIGlzU3RyaW5nKG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSBcInN0cmluZ1wiO1xufVxuZnVuY3Rpb24gaXNEYXRlKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKSA9PT0gXCJbb2JqZWN0IERhdGVdXCI7XG59IC8vIENBUEFCSUxJVElFU1xuXG5mdW5jdGlvbiBoYXNJbnRsKCkge1xuICB0cnkge1xuICAgIHJldHVybiB0eXBlb2YgSW50bCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBJbnRsLkRhdGVUaW1lRm9ybWF0O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5mdW5jdGlvbiBoYXNGb3JtYXRUb1BhcnRzKCkge1xuICByZXR1cm4gIWlzVW5kZWZpbmVkKEludGwuRGF0ZVRpbWVGb3JtYXQucHJvdG90eXBlLmZvcm1hdFRvUGFydHMpO1xufVxuZnVuY3Rpb24gaGFzUmVsYXRpdmUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHR5cGVvZiBJbnRsICE9PSBcInVuZGVmaW5lZFwiICYmICEhSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0gLy8gT0JKRUNUUyBBTkQgQVJSQVlTXG5cbmZ1bmN0aW9uIG1heWJlQXJyYXkodGhpbmcpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodGhpbmcpID8gdGhpbmcgOiBbdGhpbmddO1xufVxuZnVuY3Rpb24gYmVzdEJ5KGFyciwgYnksIGNvbXBhcmUpIHtcbiAgaWYgKGFyci5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgcmV0dXJuIGFyci5yZWR1Y2UoZnVuY3Rpb24gKGJlc3QsIG5leHQpIHtcbiAgICB2YXIgcGFpciA9IFtieShuZXh0KSwgbmV4dF07XG5cbiAgICBpZiAoIWJlc3QpIHtcbiAgICAgIHJldHVybiBwYWlyO1xuICAgIH0gZWxzZSBpZiAoY29tcGFyZShiZXN0WzBdLCBwYWlyWzBdKSA9PT0gYmVzdFswXSkge1xuICAgICAgcmV0dXJuIGJlc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwYWlyO1xuICAgIH1cbiAgfSwgbnVsbClbMV07XG59XG5mdW5jdGlvbiBwaWNrKG9iaiwga2V5cykge1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGspIHtcbiAgICBhW2tdID0gb2JqW2tdO1xuICAgIHJldHVybiBhO1xuICB9LCB7fSk7XG59XG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufSAvLyBOVU1CRVJTIEFORCBTVFJJTkdTXG5cbmZ1bmN0aW9uIGludGVnZXJCZXR3ZWVuKHRoaW5nLCBib3R0b20sIHRvcCkge1xuICByZXR1cm4gaXNJbnRlZ2VyKHRoaW5nKSAmJiB0aGluZyA+PSBib3R0b20gJiYgdGhpbmcgPD0gdG9wO1xufSAvLyB4ICUgbiBidXQgdGFrZXMgdGhlIHNpZ24gb2YgbiBpbnN0ZWFkIG9mIHhcblxuZnVuY3Rpb24gZmxvb3JNb2QoeCwgbikge1xuICByZXR1cm4geCAtIG4gKiBNYXRoLmZsb29yKHggLyBuKTtcbn1cbmZ1bmN0aW9uIHBhZFN0YXJ0KGlucHV0LCBuKSB7XG4gIGlmIChuID09PSB2b2lkIDApIHtcbiAgICBuID0gMjtcbiAgfVxuXG4gIGlmIChpbnB1dC50b1N0cmluZygpLmxlbmd0aCA8IG4pIHtcbiAgICByZXR1cm4gKFwiMFwiLnJlcGVhdChuKSArIGlucHV0KS5zbGljZSgtbik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGlucHV0LnRvU3RyaW5nKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIHBhcnNlSW50ZWdlcihzdHJpbmcpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKHN0cmluZykgfHwgc3RyaW5nID09PSBudWxsIHx8IHN0cmluZyA9PT0gXCJcIikge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHN0cmluZywgMTApO1xuICB9XG59XG5mdW5jdGlvbiBwYXJzZU1pbGxpcyhmcmFjdGlvbikge1xuICAvLyBSZXR1cm4gdW5kZWZpbmVkIChpbnN0ZWFkIG9mIDApIGluIHRoZXNlIGNhc2VzLCB3aGVyZSBmcmFjdGlvbiBpcyBub3Qgc2V0XG4gIGlmIChpc1VuZGVmaW5lZChmcmFjdGlvbikgfHwgZnJhY3Rpb24gPT09IG51bGwgfHwgZnJhY3Rpb24gPT09IFwiXCIpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IGVsc2Uge1xuICAgIHZhciBmID0gcGFyc2VGbG9hdChcIjAuXCIgKyBmcmFjdGlvbikgKiAxMDAwO1xuICAgIHJldHVybiBNYXRoLmZsb29yKGYpO1xuICB9XG59XG5mdW5jdGlvbiByb3VuZFRvKG51bWJlciwgZGlnaXRzLCB0b3dhcmRaZXJvKSB7XG4gIGlmICh0b3dhcmRaZXJvID09PSB2b2lkIDApIHtcbiAgICB0b3dhcmRaZXJvID0gZmFsc2U7XG4gIH1cblxuICB2YXIgZmFjdG9yID0gTWF0aC5wb3coMTAsIGRpZ2l0cyksXG4gICAgICByb3VuZGVyID0gdG93YXJkWmVybyA/IE1hdGgudHJ1bmMgOiBNYXRoLnJvdW5kO1xuICByZXR1cm4gcm91bmRlcihudW1iZXIgKiBmYWN0b3IpIC8gZmFjdG9yO1xufSAvLyBEQVRFIEJBU0lDU1xuXG5mdW5jdGlvbiBpc0xlYXBZZWFyKHllYXIpIHtcbiAgcmV0dXJuIHllYXIgJSA0ID09PSAwICYmICh5ZWFyICUgMTAwICE9PSAwIHx8IHllYXIgJSA0MDAgPT09IDApO1xufVxuZnVuY3Rpb24gZGF5c0luWWVhcih5ZWFyKSB7XG4gIHJldHVybiBpc0xlYXBZZWFyKHllYXIpID8gMzY2IDogMzY1O1xufVxuZnVuY3Rpb24gZGF5c0luTW9udGgoeWVhciwgbW9udGgpIHtcbiAgdmFyIG1vZE1vbnRoID0gZmxvb3JNb2QobW9udGggLSAxLCAxMikgKyAxLFxuICAgICAgbW9kWWVhciA9IHllYXIgKyAobW9udGggLSBtb2RNb250aCkgLyAxMjtcblxuICBpZiAobW9kTW9udGggPT09IDIpIHtcbiAgICByZXR1cm4gaXNMZWFwWWVhcihtb2RZZWFyKSA/IDI5IDogMjg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFszMSwgbnVsbCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdW21vZE1vbnRoIC0gMV07XG4gIH1cbn0gLy8gY292ZXJ0IGEgY2FsZW5kYXIgb2JqZWN0IHRvIGEgbG9jYWwgdGltZXN0YW1wIChlcG9jaCwgYnV0IHdpdGggdGhlIG9mZnNldCBiYWtlZCBpbilcblxuZnVuY3Rpb24gb2JqVG9Mb2NhbFRTKG9iaikge1xuICB2YXIgZCA9IERhdGUuVVRDKG9iai55ZWFyLCBvYmoubW9udGggLSAxLCBvYmouZGF5LCBvYmouaG91ciwgb2JqLm1pbnV0ZSwgb2JqLnNlY29uZCwgb2JqLm1pbGxpc2Vjb25kKTsgLy8gZm9yIGxlZ2FjeSByZWFzb25zLCB5ZWFycyBiZXR3ZWVuIDAgYW5kIDk5IGFyZSBpbnRlcnByZXRlZCBhcyAxOVhYOyByZXZlcnQgdGhhdFxuXG4gIGlmIChvYmoueWVhciA8IDEwMCAmJiBvYmoueWVhciA+PSAwKSB7XG4gICAgZCA9IG5ldyBEYXRlKGQpO1xuICAgIGQuc2V0VVRDRnVsbFllYXIoZC5nZXRVVENGdWxsWWVhcigpIC0gMTkwMCk7XG4gIH1cblxuICByZXR1cm4gK2Q7XG59XG5mdW5jdGlvbiB3ZWVrc0luV2Vla1llYXIod2Vla1llYXIpIHtcbiAgdmFyIHAxID0gKHdlZWtZZWFyICsgTWF0aC5mbG9vcih3ZWVrWWVhciAvIDQpIC0gTWF0aC5mbG9vcih3ZWVrWWVhciAvIDEwMCkgKyBNYXRoLmZsb29yKHdlZWtZZWFyIC8gNDAwKSkgJSA3LFxuICAgICAgbGFzdCA9IHdlZWtZZWFyIC0gMSxcbiAgICAgIHAyID0gKGxhc3QgKyBNYXRoLmZsb29yKGxhc3QgLyA0KSAtIE1hdGguZmxvb3IobGFzdCAvIDEwMCkgKyBNYXRoLmZsb29yKGxhc3QgLyA0MDApKSAlIDc7XG4gIHJldHVybiBwMSA9PT0gNCB8fCBwMiA9PT0gMyA/IDUzIDogNTI7XG59XG5mdW5jdGlvbiB1bnRydW5jYXRlWWVhcih5ZWFyKSB7XG4gIGlmICh5ZWFyID4gOTkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHJldHVybiB5ZWFyID4gNjAgPyAxOTAwICsgeWVhciA6IDIwMDAgKyB5ZWFyO1xufSAvLyBQQVJTSU5HXG5cbmZ1bmN0aW9uIHBhcnNlWm9uZUluZm8odHMsIG9mZnNldEZvcm1hdCwgbG9jYWxlLCB0aW1lWm9uZSkge1xuICBpZiAodGltZVpvbmUgPT09IHZvaWQgMCkge1xuICAgIHRpbWVab25lID0gbnVsbDtcbiAgfVxuXG4gIHZhciBkYXRlID0gbmV3IERhdGUodHMpLFxuICAgICAgaW50bE9wdHMgPSB7XG4gICAgaG91cjEyOiBmYWxzZSxcbiAgICB5ZWFyOiBcIm51bWVyaWNcIixcbiAgICBtb250aDogXCIyLWRpZ2l0XCIsXG4gICAgZGF5OiBcIjItZGlnaXRcIixcbiAgICBob3VyOiBcIjItZGlnaXRcIixcbiAgICBtaW51dGU6IFwiMi1kaWdpdFwiXG4gIH07XG5cbiAgaWYgKHRpbWVab25lKSB7XG4gICAgaW50bE9wdHMudGltZVpvbmUgPSB0aW1lWm9uZTtcbiAgfVxuXG4gIHZhciBtb2RpZmllZCA9IE9iamVjdC5hc3NpZ24oe1xuICAgIHRpbWVab25lTmFtZTogb2Zmc2V0Rm9ybWF0XG4gIH0sIGludGxPcHRzKSxcbiAgICAgIGludGwgPSBoYXNJbnRsKCk7XG5cbiAgaWYgKGludGwgJiYgaGFzRm9ybWF0VG9QYXJ0cygpKSB7XG4gICAgdmFyIHBhcnNlZCA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY2FsZSwgbW9kaWZpZWQpLmZvcm1hdFRvUGFydHMoZGF0ZSkuZmluZChmdW5jdGlvbiAobSkge1xuICAgICAgcmV0dXJuIG0udHlwZS50b0xvd2VyQ2FzZSgpID09PSBcInRpbWV6b25lbmFtZVwiO1xuICAgIH0pO1xuICAgIHJldHVybiBwYXJzZWQgPyBwYXJzZWQudmFsdWUgOiBudWxsO1xuICB9IGVsc2UgaWYgKGludGwpIHtcbiAgICAvLyB0aGlzIHByb2JhYmx5IGRvZXNuJ3Qgd29yayBmb3IgYWxsIGxvY2FsZXNcbiAgICB2YXIgd2l0aG91dCA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY2FsZSwgaW50bE9wdHMpLmZvcm1hdChkYXRlKSxcbiAgICAgICAgaW5jbHVkZWQgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUsIG1vZGlmaWVkKS5mb3JtYXQoZGF0ZSksXG4gICAgICAgIGRpZmZlZCA9IGluY2x1ZGVkLnN1YnN0cmluZyh3aXRob3V0Lmxlbmd0aCksXG4gICAgICAgIHRyaW1tZWQgPSBkaWZmZWQucmVwbGFjZSgvXlssIFxcdTIwMGVdKy8sIFwiXCIpO1xuICAgIHJldHVybiB0cmltbWVkO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59IC8vIHNpZ25lZE9mZnNldCgnLTUnLCAnMzAnKSAtPiAtMzMwXG5cbmZ1bmN0aW9uIHNpZ25lZE9mZnNldChvZmZIb3VyU3RyLCBvZmZNaW51dGVTdHIpIHtcbiAgdmFyIG9mZkhvdXIgPSBwYXJzZUludChvZmZIb3VyU3RyLCAxMCk7IC8vIGRvbid0IHx8IHRoaXMgYmVjYXVzZSB3ZSB3YW50IHRvIHByZXNlcnZlIC0wXG5cbiAgaWYgKE51bWJlci5pc05hTihvZmZIb3VyKSkge1xuICAgIG9mZkhvdXIgPSAwO1xuICB9XG5cbiAgdmFyIG9mZk1pbiA9IHBhcnNlSW50KG9mZk1pbnV0ZVN0ciwgMTApIHx8IDAsXG4gICAgICBvZmZNaW5TaWduZWQgPSBvZmZIb3VyIDwgMCB8fCBPYmplY3QuaXMob2ZmSG91ciwgLTApID8gLW9mZk1pbiA6IG9mZk1pbjtcbiAgcmV0dXJuIG9mZkhvdXIgKiA2MCArIG9mZk1pblNpZ25lZDtcbn0gLy8gQ09FUkNJT05cblxuZnVuY3Rpb24gYXNOdW1iZXIodmFsdWUpIHtcbiAgdmFyIG51bWVyaWNWYWx1ZSA9IE51bWJlcih2YWx1ZSk7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiIHx8IHZhbHVlID09PSBcIlwiIHx8IE51bWJlci5pc05hTihudW1lcmljVmFsdWUpKSB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXCJJbnZhbGlkIHVuaXQgdmFsdWUgXCIgKyB2YWx1ZSk7XG4gIHJldHVybiBudW1lcmljVmFsdWU7XG59XG5mdW5jdGlvbiBub3JtYWxpemVPYmplY3Qob2JqLCBub3JtYWxpemVyLCBub25Vbml0S2V5cykge1xuICB2YXIgbm9ybWFsaXplZCA9IHt9O1xuXG4gIGZvciAodmFyIHUgaW4gb2JqKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5KG9iaiwgdSkpIHtcbiAgICAgIGlmIChub25Vbml0S2V5cy5pbmRleE9mKHUpID49IDApIGNvbnRpbnVlO1xuICAgICAgdmFyIHYgPSBvYmpbdV07XG4gICAgICBpZiAodiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgbm9ybWFsaXplZFtub3JtYWxpemVyKHUpXSA9IGFzTnVtYmVyKHYpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBub3JtYWxpemVkO1xufVxuZnVuY3Rpb24gZm9ybWF0T2Zmc2V0KG9mZnNldCwgZm9ybWF0KSB7XG4gIHZhciBob3VycyA9IE1hdGgudHJ1bmMoTWF0aC5hYnMob2Zmc2V0IC8gNjApKSxcbiAgICAgIG1pbnV0ZXMgPSBNYXRoLnRydW5jKE1hdGguYWJzKG9mZnNldCAlIDYwKSksXG4gICAgICBzaWduID0gb2Zmc2V0ID49IDAgPyBcIitcIiA6IFwiLVwiO1xuXG4gIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgY2FzZSBcInNob3J0XCI6XG4gICAgICByZXR1cm4gXCJcIiArIHNpZ24gKyBwYWRTdGFydChob3VycywgMikgKyBcIjpcIiArIHBhZFN0YXJ0KG1pbnV0ZXMsIDIpO1xuXG4gICAgY2FzZSBcIm5hcnJvd1wiOlxuICAgICAgcmV0dXJuIFwiXCIgKyBzaWduICsgaG91cnMgKyAobWludXRlcyA+IDAgPyBcIjpcIiArIG1pbnV0ZXMgOiBcIlwiKTtcblxuICAgIGNhc2UgXCJ0ZWNoaWVcIjpcbiAgICAgIHJldHVybiBcIlwiICsgc2lnbiArIHBhZFN0YXJ0KGhvdXJzLCAyKSArIHBhZFN0YXJ0KG1pbnV0ZXMsIDIpO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVmFsdWUgZm9ybWF0IFwiICsgZm9ybWF0ICsgXCIgaXMgb3V0IG9mIHJhbmdlIGZvciBwcm9wZXJ0eSBmb3JtYXRcIik7XG4gIH1cbn1cbmZ1bmN0aW9uIHRpbWVPYmplY3Qob2JqKSB7XG4gIHJldHVybiBwaWNrKG9iaiwgW1wiaG91clwiLCBcIm1pbnV0ZVwiLCBcInNlY29uZFwiLCBcIm1pbGxpc2Vjb25kXCJdKTtcbn1cbnZhciBpYW5hUmVnZXggPSAvW0EtWmEtel8rLV17MSwyNTZ9KDo/XFwvW0EtWmEtel8rLV17MSwyNTZ9KFxcL1tBLVphLXpfKy1dezEsMjU2fSk/KT8vO1xuXG5mdW5jdGlvbiBzdHJpbmdpZnkob2JqKSB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmosIE9iamVjdC5rZXlzKG9iaikuc29ydCgpKTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5cbnZhciBtb250aHNMb25nID0gW1wiSmFudWFyeVwiLCBcIkZlYnJ1YXJ5XCIsIFwiTWFyY2hcIiwgXCJBcHJpbFwiLCBcIk1heVwiLCBcIkp1bmVcIiwgXCJKdWx5XCIsIFwiQXVndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2N0b2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGVjZW1iZXJcIl07XG52YXIgbW9udGhzU2hvcnQgPSBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl07XG52YXIgbW9udGhzTmFycm93ID0gW1wiSlwiLCBcIkZcIiwgXCJNXCIsIFwiQVwiLCBcIk1cIiwgXCJKXCIsIFwiSlwiLCBcIkFcIiwgXCJTXCIsIFwiT1wiLCBcIk5cIiwgXCJEXCJdO1xuZnVuY3Rpb24gbW9udGhzKGxlbmd0aCkge1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgXCJuYXJyb3dcIjpcbiAgICAgIHJldHVybiBtb250aHNOYXJyb3c7XG5cbiAgICBjYXNlIFwic2hvcnRcIjpcbiAgICAgIHJldHVybiBtb250aHNTaG9ydDtcblxuICAgIGNhc2UgXCJsb25nXCI6XG4gICAgICByZXR1cm4gbW9udGhzTG9uZztcblxuICAgIGNhc2UgXCJudW1lcmljXCI6XG4gICAgICByZXR1cm4gW1wiMVwiLCBcIjJcIiwgXCIzXCIsIFwiNFwiLCBcIjVcIiwgXCI2XCIsIFwiN1wiLCBcIjhcIiwgXCI5XCIsIFwiMTBcIiwgXCIxMVwiLCBcIjEyXCJdO1xuXG4gICAgY2FzZSBcIjItZGlnaXRcIjpcbiAgICAgIHJldHVybiBbXCIwMVwiLCBcIjAyXCIsIFwiMDNcIiwgXCIwNFwiLCBcIjA1XCIsIFwiMDZcIiwgXCIwN1wiLCBcIjA4XCIsIFwiMDlcIiwgXCIxMFwiLCBcIjExXCIsIFwiMTJcIl07XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbnZhciB3ZWVrZGF5c0xvbmcgPSBbXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiLCBcIlN1bmRheVwiXTtcbnZhciB3ZWVrZGF5c1Nob3J0ID0gW1wiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCIsIFwiU3VuXCJdO1xudmFyIHdlZWtkYXlzTmFycm93ID0gW1wiTVwiLCBcIlRcIiwgXCJXXCIsIFwiVFwiLCBcIkZcIiwgXCJTXCIsIFwiU1wiXTtcbmZ1bmN0aW9uIHdlZWtkYXlzKGxlbmd0aCkge1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgXCJuYXJyb3dcIjpcbiAgICAgIHJldHVybiB3ZWVrZGF5c05hcnJvdztcblxuICAgIGNhc2UgXCJzaG9ydFwiOlxuICAgICAgcmV0dXJuIHdlZWtkYXlzU2hvcnQ7XG5cbiAgICBjYXNlIFwibG9uZ1wiOlxuICAgICAgcmV0dXJuIHdlZWtkYXlzTG9uZztcblxuICAgIGNhc2UgXCJudW1lcmljXCI6XG4gICAgICByZXR1cm4gW1wiMVwiLCBcIjJcIiwgXCIzXCIsIFwiNFwiLCBcIjVcIiwgXCI2XCIsIFwiN1wiXTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxudmFyIG1lcmlkaWVtcyA9IFtcIkFNXCIsIFwiUE1cIl07XG52YXIgZXJhc0xvbmcgPSBbXCJCZWZvcmUgQ2hyaXN0XCIsIFwiQW5ubyBEb21pbmlcIl07XG52YXIgZXJhc1Nob3J0ID0gW1wiQkNcIiwgXCJBRFwiXTtcbnZhciBlcmFzTmFycm93ID0gW1wiQlwiLCBcIkFcIl07XG5mdW5jdGlvbiBlcmFzKGxlbmd0aCkge1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgXCJuYXJyb3dcIjpcbiAgICAgIHJldHVybiBlcmFzTmFycm93O1xuXG4gICAgY2FzZSBcInNob3J0XCI6XG4gICAgICByZXR1cm4gZXJhc1Nob3J0O1xuXG4gICAgY2FzZSBcImxvbmdcIjpcbiAgICAgIHJldHVybiBlcmFzTG9uZztcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gbWVyaWRpZW1Gb3JEYXRlVGltZShkdCkge1xuICByZXR1cm4gbWVyaWRpZW1zW2R0LmhvdXIgPCAxMiA/IDAgOiAxXTtcbn1cbmZ1bmN0aW9uIHdlZWtkYXlGb3JEYXRlVGltZShkdCwgbGVuZ3RoKSB7XG4gIHJldHVybiB3ZWVrZGF5cyhsZW5ndGgpW2R0LndlZWtkYXkgLSAxXTtcbn1cbmZ1bmN0aW9uIG1vbnRoRm9yRGF0ZVRpbWUoZHQsIGxlbmd0aCkge1xuICByZXR1cm4gbW9udGhzKGxlbmd0aClbZHQubW9udGggLSAxXTtcbn1cbmZ1bmN0aW9uIGVyYUZvckRhdGVUaW1lKGR0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGVyYXMobGVuZ3RoKVtkdC55ZWFyIDwgMCA/IDAgOiAxXTtcbn1cbmZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlVGltZSh1bml0LCBjb3VudCwgbnVtZXJpYywgbmFycm93KSB7XG4gIGlmIChudW1lcmljID09PSB2b2lkIDApIHtcbiAgICBudW1lcmljID0gXCJhbHdheXNcIjtcbiAgfVxuXG4gIGlmIChuYXJyb3cgPT09IHZvaWQgMCkge1xuICAgIG5hcnJvdyA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVuaXRzID0ge1xuICAgIHllYXJzOiBbXCJ5ZWFyXCIsIFwieXIuXCJdLFxuICAgIHF1YXJ0ZXJzOiBbXCJxdWFydGVyXCIsIFwicXRyLlwiXSxcbiAgICBtb250aHM6IFtcIm1vbnRoXCIsIFwibW8uXCJdLFxuICAgIHdlZWtzOiBbXCJ3ZWVrXCIsIFwid2suXCJdLFxuICAgIGRheXM6IFtcImRheVwiLCBcImRheVwiLCBcImRheXNcIl0sXG4gICAgaG91cnM6IFtcImhvdXJcIiwgXCJoci5cIl0sXG4gICAgbWludXRlczogW1wibWludXRlXCIsIFwibWluLlwiXSxcbiAgICBzZWNvbmRzOiBbXCJzZWNvbmRcIiwgXCJzZWMuXCJdXG4gIH07XG4gIHZhciBsYXN0YWJsZSA9IFtcImhvdXJzXCIsIFwibWludXRlc1wiLCBcInNlY29uZHNcIl0uaW5kZXhPZih1bml0KSA9PT0gLTE7XG5cbiAgaWYgKG51bWVyaWMgPT09IFwiYXV0b1wiICYmIGxhc3RhYmxlKSB7XG4gICAgdmFyIGlzRGF5ID0gdW5pdCA9PT0gXCJkYXlzXCI7XG5cbiAgICBzd2l0Y2ggKGNvdW50KSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBpc0RheSA/IFwidG9tb3Jyb3dcIiA6IFwibmV4dCBcIiArIHVuaXRzW3VuaXRdWzBdO1xuXG4gICAgICBjYXNlIC0xOlxuICAgICAgICByZXR1cm4gaXNEYXkgPyBcInllc3RlcmRheVwiIDogXCJsYXN0IFwiICsgdW5pdHNbdW5pdF1bMF07XG5cbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIGlzRGF5ID8gXCJ0b2RheVwiIDogXCJ0aGlzIFwiICsgdW5pdHNbdW5pdF1bMF07XG5cbiAgICB9XG4gIH1cblxuICB2YXIgaXNJblBhc3QgPSBPYmplY3QuaXMoY291bnQsIC0wKSB8fCBjb3VudCA8IDAsXG4gICAgICBmbXRWYWx1ZSA9IE1hdGguYWJzKGNvdW50KSxcbiAgICAgIHNpbmd1bGFyID0gZm10VmFsdWUgPT09IDEsXG4gICAgICBsaWxVbml0cyA9IHVuaXRzW3VuaXRdLFxuICAgICAgZm10VW5pdCA9IG5hcnJvdyA/IHNpbmd1bGFyID8gbGlsVW5pdHNbMV0gOiBsaWxVbml0c1syXSB8fCBsaWxVbml0c1sxXSA6IHNpbmd1bGFyID8gdW5pdHNbdW5pdF1bMF0gOiB1bml0O1xuICByZXR1cm4gaXNJblBhc3QgPyBmbXRWYWx1ZSArIFwiIFwiICsgZm10VW5pdCArIFwiIGFnb1wiIDogXCJpbiBcIiArIGZtdFZhbHVlICsgXCIgXCIgKyBmbXRVbml0O1xufVxuZnVuY3Rpb24gZm9ybWF0U3RyaW5nKGtub3duRm9ybWF0KSB7XG4gIC8vIHRoZXNlIGFsbCBoYXZlIHRoZSBvZmZzZXRzIHJlbW92ZWQgYmVjYXVzZSB3ZSBkb24ndCBoYXZlIGFjY2VzcyB0byB0aGVtXG4gIC8vIHdpdGhvdXQgYWxsIHRoZSBpbnRsIHN0dWZmIHRoaXMgaXMgYmFja2ZpbGxpbmdcbiAgdmFyIGZpbHRlcmVkID0gcGljayhrbm93bkZvcm1hdCwgW1wid2Vla2RheVwiLCBcImVyYVwiLCBcInllYXJcIiwgXCJtb250aFwiLCBcImRheVwiLCBcImhvdXJcIiwgXCJtaW51dGVcIiwgXCJzZWNvbmRcIiwgXCJ0aW1lWm9uZU5hbWVcIiwgXCJob3VyMTJcIl0pLFxuICAgICAga2V5ID0gc3RyaW5naWZ5KGZpbHRlcmVkKSxcbiAgICAgIGRhdGVUaW1lSHVnZSA9IFwiRUVFRSwgTExMTCBkLCB5eXl5LCBoOm1tIGFcIjtcblxuICBzd2l0Y2ggKGtleSkge1xuICAgIGNhc2Ugc3RyaW5naWZ5KERBVEVfU0hPUlQpOlxuICAgICAgcmV0dXJuIFwiTS9kL3l5eXlcIjtcblxuICAgIGNhc2Ugc3RyaW5naWZ5KERBVEVfTUVEKTpcbiAgICAgIHJldHVybiBcIkxMTCBkLCB5eXl5XCI7XG5cbiAgICBjYXNlIHN0cmluZ2lmeShEQVRFX01FRF9XSVRIX1dFRUtEQVkpOlxuICAgICAgcmV0dXJuIFwiRUVFLCBMTEwgZCwgeXl5eVwiO1xuXG4gICAgY2FzZSBzdHJpbmdpZnkoREFURV9GVUxMKTpcbiAgICAgIHJldHVybiBcIkxMTEwgZCwgeXl5eVwiO1xuXG4gICAgY2FzZSBzdHJpbmdpZnkoREFURV9IVUdFKTpcbiAgICAgIHJldHVybiBcIkVFRUUsIExMTEwgZCwgeXl5eVwiO1xuXG4gICAgY2FzZSBzdHJpbmdpZnkoVElNRV9TSU1QTEUpOlxuICAgICAgcmV0dXJuIFwiaDptbSBhXCI7XG5cbiAgICBjYXNlIHN0cmluZ2lmeShUSU1FX1dJVEhfU0VDT05EUyk6XG4gICAgICByZXR1cm4gXCJoOm1tOnNzIGFcIjtcblxuICAgIGNhc2Ugc3RyaW5naWZ5KFRJTUVfV0lUSF9TSE9SVF9PRkZTRVQpOlxuICAgICAgcmV0dXJuIFwiaDptbSBhXCI7XG5cbiAgICBjYXNlIHN0cmluZ2lmeShUSU1FX1dJVEhfTE9OR19PRkZTRVQpOlxuICAgICAgcmV0dXJuIFwiaDptbSBhXCI7XG5cbiAgICBjYXNlIHN0cmluZ2lmeShUSU1FXzI0X1NJTVBMRSk6XG4gICAgICByZXR1cm4gXCJISDptbVwiO1xuXG4gICAgY2FzZSBzdHJpbmdpZnkoVElNRV8yNF9XSVRIX1NFQ09ORFMpOlxuICAgICAgcmV0dXJuIFwiSEg6bW06c3NcIjtcblxuICAgIGNhc2Ugc3RyaW5naWZ5KFRJTUVfMjRfV0lUSF9TSE9SVF9PRkZTRVQpOlxuICAgICAgcmV0dXJuIFwiSEg6bW1cIjtcblxuICAgIGNhc2Ugc3RyaW5naWZ5KFRJTUVfMjRfV0lUSF9MT05HX09GRlNFVCk6XG4gICAgICByZXR1cm4gXCJISDptbVwiO1xuXG4gICAgY2FzZSBzdHJpbmdpZnkoREFURVRJTUVfU0hPUlQpOlxuICAgICAgcmV0dXJuIFwiTS9kL3l5eXksIGg6bW0gYVwiO1xuXG4gICAgY2FzZSBzdHJpbmdpZnkoREFURVRJTUVfTUVEKTpcbiAgICAgIHJldHVybiBcIkxMTCBkLCB5eXl5LCBoOm1tIGFcIjtcblxuICAgIGNhc2Ugc3RyaW5naWZ5KERBVEVUSU1FX0ZVTEwpOlxuICAgICAgcmV0dXJuIFwiTExMTCBkLCB5eXl5LCBoOm1tIGFcIjtcblxuICAgIGNhc2Ugc3RyaW5naWZ5KERBVEVUSU1FX0hVR0UpOlxuICAgICAgcmV0dXJuIGRhdGVUaW1lSHVnZTtcblxuICAgIGNhc2Ugc3RyaW5naWZ5KERBVEVUSU1FX1NIT1JUX1dJVEhfU0VDT05EUyk6XG4gICAgICByZXR1cm4gXCJNL2QveXl5eSwgaDptbTpzcyBhXCI7XG5cbiAgICBjYXNlIHN0cmluZ2lmeShEQVRFVElNRV9NRURfV0lUSF9TRUNPTkRTKTpcbiAgICAgIHJldHVybiBcIkxMTCBkLCB5eXl5LCBoOm1tOnNzIGFcIjtcblxuICAgIGNhc2Ugc3RyaW5naWZ5KERBVEVUSU1FX01FRF9XSVRIX1dFRUtEQVkpOlxuICAgICAgcmV0dXJuIFwiRUVFLCBkIExMTCB5eXl5LCBoOm1tIGFcIjtcblxuICAgIGNhc2Ugc3RyaW5naWZ5KERBVEVUSU1FX0ZVTExfV0lUSF9TRUNPTkRTKTpcbiAgICAgIHJldHVybiBcIkxMTEwgZCwgeXl5eSwgaDptbTpzcyBhXCI7XG5cbiAgICBjYXNlIHN0cmluZ2lmeShEQVRFVElNRV9IVUdFX1dJVEhfU0VDT05EUyk6XG4gICAgICByZXR1cm4gXCJFRUVFLCBMTExMIGQsIHl5eXksIGg6bW06c3MgYVwiO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBkYXRlVGltZUh1Z2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5VG9rZW5zKHNwbGl0cywgdG9rZW5Ub1N0cmluZykge1xuICB2YXIgcyA9IFwiXCI7XG5cbiAgZm9yICh2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShzcGxpdHMpLCBfc3RlcDsgIShfc3RlcCA9IF9pdGVyYXRvcigpKS5kb25lOykge1xuICAgIHZhciB0b2tlbiA9IF9zdGVwLnZhbHVlO1xuXG4gICAgaWYgKHRva2VuLmxpdGVyYWwpIHtcbiAgICAgIHMgKz0gdG9rZW4udmFsO1xuICAgIH0gZWxzZSB7XG4gICAgICBzICs9IHRva2VuVG9TdHJpbmcodG9rZW4udmFsKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcztcbn1cblxudmFyIF9tYWNyb1Rva2VuVG9Gb3JtYXRPcHRzID0ge1xuICBEOiBEQVRFX1NIT1JULFxuICBERDogREFURV9NRUQsXG4gIERERDogREFURV9GVUxMLFxuICBEREREOiBEQVRFX0hVR0UsXG4gIHQ6IFRJTUVfU0lNUExFLFxuICB0dDogVElNRV9XSVRIX1NFQ09ORFMsXG4gIHR0dDogVElNRV9XSVRIX1NIT1JUX09GRlNFVCxcbiAgdHR0dDogVElNRV9XSVRIX0xPTkdfT0ZGU0VULFxuICBUOiBUSU1FXzI0X1NJTVBMRSxcbiAgVFQ6IFRJTUVfMjRfV0lUSF9TRUNPTkRTLFxuICBUVFQ6IFRJTUVfMjRfV0lUSF9TSE9SVF9PRkZTRVQsXG4gIFRUVFQ6IFRJTUVfMjRfV0lUSF9MT05HX09GRlNFVCxcbiAgZjogREFURVRJTUVfU0hPUlQsXG4gIGZmOiBEQVRFVElNRV9NRUQsXG4gIGZmZjogREFURVRJTUVfRlVMTCxcbiAgZmZmZjogREFURVRJTUVfSFVHRSxcbiAgRjogREFURVRJTUVfU0hPUlRfV0lUSF9TRUNPTkRTLFxuICBGRjogREFURVRJTUVfTUVEX1dJVEhfU0VDT05EUyxcbiAgRkZGOiBEQVRFVElNRV9GVUxMX1dJVEhfU0VDT05EUyxcbiAgRkZGRjogREFURVRJTUVfSFVHRV9XSVRIX1NFQ09ORFNcbn07XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxudmFyIEZvcm1hdHRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIEZvcm1hdHRlci5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUobG9jYWxlLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRm9ybWF0dGVyKGxvY2FsZSwgb3B0cyk7XG4gIH07XG5cbiAgRm9ybWF0dGVyLnBhcnNlRm9ybWF0ID0gZnVuY3Rpb24gcGFyc2VGb3JtYXQoZm10KSB7XG4gICAgdmFyIGN1cnJlbnQgPSBudWxsLFxuICAgICAgICBjdXJyZW50RnVsbCA9IFwiXCIsXG4gICAgICAgIGJyYWNrZXRlZCA9IGZhbHNlO1xuICAgIHZhciBzcGxpdHMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm10Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IGZtdC5jaGFyQXQoaSk7XG5cbiAgICAgIGlmIChjID09PSBcIidcIikge1xuICAgICAgICBpZiAoY3VycmVudEZ1bGwubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHNwbGl0cy5wdXNoKHtcbiAgICAgICAgICAgIGxpdGVyYWw6IGJyYWNrZXRlZCxcbiAgICAgICAgICAgIHZhbDogY3VycmVudEZ1bGxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnQgPSBudWxsO1xuICAgICAgICBjdXJyZW50RnVsbCA9IFwiXCI7XG4gICAgICAgIGJyYWNrZXRlZCA9ICFicmFja2V0ZWQ7XG4gICAgICB9IGVsc2UgaWYgKGJyYWNrZXRlZCkge1xuICAgICAgICBjdXJyZW50RnVsbCArPSBjO1xuICAgICAgfSBlbHNlIGlmIChjID09PSBjdXJyZW50KSB7XG4gICAgICAgIGN1cnJlbnRGdWxsICs9IGM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY3VycmVudEZ1bGwubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHNwbGl0cy5wdXNoKHtcbiAgICAgICAgICAgIGxpdGVyYWw6IGZhbHNlLFxuICAgICAgICAgICAgdmFsOiBjdXJyZW50RnVsbFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudEZ1bGwgPSBjO1xuICAgICAgICBjdXJyZW50ID0gYztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY3VycmVudEZ1bGwubGVuZ3RoID4gMCkge1xuICAgICAgc3BsaXRzLnB1c2goe1xuICAgICAgICBsaXRlcmFsOiBicmFja2V0ZWQsXG4gICAgICAgIHZhbDogY3VycmVudEZ1bGxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBzcGxpdHM7XG4gIH07XG5cbiAgRm9ybWF0dGVyLm1hY3JvVG9rZW5Ub0Zvcm1hdE9wdHMgPSBmdW5jdGlvbiBtYWNyb1Rva2VuVG9Gb3JtYXRPcHRzKHRva2VuKSB7XG4gICAgcmV0dXJuIF9tYWNyb1Rva2VuVG9Gb3JtYXRPcHRzW3Rva2VuXTtcbiAgfTtcblxuICBmdW5jdGlvbiBGb3JtYXR0ZXIobG9jYWxlLCBmb3JtYXRPcHRzKSB7XG4gICAgdGhpcy5vcHRzID0gZm9ybWF0T3B0cztcbiAgICB0aGlzLmxvYyA9IGxvY2FsZTtcbiAgICB0aGlzLnN5c3RlbUxvYyA9IG51bGw7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRm9ybWF0dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZm9ybWF0V2l0aFN5c3RlbURlZmF1bHQgPSBmdW5jdGlvbiBmb3JtYXRXaXRoU3lzdGVtRGVmYXVsdChkdCwgb3B0cykge1xuICAgIGlmICh0aGlzLnN5c3RlbUxvYyA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5zeXN0ZW1Mb2MgPSB0aGlzLmxvYy5yZWRlZmF1bHRUb1N5c3RlbSgpO1xuICAgIH1cblxuICAgIHZhciBkZiA9IHRoaXMuc3lzdGVtTG9jLmR0Rm9ybWF0dGVyKGR0LCBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdHMsIG9wdHMpKTtcbiAgICByZXR1cm4gZGYuZm9ybWF0KCk7XG4gIH07XG5cbiAgX3Byb3RvLmZvcm1hdERhdGVUaW1lID0gZnVuY3Rpb24gZm9ybWF0RGF0ZVRpbWUoZHQsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgdmFyIGRmID0gdGhpcy5sb2MuZHRGb3JtYXR0ZXIoZHQsIE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0cywgb3B0cykpO1xuICAgIHJldHVybiBkZi5mb3JtYXQoKTtcbiAgfTtcblxuICBfcHJvdG8uZm9ybWF0RGF0ZVRpbWVQYXJ0cyA9IGZ1bmN0aW9uIGZvcm1hdERhdGVUaW1lUGFydHMoZHQsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgdmFyIGRmID0gdGhpcy5sb2MuZHRGb3JtYXR0ZXIoZHQsIE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0cywgb3B0cykpO1xuICAgIHJldHVybiBkZi5mb3JtYXRUb1BhcnRzKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc29sdmVkT3B0aW9ucyA9IGZ1bmN0aW9uIHJlc29sdmVkT3B0aW9ucyhkdCwgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgZGYgPSB0aGlzLmxvYy5kdEZvcm1hdHRlcihkdCwgT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5vcHRzLCBvcHRzKSk7XG4gICAgcmV0dXJuIGRmLnJlc29sdmVkT3B0aW9ucygpO1xuICB9O1xuXG4gIF9wcm90by5udW0gPSBmdW5jdGlvbiBudW0obiwgcCkge1xuICAgIGlmIChwID09PSB2b2lkIDApIHtcbiAgICAgIHAgPSAwO1xuICAgIH1cblxuICAgIC8vIHdlIGdldCBzb21lIHBlcmYgb3V0IG9mIGRvaW5nIHRoaXMgaGVyZSwgYW5ub3lpbmdseVxuICAgIGlmICh0aGlzLm9wdHMuZm9yY2VTaW1wbGUpIHtcbiAgICAgIHJldHVybiBwYWRTdGFydChuLCBwKTtcbiAgICB9XG5cbiAgICB2YXIgb3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0cyk7XG5cbiAgICBpZiAocCA+IDApIHtcbiAgICAgIG9wdHMucGFkVG8gPSBwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmxvYy5udW1iZXJGb3JtYXR0ZXIob3B0cykuZm9ybWF0KG4pO1xuICB9O1xuXG4gIF9wcm90by5mb3JtYXREYXRlVGltZUZyb21TdHJpbmcgPSBmdW5jdGlvbiBmb3JtYXREYXRlVGltZUZyb21TdHJpbmcoZHQsIGZtdCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIga25vd25FbmdsaXNoID0gdGhpcy5sb2MubGlzdGluZ01vZGUoKSA9PT0gXCJlblwiLFxuICAgICAgICB1c2VEYXRlVGltZUZvcm1hdHRlciA9IHRoaXMubG9jLm91dHB1dENhbGVuZGFyICYmIHRoaXMubG9jLm91dHB1dENhbGVuZGFyICE9PSBcImdyZWdvcnlcIiAmJiBoYXNGb3JtYXRUb1BhcnRzKCksXG4gICAgICAgIHN0cmluZyA9IGZ1bmN0aW9uIHN0cmluZyhvcHRzLCBleHRyYWN0KSB7XG4gICAgICByZXR1cm4gX3RoaXMubG9jLmV4dHJhY3QoZHQsIG9wdHMsIGV4dHJhY3QpO1xuICAgIH0sXG4gICAgICAgIGZvcm1hdE9mZnNldCA9IGZ1bmN0aW9uIGZvcm1hdE9mZnNldChvcHRzKSB7XG4gICAgICBpZiAoZHQuaXNPZmZzZXRGaXhlZCAmJiBkdC5vZmZzZXQgPT09IDAgJiYgb3B0cy5hbGxvd1opIHtcbiAgICAgICAgcmV0dXJuIFwiWlwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZHQuaXNWYWxpZCA/IGR0LnpvbmUuZm9ybWF0T2Zmc2V0KGR0LnRzLCBvcHRzLmZvcm1hdCkgOiBcIlwiO1xuICAgIH0sXG4gICAgICAgIG1lcmlkaWVtID0gZnVuY3Rpb24gbWVyaWRpZW0oKSB7XG4gICAgICByZXR1cm4ga25vd25FbmdsaXNoID8gbWVyaWRpZW1Gb3JEYXRlVGltZShkdCkgOiBzdHJpbmcoe1xuICAgICAgICBob3VyOiBcIm51bWVyaWNcIixcbiAgICAgICAgaG91cjEyOiB0cnVlXG4gICAgICB9LCBcImRheXBlcmlvZFwiKTtcbiAgICB9LFxuICAgICAgICBtb250aCA9IGZ1bmN0aW9uIG1vbnRoKGxlbmd0aCwgc3RhbmRhbG9uZSkge1xuICAgICAgcmV0dXJuIGtub3duRW5nbGlzaCA/IG1vbnRoRm9yRGF0ZVRpbWUoZHQsIGxlbmd0aCkgOiBzdHJpbmcoc3RhbmRhbG9uZSA/IHtcbiAgICAgICAgbW9udGg6IGxlbmd0aFxuICAgICAgfSA6IHtcbiAgICAgICAgbW9udGg6IGxlbmd0aCxcbiAgICAgICAgZGF5OiBcIm51bWVyaWNcIlxuICAgICAgfSwgXCJtb250aFwiKTtcbiAgICB9LFxuICAgICAgICB3ZWVrZGF5ID0gZnVuY3Rpb24gd2Vla2RheShsZW5ndGgsIHN0YW5kYWxvbmUpIHtcbiAgICAgIHJldHVybiBrbm93bkVuZ2xpc2ggPyB3ZWVrZGF5Rm9yRGF0ZVRpbWUoZHQsIGxlbmd0aCkgOiBzdHJpbmcoc3RhbmRhbG9uZSA/IHtcbiAgICAgICAgd2Vla2RheTogbGVuZ3RoXG4gICAgICB9IDoge1xuICAgICAgICB3ZWVrZGF5OiBsZW5ndGgsXG4gICAgICAgIG1vbnRoOiBcImxvbmdcIixcbiAgICAgICAgZGF5OiBcIm51bWVyaWNcIlxuICAgICAgfSwgXCJ3ZWVrZGF5XCIpO1xuICAgIH0sXG4gICAgICAgIG1heWJlTWFjcm8gPSBmdW5jdGlvbiBtYXliZU1hY3JvKHRva2VuKSB7XG4gICAgICB2YXIgZm9ybWF0T3B0cyA9IEZvcm1hdHRlci5tYWNyb1Rva2VuVG9Gb3JtYXRPcHRzKHRva2VuKTtcblxuICAgICAgaWYgKGZvcm1hdE9wdHMpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmZvcm1hdFdpdGhTeXN0ZW1EZWZhdWx0KGR0LCBmb3JtYXRPcHRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgIH1cbiAgICB9LFxuICAgICAgICBlcmEgPSBmdW5jdGlvbiBlcmEobGVuZ3RoKSB7XG4gICAgICByZXR1cm4ga25vd25FbmdsaXNoID8gZXJhRm9yRGF0ZVRpbWUoZHQsIGxlbmd0aCkgOiBzdHJpbmcoe1xuICAgICAgICBlcmE6IGxlbmd0aFxuICAgICAgfSwgXCJlcmFcIik7XG4gICAgfSxcbiAgICAgICAgdG9rZW5Ub1N0cmluZyA9IGZ1bmN0aW9uIHRva2VuVG9TdHJpbmcodG9rZW4pIHtcbiAgICAgIC8vIFdoZXJlIHBvc3NpYmxlOiBodHRwOi8vY2xkci51bmljb2RlLm9yZy90cmFuc2xhdGlvbi9kYXRlLXRpbWUjVE9DLVN0YW5kLUFsb25lLXZzLi1Gb3JtYXQtU3R5bGVzXG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIC8vIG1zXG4gICAgICAgIGNhc2UgXCJTXCI6XG4gICAgICAgICAgcmV0dXJuIF90aGlzLm51bShkdC5taWxsaXNlY29uZCk7XG5cbiAgICAgICAgY2FzZSBcInVcIjogLy8gZmFsbHMgdGhyb3VnaFxuXG4gICAgICAgIGNhc2UgXCJTU1NcIjpcbiAgICAgICAgICByZXR1cm4gX3RoaXMubnVtKGR0Lm1pbGxpc2Vjb25kLCAzKTtcbiAgICAgICAgLy8gc2Vjb25kc1xuXG4gICAgICAgIGNhc2UgXCJzXCI6XG4gICAgICAgICAgcmV0dXJuIF90aGlzLm51bShkdC5zZWNvbmQpO1xuXG4gICAgICAgIGNhc2UgXCJzc1wiOlxuICAgICAgICAgIHJldHVybiBfdGhpcy5udW0oZHQuc2Vjb25kLCAyKTtcbiAgICAgICAgLy8gbWludXRlc1xuXG4gICAgICAgIGNhc2UgXCJtXCI6XG4gICAgICAgICAgcmV0dXJuIF90aGlzLm51bShkdC5taW51dGUpO1xuXG4gICAgICAgIGNhc2UgXCJtbVwiOlxuICAgICAgICAgIHJldHVybiBfdGhpcy5udW0oZHQubWludXRlLCAyKTtcbiAgICAgICAgLy8gaG91cnNcblxuICAgICAgICBjYXNlIFwiaFwiOlxuICAgICAgICAgIHJldHVybiBfdGhpcy5udW0oZHQuaG91ciAlIDEyID09PSAwID8gMTIgOiBkdC5ob3VyICUgMTIpO1xuXG4gICAgICAgIGNhc2UgXCJoaFwiOlxuICAgICAgICAgIHJldHVybiBfdGhpcy5udW0oZHQuaG91ciAlIDEyID09PSAwID8gMTIgOiBkdC5ob3VyICUgMTIsIDIpO1xuXG4gICAgICAgIGNhc2UgXCJIXCI6XG4gICAgICAgICAgcmV0dXJuIF90aGlzLm51bShkdC5ob3VyKTtcblxuICAgICAgICBjYXNlIFwiSEhcIjpcbiAgICAgICAgICByZXR1cm4gX3RoaXMubnVtKGR0LmhvdXIsIDIpO1xuICAgICAgICAvLyBvZmZzZXRcblxuICAgICAgICBjYXNlIFwiWlwiOlxuICAgICAgICAgIC8vIGxpa2UgKzZcbiAgICAgICAgICByZXR1cm4gZm9ybWF0T2Zmc2V0KHtcbiAgICAgICAgICAgIGZvcm1hdDogXCJuYXJyb3dcIixcbiAgICAgICAgICAgIGFsbG93WjogX3RoaXMub3B0cy5hbGxvd1pcbiAgICAgICAgICB9KTtcblxuICAgICAgICBjYXNlIFwiWlpcIjpcbiAgICAgICAgICAvLyBsaWtlICswNjowMFxuICAgICAgICAgIHJldHVybiBmb3JtYXRPZmZzZXQoe1xuICAgICAgICAgICAgZm9ybWF0OiBcInNob3J0XCIsXG4gICAgICAgICAgICBhbGxvd1o6IF90aGlzLm9wdHMuYWxsb3daXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSBcIlpaWlwiOlxuICAgICAgICAgIC8vIGxpa2UgKzA2MDBcbiAgICAgICAgICByZXR1cm4gZm9ybWF0T2Zmc2V0KHtcbiAgICAgICAgICAgIGZvcm1hdDogXCJ0ZWNoaWVcIixcbiAgICAgICAgICAgIGFsbG93WjogX3RoaXMub3B0cy5hbGxvd1pcbiAgICAgICAgICB9KTtcblxuICAgICAgICBjYXNlIFwiWlpaWlwiOlxuICAgICAgICAgIC8vIGxpa2UgRVNUXG4gICAgICAgICAgcmV0dXJuIGR0LnpvbmUub2Zmc2V0TmFtZShkdC50cywge1xuICAgICAgICAgICAgZm9ybWF0OiBcInNob3J0XCIsXG4gICAgICAgICAgICBsb2NhbGU6IF90aGlzLmxvYy5sb2NhbGVcbiAgICAgICAgICB9KTtcblxuICAgICAgICBjYXNlIFwiWlpaWlpcIjpcbiAgICAgICAgICAvLyBsaWtlIEVhc3Rlcm4gU3RhbmRhcmQgVGltZVxuICAgICAgICAgIHJldHVybiBkdC56b25lLm9mZnNldE5hbWUoZHQudHMsIHtcbiAgICAgICAgICAgIGZvcm1hdDogXCJsb25nXCIsXG4gICAgICAgICAgICBsb2NhbGU6IF90aGlzLmxvYy5sb2NhbGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gem9uZVxuXG4gICAgICAgIGNhc2UgXCJ6XCI6XG4gICAgICAgICAgLy8gbGlrZSBBbWVyaWNhL05ld19Zb3JrXG4gICAgICAgICAgcmV0dXJuIGR0LnpvbmVOYW1lO1xuICAgICAgICAvLyBtZXJpZGllbXNcblxuICAgICAgICBjYXNlIFwiYVwiOlxuICAgICAgICAgIHJldHVybiBtZXJpZGllbSgpO1xuICAgICAgICAvLyBkYXRlc1xuXG4gICAgICAgIGNhc2UgXCJkXCI6XG4gICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyID8gc3RyaW5nKHtcbiAgICAgICAgICAgIGRheTogXCJudW1lcmljXCJcbiAgICAgICAgICB9LCBcImRheVwiKSA6IF90aGlzLm51bShkdC5kYXkpO1xuXG4gICAgICAgIGNhc2UgXCJkZFwiOlxuICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlciA/IHN0cmluZyh7XG4gICAgICAgICAgICBkYXk6IFwiMi1kaWdpdFwiXG4gICAgICAgICAgfSwgXCJkYXlcIikgOiBfdGhpcy5udW0oZHQuZGF5LCAyKTtcbiAgICAgICAgLy8gd2Vla2RheXMgLSBzdGFuZGFsb25lXG5cbiAgICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgICAvLyBsaWtlIDFcbiAgICAgICAgICByZXR1cm4gX3RoaXMubnVtKGR0LndlZWtkYXkpO1xuXG4gICAgICAgIGNhc2UgXCJjY2NcIjpcbiAgICAgICAgICAvLyBsaWtlICdUdWVzJ1xuICAgICAgICAgIHJldHVybiB3ZWVrZGF5KFwic2hvcnRcIiwgdHJ1ZSk7XG5cbiAgICAgICAgY2FzZSBcImNjY2NcIjpcbiAgICAgICAgICAvLyBsaWtlICdUdWVzZGF5J1xuICAgICAgICAgIHJldHVybiB3ZWVrZGF5KFwibG9uZ1wiLCB0cnVlKTtcblxuICAgICAgICBjYXNlIFwiY2NjY2NcIjpcbiAgICAgICAgICAvLyBsaWtlICdUJ1xuICAgICAgICAgIHJldHVybiB3ZWVrZGF5KFwibmFycm93XCIsIHRydWUpO1xuICAgICAgICAvLyB3ZWVrZGF5cyAtIGZvcm1hdFxuXG4gICAgICAgIGNhc2UgXCJFXCI6XG4gICAgICAgICAgLy8gbGlrZSAxXG4gICAgICAgICAgcmV0dXJuIF90aGlzLm51bShkdC53ZWVrZGF5KTtcblxuICAgICAgICBjYXNlIFwiRUVFXCI6XG4gICAgICAgICAgLy8gbGlrZSAnVHVlcydcbiAgICAgICAgICByZXR1cm4gd2Vla2RheShcInNob3J0XCIsIGZhbHNlKTtcblxuICAgICAgICBjYXNlIFwiRUVFRVwiOlxuICAgICAgICAgIC8vIGxpa2UgJ1R1ZXNkYXknXG4gICAgICAgICAgcmV0dXJuIHdlZWtkYXkoXCJsb25nXCIsIGZhbHNlKTtcblxuICAgICAgICBjYXNlIFwiRUVFRUVcIjpcbiAgICAgICAgICAvLyBsaWtlICdUJ1xuICAgICAgICAgIHJldHVybiB3ZWVrZGF5KFwibmFycm93XCIsIGZhbHNlKTtcbiAgICAgICAgLy8gbW9udGhzIC0gc3RhbmRhbG9uZVxuXG4gICAgICAgIGNhc2UgXCJMXCI6XG4gICAgICAgICAgLy8gbGlrZSAxXG4gICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyID8gc3RyaW5nKHtcbiAgICAgICAgICAgIG1vbnRoOiBcIm51bWVyaWNcIixcbiAgICAgICAgICAgIGRheTogXCJudW1lcmljXCJcbiAgICAgICAgICB9LCBcIm1vbnRoXCIpIDogX3RoaXMubnVtKGR0Lm1vbnRoKTtcblxuICAgICAgICBjYXNlIFwiTExcIjpcbiAgICAgICAgICAvLyBsaWtlIDAxLCBkb2Vzbid0IHNlZW0gdG8gd29ya1xuICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlciA/IHN0cmluZyh7XG4gICAgICAgICAgICBtb250aDogXCIyLWRpZ2l0XCIsXG4gICAgICAgICAgICBkYXk6IFwibnVtZXJpY1wiXG4gICAgICAgICAgfSwgXCJtb250aFwiKSA6IF90aGlzLm51bShkdC5tb250aCwgMik7XG5cbiAgICAgICAgY2FzZSBcIkxMTFwiOlxuICAgICAgICAgIC8vIGxpa2UgSmFuXG4gICAgICAgICAgcmV0dXJuIG1vbnRoKFwic2hvcnRcIiwgdHJ1ZSk7XG5cbiAgICAgICAgY2FzZSBcIkxMTExcIjpcbiAgICAgICAgICAvLyBsaWtlIEphbnVhcnlcbiAgICAgICAgICByZXR1cm4gbW9udGgoXCJsb25nXCIsIHRydWUpO1xuXG4gICAgICAgIGNhc2UgXCJMTExMTFwiOlxuICAgICAgICAgIC8vIGxpa2UgSlxuICAgICAgICAgIHJldHVybiBtb250aChcIm5hcnJvd1wiLCB0cnVlKTtcbiAgICAgICAgLy8gbW9udGhzIC0gZm9ybWF0XG5cbiAgICAgICAgY2FzZSBcIk1cIjpcbiAgICAgICAgICAvLyBsaWtlIDFcbiAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXIgPyBzdHJpbmcoe1xuICAgICAgICAgICAgbW9udGg6IFwibnVtZXJpY1wiXG4gICAgICAgICAgfSwgXCJtb250aFwiKSA6IF90aGlzLm51bShkdC5tb250aCk7XG5cbiAgICAgICAgY2FzZSBcIk1NXCI6XG4gICAgICAgICAgLy8gbGlrZSAwMVxuICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlciA/IHN0cmluZyh7XG4gICAgICAgICAgICBtb250aDogXCIyLWRpZ2l0XCJcbiAgICAgICAgICB9LCBcIm1vbnRoXCIpIDogX3RoaXMubnVtKGR0Lm1vbnRoLCAyKTtcblxuICAgICAgICBjYXNlIFwiTU1NXCI6XG4gICAgICAgICAgLy8gbGlrZSBKYW5cbiAgICAgICAgICByZXR1cm4gbW9udGgoXCJzaG9ydFwiLCBmYWxzZSk7XG5cbiAgICAgICAgY2FzZSBcIk1NTU1cIjpcbiAgICAgICAgICAvLyBsaWtlIEphbnVhcnlcbiAgICAgICAgICByZXR1cm4gbW9udGgoXCJsb25nXCIsIGZhbHNlKTtcblxuICAgICAgICBjYXNlIFwiTU1NTU1cIjpcbiAgICAgICAgICAvLyBsaWtlIEpcbiAgICAgICAgICByZXR1cm4gbW9udGgoXCJuYXJyb3dcIiwgZmFsc2UpO1xuICAgICAgICAvLyB5ZWFyc1xuXG4gICAgICAgIGNhc2UgXCJ5XCI6XG4gICAgICAgICAgLy8gbGlrZSAyMDE0XG4gICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyID8gc3RyaW5nKHtcbiAgICAgICAgICAgIHllYXI6IFwibnVtZXJpY1wiXG4gICAgICAgICAgfSwgXCJ5ZWFyXCIpIDogX3RoaXMubnVtKGR0LnllYXIpO1xuXG4gICAgICAgIGNhc2UgXCJ5eVwiOlxuICAgICAgICAgIC8vIGxpa2UgMTRcbiAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXIgPyBzdHJpbmcoe1xuICAgICAgICAgICAgeWVhcjogXCIyLWRpZ2l0XCJcbiAgICAgICAgICB9LCBcInllYXJcIikgOiBfdGhpcy5udW0oZHQueWVhci50b1N0cmluZygpLnNsaWNlKC0yKSwgMik7XG5cbiAgICAgICAgY2FzZSBcInl5eXlcIjpcbiAgICAgICAgICAvLyBsaWtlIDAwMTJcbiAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXIgPyBzdHJpbmcoe1xuICAgICAgICAgICAgeWVhcjogXCJudW1lcmljXCJcbiAgICAgICAgICB9LCBcInllYXJcIikgOiBfdGhpcy5udW0oZHQueWVhciwgNCk7XG5cbiAgICAgICAgY2FzZSBcInl5eXl5eVwiOlxuICAgICAgICAgIC8vIGxpa2UgMDAwMDEyXG4gICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyID8gc3RyaW5nKHtcbiAgICAgICAgICAgIHllYXI6IFwibnVtZXJpY1wiXG4gICAgICAgICAgfSwgXCJ5ZWFyXCIpIDogX3RoaXMubnVtKGR0LnllYXIsIDYpO1xuICAgICAgICAvLyBlcmFzXG5cbiAgICAgICAgY2FzZSBcIkdcIjpcbiAgICAgICAgICAvLyBsaWtlIEFEXG4gICAgICAgICAgcmV0dXJuIGVyYShcInNob3J0XCIpO1xuXG4gICAgICAgIGNhc2UgXCJHR1wiOlxuICAgICAgICAgIC8vIGxpa2UgQW5ubyBEb21pbmlcbiAgICAgICAgICByZXR1cm4gZXJhKFwibG9uZ1wiKTtcblxuICAgICAgICBjYXNlIFwiR0dHR0dcIjpcbiAgICAgICAgICByZXR1cm4gZXJhKFwibmFycm93XCIpO1xuXG4gICAgICAgIGNhc2UgXCJra1wiOlxuICAgICAgICAgIHJldHVybiBfdGhpcy5udW0oZHQud2Vla1llYXIudG9TdHJpbmcoKS5zbGljZSgtMiksIDIpO1xuXG4gICAgICAgIGNhc2UgXCJra2trXCI6XG4gICAgICAgICAgcmV0dXJuIF90aGlzLm51bShkdC53ZWVrWWVhciwgNCk7XG5cbiAgICAgICAgY2FzZSBcIldcIjpcbiAgICAgICAgICByZXR1cm4gX3RoaXMubnVtKGR0LndlZWtOdW1iZXIpO1xuXG4gICAgICAgIGNhc2UgXCJXV1wiOlxuICAgICAgICAgIHJldHVybiBfdGhpcy5udW0oZHQud2Vla051bWJlciwgMik7XG5cbiAgICAgICAgY2FzZSBcIm9cIjpcbiAgICAgICAgICByZXR1cm4gX3RoaXMubnVtKGR0Lm9yZGluYWwpO1xuXG4gICAgICAgIGNhc2UgXCJvb29cIjpcbiAgICAgICAgICByZXR1cm4gX3RoaXMubnVtKGR0Lm9yZGluYWwsIDMpO1xuXG4gICAgICAgIGNhc2UgXCJxXCI6XG4gICAgICAgICAgLy8gbGlrZSAxXG4gICAgICAgICAgcmV0dXJuIF90aGlzLm51bShkdC5xdWFydGVyKTtcblxuICAgICAgICBjYXNlIFwicXFcIjpcbiAgICAgICAgICAvLyBsaWtlIDAxXG4gICAgICAgICAgcmV0dXJuIF90aGlzLm51bShkdC5xdWFydGVyLCAyKTtcblxuICAgICAgICBjYXNlIFwiWFwiOlxuICAgICAgICAgIHJldHVybiBfdGhpcy5udW0oTWF0aC5mbG9vcihkdC50cyAvIDEwMDApKTtcblxuICAgICAgICBjYXNlIFwieFwiOlxuICAgICAgICAgIHJldHVybiBfdGhpcy5udW0oZHQudHMpO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG1heWJlTWFjcm8odG9rZW4pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gc3RyaW5naWZ5VG9rZW5zKEZvcm1hdHRlci5wYXJzZUZvcm1hdChmbXQpLCB0b2tlblRvU3RyaW5nKTtcbiAgfTtcblxuICBfcHJvdG8uZm9ybWF0RHVyYXRpb25Gcm9tU3RyaW5nID0gZnVuY3Rpb24gZm9ybWF0RHVyYXRpb25Gcm9tU3RyaW5nKGR1ciwgZm10KSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgdG9rZW5Ub0ZpZWxkID0gZnVuY3Rpb24gdG9rZW5Ub0ZpZWxkKHRva2VuKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuWzBdKSB7XG4gICAgICAgIGNhc2UgXCJTXCI6XG4gICAgICAgICAgcmV0dXJuIFwibWlsbGlzZWNvbmRcIjtcblxuICAgICAgICBjYXNlIFwic1wiOlxuICAgICAgICAgIHJldHVybiBcInNlY29uZFwiO1xuXG4gICAgICAgIGNhc2UgXCJtXCI6XG4gICAgICAgICAgcmV0dXJuIFwibWludXRlXCI7XG5cbiAgICAgICAgY2FzZSBcImhcIjpcbiAgICAgICAgICByZXR1cm4gXCJob3VyXCI7XG5cbiAgICAgICAgY2FzZSBcImRcIjpcbiAgICAgICAgICByZXR1cm4gXCJkYXlcIjtcblxuICAgICAgICBjYXNlIFwiTVwiOlxuICAgICAgICAgIHJldHVybiBcIm1vbnRoXCI7XG5cbiAgICAgICAgY2FzZSBcInlcIjpcbiAgICAgICAgICByZXR1cm4gXCJ5ZWFyXCI7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9LFxuICAgICAgICB0b2tlblRvU3RyaW5nID0gZnVuY3Rpb24gdG9rZW5Ub1N0cmluZyhsaWxkdXIpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgdmFyIG1hcHBlZCA9IHRva2VuVG9GaWVsZCh0b2tlbik7XG5cbiAgICAgICAgaWYgKG1hcHBlZCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIubnVtKGxpbGR1ci5nZXQobWFwcGVkKSwgdG9rZW4ubGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSxcbiAgICAgICAgdG9rZW5zID0gRm9ybWF0dGVyLnBhcnNlRm9ybWF0KGZtdCksXG4gICAgICAgIHJlYWxUb2tlbnMgPSB0b2tlbnMucmVkdWNlKGZ1bmN0aW9uIChmb3VuZCwgX3JlZikge1xuICAgICAgdmFyIGxpdGVyYWwgPSBfcmVmLmxpdGVyYWwsXG4gICAgICAgICAgdmFsID0gX3JlZi52YWw7XG4gICAgICByZXR1cm4gbGl0ZXJhbCA/IGZvdW5kIDogZm91bmQuY29uY2F0KHZhbCk7XG4gICAgfSwgW10pLFxuICAgICAgICBjb2xsYXBzZWQgPSBkdXIuc2hpZnRUby5hcHBseShkdXIsIHJlYWxUb2tlbnMubWFwKHRva2VuVG9GaWVsZCkuZmlsdGVyKGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gdDtcbiAgICB9KSk7XG5cbiAgICByZXR1cm4gc3RyaW5naWZ5VG9rZW5zKHRva2VucywgdG9rZW5Ub1N0cmluZyhjb2xsYXBzZWQpKTtcbiAgfTtcblxuICByZXR1cm4gRm9ybWF0dGVyO1xufSgpO1xuXG52YXIgSW52YWxpZCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEludmFsaWQocmVhc29uLCBleHBsYW5hdGlvbikge1xuICAgIHRoaXMucmVhc29uID0gcmVhc29uO1xuICAgIHRoaXMuZXhwbGFuYXRpb24gPSBleHBsYW5hdGlvbjtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBJbnZhbGlkLnByb3RvdHlwZTtcblxuICBfcHJvdG8udG9NZXNzYWdlID0gZnVuY3Rpb24gdG9NZXNzYWdlKCkge1xuICAgIGlmICh0aGlzLmV4cGxhbmF0aW9uKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZWFzb24gKyBcIjogXCIgKyB0aGlzLmV4cGxhbmF0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5yZWFzb247XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBJbnZhbGlkO1xufSgpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2VcbiAqL1xuXG52YXIgWm9uZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFpvbmUoKSB7fVxuXG4gIHZhciBfcHJvdG8gPSBab25lLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgb2Zmc2V0J3MgY29tbW9uIG5hbWUgKHN1Y2ggYXMgRVNUKSBhdCB0aGUgc3BlY2lmaWVkIHRpbWVzdGFtcFxuICAgKiBAYWJzdHJhY3RcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRzIC0gRXBvY2ggbWlsbGlzZWNvbmRzIGZvciB3aGljaCB0byBnZXQgdGhlIG5hbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBPcHRpb25zIHRvIGFmZmVjdCB0aGUgZm9ybWF0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZvcm1hdCAtIFdoYXQgc3R5bGUgb2Ygb2Zmc2V0IHRvIHJldHVybi4gQWNjZXB0cyAnbG9uZycgb3IgJ3Nob3J0Jy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubG9jYWxlIC0gV2hhdCBsb2NhbGUgdG8gcmV0dXJuIHRoZSBvZmZzZXQgbmFtZSBpbi5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgX3Byb3RvLm9mZnNldE5hbWUgPSBmdW5jdGlvbiBvZmZzZXROYW1lKHRzLCBvcHRzKSB7XG4gICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0RXJyb3IoKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgb2Zmc2V0J3MgdmFsdWUgYXMgYSBzdHJpbmdcbiAgICogQGFic3RyYWN0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0cyAtIEVwb2NoIG1pbGxpc2Vjb25kcyBmb3Igd2hpY2ggdG8gZ2V0IHRoZSBvZmZzZXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZvcm1hdCAtIFdoYXQgc3R5bGUgb2Ygb2Zmc2V0IHRvIHJldHVybi5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgIEFjY2VwdHMgJ25hcnJvdycsICdzaG9ydCcsIG9yICd0ZWNoaWUnLiBSZXR1cm5pbmcgJys2JywgJyswNjowMCcsIG9yICcrMDYwMCcgcmVzcGVjdGl2ZWx5XG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZm9ybWF0T2Zmc2V0ID0gZnVuY3Rpb24gZm9ybWF0T2Zmc2V0KHRzLCBmb3JtYXQpIHtcbiAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIG9mZnNldCBpbiBtaW51dGVzIGZvciB0aGlzIHpvbmUgYXQgdGhlIHNwZWNpZmllZCB0aW1lc3RhbXAuXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAcGFyYW0ge251bWJlcn0gdHMgLSBFcG9jaCBtaWxsaXNlY29uZHMgZm9yIHdoaWNoIHRvIGNvbXB1dGUgdGhlIG9mZnNldFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9mZnNldCA9IGZ1bmN0aW9uIG9mZnNldCh0cykge1xuICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdEVycm9yKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgWm9uZSBpcyBlcXVhbCB0byBhbm90aGVyIHpvbmVcbiAgICogQGFic3RyYWN0XG4gICAqIEBwYXJhbSB7Wm9uZX0gb3RoZXJab25lIC0gdGhlIHpvbmUgdG8gY29tcGFyZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMob3RoZXJab25lKSB7XG4gICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0RXJyb3IoKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBab25lIGlzIHZhbGlkLlxuICAgKiBAYWJzdHJhY3RcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICA7XG5cbiAgX2NyZWF0ZUNsYXNzKFpvbmUsIFt7XG4gICAga2V5OiBcInR5cGVcIixcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHpvbmVcbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0RXJyb3IoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhpcyB6b25lLlxuICAgICAqIEBhYnN0cmFjdFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJuYW1lXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIG9mZnNldCBpcyBrbm93biB0byBiZSBmaXhlZCBmb3IgdGhlIHdob2xlIHllYXIuXG4gICAgICogQGFic3RyYWN0XG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ1bml2ZXJzYWxcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdEVycm9yKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzVmFsaWRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdEVycm9yKCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFpvbmU7XG59KCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBsb2NhbCB6b25lIGZvciB0aGlzIEphdmFzY3JpcHQgZW52aXJvbm1lbnQuXG4gKiBAaW1wbGVtZW50cyB7Wm9uZX1cbiAqL1xuXG52YXIgTG9jYWxab25lID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfWm9uZSkge1xuICBfaW5oZXJpdHNMb29zZShMb2NhbFpvbmUsIF9ab25lKTtcblxuICBmdW5jdGlvbiBMb2NhbFpvbmUoKSB7XG4gICAgcmV0dXJuIF9ab25lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBMb2NhbFpvbmUucHJvdG90eXBlO1xuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIF9wcm90by5vZmZzZXROYW1lID0gZnVuY3Rpb24gb2Zmc2V0TmFtZSh0cywgX3JlZikge1xuICAgIHZhciBmb3JtYXQgPSBfcmVmLmZvcm1hdCxcbiAgICAgICAgbG9jYWxlID0gX3JlZi5sb2NhbGU7XG4gICAgcmV0dXJuIHBhcnNlWm9uZUluZm8odHMsIGZvcm1hdCwgbG9jYWxlKTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuICA7XG5cbiAgX3Byb3RvLmZvcm1hdE9mZnNldCA9IGZ1bmN0aW9uIGZvcm1hdE9mZnNldCQxKHRzLCBmb3JtYXQpIHtcbiAgICByZXR1cm4gZm9ybWF0T2Zmc2V0KHRoaXMub2Zmc2V0KHRzKSwgZm9ybWF0KTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuICA7XG5cbiAgX3Byb3RvLm9mZnNldCA9IGZ1bmN0aW9uIG9mZnNldCh0cykge1xuICAgIHJldHVybiAtbmV3IERhdGUodHMpLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gIH1cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgO1xuXG4gIF9wcm90by5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMob3RoZXJab25lKSB7XG4gICAgcmV0dXJuIG90aGVyWm9uZS50eXBlID09PSBcImxvY2FsXCI7XG4gIH1cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgO1xuXG4gIF9jcmVhdGVDbGFzcyhMb2NhbFpvbmUsIFt7XG4gICAga2V5OiBcInR5cGVcIixcblxuICAgIC8qKiBAb3ZlcnJpZGUgKiovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gXCJsb2NhbFwiO1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICoqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibmFtZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKGhhc0ludGwoKSkge1xuICAgICAgICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoKS5yZXNvbHZlZE9wdGlvbnMoKS50aW1lWm9uZTtcbiAgICAgIH0gZWxzZSByZXR1cm4gXCJsb2NhbFwiO1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICoqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidW5pdmVyc2FsXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzVmFsaWRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcImluc3RhbmNlXCIsXG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgdGhlIGxvY2FsIHpvbmVcbiAgICAgKiBAcmV0dXJuIHtMb2NhbFpvbmV9XG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAoc2luZ2xldG9uID09PSBudWxsKSB7XG4gICAgICAgIHNpbmdsZXRvbiA9IG5ldyBMb2NhbFpvbmUoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNpbmdsZXRvbjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTG9jYWxab25lO1xufShab25lKTtcblxudmFyIG1hdGNoaW5nUmVnZXggPSBSZWdFeHAoXCJeXCIgKyBpYW5hUmVnZXguc291cmNlICsgXCIkXCIpO1xudmFyIGR0ZkNhY2hlID0ge307XG5cbmZ1bmN0aW9uIG1ha2VEVEYoem9uZSkge1xuICBpZiAoIWR0ZkNhY2hlW3pvbmVdKSB7XG4gICAgZHRmQ2FjaGVbem9uZV0gPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChcImVuLVVTXCIsIHtcbiAgICAgIGhvdXIxMjogZmFsc2UsXG4gICAgICB0aW1lWm9uZTogem9uZSxcbiAgICAgIHllYXI6IFwibnVtZXJpY1wiLFxuICAgICAgbW9udGg6IFwiMi1kaWdpdFwiLFxuICAgICAgZGF5OiBcIjItZGlnaXRcIixcbiAgICAgIGhvdXI6IFwiMi1kaWdpdFwiLFxuICAgICAgbWludXRlOiBcIjItZGlnaXRcIixcbiAgICAgIHNlY29uZDogXCIyLWRpZ2l0XCJcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBkdGZDYWNoZVt6b25lXTtcbn1cblxudmFyIHR5cGVUb1BvcyA9IHtcbiAgeWVhcjogMCxcbiAgbW9udGg6IDEsXG4gIGRheTogMixcbiAgaG91cjogMyxcbiAgbWludXRlOiA0LFxuICBzZWNvbmQ6IDVcbn07XG5cbmZ1bmN0aW9uIGhhY2t5T2Zmc2V0KGR0ZiwgZGF0ZSkge1xuICB2YXIgZm9ybWF0dGVkID0gZHRmLmZvcm1hdChkYXRlKS5yZXBsYWNlKC9cXHUyMDBFL2csIFwiXCIpLFxuICAgICAgcGFyc2VkID0gLyhcXGQrKVxcLyhcXGQrKVxcLyhcXGQrKSw/IChcXGQrKTooXFxkKyk6KFxcZCspLy5leGVjKGZvcm1hdHRlZCksXG4gICAgICBmTW9udGggPSBwYXJzZWRbMV0sXG4gICAgICBmRGF5ID0gcGFyc2VkWzJdLFxuICAgICAgZlllYXIgPSBwYXJzZWRbM10sXG4gICAgICBmSG91ciA9IHBhcnNlZFs0XSxcbiAgICAgIGZNaW51dGUgPSBwYXJzZWRbNV0sXG4gICAgICBmU2Vjb25kID0gcGFyc2VkWzZdO1xuICByZXR1cm4gW2ZZZWFyLCBmTW9udGgsIGZEYXksIGZIb3VyLCBmTWludXRlLCBmU2Vjb25kXTtcbn1cblxuZnVuY3Rpb24gcGFydHNPZmZzZXQoZHRmLCBkYXRlKSB7XG4gIHZhciBmb3JtYXR0ZWQgPSBkdGYuZm9ybWF0VG9QYXJ0cyhkYXRlKSxcbiAgICAgIGZpbGxlZCA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZm9ybWF0dGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIF9mb3JtYXR0ZWQkaSA9IGZvcm1hdHRlZFtpXSxcbiAgICAgICAgdHlwZSA9IF9mb3JtYXR0ZWQkaS50eXBlLFxuICAgICAgICB2YWx1ZSA9IF9mb3JtYXR0ZWQkaS52YWx1ZSxcbiAgICAgICAgcG9zID0gdHlwZVRvUG9zW3R5cGVdO1xuXG4gICAgaWYgKCFpc1VuZGVmaW5lZChwb3MpKSB7XG4gICAgICBmaWxsZWRbcG9zXSA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZpbGxlZDtcbn1cblxudmFyIGlhbmFab25lQ2FjaGUgPSB7fTtcbi8qKlxuICogQSB6b25lIGlkZW50aWZpZWQgYnkgYW4gSUFOQSBpZGVudGlmaWVyLCBsaWtlIEFtZXJpY2EvTmV3X1lvcmtcbiAqIEBpbXBsZW1lbnRzIHtab25lfVxuICovXG5cbnZhciBJQU5BWm9uZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1pvbmUpIHtcbiAgX2luaGVyaXRzTG9vc2UoSUFOQVpvbmUsIF9ab25lKTtcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBab25lIG5hbWVcbiAgICogQHJldHVybiB7SUFOQVpvbmV9XG4gICAqL1xuICBJQU5BWm9uZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUobmFtZSkge1xuICAgIGlmICghaWFuYVpvbmVDYWNoZVtuYW1lXSkge1xuICAgICAgaWFuYVpvbmVDYWNoZVtuYW1lXSA9IG5ldyBJQU5BWm9uZShuYW1lKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaWFuYVpvbmVDYWNoZVtuYW1lXTtcbiAgfVxuICAvKipcbiAgICogUmVzZXQgbG9jYWwgY2FjaGVzLiBTaG91bGQgb25seSBiZSBuZWNlc3NhcnkgaW4gdGVzdGluZyBzY2VuYXJpb3MuXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICA7XG5cbiAgSUFOQVpvbmUucmVzZXRDYWNoZSA9IGZ1bmN0aW9uIHJlc2V0Q2FjaGUoKSB7XG4gICAgaWFuYVpvbmVDYWNoZSA9IHt9O1xuICAgIGR0ZkNhY2hlID0ge307XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgcHJvdmlkZWQgc3RyaW5nIGlzIGEgdmFsaWQgc3BlY2lmaWVyLiBUaGlzIG9ubHkgY2hlY2tzIHRoZSBzdHJpbmcncyBmb3JtYXQsIG5vdCB0aGF0IHRoZSBzcGVjaWZpZXIgaWRlbnRpZmllcyBhIGtub3duIHpvbmU7IHNlZSBpc1ZhbGlkWm9uZSBmb3IgdGhhdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHMgLSBUaGUgc3RyaW5nIHRvIGNoZWNrIHZhbGlkaXR5IG9uXG4gICAqIEBleGFtcGxlIElBTkFab25lLmlzVmFsaWRTcGVjaWZpZXIoXCJBbWVyaWNhL05ld19Zb3JrXCIpIC8vPT4gdHJ1ZVxuICAgKiBAZXhhbXBsZSBJQU5BWm9uZS5pc1ZhbGlkU3BlY2lmaWVyKFwiRmFudGFzaWEvQ2FzdGxlXCIpIC8vPT4gdHJ1ZVxuICAgKiBAZXhhbXBsZSBJQU5BWm9uZS5pc1ZhbGlkU3BlY2lmaWVyKFwiU3BvcnR+fmJsb3JwXCIpIC8vPT4gZmFsc2VcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIDtcblxuICBJQU5BWm9uZS5pc1ZhbGlkU3BlY2lmaWVyID0gZnVuY3Rpb24gaXNWYWxpZFNwZWNpZmllcihzKSB7XG4gICAgcmV0dXJuICEhKHMgJiYgcy5tYXRjaChtYXRjaGluZ1JlZ2V4KSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgcHJvdmlkZWQgc3RyaW5nIGlkZW50aWZpZXMgYSByZWFsIHpvbmVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHpvbmUgLSBUaGUgc3RyaW5nIHRvIGNoZWNrXG4gICAqIEBleGFtcGxlIElBTkFab25lLmlzVmFsaWRab25lKFwiQW1lcmljYS9OZXdfWW9ya1wiKSAvLz0+IHRydWVcbiAgICogQGV4YW1wbGUgSUFOQVpvbmUuaXNWYWxpZFpvbmUoXCJGYW50YXNpYS9DYXN0bGVcIikgLy89PiBmYWxzZVxuICAgKiBAZXhhbXBsZSBJQU5BWm9uZS5pc1ZhbGlkWm9uZShcIlNwb3J0fn5ibG9ycFwiKSAvLz0+IGZhbHNlXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICA7XG5cbiAgSUFOQVpvbmUuaXNWYWxpZFpvbmUgPSBmdW5jdGlvbiBpc1ZhbGlkWm9uZSh6b25lKSB7XG4gICAgdHJ5IHtcbiAgICAgIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KFwiZW4tVVNcIiwge1xuICAgICAgICB0aW1lWm9uZTogem9uZVxuICAgICAgfSkuZm9ybWF0KCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IC8vIEV0Yy9HTVQrOCAtPiAtNDgwXG5cbiAgLyoqIEBpZ25vcmUgKi9cbiAgO1xuXG4gIElBTkFab25lLnBhcnNlR01UT2Zmc2V0ID0gZnVuY3Rpb24gcGFyc2VHTVRPZmZzZXQoc3BlY2lmaWVyKSB7XG4gICAgaWYgKHNwZWNpZmllcikge1xuICAgICAgdmFyIG1hdGNoID0gc3BlY2lmaWVyLm1hdGNoKC9eRXRjXFwvR01UKFsrLV1cXGR7MSwyfSkkL2kpO1xuXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIC02MCAqIHBhcnNlSW50KG1hdGNoWzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBmdW5jdGlvbiBJQU5BWm9uZShuYW1lKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfWm9uZS5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgLyoqIEBwcml2YXRlICoqL1xuXG4gICAgX3RoaXMuem9uZU5hbWUgPSBuYW1lO1xuICAgIC8qKiBAcHJpdmF0ZSAqKi9cblxuICAgIF90aGlzLnZhbGlkID0gSUFOQVpvbmUuaXNWYWxpZFpvbmUobmFtZSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICB2YXIgX3Byb3RvID0gSUFOQVpvbmUucHJvdG90eXBlO1xuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIF9wcm90by5vZmZzZXROYW1lID0gZnVuY3Rpb24gb2Zmc2V0TmFtZSh0cywgX3JlZikge1xuICAgIHZhciBmb3JtYXQgPSBfcmVmLmZvcm1hdCxcbiAgICAgICAgbG9jYWxlID0gX3JlZi5sb2NhbGU7XG4gICAgcmV0dXJuIHBhcnNlWm9uZUluZm8odHMsIGZvcm1hdCwgbG9jYWxlLCB0aGlzLm5hbWUpO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIDtcblxuICBfcHJvdG8uZm9ybWF0T2Zmc2V0ID0gZnVuY3Rpb24gZm9ybWF0T2Zmc2V0JDEodHMsIGZvcm1hdCkge1xuICAgIHJldHVybiBmb3JtYXRPZmZzZXQodGhpcy5vZmZzZXQodHMpLCBmb3JtYXQpO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIDtcblxuICBfcHJvdG8ub2Zmc2V0ID0gZnVuY3Rpb24gb2Zmc2V0KHRzKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh0cyksXG4gICAgICAgIGR0ZiA9IG1ha2VEVEYodGhpcy5uYW1lKSxcbiAgICAgICAgX3JlZjIgPSBkdGYuZm9ybWF0VG9QYXJ0cyA/IHBhcnRzT2Zmc2V0KGR0ZiwgZGF0ZSkgOiBoYWNreU9mZnNldChkdGYsIGRhdGUpLFxuICAgICAgICB5ZWFyID0gX3JlZjJbMF0sXG4gICAgICAgIG1vbnRoID0gX3JlZjJbMV0sXG4gICAgICAgIGRheSA9IF9yZWYyWzJdLFxuICAgICAgICBob3VyID0gX3JlZjJbM10sXG4gICAgICAgIG1pbnV0ZSA9IF9yZWYyWzRdLFxuICAgICAgICBzZWNvbmQgPSBfcmVmMls1XSxcbiAgICAgICAgYWRqdXN0ZWRIb3VyID0gaG91ciA9PT0gMjQgPyAwIDogaG91cjtcblxuICAgIHZhciBhc1VUQyA9IG9ialRvTG9jYWxUUyh7XG4gICAgICB5ZWFyOiB5ZWFyLFxuICAgICAgbW9udGg6IG1vbnRoLFxuICAgICAgZGF5OiBkYXksXG4gICAgICBob3VyOiBhZGp1c3RlZEhvdXIsXG4gICAgICBtaW51dGU6IG1pbnV0ZSxcbiAgICAgIHNlY29uZDogc2Vjb25kLFxuICAgICAgbWlsbGlzZWNvbmQ6IDBcbiAgICB9KTtcbiAgICB2YXIgYXNUUyA9ICtkYXRlO1xuICAgIHZhciBvdmVyID0gYXNUUyAlIDEwMDA7XG4gICAgYXNUUyAtPSBvdmVyID49IDAgPyBvdmVyIDogMTAwMCArIG92ZXI7XG4gICAgcmV0dXJuIChhc1VUQyAtIGFzVFMpIC8gKDYwICogMTAwMCk7XG4gIH1cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgO1xuXG4gIF9wcm90by5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMob3RoZXJab25lKSB7XG4gICAgcmV0dXJuIG90aGVyWm9uZS50eXBlID09PSBcImlhbmFcIiAmJiBvdGhlclpvbmUubmFtZSA9PT0gdGhpcy5uYW1lO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIDtcblxuICBfY3JlYXRlQ2xhc3MoSUFOQVpvbmUsIFt7XG4gICAga2V5OiBcInR5cGVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBcImlhbmFcIjtcbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm5hbWVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnpvbmVOYW1lO1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICoqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidW5pdmVyc2FsXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzVmFsaWRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbGlkO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBJQU5BWm9uZTtcbn0oWm9uZSk7XG5cbnZhciBzaW5nbGV0b24kMSA9IG51bGw7XG4vKipcbiAqIEEgem9uZSB3aXRoIGEgZml4ZWQgb2Zmc2V0IChtZWFuaW5nIG5vIERTVClcbiAqIEBpbXBsZW1lbnRzIHtab25lfVxuICovXG5cbnZhciBGaXhlZE9mZnNldFpvbmUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9ab25lKSB7XG4gIF9pbmhlcml0c0xvb3NlKEZpeGVkT2Zmc2V0Wm9uZSwgX1pvbmUpO1xuXG4gIC8qKlxuICAgKiBHZXQgYW4gaW5zdGFuY2Ugd2l0aCBhIHNwZWNpZmllZCBvZmZzZXRcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCAtIFRoZSBvZmZzZXQgaW4gbWludXRlc1xuICAgKiBAcmV0dXJuIHtGaXhlZE9mZnNldFpvbmV9XG4gICAqL1xuICBGaXhlZE9mZnNldFpvbmUuaW5zdGFuY2UgPSBmdW5jdGlvbiBpbnN0YW5jZShvZmZzZXQpIHtcbiAgICByZXR1cm4gb2Zmc2V0ID09PSAwID8gRml4ZWRPZmZzZXRab25lLnV0Y0luc3RhbmNlIDogbmV3IEZpeGVkT2Zmc2V0Wm9uZShvZmZzZXQpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYW4gaW5zdGFuY2Ugb2YgRml4ZWRPZmZzZXRab25lIGZyb20gYSBVVEMgb2Zmc2V0IHN0cmluZywgbGlrZSBcIlVUQys2XCJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHMgLSBUaGUgb2Zmc2V0IHN0cmluZyB0byBwYXJzZVxuICAgKiBAZXhhbXBsZSBGaXhlZE9mZnNldFpvbmUucGFyc2VTcGVjaWZpZXIoXCJVVEMrNlwiKVxuICAgKiBAZXhhbXBsZSBGaXhlZE9mZnNldFpvbmUucGFyc2VTcGVjaWZpZXIoXCJVVEMrMDZcIilcbiAgICogQGV4YW1wbGUgRml4ZWRPZmZzZXRab25lLnBhcnNlU3BlY2lmaWVyKFwiVVRDLTY6MDBcIilcbiAgICogQHJldHVybiB7Rml4ZWRPZmZzZXRab25lfVxuICAgKi9cbiAgO1xuXG4gIEZpeGVkT2Zmc2V0Wm9uZS5wYXJzZVNwZWNpZmllciA9IGZ1bmN0aW9uIHBhcnNlU3BlY2lmaWVyKHMpIHtcbiAgICBpZiAocykge1xuICAgICAgdmFyIHIgPSBzLm1hdGNoKC9edXRjKD86KFsrLV1cXGR7MSwyfSkoPzo6KFxcZHsyfSkpPyk/JC9pKTtcblxuICAgICAgaWYgKHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGaXhlZE9mZnNldFpvbmUoc2lnbmVkT2Zmc2V0KHJbMV0sIHJbMl0pKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoRml4ZWRPZmZzZXRab25lLCBudWxsLCBbe1xuICAgIGtleTogXCJ1dGNJbnN0YW5jZVwiLFxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgc2luZ2xldG9uIGluc3RhbmNlIG9mIFVUQ1xuICAgICAqIEByZXR1cm4ge0ZpeGVkT2Zmc2V0Wm9uZX1cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIGlmIChzaW5nbGV0b24kMSA9PT0gbnVsbCkge1xuICAgICAgICBzaW5nbGV0b24kMSA9IG5ldyBGaXhlZE9mZnNldFpvbmUoMCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzaW5nbGV0b24kMTtcbiAgICB9XG4gIH1dKTtcblxuICBmdW5jdGlvbiBGaXhlZE9mZnNldFpvbmUob2Zmc2V0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfWm9uZS5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgLyoqIEBwcml2YXRlICoqL1xuXG4gICAgX3RoaXMuZml4ZWQgPSBvZmZzZXQ7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICB2YXIgX3Byb3RvID0gRml4ZWRPZmZzZXRab25lLnByb3RvdHlwZTtcblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBfcHJvdG8ub2Zmc2V0TmFtZSA9IGZ1bmN0aW9uIG9mZnNldE5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuICA7XG5cbiAgX3Byb3RvLmZvcm1hdE9mZnNldCA9IGZ1bmN0aW9uIGZvcm1hdE9mZnNldCQxKHRzLCBmb3JtYXQpIHtcbiAgICByZXR1cm4gZm9ybWF0T2Zmc2V0KHRoaXMuZml4ZWQsIGZvcm1hdCk7XG4gIH1cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgO1xuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIF9wcm90by5vZmZzZXQgPSBmdW5jdGlvbiBvZmZzZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZml4ZWQ7XG4gIH1cbiAgLyoqIEBvdmVycmlkZSAqKi9cbiAgO1xuXG4gIF9wcm90by5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMob3RoZXJab25lKSB7XG4gICAgcmV0dXJuIG90aGVyWm9uZS50eXBlID09PSBcImZpeGVkXCIgJiYgb3RoZXJab25lLmZpeGVkID09PSB0aGlzLmZpeGVkO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIDtcblxuICBfY3JlYXRlQ2xhc3MoRml4ZWRPZmZzZXRab25lLCBbe1xuICAgIGtleTogXCJ0eXBlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gXCJmaXhlZFwiO1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICoqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibmFtZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZml4ZWQgPT09IDAgPyBcIlVUQ1wiIDogXCJVVENcIiArIGZvcm1hdE9mZnNldCh0aGlzLmZpeGVkLCBcIm5hcnJvd1wiKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidW5pdmVyc2FsXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNWYWxpZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEZpeGVkT2Zmc2V0Wm9uZTtcbn0oWm9uZSk7XG5cbi8qKlxuICogQSB6b25lIHRoYXQgZmFpbGVkIHRvIHBhcnNlLiBZb3Ugc2hvdWxkIG5ldmVyIG5lZWQgdG8gaW5zdGFudGlhdGUgdGhpcy5cbiAqIEBpbXBsZW1lbnRzIHtab25lfVxuICovXG5cbnZhciBJbnZhbGlkWm9uZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1pvbmUpIHtcbiAgX2luaGVyaXRzTG9vc2UoSW52YWxpZFpvbmUsIF9ab25lKTtcblxuICBmdW5jdGlvbiBJbnZhbGlkWm9uZSh6b25lTmFtZSkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1pvbmUuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIC8qKiAgQHByaXZhdGUgKi9cblxuICAgIF90aGlzLnpvbmVOYW1lID0gem9uZU5hbWU7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG5cblxuICB2YXIgX3Byb3RvID0gSW52YWxpZFpvbmUucHJvdG90eXBlO1xuXG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIF9wcm90by5vZmZzZXROYW1lID0gZnVuY3Rpb24gb2Zmc2V0TmFtZSgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuICA7XG5cbiAgX3Byb3RvLmZvcm1hdE9mZnNldCA9IGZ1bmN0aW9uIGZvcm1hdE9mZnNldCgpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuICA7XG5cbiAgX3Byb3RvLm9mZnNldCA9IGZ1bmN0aW9uIG9mZnNldCgpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG4gIC8qKiBAb3ZlcnJpZGUgKiovXG4gIDtcblxuICBfcHJvdG8uZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKiogQG92ZXJyaWRlICoqL1xuICA7XG5cbiAgX2NyZWF0ZUNsYXNzKEludmFsaWRab25lLCBbe1xuICAgIGtleTogXCJ0eXBlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gXCJpbnZhbGlkXCI7XG4gICAgfVxuICAgIC8qKiBAb3ZlcnJpZGUgKiovXG5cbiAgfSwge1xuICAgIGtleTogXCJuYW1lXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy56b25lTmFtZTtcbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqKi9cblxuICB9LCB7XG4gICAga2V5OiBcInVuaXZlcnNhbFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc1ZhbGlkXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEludmFsaWRab25lO1xufShab25lKTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVab25lKGlucHV0LCBkZWZhdWx0Wm9uZSkge1xuICB2YXIgb2Zmc2V0O1xuXG4gIGlmIChpc1VuZGVmaW5lZChpbnB1dCkgfHwgaW5wdXQgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZGVmYXVsdFpvbmU7XG4gIH0gZWxzZSBpZiAoaW5wdXQgaW5zdGFuY2VvZiBab25lKSB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9IGVsc2UgaWYgKGlzU3RyaW5nKGlucHV0KSkge1xuICAgIHZhciBsb3dlcmVkID0gaW5wdXQudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAobG93ZXJlZCA9PT0gXCJsb2NhbFwiKSByZXR1cm4gZGVmYXVsdFpvbmU7ZWxzZSBpZiAobG93ZXJlZCA9PT0gXCJ1dGNcIiB8fCBsb3dlcmVkID09PSBcImdtdFwiKSByZXR1cm4gRml4ZWRPZmZzZXRab25lLnV0Y0luc3RhbmNlO2Vsc2UgaWYgKChvZmZzZXQgPSBJQU5BWm9uZS5wYXJzZUdNVE9mZnNldChpbnB1dCkpICE9IG51bGwpIHtcbiAgICAgIC8vIGhhbmRsZSBFdGMvR01ULTQsIHdoaWNoIFY4IGNob2tlcyBvblxuICAgICAgcmV0dXJuIEZpeGVkT2Zmc2V0Wm9uZS5pbnN0YW5jZShvZmZzZXQpO1xuICAgIH0gZWxzZSBpZiAoSUFOQVpvbmUuaXNWYWxpZFNwZWNpZmllcihsb3dlcmVkKSkgcmV0dXJuIElBTkFab25lLmNyZWF0ZShpbnB1dCk7ZWxzZSByZXR1cm4gRml4ZWRPZmZzZXRab25lLnBhcnNlU3BlY2lmaWVyKGxvd2VyZWQpIHx8IG5ldyBJbnZhbGlkWm9uZShpbnB1dCk7XG4gIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpKSB7XG4gICAgcmV0dXJuIEZpeGVkT2Zmc2V0Wm9uZS5pbnN0YW5jZShpbnB1dCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSBcIm9iamVjdFwiICYmIGlucHV0Lm9mZnNldCAmJiB0eXBlb2YgaW5wdXQub2Zmc2V0ID09PSBcIm51bWJlclwiKSB7XG4gICAgLy8gVGhpcyBpcyBkdW1iLCBidXQgdGhlIGluc3RhbmNlb2YgY2hlY2sgYWJvdmUgZG9lc24ndCBzZWVtIHRvIHJlYWxseSB3b3JrXG4gICAgLy8gc28gd2UncmUgZHVjayBjaGVja2luZyBpdFxuICAgIHJldHVybiBpbnB1dDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEludmFsaWRab25lKGlucHV0KTtcbiAgfVxufVxuXG52YXIgbm93ID0gZnVuY3Rpb24gbm93KCkge1xuICByZXR1cm4gRGF0ZS5ub3coKTtcbn0sXG4gICAgZGVmYXVsdFpvbmUgPSBudWxsLFxuICAgIC8vIG5vdCBzZXR0aW5nIHRoaXMgZGlyZWN0bHkgdG8gTG9jYWxab25lLmluc3RhbmNlIGJjIGxvYWRpbmcgb3JkZXIgaXNzdWVzXG5kZWZhdWx0TG9jYWxlID0gbnVsbCxcbiAgICBkZWZhdWx0TnVtYmVyaW5nU3lzdGVtID0gbnVsbCxcbiAgICBkZWZhdWx0T3V0cHV0Q2FsZW5kYXIgPSBudWxsLFxuICAgIHRocm93T25JbnZhbGlkID0gZmFsc2U7XG4vKipcbiAqIFNldHRpbmdzIGNvbnRhaW5zIHN0YXRpYyBnZXR0ZXJzIGFuZCBzZXR0ZXJzIHRoYXQgY29udHJvbCBMdXhvbidzIG92ZXJhbGwgYmVoYXZpb3IuIEx1eG9uIGlzIGEgc2ltcGxlIGxpYnJhcnkgd2l0aCBmZXcgb3B0aW9ucywgYnV0IHRoZSBvbmVzIGl0IGRvZXMgaGF2ZSBsaXZlIGhlcmUuXG4gKi9cblxuXG52YXIgU2V0dGluZ3MgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTZXR0aW5ncygpIHt9XG5cbiAgLyoqXG4gICAqIFJlc2V0IEx1eG9uJ3MgZ2xvYmFsIGNhY2hlcy4gU2hvdWxkIG9ubHkgYmUgbmVjZXNzYXJ5IGluIHRlc3Rpbmcgc2NlbmFyaW9zLlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgU2V0dGluZ3MucmVzZXRDYWNoZXMgPSBmdW5jdGlvbiByZXNldENhY2hlcygpIHtcbiAgICBMb2NhbGUucmVzZXRDYWNoZSgpO1xuICAgIElBTkFab25lLnJlc2V0Q2FjaGUoKTtcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoU2V0dGluZ3MsIG51bGwsIFt7XG4gICAga2V5OiBcIm5vd1wiLFxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjYWxsYmFjayBmb3IgcmV0dXJuaW5nIHRoZSBjdXJyZW50IHRpbWVzdGFtcC5cbiAgICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gbm93O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGNhbGxiYWNrIGZvciByZXR1cm5pbmcgdGhlIGN1cnJlbnQgdGltZXN0YW1wLlxuICAgICAqIFRoZSBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGEgbnVtYmVyLCB3aGljaCB3aWxsIGJlIGludGVycHJldGVkIGFzIGFuIEVwb2NoIG1pbGxpc2Vjb25kIGNvdW50XG4gICAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgICAqIEBleGFtcGxlIFNldHRpbmdzLm5vdyA9ICgpID0+IERhdGUubm93KCkgKyAzMDAwIC8vIHByZXRlbmQgaXQgaXMgMyBzZWNvbmRzIGluIHRoZSBmdXR1cmVcbiAgICAgKiBAZXhhbXBsZSBTZXR0aW5ncy5ub3cgPSAoKSA9PiAwIC8vIGFsd2F5cyBwcmV0ZW5kIGl0J3MgSmFuIDEsIDE5NzAgYXQgbWlkbmlnaHQgaW4gVVRDIHRpbWVcbiAgICAgKi9cbiAgICAsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobikge1xuICAgICAgbm93ID0gbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkZWZhdWx0IHRpbWUgem9uZSB0byBjcmVhdGUgRGF0ZVRpbWVzIGluLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJkZWZhdWx0Wm9uZU5hbWVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBTZXR0aW5ncy5kZWZhdWx0Wm9uZS5uYW1lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGRlZmF1bHQgdGltZSB6b25lIHRvIGNyZWF0ZSBEYXRlVGltZXMgaW4uIERvZXMgbm90IGFmZmVjdCBleGlzdGluZyBpbnN0YW5jZXMuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICAsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoeikge1xuICAgICAgaWYgKCF6KSB7XG4gICAgICAgIGRlZmF1bHRab25lID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlZmF1bHRab25lID0gbm9ybWFsaXplWm9uZSh6KTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkZWZhdWx0IHRpbWUgem9uZSBvYmplY3QgdG8gY3JlYXRlIERhdGVUaW1lcyBpbi4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy5cbiAgICAgKiBAdHlwZSB7Wm9uZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRlZmF1bHRab25lXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdFpvbmUgfHwgTG9jYWxab25lLmluc3RhbmNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGRlZmF1bHQgbG9jYWxlIHRvIGNyZWF0ZSBEYXRlVGltZXMgd2l0aC4gRG9lcyBub3QgYWZmZWN0IGV4aXN0aW5nIGluc3RhbmNlcy5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZGVmYXVsdExvY2FsZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRMb2NhbGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgZGVmYXVsdCBsb2NhbGUgdG8gY3JlYXRlIERhdGVUaW1lcyB3aXRoLiBEb2VzIG5vdCBhZmZlY3QgZXhpc3RpbmcgaW5zdGFuY2VzLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgLFxuICAgIHNldDogZnVuY3Rpb24gc2V0KGxvY2FsZSkge1xuICAgICAgZGVmYXVsdExvY2FsZSA9IGxvY2FsZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkZWZhdWx0IG51bWJlcmluZyBzeXN0ZW0gdG8gY3JlYXRlIERhdGVUaW1lcyB3aXRoLiBEb2VzIG5vdCBhZmZlY3QgZXhpc3RpbmcgaW5zdGFuY2VzLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJkZWZhdWx0TnVtYmVyaW5nU3lzdGVtXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdE51bWJlcmluZ1N5c3RlbTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBkZWZhdWx0IG51bWJlcmluZyBzeXN0ZW0gdG8gY3JlYXRlIERhdGVUaW1lcyB3aXRoLiBEb2VzIG5vdCBhZmZlY3QgZXhpc3RpbmcgaW5zdGFuY2VzLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgLFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG51bWJlcmluZ1N5c3RlbSkge1xuICAgICAgZGVmYXVsdE51bWJlcmluZ1N5c3RlbSA9IG51bWJlcmluZ1N5c3RlbTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkZWZhdWx0IG91dHB1dCBjYWxlbmRhciB0byBjcmVhdGUgRGF0ZVRpbWVzIHdpdGguIERvZXMgbm90IGFmZmVjdCBleGlzdGluZyBpbnN0YW5jZXMuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRlZmF1bHRPdXRwdXRDYWxlbmRhclwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRPdXRwdXRDYWxlbmRhcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBkZWZhdWx0IG91dHB1dCBjYWxlbmRhciB0byBjcmVhdGUgRGF0ZVRpbWVzIHdpdGguIERvZXMgbm90IGFmZmVjdCBleGlzdGluZyBpbnN0YW5jZXMuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICAsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQob3V0cHV0Q2FsZW5kYXIpIHtcbiAgICAgIGRlZmF1bHRPdXRwdXRDYWxlbmRhciA9IG91dHB1dENhbGVuZGFyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgd2hldGhlciBMdXhvbiB3aWxsIHRocm93IHdoZW4gaXQgZW5jb3VudGVycyBpbnZhbGlkIERhdGVUaW1lcywgRHVyYXRpb25zLCBvciBJbnRlcnZhbHNcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInRocm93T25JbnZhbGlkXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhyb3dPbkludmFsaWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB3aGV0aGVyIEx1eG9uIHdpbGwgdGhyb3cgd2hlbiBpdCBlbmNvdW50ZXJzIGludmFsaWQgRGF0ZVRpbWVzLCBEdXJhdGlvbnMsIG9yIEludGVydmFsc1xuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgICxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh0KSB7XG4gICAgICB0aHJvd09uSW52YWxpZCA9IHQ7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNldHRpbmdzO1xufSgpO1xuXG52YXIgaW50bERUQ2FjaGUgPSB7fTtcblxuZnVuY3Rpb24gZ2V0Q2FjaGVkRFRGKGxvY1N0cmluZywgb3B0cykge1xuICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0cyA9IHt9O1xuICB9XG5cbiAgdmFyIGtleSA9IEpTT04uc3RyaW5naWZ5KFtsb2NTdHJpbmcsIG9wdHNdKTtcbiAgdmFyIGR0ZiA9IGludGxEVENhY2hlW2tleV07XG5cbiAgaWYgKCFkdGYpIHtcbiAgICBkdGYgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NTdHJpbmcsIG9wdHMpO1xuICAgIGludGxEVENhY2hlW2tleV0gPSBkdGY7XG4gIH1cblxuICByZXR1cm4gZHRmO1xufVxuXG52YXIgaW50bE51bUNhY2hlID0ge307XG5cbmZ1bmN0aW9uIGdldENhY2hlZElORihsb2NTdHJpbmcsIG9wdHMpIHtcbiAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgIG9wdHMgPSB7fTtcbiAgfVxuXG4gIHZhciBrZXkgPSBKU09OLnN0cmluZ2lmeShbbG9jU3RyaW5nLCBvcHRzXSk7XG4gIHZhciBpbmYgPSBpbnRsTnVtQ2FjaGVba2V5XTtcblxuICBpZiAoIWluZikge1xuICAgIGluZiA9IG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NTdHJpbmcsIG9wdHMpO1xuICAgIGludGxOdW1DYWNoZVtrZXldID0gaW5mO1xuICB9XG5cbiAgcmV0dXJuIGluZjtcbn1cblxudmFyIGludGxSZWxDYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiBnZXRDYWNoZWRSVEYobG9jU3RyaW5nLCBvcHRzKSB7XG4gIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICBvcHRzID0ge307XG4gIH1cblxuICB2YXIgX29wdHMgPSBvcHRzLFxuICAgICAgYmFzZSA9IF9vcHRzLmJhc2UsXG4gICAgICBjYWNoZUtleU9wdHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfb3B0cywgW1wiYmFzZVwiXSk7IC8vIGV4Y2x1ZGUgYGJhc2VgIGZyb20gdGhlIG9wdGlvbnNcblxuXG4gIHZhciBrZXkgPSBKU09OLnN0cmluZ2lmeShbbG9jU3RyaW5nLCBjYWNoZUtleU9wdHNdKTtcbiAgdmFyIGluZiA9IGludGxSZWxDYWNoZVtrZXldO1xuXG4gIGlmICghaW5mKSB7XG4gICAgaW5mID0gbmV3IEludGwuUmVsYXRpdmVUaW1lRm9ybWF0KGxvY1N0cmluZywgb3B0cyk7XG4gICAgaW50bFJlbENhY2hlW2tleV0gPSBpbmY7XG4gIH1cblxuICByZXR1cm4gaW5mO1xufVxuXG52YXIgc3lzTG9jYWxlQ2FjaGUgPSBudWxsO1xuXG5mdW5jdGlvbiBzeXN0ZW1Mb2NhbGUoKSB7XG4gIGlmIChzeXNMb2NhbGVDYWNoZSkge1xuICAgIHJldHVybiBzeXNMb2NhbGVDYWNoZTtcbiAgfSBlbHNlIGlmIChoYXNJbnRsKCkpIHtcbiAgICB2YXIgY29tcHV0ZWRTeXMgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCgpLnJlc29sdmVkT3B0aW9ucygpLmxvY2FsZTsgLy8gbm9kZSBzb21ldGltZXMgZGVmYXVsdHMgdG8gXCJ1bmRcIi4gT3ZlcnJpZGUgdGhhdCBiZWNhdXNlIHRoYXQgaXMgZHVtYlxuXG4gICAgc3lzTG9jYWxlQ2FjaGUgPSAhY29tcHV0ZWRTeXMgfHwgY29tcHV0ZWRTeXMgPT09IFwidW5kXCIgPyBcImVuLVVTXCIgOiBjb21wdXRlZFN5cztcbiAgICByZXR1cm4gc3lzTG9jYWxlQ2FjaGU7XG4gIH0gZWxzZSB7XG4gICAgc3lzTG9jYWxlQ2FjaGUgPSBcImVuLVVTXCI7XG4gICAgcmV0dXJuIHN5c0xvY2FsZUNhY2hlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlTG9jYWxlU3RyaW5nKGxvY2FsZVN0cikge1xuICAvLyBJIHJlYWxseSB3YW50IHRvIGF2b2lkIHdyaXRpbmcgYSBCQ1AgNDcgcGFyc2VyXG4gIC8vIHNlZSwgZS5nLiBodHRwczovL2dpdGh1Yi5jb20vd29vb3JtL2JjcC00N1xuICAvLyBJbnN0ZWFkLCB3ZSdsbCBkbyB0aGlzOlxuICAvLyBhKSBpZiB0aGUgc3RyaW5nIGhhcyBubyAtdSBleHRlbnNpb25zLCBqdXN0IGxlYXZlIGl0IGFsb25lXG4gIC8vIGIpIGlmIGl0IGRvZXMsIHVzZSBJbnRsIHRvIHJlc29sdmUgZXZlcnl0aGluZ1xuICAvLyBjKSBpZiBJbnRsIGZhaWxzLCB0cnkgYWdhaW4gd2l0aG91dCB0aGUgLXVcbiAgdmFyIHVJbmRleCA9IGxvY2FsZVN0ci5pbmRleE9mKFwiLXUtXCIpO1xuXG4gIGlmICh1SW5kZXggPT09IC0xKSB7XG4gICAgcmV0dXJuIFtsb2NhbGVTdHJdO1xuICB9IGVsc2Uge1xuICAgIHZhciBvcHRpb25zO1xuICAgIHZhciBzbWFsbGVyID0gbG9jYWxlU3RyLnN1YnN0cmluZygwLCB1SW5kZXgpO1xuXG4gICAgdHJ5IHtcbiAgICAgIG9wdGlvbnMgPSBnZXRDYWNoZWREVEYobG9jYWxlU3RyKS5yZXNvbHZlZE9wdGlvbnMoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBvcHRpb25zID0gZ2V0Q2FjaGVkRFRGKHNtYWxsZXIpLnJlc29sdmVkT3B0aW9ucygpO1xuICAgIH1cblxuICAgIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICAgIG51bWJlcmluZ1N5c3RlbSA9IF9vcHRpb25zLm51bWJlcmluZ1N5c3RlbSxcbiAgICAgICAgY2FsZW5kYXIgPSBfb3B0aW9ucy5jYWxlbmRhcjsgLy8gcmV0dXJuIHRoZSBzbWFsbGVyIG9uZSBzbyB0aGF0IHdlIGNhbiBhcHBlbmQgdGhlIGNhbGVuZGFyIGFuZCBudW1iZXJpbmcgb3ZlcnJpZGVzIHRvIGl0XG5cbiAgICByZXR1cm4gW3NtYWxsZXIsIG51bWJlcmluZ1N5c3RlbSwgY2FsZW5kYXJdO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludGxDb25maWdTdHJpbmcobG9jYWxlU3RyLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyKSB7XG4gIGlmIChoYXNJbnRsKCkpIHtcbiAgICBpZiAob3V0cHV0Q2FsZW5kYXIgfHwgbnVtYmVyaW5nU3lzdGVtKSB7XG4gICAgICBsb2NhbGVTdHIgKz0gXCItdVwiO1xuXG4gICAgICBpZiAob3V0cHV0Q2FsZW5kYXIpIHtcbiAgICAgICAgbG9jYWxlU3RyICs9IFwiLWNhLVwiICsgb3V0cHV0Q2FsZW5kYXI7XG4gICAgICB9XG5cbiAgICAgIGlmIChudW1iZXJpbmdTeXN0ZW0pIHtcbiAgICAgICAgbG9jYWxlU3RyICs9IFwiLW51LVwiICsgbnVtYmVyaW5nU3lzdGVtO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbG9jYWxlU3RyO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbG9jYWxlU3RyO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwTW9udGhzKGYpIHtcbiAgdmFyIG1zID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPD0gMTI7IGkrKykge1xuICAgIHZhciBkdCA9IERhdGVUaW1lLnV0YygyMDE2LCBpLCAxKTtcbiAgICBtcy5wdXNoKGYoZHQpKTtcbiAgfVxuXG4gIHJldHVybiBtcztcbn1cblxuZnVuY3Rpb24gbWFwV2Vla2RheXMoZikge1xuICB2YXIgbXMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMTsgaSA8PSA3OyBpKyspIHtcbiAgICB2YXIgZHQgPSBEYXRlVGltZS51dGMoMjAxNiwgMTEsIDEzICsgaSk7XG4gICAgbXMucHVzaChmKGR0KSk7XG4gIH1cblxuICByZXR1cm4gbXM7XG59XG5cbmZ1bmN0aW9uIGxpc3RTdHVmZihsb2MsIGxlbmd0aCwgZGVmYXVsdE9LLCBlbmdsaXNoRm4sIGludGxGbikge1xuICB2YXIgbW9kZSA9IGxvYy5saXN0aW5nTW9kZShkZWZhdWx0T0spO1xuXG4gIGlmIChtb2RlID09PSBcImVycm9yXCIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIGlmIChtb2RlID09PSBcImVuXCIpIHtcbiAgICByZXR1cm4gZW5nbGlzaEZuKGxlbmd0aCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGludGxGbihsZW5ndGgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN1cHBvcnRzRmFzdE51bWJlcnMobG9jKSB7XG4gIGlmIChsb2MubnVtYmVyaW5nU3lzdGVtICYmIGxvYy5udW1iZXJpbmdTeXN0ZW0gIT09IFwibGF0blwiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsb2MubnVtYmVyaW5nU3lzdGVtID09PSBcImxhdG5cIiB8fCAhbG9jLmxvY2FsZSB8fCBsb2MubG9jYWxlLnN0YXJ0c1dpdGgoXCJlblwiKSB8fCBoYXNJbnRsKCkgJiYgbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jLmludGwpLnJlc29sdmVkT3B0aW9ucygpLm51bWJlcmluZ1N5c3RlbSA9PT0gXCJsYXRuXCI7XG4gIH1cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5cbnZhciBQb2x5TnVtYmVyRm9ybWF0dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUG9seU51bWJlckZvcm1hdHRlcihpbnRsLCBmb3JjZVNpbXBsZSwgb3B0cykge1xuICAgIHRoaXMucGFkVG8gPSBvcHRzLnBhZFRvIHx8IDA7XG4gICAgdGhpcy5mbG9vciA9IG9wdHMuZmxvb3IgfHwgZmFsc2U7XG5cbiAgICBpZiAoIWZvcmNlU2ltcGxlICYmIGhhc0ludGwoKSkge1xuICAgICAgdmFyIGludGxPcHRzID0ge1xuICAgICAgICB1c2VHcm91cGluZzogZmFsc2VcbiAgICAgIH07XG4gICAgICBpZiAob3B0cy5wYWRUbyA+IDApIGludGxPcHRzLm1pbmltdW1JbnRlZ2VyRGlnaXRzID0gb3B0cy5wYWRUbztcbiAgICAgIHRoaXMuaW5mID0gZ2V0Q2FjaGVkSU5GKGludGwsIGludGxPcHRzKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUG9seU51bWJlckZvcm1hdHRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmZvcm1hdCA9IGZ1bmN0aW9uIGZvcm1hdChpKSB7XG4gICAgaWYgKHRoaXMuaW5mKSB7XG4gICAgICB2YXIgZml4ZWQgPSB0aGlzLmZsb29yID8gTWF0aC5mbG9vcihpKSA6IGk7XG4gICAgICByZXR1cm4gdGhpcy5pbmYuZm9ybWF0KGZpeGVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdG8gbWF0Y2ggdGhlIGJyb3dzZXIncyBudW1iZXJmb3JtYXR0ZXIgZGVmYXVsdHNcbiAgICAgIHZhciBfZml4ZWQgPSB0aGlzLmZsb29yID8gTWF0aC5mbG9vcihpKSA6IHJvdW5kVG8oaSwgMyk7XG5cbiAgICAgIHJldHVybiBwYWRTdGFydChfZml4ZWQsIHRoaXMucGFkVG8pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gUG9seU51bWJlckZvcm1hdHRlcjtcbn0oKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5cbnZhciBQb2x5RGF0ZUZvcm1hdHRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFBvbHlEYXRlRm9ybWF0dGVyKGR0LCBpbnRsLCBvcHRzKSB7XG4gICAgdGhpcy5vcHRzID0gb3B0cztcbiAgICB0aGlzLmhhc0ludGwgPSBoYXNJbnRsKCk7XG4gICAgdmFyIHo7XG5cbiAgICBpZiAoZHQuem9uZS51bml2ZXJzYWwgJiYgdGhpcy5oYXNJbnRsKSB7XG4gICAgICAvLyBDaHJvbWl1bSBkb2Vzbid0IHN1cHBvcnQgZml4ZWQtb2Zmc2V0IHpvbmVzIGxpa2UgRXRjL0dNVCs4IGluIGl0cyBmb3JtYXR0ZXIsXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MzY0Mzc0LlxuICAgICAgLy8gU28gd2UgaGF2ZSB0byBtYWtlIGRvLiBUd28gY2FzZXM6XG4gICAgICAvLyAxLiBUaGUgZm9ybWF0IG9wdGlvbnMgdGVsbCB1cyB0byBzaG93IHRoZSB6b25lLiBXZSBjYW4ndCBkbyB0aGF0LCBzbyB0aGUgYmVzdFxuICAgICAgLy8gd2UgY2FuIGRvIGlzIGZvcm1hdCB0aGUgZGF0ZSBpbiBVVEMuXG4gICAgICAvLyAyLiBUaGUgZm9ybWF0IG9wdGlvbnMgZG9uJ3QgdGVsbCB1cyB0byBzaG93IHRoZSB6b25lLiBUaGVuIHdlIGNhbiBhZGp1c3QgdGhlbVxuICAgICAgLy8gdGhlIHRpbWUgYW5kIHRlbGwgdGhlIGZvcm1hdHRlciB0byBzaG93IGl0IHRvIHVzIGluIFVUQywgc28gdGhhdCB0aGUgdGltZSBpcyByaWdodFxuICAgICAgLy8gYW5kIHRoZSBiYWQgem9uZSBkb2Vzbid0IHNob3cgdXAuXG4gICAgICAvLyBXZSBjYW4gY2xlYW4gYWxsIHRoaXMgdXAgd2hlbiBDaHJvbWUgZml4ZXMgdGhpcy5cbiAgICAgIHogPSBcIlVUQ1wiO1xuXG4gICAgICBpZiAob3B0cy50aW1lWm9uZU5hbWUpIHtcbiAgICAgICAgdGhpcy5kdCA9IGR0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kdCA9IGR0Lm9mZnNldCA9PT0gMCA/IGR0IDogRGF0ZVRpbWUuZnJvbU1pbGxpcyhkdC50cyArIGR0Lm9mZnNldCAqIDYwICogMTAwMCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChkdC56b25lLnR5cGUgPT09IFwibG9jYWxcIikge1xuICAgICAgdGhpcy5kdCA9IGR0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmR0ID0gZHQ7XG4gICAgICB6ID0gZHQuem9uZS5uYW1lO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmhhc0ludGwpIHtcbiAgICAgIHZhciBpbnRsT3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0cyk7XG5cbiAgICAgIGlmICh6KSB7XG4gICAgICAgIGludGxPcHRzLnRpbWVab25lID0gejtcbiAgICAgIH1cblxuICAgICAgdGhpcy5kdGYgPSBnZXRDYWNoZWREVEYoaW50bCwgaW50bE9wdHMpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gUG9seURhdGVGb3JtYXR0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90bzIuZm9ybWF0ID0gZnVuY3Rpb24gZm9ybWF0KCkge1xuICAgIGlmICh0aGlzLmhhc0ludGwpIHtcbiAgICAgIHJldHVybiB0aGlzLmR0Zi5mb3JtYXQodGhpcy5kdC50b0pTRGF0ZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHRva2VuRm9ybWF0ID0gZm9ybWF0U3RyaW5nKHRoaXMub3B0cyksXG4gICAgICAgICAgbG9jID0gTG9jYWxlLmNyZWF0ZShcImVuLVVTXCIpO1xuICAgICAgcmV0dXJuIEZvcm1hdHRlci5jcmVhdGUobG9jKS5mb3JtYXREYXRlVGltZUZyb21TdHJpbmcodGhpcy5kdCwgdG9rZW5Gb3JtYXQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8yLmZvcm1hdFRvUGFydHMgPSBmdW5jdGlvbiBmb3JtYXRUb1BhcnRzKCkge1xuICAgIGlmICh0aGlzLmhhc0ludGwgJiYgaGFzRm9ybWF0VG9QYXJ0cygpKSB7XG4gICAgICByZXR1cm4gdGhpcy5kdGYuZm9ybWF0VG9QYXJ0cyh0aGlzLmR0LnRvSlNEYXRlKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGlzIGlzIGtpbmQgb2YgYSBjb3Agb3V0LiBXZSBhY3R1YWxseSBjb3VsZCBkbyB0aGlzIGZvciBFbmdsaXNoLiBIb3dldmVyLCB3ZSBjb3VsZG4ndCBkbyBpdCBmb3IgaW50bCBzdHJpbmdzXG4gICAgICAvLyBhbmQgSU1PIGl0J3MgdG9vIHdlaXJkIHRvIGhhdmUgYW4gdW5jYW5ueSB2YWxsZXkgbGlrZSB0aGF0XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzIucmVzb2x2ZWRPcHRpb25zID0gZnVuY3Rpb24gcmVzb2x2ZWRPcHRpb25zKCkge1xuICAgIGlmICh0aGlzLmhhc0ludGwpIHtcbiAgICAgIHJldHVybiB0aGlzLmR0Zi5yZXNvbHZlZE9wdGlvbnMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbG9jYWxlOiBcImVuLVVTXCIsXG4gICAgICAgIG51bWJlcmluZ1N5c3RlbTogXCJsYXRuXCIsXG4gICAgICAgIG91dHB1dENhbGVuZGFyOiBcImdyZWdvcnlcIlxuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFBvbHlEYXRlRm9ybWF0dGVyO1xufSgpO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cblxudmFyIFBvbHlSZWxGb3JtYXR0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQb2x5UmVsRm9ybWF0dGVyKGludGwsIGlzRW5nbGlzaCwgb3B0cykge1xuICAgIHRoaXMub3B0cyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgc3R5bGU6IFwibG9uZ1wiXG4gICAgfSwgb3B0cyk7XG5cbiAgICBpZiAoIWlzRW5nbGlzaCAmJiBoYXNSZWxhdGl2ZSgpKSB7XG4gICAgICB0aGlzLnJ0ZiA9IGdldENhY2hlZFJURihpbnRsLCBvcHRzKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX3Byb3RvMyA9IFBvbHlSZWxGb3JtYXR0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90bzMuZm9ybWF0ID0gZnVuY3Rpb24gZm9ybWF0KGNvdW50LCB1bml0KSB7XG4gICAgaWYgKHRoaXMucnRmKSB7XG4gICAgICByZXR1cm4gdGhpcy5ydGYuZm9ybWF0KGNvdW50LCB1bml0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlVGltZSh1bml0LCBjb3VudCwgdGhpcy5vcHRzLm51bWVyaWMsIHRoaXMub3B0cy5zdHlsZSAhPT0gXCJsb25nXCIpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8zLmZvcm1hdFRvUGFydHMgPSBmdW5jdGlvbiBmb3JtYXRUb1BhcnRzKGNvdW50LCB1bml0KSB7XG4gICAgaWYgKHRoaXMucnRmKSB7XG4gICAgICByZXR1cm4gdGhpcy5ydGYuZm9ybWF0VG9QYXJ0cyhjb3VudCwgdW5pdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFBvbHlSZWxGb3JtYXR0ZXI7XG59KCk7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuXG52YXIgTG9jYWxlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgTG9jYWxlLmZyb21PcHRzID0gZnVuY3Rpb24gZnJvbU9wdHMob3B0cykge1xuICAgIHJldHVybiBMb2NhbGUuY3JlYXRlKG9wdHMubG9jYWxlLCBvcHRzLm51bWJlcmluZ1N5c3RlbSwgb3B0cy5vdXRwdXRDYWxlbmRhciwgb3B0cy5kZWZhdWx0VG9FTik7XG4gIH07XG5cbiAgTG9jYWxlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgb3V0cHV0Q2FsZW5kYXIsIGRlZmF1bHRUb0VOKSB7XG4gICAgaWYgKGRlZmF1bHRUb0VOID09PSB2b2lkIDApIHtcbiAgICAgIGRlZmF1bHRUb0VOID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHNwZWNpZmllZExvY2FsZSA9IGxvY2FsZSB8fCBTZXR0aW5ncy5kZWZhdWx0TG9jYWxlLFxuICAgICAgICAvLyB0aGUgc3lzdGVtIGxvY2FsZSBpcyB1c2VmdWwgZm9yIGh1bWFuIHJlYWRhYmxlIHN0cmluZ3MgYnV0IGFubm95aW5nIGZvciBwYXJzaW5nL2Zvcm1hdHRpbmcga25vd24gZm9ybWF0c1xuICAgIGxvY2FsZVIgPSBzcGVjaWZpZWRMb2NhbGUgfHwgKGRlZmF1bHRUb0VOID8gXCJlbi1VU1wiIDogc3lzdGVtTG9jYWxlKCkpLFxuICAgICAgICBudW1iZXJpbmdTeXN0ZW1SID0gbnVtYmVyaW5nU3lzdGVtIHx8IFNldHRpbmdzLmRlZmF1bHROdW1iZXJpbmdTeXN0ZW0sXG4gICAgICAgIG91dHB1dENhbGVuZGFyUiA9IG91dHB1dENhbGVuZGFyIHx8IFNldHRpbmdzLmRlZmF1bHRPdXRwdXRDYWxlbmRhcjtcbiAgICByZXR1cm4gbmV3IExvY2FsZShsb2NhbGVSLCBudW1iZXJpbmdTeXN0ZW1SLCBvdXRwdXRDYWxlbmRhclIsIHNwZWNpZmllZExvY2FsZSk7XG4gIH07XG5cbiAgTG9jYWxlLnJlc2V0Q2FjaGUgPSBmdW5jdGlvbiByZXNldENhY2hlKCkge1xuICAgIHN5c0xvY2FsZUNhY2hlID0gbnVsbDtcbiAgICBpbnRsRFRDYWNoZSA9IHt9O1xuICAgIGludGxOdW1DYWNoZSA9IHt9O1xuICAgIGludGxSZWxDYWNoZSA9IHt9O1xuICB9O1xuXG4gIExvY2FsZS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChfdGVtcCkge1xuICAgIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICAgIGxvY2FsZSA9IF9yZWYubG9jYWxlLFxuICAgICAgICBudW1iZXJpbmdTeXN0ZW0gPSBfcmVmLm51bWJlcmluZ1N5c3RlbSxcbiAgICAgICAgb3V0cHV0Q2FsZW5kYXIgPSBfcmVmLm91dHB1dENhbGVuZGFyO1xuXG4gICAgcmV0dXJuIExvY2FsZS5jcmVhdGUobG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyKTtcbiAgfTtcblxuICBmdW5jdGlvbiBMb2NhbGUobG9jYWxlLCBudW1iZXJpbmcsIG91dHB1dENhbGVuZGFyLCBzcGVjaWZpZWRMb2NhbGUpIHtcbiAgICB2YXIgX3BhcnNlTG9jYWxlU3RyaW5nID0gcGFyc2VMb2NhbGVTdHJpbmcobG9jYWxlKSxcbiAgICAgICAgcGFyc2VkTG9jYWxlID0gX3BhcnNlTG9jYWxlU3RyaW5nWzBdLFxuICAgICAgICBwYXJzZWROdW1iZXJpbmdTeXN0ZW0gPSBfcGFyc2VMb2NhbGVTdHJpbmdbMV0sXG4gICAgICAgIHBhcnNlZE91dHB1dENhbGVuZGFyID0gX3BhcnNlTG9jYWxlU3RyaW5nWzJdO1xuXG4gICAgdGhpcy5sb2NhbGUgPSBwYXJzZWRMb2NhbGU7XG4gICAgdGhpcy5udW1iZXJpbmdTeXN0ZW0gPSBudW1iZXJpbmcgfHwgcGFyc2VkTnVtYmVyaW5nU3lzdGVtIHx8IG51bGw7XG4gICAgdGhpcy5vdXRwdXRDYWxlbmRhciA9IG91dHB1dENhbGVuZGFyIHx8IHBhcnNlZE91dHB1dENhbGVuZGFyIHx8IG51bGw7XG4gICAgdGhpcy5pbnRsID0gaW50bENvbmZpZ1N0cmluZyh0aGlzLmxvY2FsZSwgdGhpcy5udW1iZXJpbmdTeXN0ZW0sIHRoaXMub3V0cHV0Q2FsZW5kYXIpO1xuICAgIHRoaXMud2Vla2RheXNDYWNoZSA9IHtcbiAgICAgIGZvcm1hdDoge30sXG4gICAgICBzdGFuZGFsb25lOiB7fVxuICAgIH07XG4gICAgdGhpcy5tb250aHNDYWNoZSA9IHtcbiAgICAgIGZvcm1hdDoge30sXG4gICAgICBzdGFuZGFsb25lOiB7fVxuICAgIH07XG4gICAgdGhpcy5tZXJpZGllbUNhY2hlID0gbnVsbDtcbiAgICB0aGlzLmVyYUNhY2hlID0ge307XG4gICAgdGhpcy5zcGVjaWZpZWRMb2NhbGUgPSBzcGVjaWZpZWRMb2NhbGU7XG4gICAgdGhpcy5mYXN0TnVtYmVyc0NhY2hlZCA9IG51bGw7XG4gIH1cblxuICB2YXIgX3Byb3RvNCA9IExvY2FsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvNC5saXN0aW5nTW9kZSA9IGZ1bmN0aW9uIGxpc3RpbmdNb2RlKGRlZmF1bHRPSykge1xuICAgIGlmIChkZWZhdWx0T0sgPT09IHZvaWQgMCkge1xuICAgICAgZGVmYXVsdE9LID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgaW50bCA9IGhhc0ludGwoKSxcbiAgICAgICAgaGFzRlRQID0gaW50bCAmJiBoYXNGb3JtYXRUb1BhcnRzKCksXG4gICAgICAgIGlzQWN0dWFsbHlFbiA9IHRoaXMuaXNFbmdsaXNoKCksXG4gICAgICAgIGhhc05vV2VpcmRuZXNzID0gKHRoaXMubnVtYmVyaW5nU3lzdGVtID09PSBudWxsIHx8IHRoaXMubnVtYmVyaW5nU3lzdGVtID09PSBcImxhdG5cIikgJiYgKHRoaXMub3V0cHV0Q2FsZW5kYXIgPT09IG51bGwgfHwgdGhpcy5vdXRwdXRDYWxlbmRhciA9PT0gXCJncmVnb3J5XCIpO1xuXG4gICAgaWYgKCFoYXNGVFAgJiYgIShpc0FjdHVhbGx5RW4gJiYgaGFzTm9XZWlyZG5lc3MpICYmICFkZWZhdWx0T0spIHtcbiAgICAgIHJldHVybiBcImVycm9yXCI7XG4gICAgfSBlbHNlIGlmICghaGFzRlRQIHx8IGlzQWN0dWFsbHlFbiAmJiBoYXNOb1dlaXJkbmVzcykge1xuICAgICAgcmV0dXJuIFwiZW5cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiaW50bFwiO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG80LmNsb25lID0gZnVuY3Rpb24gY2xvbmUoYWx0cykge1xuICAgIGlmICghYWx0cyB8fCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhbHRzKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gTG9jYWxlLmNyZWF0ZShhbHRzLmxvY2FsZSB8fCB0aGlzLnNwZWNpZmllZExvY2FsZSwgYWx0cy5udW1iZXJpbmdTeXN0ZW0gfHwgdGhpcy5udW1iZXJpbmdTeXN0ZW0sIGFsdHMub3V0cHV0Q2FsZW5kYXIgfHwgdGhpcy5vdXRwdXRDYWxlbmRhciwgYWx0cy5kZWZhdWx0VG9FTiB8fCBmYWxzZSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzQucmVkZWZhdWx0VG9FTiA9IGZ1bmN0aW9uIHJlZGVmYXVsdFRvRU4oYWx0cykge1xuICAgIGlmIChhbHRzID09PSB2b2lkIDApIHtcbiAgICAgIGFsdHMgPSB7fTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jbG9uZShPYmplY3QuYXNzaWduKHt9LCBhbHRzLCB7XG4gICAgICBkZWZhdWx0VG9FTjogdHJ1ZVxuICAgIH0pKTtcbiAgfTtcblxuICBfcHJvdG80LnJlZGVmYXVsdFRvU3lzdGVtID0gZnVuY3Rpb24gcmVkZWZhdWx0VG9TeXN0ZW0oYWx0cykge1xuICAgIGlmIChhbHRzID09PSB2b2lkIDApIHtcbiAgICAgIGFsdHMgPSB7fTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jbG9uZShPYmplY3QuYXNzaWduKHt9LCBhbHRzLCB7XG4gICAgICBkZWZhdWx0VG9FTjogZmFsc2VcbiAgICB9KSk7XG4gIH07XG5cbiAgX3Byb3RvNC5tb250aHMgPSBmdW5jdGlvbiBtb250aHMkMShsZW5ndGgsIGZvcm1hdCwgZGVmYXVsdE9LKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmIChmb3JtYXQgPT09IHZvaWQgMCkge1xuICAgICAgZm9ybWF0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGRlZmF1bHRPSyA9PT0gdm9pZCAwKSB7XG4gICAgICBkZWZhdWx0T0sgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBsaXN0U3R1ZmYodGhpcywgbGVuZ3RoLCBkZWZhdWx0T0ssIG1vbnRocywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGludGwgPSBmb3JtYXQgPyB7XG4gICAgICAgIG1vbnRoOiBsZW5ndGgsXG4gICAgICAgIGRheTogXCJudW1lcmljXCJcbiAgICAgIH0gOiB7XG4gICAgICAgIG1vbnRoOiBsZW5ndGhcbiAgICAgIH0sXG4gICAgICAgICAgZm9ybWF0U3RyID0gZm9ybWF0ID8gXCJmb3JtYXRcIiA6IFwic3RhbmRhbG9uZVwiO1xuXG4gICAgICBpZiAoIV90aGlzLm1vbnRoc0NhY2hlW2Zvcm1hdFN0cl1bbGVuZ3RoXSkge1xuICAgICAgICBfdGhpcy5tb250aHNDYWNoZVtmb3JtYXRTdHJdW2xlbmd0aF0gPSBtYXBNb250aHMoZnVuY3Rpb24gKGR0KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmV4dHJhY3QoZHQsIGludGwsIFwibW9udGhcIik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3RoaXMubW9udGhzQ2FjaGVbZm9ybWF0U3RyXVtsZW5ndGhdO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90bzQud2Vla2RheXMgPSBmdW5jdGlvbiB3ZWVrZGF5cyQxKGxlbmd0aCwgZm9ybWF0LCBkZWZhdWx0T0spIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIGlmIChmb3JtYXQgPT09IHZvaWQgMCkge1xuICAgICAgZm9ybWF0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGRlZmF1bHRPSyA9PT0gdm9pZCAwKSB7XG4gICAgICBkZWZhdWx0T0sgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBsaXN0U3R1ZmYodGhpcywgbGVuZ3RoLCBkZWZhdWx0T0ssIHdlZWtkYXlzLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaW50bCA9IGZvcm1hdCA/IHtcbiAgICAgICAgd2Vla2RheTogbGVuZ3RoLFxuICAgICAgICB5ZWFyOiBcIm51bWVyaWNcIixcbiAgICAgICAgbW9udGg6IFwibG9uZ1wiLFxuICAgICAgICBkYXk6IFwibnVtZXJpY1wiXG4gICAgICB9IDoge1xuICAgICAgICB3ZWVrZGF5OiBsZW5ndGhcbiAgICAgIH0sXG4gICAgICAgICAgZm9ybWF0U3RyID0gZm9ybWF0ID8gXCJmb3JtYXRcIiA6IFwic3RhbmRhbG9uZVwiO1xuXG4gICAgICBpZiAoIV90aGlzMi53ZWVrZGF5c0NhY2hlW2Zvcm1hdFN0cl1bbGVuZ3RoXSkge1xuICAgICAgICBfdGhpczIud2Vla2RheXNDYWNoZVtmb3JtYXRTdHJdW2xlbmd0aF0gPSBtYXBXZWVrZGF5cyhmdW5jdGlvbiAoZHQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLmV4dHJhY3QoZHQsIGludGwsIFwid2Vla2RheVwiKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfdGhpczIud2Vla2RheXNDYWNoZVtmb3JtYXRTdHJdW2xlbmd0aF07XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvNC5tZXJpZGllbXMgPSBmdW5jdGlvbiBtZXJpZGllbXMkMShkZWZhdWx0T0spIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIGlmIChkZWZhdWx0T0sgPT09IHZvaWQgMCkge1xuICAgICAgZGVmYXVsdE9LID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlzdFN0dWZmKHRoaXMsIHVuZGVmaW5lZCwgZGVmYXVsdE9LLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbWVyaWRpZW1zO1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEluIHRoZW9yeSB0aGVyZSBjb3VsZCBiZSBhcmliaXRyYXJ5IGRheSBwZXJpb2RzLiBXZSdyZSBnb25uYSBhc3N1bWUgdGhlcmUgYXJlIGV4YWN0bHkgdHdvXG4gICAgICAvLyBmb3IgQU0gYW5kIFBNLiBUaGlzIGlzIHByb2JhYmx5IHdyb25nLCBidXQgaXQncyBtYWtlcyBwYXJzaW5nIHdheSBlYXNpZXIuXG4gICAgICBpZiAoIV90aGlzMy5tZXJpZGllbUNhY2hlKSB7XG4gICAgICAgIHZhciBpbnRsID0ge1xuICAgICAgICAgIGhvdXI6IFwibnVtZXJpY1wiLFxuICAgICAgICAgIGhvdXIxMjogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICBfdGhpczMubWVyaWRpZW1DYWNoZSA9IFtEYXRlVGltZS51dGMoMjAxNiwgMTEsIDEzLCA5KSwgRGF0ZVRpbWUudXRjKDIwMTYsIDExLCAxMywgMTkpXS5tYXAoZnVuY3Rpb24gKGR0KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMy5leHRyYWN0KGR0LCBpbnRsLCBcImRheXBlcmlvZFwiKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfdGhpczMubWVyaWRpZW1DYWNoZTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG80LmVyYXMgPSBmdW5jdGlvbiBlcmFzJDEobGVuZ3RoLCBkZWZhdWx0T0spIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIGlmIChkZWZhdWx0T0sgPT09IHZvaWQgMCkge1xuICAgICAgZGVmYXVsdE9LID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlzdFN0dWZmKHRoaXMsIGxlbmd0aCwgZGVmYXVsdE9LLCBlcmFzLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaW50bCA9IHtcbiAgICAgICAgZXJhOiBsZW5ndGhcbiAgICAgIH07IC8vIFRoaXMgaXMgdXR0ZXIgYnVsbHNoaXQuIERpZmZlcmVudCBjYWxlbmRhcnMgYXJlIGdvaW5nIHRvIGRlZmluZSBlcmFzIHRvdGFsbHkgZGlmZmVyZW50bHkuIFdoYXQgSSBuZWVkIGlzIHRoZSBtaW5pbXVtIHNldCBvZiBkYXRlc1xuICAgICAgLy8gdG8gZGVmaW5pdGVseSBlbnVtZXJhdGUgdGhlbS5cblxuICAgICAgaWYgKCFfdGhpczQuZXJhQ2FjaGVbbGVuZ3RoXSkge1xuICAgICAgICBfdGhpczQuZXJhQ2FjaGVbbGVuZ3RoXSA9IFtEYXRlVGltZS51dGMoLTQwLCAxLCAxKSwgRGF0ZVRpbWUudXRjKDIwMTcsIDEsIDEpXS5tYXAoZnVuY3Rpb24gKGR0KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzNC5leHRyYWN0KGR0LCBpbnRsLCBcImVyYVwiKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfdGhpczQuZXJhQ2FjaGVbbGVuZ3RoXTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG80LmV4dHJhY3QgPSBmdW5jdGlvbiBleHRyYWN0KGR0LCBpbnRsT3B0cywgZmllbGQpIHtcbiAgICB2YXIgZGYgPSB0aGlzLmR0Rm9ybWF0dGVyKGR0LCBpbnRsT3B0cyksXG4gICAgICAgIHJlc3VsdHMgPSBkZi5mb3JtYXRUb1BhcnRzKCksXG4gICAgICAgIG1hdGNoaW5nID0gcmVzdWx0cy5maW5kKGZ1bmN0aW9uIChtKSB7XG4gICAgICByZXR1cm4gbS50eXBlLnRvTG93ZXJDYXNlKCkgPT09IGZpZWxkO1xuICAgIH0pO1xuICAgIHJldHVybiBtYXRjaGluZyA/IG1hdGNoaW5nLnZhbHVlIDogbnVsbDtcbiAgfTtcblxuICBfcHJvdG80Lm51bWJlckZvcm1hdHRlciA9IGZ1bmN0aW9uIG51bWJlckZvcm1hdHRlcihvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cblxuICAgIC8vIHRoaXMgZm9yY2VzaW1wbGUgb3B0aW9uIGlzIG5ldmVyIHVzZWQgKHRoZSBvbmx5IGNhbGxlciBzaG9ydC1jaXJjdWl0cyBvbiBpdCwgYnV0IGl0IHNlZW1zIHNhZmVyIHRvIGxlYXZlKVxuICAgIC8vIChpbiBjb250cmFzdCwgdGhlIHJlc3Qgb2YgdGhlIGNvbmRpdGlvbiBpcyB1c2VkIGhlYXZpbHkpXG4gICAgcmV0dXJuIG5ldyBQb2x5TnVtYmVyRm9ybWF0dGVyKHRoaXMuaW50bCwgb3B0cy5mb3JjZVNpbXBsZSB8fCB0aGlzLmZhc3ROdW1iZXJzLCBvcHRzKTtcbiAgfTtcblxuICBfcHJvdG80LmR0Rm9ybWF0dGVyID0gZnVuY3Rpb24gZHRGb3JtYXR0ZXIoZHQsIGludGxPcHRzKSB7XG4gICAgaWYgKGludGxPcHRzID09PSB2b2lkIDApIHtcbiAgICAgIGludGxPcHRzID0ge307XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQb2x5RGF0ZUZvcm1hdHRlcihkdCwgdGhpcy5pbnRsLCBpbnRsT3B0cyk7XG4gIH07XG5cbiAgX3Byb3RvNC5yZWxGb3JtYXR0ZXIgPSBmdW5jdGlvbiByZWxGb3JtYXR0ZXIob3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFBvbHlSZWxGb3JtYXR0ZXIodGhpcy5pbnRsLCB0aGlzLmlzRW5nbGlzaCgpLCBvcHRzKTtcbiAgfTtcblxuICBfcHJvdG80LmlzRW5nbGlzaCA9IGZ1bmN0aW9uIGlzRW5nbGlzaCgpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGUgPT09IFwiZW5cIiB8fCB0aGlzLmxvY2FsZS50b0xvd2VyQ2FzZSgpID09PSBcImVuLXVzXCIgfHwgaGFzSW50bCgpICYmIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KHRoaXMuaW50bCkucmVzb2x2ZWRPcHRpb25zKCkubG9jYWxlLnN0YXJ0c1dpdGgoXCJlbi11c1wiKTtcbiAgfTtcblxuICBfcHJvdG80LmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyhvdGhlcikge1xuICAgIHJldHVybiB0aGlzLmxvY2FsZSA9PT0gb3RoZXIubG9jYWxlICYmIHRoaXMubnVtYmVyaW5nU3lzdGVtID09PSBvdGhlci5udW1iZXJpbmdTeXN0ZW0gJiYgdGhpcy5vdXRwdXRDYWxlbmRhciA9PT0gb3RoZXIub3V0cHV0Q2FsZW5kYXI7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKExvY2FsZSwgW3tcbiAgICBrZXk6IFwiZmFzdE51bWJlcnNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIGlmICh0aGlzLmZhc3ROdW1iZXJzQ2FjaGVkID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5mYXN0TnVtYmVyc0NhY2hlZCA9IHN1cHBvcnRzRmFzdE51bWJlcnModGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmZhc3ROdW1iZXJzQ2FjaGVkO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMb2NhbGU7XG59KCk7XG5cbi8qXG4gKiBUaGlzIGZpbGUgaGFuZGxlcyBwYXJzaW5nIGZvciB3ZWxsLXNwZWNpZmllZCBmb3JtYXRzLiBIZXJlJ3MgaG93IGl0IHdvcmtzOlxuICogVHdvIHRoaW5ncyBnbyBpbnRvIHBhcnNpbmc6IGEgcmVnZXggdG8gbWF0Y2ggd2l0aCBhbmQgYW4gZXh0cmFjdG9yIHRvIHRha2UgYXBhcnQgdGhlIGdyb3VwcyBpbiB0aGUgbWF0Y2guXG4gKiBBbiBleHRyYWN0b3IgaXMganVzdCBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSByZWdleCBtYXRjaCBhcnJheSBhbmQgcmV0dXJucyBhIHsgeWVhcjogLi4uLCBtb250aDogLi4uIH0gb2JqZWN0XG4gKiBwYXJzZSgpIGRvZXMgdGhlIHdvcmsgb2YgZXhlY3V0aW5nIHRoZSByZWdleCBhbmQgYXBwbHlpbmcgdGhlIGV4dHJhY3Rvci4gSXQgdGFrZXMgbXVsdGlwbGUgcmVnZXgvZXh0cmFjdG9yIHBhaXJzIHRvIHRyeSBpbiBzZXF1ZW5jZS5cbiAqIEV4dHJhY3RvcnMgY2FuIHRha2UgYSBcImN1cnNvclwiIHJlcHJlc2VudGluZyB0aGUgb2Zmc2V0IGluIHRoZSBtYXRjaCB0byBsb29rIGF0LiBUaGlzIG1ha2VzIGl0IGVhc3kgdG8gY29tYmluZSBleHRyYWN0b3JzLlxuICogY29tYmluZUV4dHJhY3RvcnMoKSBkb2VzIHRoZSB3b3JrIG9mIGNvbWJpbmluZyB0aGVtLCBrZWVwaW5nIHRyYWNrIG9mIHRoZSBjdXJzb3IgdGhyb3VnaCBtdWx0aXBsZSBleHRyYWN0aW9ucy5cbiAqIFNvbWUgZXh0cmFjdGlvbnMgYXJlIHN1cGVyIGR1bWIgYW5kIHNpbXBsZVBhcnNlIGFuZCBmcm9tU3RyaW5ncyBoZWxwIERSWSB0aGVtLlxuICovXG5cbmZ1bmN0aW9uIGNvbWJpbmVSZWdleGVzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVnZXhlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICByZWdleGVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGZ1bGwgPSByZWdleGVzLnJlZHVjZShmdW5jdGlvbiAoZiwgcikge1xuICAgIHJldHVybiBmICsgci5zb3VyY2U7XG4gIH0sIFwiXCIpO1xuICByZXR1cm4gUmVnRXhwKFwiXlwiICsgZnVsbCArIFwiJFwiKTtcbn1cblxuZnVuY3Rpb24gY29tYmluZUV4dHJhY3RvcnMoKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgZXh0cmFjdG9ycyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIGV4dHJhY3RvcnNbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAobSkge1xuICAgIHJldHVybiBleHRyYWN0b3JzLnJlZHVjZShmdW5jdGlvbiAoX3JlZiwgZXgpIHtcbiAgICAgIHZhciBtZXJnZWRWYWxzID0gX3JlZlswXSxcbiAgICAgICAgICBtZXJnZWRab25lID0gX3JlZlsxXSxcbiAgICAgICAgICBjdXJzb3IgPSBfcmVmWzJdO1xuXG4gICAgICB2YXIgX2V4ID0gZXgobSwgY3Vyc29yKSxcbiAgICAgICAgICB2YWwgPSBfZXhbMF0sXG4gICAgICAgICAgem9uZSA9IF9leFsxXSxcbiAgICAgICAgICBuZXh0ID0gX2V4WzJdO1xuXG4gICAgICByZXR1cm4gW09iamVjdC5hc3NpZ24obWVyZ2VkVmFscywgdmFsKSwgbWVyZ2VkWm9uZSB8fCB6b25lLCBuZXh0XTtcbiAgICB9LCBbe30sIG51bGwsIDFdKS5zbGljZSgwLCAyKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2Uocykge1xuICBpZiAocyA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtudWxsLCBudWxsXTtcbiAgfVxuXG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgcGF0dGVybnMgPSBuZXcgQXJyYXkoX2xlbjMgPiAxID8gX2xlbjMgLSAxIDogMCksIF9rZXkzID0gMTsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgIHBhdHRlcm5zW19rZXkzIC0gMV0gPSBhcmd1bWVudHNbX2tleTNdO1xuICB9XG5cbiAgZm9yICh2YXIgX2kgPSAwLCBfcGF0dGVybnMgPSBwYXR0ZXJuczsgX2kgPCBfcGF0dGVybnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgdmFyIF9wYXR0ZXJucyRfaSA9IF9wYXR0ZXJuc1tfaV0sXG4gICAgICAgIHJlZ2V4ID0gX3BhdHRlcm5zJF9pWzBdLFxuICAgICAgICBleHRyYWN0b3IgPSBfcGF0dGVybnMkX2lbMV07XG4gICAgdmFyIG0gPSByZWdleC5leGVjKHMpO1xuXG4gICAgaWYgKG0pIHtcbiAgICAgIHJldHVybiBleHRyYWN0b3IobSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFtudWxsLCBudWxsXTtcbn1cblxuZnVuY3Rpb24gc2ltcGxlUGFyc2UoKSB7XG4gIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwga2V5cyA9IG5ldyBBcnJheShfbGVuNCksIF9rZXk0ID0gMDsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgIGtleXNbX2tleTRdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAobWF0Y2gsIGN1cnNvcikge1xuICAgIHZhciByZXQgPSB7fTtcbiAgICB2YXIgaTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXRba2V5c1tpXV0gPSBwYXJzZUludGVnZXIobWF0Y2hbY3Vyc29yICsgaV0pO1xuICAgIH1cblxuICAgIHJldHVybiBbcmV0LCBudWxsLCBjdXJzb3IgKyBpXTtcbiAgfTtcbn0gLy8gSVNPIGFuZCBTUUwgcGFyc2luZ1xuXG5cbnZhciBvZmZzZXRSZWdleCA9IC8oPzooWil8KFsrLV1cXGRcXGQpKD86Oj8oXFxkXFxkKSk/KS8sXG4gICAgaXNvVGltZUJhc2VSZWdleCA9IC8oXFxkXFxkKSg/Ojo/KFxcZFxcZCkoPzo6PyhcXGRcXGQpKD86Wy4sXShcXGR7MSwzMH0pKT8pPyk/LyxcbiAgICBpc29UaW1lUmVnZXggPSBSZWdFeHAoXCJcIiArIGlzb1RpbWVCYXNlUmVnZXguc291cmNlICsgb2Zmc2V0UmVnZXguc291cmNlICsgXCI/XCIpLFxuICAgIGlzb1RpbWVFeHRlbnNpb25SZWdleCA9IFJlZ0V4cChcIig/OlRcIiArIGlzb1RpbWVSZWdleC5zb3VyY2UgKyBcIik/XCIpLFxuICAgIGlzb1ltZFJlZ2V4ID0gLyhbKy1dXFxkezZ9fFxcZHs0fSkoPzotPyhcXGRcXGQpKD86LT8oXFxkXFxkKSk/KT8vLFxuICAgIGlzb1dlZWtSZWdleCA9IC8oXFxkezR9KS0/VyhcXGRcXGQpKD86LT8oXFxkKSk/LyxcbiAgICBpc29PcmRpbmFsUmVnZXggPSAvKFxcZHs0fSktPyhcXGR7M30pLyxcbiAgICBleHRyYWN0SVNPV2Vla0RhdGEgPSBzaW1wbGVQYXJzZShcIndlZWtZZWFyXCIsIFwid2Vla051bWJlclwiLCBcIndlZWtEYXlcIiksXG4gICAgZXh0cmFjdElTT09yZGluYWxEYXRhID0gc2ltcGxlUGFyc2UoXCJ5ZWFyXCIsIFwib3JkaW5hbFwiKSxcbiAgICBzcWxZbWRSZWdleCA9IC8oXFxkezR9KS0oXFxkXFxkKS0oXFxkXFxkKS8sXG4gICAgLy8gZHVtYmVkLWRvd24gdmVyc2lvbiBvZiB0aGUgSVNPIG9uZVxuc3FsVGltZVJlZ2V4ID0gUmVnRXhwKGlzb1RpbWVCYXNlUmVnZXguc291cmNlICsgXCIgPyg/OlwiICsgb2Zmc2V0UmVnZXguc291cmNlICsgXCJ8KFwiICsgaWFuYVJlZ2V4LnNvdXJjZSArIFwiKSk/XCIpLFxuICAgIHNxbFRpbWVFeHRlbnNpb25SZWdleCA9IFJlZ0V4cChcIig/OiBcIiArIHNxbFRpbWVSZWdleC5zb3VyY2UgKyBcIik/XCIpO1xuXG5mdW5jdGlvbiBpbnQobWF0Y2gsIHBvcywgZmFsbGJhY2spIHtcbiAgdmFyIG0gPSBtYXRjaFtwb3NdO1xuICByZXR1cm4gaXNVbmRlZmluZWQobSkgPyBmYWxsYmFjayA6IHBhcnNlSW50ZWdlcihtKTtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdElTT1ltZChtYXRjaCwgY3Vyc29yKSB7XG4gIHZhciBpdGVtID0ge1xuICAgIHllYXI6IGludChtYXRjaCwgY3Vyc29yKSxcbiAgICBtb250aDogaW50KG1hdGNoLCBjdXJzb3IgKyAxLCAxKSxcbiAgICBkYXk6IGludChtYXRjaCwgY3Vyc29yICsgMiwgMSlcbiAgfTtcbiAgcmV0dXJuIFtpdGVtLCBudWxsLCBjdXJzb3IgKyAzXTtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdElTT1RpbWUobWF0Y2gsIGN1cnNvcikge1xuICB2YXIgaXRlbSA9IHtcbiAgICBob3VyOiBpbnQobWF0Y2gsIGN1cnNvciwgMCksXG4gICAgbWludXRlOiBpbnQobWF0Y2gsIGN1cnNvciArIDEsIDApLFxuICAgIHNlY29uZDogaW50KG1hdGNoLCBjdXJzb3IgKyAyLCAwKSxcbiAgICBtaWxsaXNlY29uZDogcGFyc2VNaWxsaXMobWF0Y2hbY3Vyc29yICsgM10pXG4gIH07XG4gIHJldHVybiBbaXRlbSwgbnVsbCwgY3Vyc29yICsgNF07XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RJU09PZmZzZXQobWF0Y2gsIGN1cnNvcikge1xuICB2YXIgbG9jYWwgPSAhbWF0Y2hbY3Vyc29yXSAmJiAhbWF0Y2hbY3Vyc29yICsgMV0sXG4gICAgICBmdWxsT2Zmc2V0ID0gc2lnbmVkT2Zmc2V0KG1hdGNoW2N1cnNvciArIDFdLCBtYXRjaFtjdXJzb3IgKyAyXSksXG4gICAgICB6b25lID0gbG9jYWwgPyBudWxsIDogRml4ZWRPZmZzZXRab25lLmluc3RhbmNlKGZ1bGxPZmZzZXQpO1xuICByZXR1cm4gW3t9LCB6b25lLCBjdXJzb3IgKyAzXTtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdElBTkFab25lKG1hdGNoLCBjdXJzb3IpIHtcbiAgdmFyIHpvbmUgPSBtYXRjaFtjdXJzb3JdID8gSUFOQVpvbmUuY3JlYXRlKG1hdGNoW2N1cnNvcl0pIDogbnVsbDtcbiAgcmV0dXJuIFt7fSwgem9uZSwgY3Vyc29yICsgMV07XG59IC8vIElTTyBkdXJhdGlvbiBwYXJzaW5nXG5cblxudmFyIGlzb0R1cmF0aW9uID0gL14tP1AoPzooPzooLT9cXGR7MSw5fSlZKT8oPzooLT9cXGR7MSw5fSlNKT8oPzooLT9cXGR7MSw5fSlXKT8oPzooLT9cXGR7MSw5fSlEKT8oPzpUKD86KC0/XFxkezEsOX0pSCk/KD86KC0/XFxkezEsOX0pTSk/KD86KC0/XFxkezEsMjB9KSg/OlsuLF0oLT9cXGR7MSw5fSkpP1MpPyk/KSQvO1xuXG5mdW5jdGlvbiBleHRyYWN0SVNPRHVyYXRpb24obWF0Y2gpIHtcbiAgdmFyIHMgPSBtYXRjaFswXSxcbiAgICAgIHllYXJTdHIgPSBtYXRjaFsxXSxcbiAgICAgIG1vbnRoU3RyID0gbWF0Y2hbMl0sXG4gICAgICB3ZWVrU3RyID0gbWF0Y2hbM10sXG4gICAgICBkYXlTdHIgPSBtYXRjaFs0XSxcbiAgICAgIGhvdXJTdHIgPSBtYXRjaFs1XSxcbiAgICAgIG1pbnV0ZVN0ciA9IG1hdGNoWzZdLFxuICAgICAgc2Vjb25kU3RyID0gbWF0Y2hbN10sXG4gICAgICBtaWxsaXNlY29uZHNTdHIgPSBtYXRjaFs4XTtcbiAgdmFyIGhhc05lZ2F0aXZlUHJlZml4ID0gc1swXSA9PT0gXCItXCI7XG5cbiAgdmFyIG1heWJlTmVnYXRlID0gZnVuY3Rpb24gbWF5YmVOZWdhdGUobnVtKSB7XG4gICAgcmV0dXJuIG51bSAmJiBoYXNOZWdhdGl2ZVByZWZpeCA/IC1udW0gOiBudW07XG4gIH07XG5cbiAgcmV0dXJuIFt7XG4gICAgeWVhcnM6IG1heWJlTmVnYXRlKHBhcnNlSW50ZWdlcih5ZWFyU3RyKSksXG4gICAgbW9udGhzOiBtYXliZU5lZ2F0ZShwYXJzZUludGVnZXIobW9udGhTdHIpKSxcbiAgICB3ZWVrczogbWF5YmVOZWdhdGUocGFyc2VJbnRlZ2VyKHdlZWtTdHIpKSxcbiAgICBkYXlzOiBtYXliZU5lZ2F0ZShwYXJzZUludGVnZXIoZGF5U3RyKSksXG4gICAgaG91cnM6IG1heWJlTmVnYXRlKHBhcnNlSW50ZWdlcihob3VyU3RyKSksXG4gICAgbWludXRlczogbWF5YmVOZWdhdGUocGFyc2VJbnRlZ2VyKG1pbnV0ZVN0cikpLFxuICAgIHNlY29uZHM6IG1heWJlTmVnYXRlKHBhcnNlSW50ZWdlcihzZWNvbmRTdHIpKSxcbiAgICBtaWxsaXNlY29uZHM6IG1heWJlTmVnYXRlKHBhcnNlTWlsbGlzKG1pbGxpc2Vjb25kc1N0cikpXG4gIH1dO1xufSAvLyBUaGVzZSBhcmUgYSBsaXR0bGUgYnJhaW5kZWFkLiBFRFQgKnNob3VsZCogdGVsbCB1cyB0aGF0IHdlJ3JlIGluLCBzYXksIEFtZXJpY2EvTmV3X1lvcmtcbi8vIGFuZCBub3QganVzdCB0aGF0IHdlJ3JlIGluIC0yNDAgKnJpZ2h0IG5vdyouIEJ1dCBzaW5jZSBJIGRvbid0IHRoaW5rIHRoZXNlIGFyZSB1c2VkIHRoYXQgb2Z0ZW5cbi8vIEknbSBqdXN0IGdvaW5nIHRvIGlnbm9yZSB0aGF0XG5cblxudmFyIG9ic09mZnNldHMgPSB7XG4gIEdNVDogMCxcbiAgRURUOiAtNCAqIDYwLFxuICBFU1Q6IC01ICogNjAsXG4gIENEVDogLTUgKiA2MCxcbiAgQ1NUOiAtNiAqIDYwLFxuICBNRFQ6IC02ICogNjAsXG4gIE1TVDogLTcgKiA2MCxcbiAgUERUOiAtNyAqIDYwLFxuICBQU1Q6IC04ICogNjBcbn07XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmdzKHdlZWtkYXlTdHIsIHllYXJTdHIsIG1vbnRoU3RyLCBkYXlTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyKSB7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgeWVhcjogeWVhclN0ci5sZW5ndGggPT09IDIgPyB1bnRydW5jYXRlWWVhcihwYXJzZUludGVnZXIoeWVhclN0cikpIDogcGFyc2VJbnRlZ2VyKHllYXJTdHIpLFxuICAgIG1vbnRoOiBtb250aHNTaG9ydC5pbmRleE9mKG1vbnRoU3RyKSArIDEsXG4gICAgZGF5OiBwYXJzZUludGVnZXIoZGF5U3RyKSxcbiAgICBob3VyOiBwYXJzZUludGVnZXIoaG91clN0ciksXG4gICAgbWludXRlOiBwYXJzZUludGVnZXIobWludXRlU3RyKVxuICB9O1xuICBpZiAoc2Vjb25kU3RyKSByZXN1bHQuc2Vjb25kID0gcGFyc2VJbnRlZ2VyKHNlY29uZFN0cik7XG5cbiAgaWYgKHdlZWtkYXlTdHIpIHtcbiAgICByZXN1bHQud2Vla2RheSA9IHdlZWtkYXlTdHIubGVuZ3RoID4gMyA/IHdlZWtkYXlzTG9uZy5pbmRleE9mKHdlZWtkYXlTdHIpICsgMSA6IHdlZWtkYXlzU2hvcnQuaW5kZXhPZih3ZWVrZGF5U3RyKSArIDE7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSAvLyBSRkMgMjgyMi81MzIyXG5cblxudmFyIHJmYzI4MjIgPSAvXig/OihNb258VHVlfFdlZHxUaHV8RnJpfFNhdHxTdW4pLFxccyk/KFxcZHsxLDJ9KVxccyhKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYylcXHMoXFxkezIsNH0pXFxzKFxcZFxcZCk6KFxcZFxcZCkoPzo6KFxcZFxcZCkpP1xccyg/OihVVHxHTVR8W0VDTVBdW1NEXVQpfChbWnpdKXwoPzooWystXVxcZFxcZCkoXFxkXFxkKSkpJC87XG5cbmZ1bmN0aW9uIGV4dHJhY3RSRkMyODIyKG1hdGNoKSB7XG4gIHZhciB3ZWVrZGF5U3RyID0gbWF0Y2hbMV0sXG4gICAgICBkYXlTdHIgPSBtYXRjaFsyXSxcbiAgICAgIG1vbnRoU3RyID0gbWF0Y2hbM10sXG4gICAgICB5ZWFyU3RyID0gbWF0Y2hbNF0sXG4gICAgICBob3VyU3RyID0gbWF0Y2hbNV0sXG4gICAgICBtaW51dGVTdHIgPSBtYXRjaFs2XSxcbiAgICAgIHNlY29uZFN0ciA9IG1hdGNoWzddLFxuICAgICAgb2JzT2Zmc2V0ID0gbWF0Y2hbOF0sXG4gICAgICBtaWxPZmZzZXQgPSBtYXRjaFs5XSxcbiAgICAgIG9mZkhvdXJTdHIgPSBtYXRjaFsxMF0sXG4gICAgICBvZmZNaW51dGVTdHIgPSBtYXRjaFsxMV0sXG4gICAgICByZXN1bHQgPSBmcm9tU3RyaW5ncyh3ZWVrZGF5U3RyLCB5ZWFyU3RyLCBtb250aFN0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cik7XG4gIHZhciBvZmZzZXQ7XG5cbiAgaWYgKG9ic09mZnNldCkge1xuICAgIG9mZnNldCA9IG9ic09mZnNldHNbb2JzT2Zmc2V0XTtcbiAgfSBlbHNlIGlmIChtaWxPZmZzZXQpIHtcbiAgICBvZmZzZXQgPSAwO1xuICB9IGVsc2Uge1xuICAgIG9mZnNldCA9IHNpZ25lZE9mZnNldChvZmZIb3VyU3RyLCBvZmZNaW51dGVTdHIpO1xuICB9XG5cbiAgcmV0dXJuIFtyZXN1bHQsIG5ldyBGaXhlZE9mZnNldFpvbmUob2Zmc2V0KV07XG59XG5cbmZ1bmN0aW9uIHByZXByb2Nlc3NSRkMyODIyKHMpIHtcbiAgLy8gUmVtb3ZlIGNvbW1lbnRzIGFuZCBmb2xkaW5nIHdoaXRlc3BhY2UgYW5kIHJlcGxhY2UgbXVsdGlwbGUtc3BhY2VzIHdpdGggYSBzaW5nbGUgc3BhY2VcbiAgcmV0dXJuIHMucmVwbGFjZSgvXFwoW14pXSpcXCl8W1xcblxcdF0vZywgXCIgXCIpLnJlcGxhY2UoLyhcXHNcXHMrKS9nLCBcIiBcIikudHJpbSgpO1xufSAvLyBodHRwIGRhdGVcblxuXG52YXIgcmZjMTEyMyA9IC9eKE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksIChcXGRcXGQpIChKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYykgKFxcZHs0fSkgKFxcZFxcZCk6KFxcZFxcZCk6KFxcZFxcZCkgR01UJC8sXG4gICAgcmZjODUwID0gL14oTW9uZGF5fFR1ZXNkYXl8V2Vkc2RheXxUaHVyc2RheXxGcmlkYXl8U2F0dXJkYXl8U3VuZGF5KSwgKFxcZFxcZCktKEphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKS0oXFxkXFxkKSAoXFxkXFxkKTooXFxkXFxkKTooXFxkXFxkKSBHTVQkLyxcbiAgICBhc2NpaSA9IC9eKE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1bikgKEphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKSAoIFxcZHxcXGRcXGQpIChcXGRcXGQpOihcXGRcXGQpOihcXGRcXGQpIChcXGR7NH0pJC87XG5cbmZ1bmN0aW9uIGV4dHJhY3RSRkMxMTIzT3I4NTAobWF0Y2gpIHtcbiAgdmFyIHdlZWtkYXlTdHIgPSBtYXRjaFsxXSxcbiAgICAgIGRheVN0ciA9IG1hdGNoWzJdLFxuICAgICAgbW9udGhTdHIgPSBtYXRjaFszXSxcbiAgICAgIHllYXJTdHIgPSBtYXRjaFs0XSxcbiAgICAgIGhvdXJTdHIgPSBtYXRjaFs1XSxcbiAgICAgIG1pbnV0ZVN0ciA9IG1hdGNoWzZdLFxuICAgICAgc2Vjb25kU3RyID0gbWF0Y2hbN10sXG4gICAgICByZXN1bHQgPSBmcm9tU3RyaW5ncyh3ZWVrZGF5U3RyLCB5ZWFyU3RyLCBtb250aFN0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cik7XG4gIHJldHVybiBbcmVzdWx0LCBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2VdO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0QVNDSUkobWF0Y2gpIHtcbiAgdmFyIHdlZWtkYXlTdHIgPSBtYXRjaFsxXSxcbiAgICAgIG1vbnRoU3RyID0gbWF0Y2hbMl0sXG4gICAgICBkYXlTdHIgPSBtYXRjaFszXSxcbiAgICAgIGhvdXJTdHIgPSBtYXRjaFs0XSxcbiAgICAgIG1pbnV0ZVN0ciA9IG1hdGNoWzVdLFxuICAgICAgc2Vjb25kU3RyID0gbWF0Y2hbNl0sXG4gICAgICB5ZWFyU3RyID0gbWF0Y2hbN10sXG4gICAgICByZXN1bHQgPSBmcm9tU3RyaW5ncyh3ZWVrZGF5U3RyLCB5ZWFyU3RyLCBtb250aFN0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cik7XG4gIHJldHVybiBbcmVzdWx0LCBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2VdO1xufVxuXG52YXIgaXNvWW1kV2l0aFRpbWVFeHRlbnNpb25SZWdleCA9IGNvbWJpbmVSZWdleGVzKGlzb1ltZFJlZ2V4LCBpc29UaW1lRXh0ZW5zaW9uUmVnZXgpO1xudmFyIGlzb1dlZWtXaXRoVGltZUV4dGVuc2lvblJlZ2V4ID0gY29tYmluZVJlZ2V4ZXMoaXNvV2Vla1JlZ2V4LCBpc29UaW1lRXh0ZW5zaW9uUmVnZXgpO1xudmFyIGlzb09yZGluYWxXaXRoVGltZUV4dGVuc2lvblJlZ2V4ID0gY29tYmluZVJlZ2V4ZXMoaXNvT3JkaW5hbFJlZ2V4LCBpc29UaW1lRXh0ZW5zaW9uUmVnZXgpO1xudmFyIGlzb1RpbWVDb21iaW5lZFJlZ2V4ID0gY29tYmluZVJlZ2V4ZXMoaXNvVGltZVJlZ2V4KTtcbnZhciBleHRyYWN0SVNPWW1kVGltZUFuZE9mZnNldCA9IGNvbWJpbmVFeHRyYWN0b3JzKGV4dHJhY3RJU09ZbWQsIGV4dHJhY3RJU09UaW1lLCBleHRyYWN0SVNPT2Zmc2V0KTtcbnZhciBleHRyYWN0SVNPV2Vla1RpbWVBbmRPZmZzZXQgPSBjb21iaW5lRXh0cmFjdG9ycyhleHRyYWN0SVNPV2Vla0RhdGEsIGV4dHJhY3RJU09UaW1lLCBleHRyYWN0SVNPT2Zmc2V0KTtcbnZhciBleHRyYWN0SVNPT3JkaW5hbERhdGFBbmRUaW1lID0gY29tYmluZUV4dHJhY3RvcnMoZXh0cmFjdElTT09yZGluYWxEYXRhLCBleHRyYWN0SVNPVGltZSk7XG52YXIgZXh0cmFjdElTT1RpbWVBbmRPZmZzZXQgPSBjb21iaW5lRXh0cmFjdG9ycyhleHRyYWN0SVNPVGltZSwgZXh0cmFjdElTT09mZnNldCk7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2VJU09EYXRlKHMpIHtcbiAgcmV0dXJuIHBhcnNlKHMsIFtpc29ZbWRXaXRoVGltZUV4dGVuc2lvblJlZ2V4LCBleHRyYWN0SVNPWW1kVGltZUFuZE9mZnNldF0sIFtpc29XZWVrV2l0aFRpbWVFeHRlbnNpb25SZWdleCwgZXh0cmFjdElTT1dlZWtUaW1lQW5kT2Zmc2V0XSwgW2lzb09yZGluYWxXaXRoVGltZUV4dGVuc2lvblJlZ2V4LCBleHRyYWN0SVNPT3JkaW5hbERhdGFBbmRUaW1lXSwgW2lzb1RpbWVDb21iaW5lZFJlZ2V4LCBleHRyYWN0SVNPVGltZUFuZE9mZnNldF0pO1xufVxuZnVuY3Rpb24gcGFyc2VSRkMyODIyRGF0ZShzKSB7XG4gIHJldHVybiBwYXJzZShwcmVwcm9jZXNzUkZDMjgyMihzKSwgW3JmYzI4MjIsIGV4dHJhY3RSRkMyODIyXSk7XG59XG5mdW5jdGlvbiBwYXJzZUhUVFBEYXRlKHMpIHtcbiAgcmV0dXJuIHBhcnNlKHMsIFtyZmMxMTIzLCBleHRyYWN0UkZDMTEyM09yODUwXSwgW3JmYzg1MCwgZXh0cmFjdFJGQzExMjNPcjg1MF0sIFthc2NpaSwgZXh0cmFjdEFTQ0lJXSk7XG59XG5mdW5jdGlvbiBwYXJzZUlTT0R1cmF0aW9uKHMpIHtcbiAgcmV0dXJuIHBhcnNlKHMsIFtpc29EdXJhdGlvbiwgZXh0cmFjdElTT0R1cmF0aW9uXSk7XG59XG52YXIgc3FsWW1kV2l0aFRpbWVFeHRlbnNpb25SZWdleCA9IGNvbWJpbmVSZWdleGVzKHNxbFltZFJlZ2V4LCBzcWxUaW1lRXh0ZW5zaW9uUmVnZXgpO1xudmFyIHNxbFRpbWVDb21iaW5lZFJlZ2V4ID0gY29tYmluZVJlZ2V4ZXMoc3FsVGltZVJlZ2V4KTtcbnZhciBleHRyYWN0SVNPWW1kVGltZU9mZnNldEFuZElBTkFab25lID0gY29tYmluZUV4dHJhY3RvcnMoZXh0cmFjdElTT1ltZCwgZXh0cmFjdElTT1RpbWUsIGV4dHJhY3RJU09PZmZzZXQsIGV4dHJhY3RJQU5BWm9uZSk7XG52YXIgZXh0cmFjdElTT1RpbWVPZmZzZXRBbmRJQU5BWm9uZSA9IGNvbWJpbmVFeHRyYWN0b3JzKGV4dHJhY3RJU09UaW1lLCBleHRyYWN0SVNPT2Zmc2V0LCBleHRyYWN0SUFOQVpvbmUpO1xuZnVuY3Rpb24gcGFyc2VTUUwocykge1xuICByZXR1cm4gcGFyc2UocywgW3NxbFltZFdpdGhUaW1lRXh0ZW5zaW9uUmVnZXgsIGV4dHJhY3RJU09ZbWRUaW1lT2Zmc2V0QW5kSUFOQVpvbmVdLCBbc3FsVGltZUNvbWJpbmVkUmVnZXgsIGV4dHJhY3RJU09UaW1lT2Zmc2V0QW5kSUFOQVpvbmVdKTtcbn1cblxudmFyIElOVkFMSUQgPSBcIkludmFsaWQgRHVyYXRpb25cIjsgLy8gdW5pdCBjb252ZXJzaW9uIGNvbnN0YW50c1xuXG52YXIgbG93T3JkZXJNYXRyaXggPSB7XG4gIHdlZWtzOiB7XG4gICAgZGF5czogNyxcbiAgICBob3VyczogNyAqIDI0LFxuICAgIG1pbnV0ZXM6IDcgKiAyNCAqIDYwLFxuICAgIHNlY29uZHM6IDcgKiAyNCAqIDYwICogNjAsXG4gICAgbWlsbGlzZWNvbmRzOiA3ICogMjQgKiA2MCAqIDYwICogMTAwMFxuICB9LFxuICBkYXlzOiB7XG4gICAgaG91cnM6IDI0LFxuICAgIG1pbnV0ZXM6IDI0ICogNjAsXG4gICAgc2Vjb25kczogMjQgKiA2MCAqIDYwLFxuICAgIG1pbGxpc2Vjb25kczogMjQgKiA2MCAqIDYwICogMTAwMFxuICB9LFxuICBob3Vyczoge1xuICAgIG1pbnV0ZXM6IDYwLFxuICAgIHNlY29uZHM6IDYwICogNjAsXG4gICAgbWlsbGlzZWNvbmRzOiA2MCAqIDYwICogMTAwMFxuICB9LFxuICBtaW51dGVzOiB7XG4gICAgc2Vjb25kczogNjAsXG4gICAgbWlsbGlzZWNvbmRzOiA2MCAqIDEwMDBcbiAgfSxcbiAgc2Vjb25kczoge1xuICAgIG1pbGxpc2Vjb25kczogMTAwMFxuICB9XG59LFxuICAgIGNhc3VhbE1hdHJpeCA9IE9iamVjdC5hc3NpZ24oe1xuICB5ZWFyczoge1xuICAgIHF1YXJ0ZXJzOiA0LFxuICAgIG1vbnRoczogMTIsXG4gICAgd2Vla3M6IDUyLFxuICAgIGRheXM6IDM2NSxcbiAgICBob3VyczogMzY1ICogMjQsXG4gICAgbWludXRlczogMzY1ICogMjQgKiA2MCxcbiAgICBzZWNvbmRzOiAzNjUgKiAyNCAqIDYwICogNjAsXG4gICAgbWlsbGlzZWNvbmRzOiAzNjUgKiAyNCAqIDYwICogNjAgKiAxMDAwXG4gIH0sXG4gIHF1YXJ0ZXJzOiB7XG4gICAgbW9udGhzOiAzLFxuICAgIHdlZWtzOiAxMyxcbiAgICBkYXlzOiA5MSxcbiAgICBob3VyczogOTEgKiAyNCxcbiAgICBtaW51dGVzOiA5MSAqIDI0ICogNjAsXG4gICAgc2Vjb25kczogOTEgKiAyNCAqIDYwICogNjAsXG4gICAgbWlsbGlzZWNvbmRzOiA5MSAqIDI0ICogNjAgKiA2MCAqIDEwMDBcbiAgfSxcbiAgbW9udGhzOiB7XG4gICAgd2Vla3M6IDQsXG4gICAgZGF5czogMzAsXG4gICAgaG91cnM6IDMwICogMjQsXG4gICAgbWludXRlczogMzAgKiAyNCAqIDYwLFxuICAgIHNlY29uZHM6IDMwICogMjQgKiA2MCAqIDYwLFxuICAgIG1pbGxpc2Vjb25kczogMzAgKiAyNCAqIDYwICogNjAgKiAxMDAwXG4gIH1cbn0sIGxvd09yZGVyTWF0cml4KSxcbiAgICBkYXlzSW5ZZWFyQWNjdXJhdGUgPSAxNDYwOTcuMCAvIDQwMCxcbiAgICBkYXlzSW5Nb250aEFjY3VyYXRlID0gMTQ2MDk3LjAgLyA0ODAwLFxuICAgIGFjY3VyYXRlTWF0cml4ID0gT2JqZWN0LmFzc2lnbih7XG4gIHllYXJzOiB7XG4gICAgcXVhcnRlcnM6IDQsXG4gICAgbW9udGhzOiAxMixcbiAgICB3ZWVrczogZGF5c0luWWVhckFjY3VyYXRlIC8gNyxcbiAgICBkYXlzOiBkYXlzSW5ZZWFyQWNjdXJhdGUsXG4gICAgaG91cnM6IGRheXNJblllYXJBY2N1cmF0ZSAqIDI0LFxuICAgIG1pbnV0ZXM6IGRheXNJblllYXJBY2N1cmF0ZSAqIDI0ICogNjAsXG4gICAgc2Vjb25kczogZGF5c0luWWVhckFjY3VyYXRlICogMjQgKiA2MCAqIDYwLFxuICAgIG1pbGxpc2Vjb25kczogZGF5c0luWWVhckFjY3VyYXRlICogMjQgKiA2MCAqIDYwICogMTAwMFxuICB9LFxuICBxdWFydGVyczoge1xuICAgIG1vbnRoczogMyxcbiAgICB3ZWVrczogZGF5c0luWWVhckFjY3VyYXRlIC8gMjgsXG4gICAgZGF5czogZGF5c0luWWVhckFjY3VyYXRlIC8gNCxcbiAgICBob3VyczogZGF5c0luWWVhckFjY3VyYXRlICogMjQgLyA0LFxuICAgIG1pbnV0ZXM6IGRheXNJblllYXJBY2N1cmF0ZSAqIDI0ICogNjAgLyA0LFxuICAgIHNlY29uZHM6IGRheXNJblllYXJBY2N1cmF0ZSAqIDI0ICogNjAgKiA2MCAvIDQsXG4gICAgbWlsbGlzZWNvbmRzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCAqIDYwICogNjAgKiAxMDAwIC8gNFxuICB9LFxuICBtb250aHM6IHtcbiAgICB3ZWVrczogZGF5c0luTW9udGhBY2N1cmF0ZSAvIDcsXG4gICAgZGF5czogZGF5c0luTW9udGhBY2N1cmF0ZSxcbiAgICBob3VyczogZGF5c0luTW9udGhBY2N1cmF0ZSAqIDI0LFxuICAgIG1pbnV0ZXM6IGRheXNJbk1vbnRoQWNjdXJhdGUgKiAyNCAqIDYwLFxuICAgIHNlY29uZHM6IGRheXNJbk1vbnRoQWNjdXJhdGUgKiAyNCAqIDYwICogNjAsXG4gICAgbWlsbGlzZWNvbmRzOiBkYXlzSW5Nb250aEFjY3VyYXRlICogMjQgKiA2MCAqIDYwICogMTAwMFxuICB9XG59LCBsb3dPcmRlck1hdHJpeCk7IC8vIHVuaXRzIG9yZGVyZWQgYnkgc2l6ZVxuXG52YXIgb3JkZXJlZFVuaXRzID0gW1wieWVhcnNcIiwgXCJxdWFydGVyc1wiLCBcIm1vbnRoc1wiLCBcIndlZWtzXCIsIFwiZGF5c1wiLCBcImhvdXJzXCIsIFwibWludXRlc1wiLCBcInNlY29uZHNcIiwgXCJtaWxsaXNlY29uZHNcIl07XG52YXIgcmV2ZXJzZVVuaXRzID0gb3JkZXJlZFVuaXRzLnNsaWNlKDApLnJldmVyc2UoKTsgLy8gY2xvbmUgcmVhbGx5IG1lYW5zIFwiY3JlYXRlIGFub3RoZXIgaW5zdGFuY2UganVzdCBsaWtlIHRoaXMgb25lLCBidXQgd2l0aCB0aGVzZSBjaGFuZ2VzXCJcblxuZnVuY3Rpb24gY2xvbmUoZHVyLCBhbHRzLCBjbGVhcikge1xuICBpZiAoY2xlYXIgPT09IHZvaWQgMCkge1xuICAgIGNsZWFyID0gZmFsc2U7XG4gIH1cblxuICAvLyBkZWVwIG1lcmdlIGZvciB2YWxzXG4gIHZhciBjb25mID0ge1xuICAgIHZhbHVlczogY2xlYXIgPyBhbHRzLnZhbHVlcyA6IE9iamVjdC5hc3NpZ24oe30sIGR1ci52YWx1ZXMsIGFsdHMudmFsdWVzIHx8IHt9KSxcbiAgICBsb2M6IGR1ci5sb2MuY2xvbmUoYWx0cy5sb2MpLFxuICAgIGNvbnZlcnNpb25BY2N1cmFjeTogYWx0cy5jb252ZXJzaW9uQWNjdXJhY3kgfHwgZHVyLmNvbnZlcnNpb25BY2N1cmFjeVxuICB9O1xuICByZXR1cm4gbmV3IER1cmF0aW9uKGNvbmYpO1xufVxuXG5mdW5jdGlvbiBhbnRpVHJ1bmMobikge1xuICByZXR1cm4gbiA8IDAgPyBNYXRoLmZsb29yKG4pIDogTWF0aC5jZWlsKG4pO1xufSAvLyBOQjogbXV0YXRlcyBwYXJhbWV0ZXJzXG5cblxuZnVuY3Rpb24gY29udmVydChtYXRyaXgsIGZyb21NYXAsIGZyb21Vbml0LCB0b01hcCwgdG9Vbml0KSB7XG4gIHZhciBjb252ID0gbWF0cml4W3RvVW5pdF1bZnJvbVVuaXRdLFxuICAgICAgcmF3ID0gZnJvbU1hcFtmcm9tVW5pdF0gLyBjb252LFxuICAgICAgc2FtZVNpZ24gPSBNYXRoLnNpZ24ocmF3KSA9PT0gTWF0aC5zaWduKHRvTWFwW3RvVW5pdF0pLFxuICAgICAgLy8gb2ssIHNvIHRoaXMgaXMgd2lsZCwgYnV0IHNlZSB0aGUgbWF0cml4IGluIHRoZSB0ZXN0c1xuICBhZGRlZCA9ICFzYW1lU2lnbiAmJiB0b01hcFt0b1VuaXRdICE9PSAwICYmIE1hdGguYWJzKHJhdykgPD0gMSA/IGFudGlUcnVuYyhyYXcpIDogTWF0aC50cnVuYyhyYXcpO1xuICB0b01hcFt0b1VuaXRdICs9IGFkZGVkO1xuICBmcm9tTWFwW2Zyb21Vbml0XSAtPSBhZGRlZCAqIGNvbnY7XG59IC8vIE5COiBtdXRhdGVzIHBhcmFtZXRlcnNcblxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZXMobWF0cml4LCB2YWxzKSB7XG4gIHJldmVyc2VVbml0cy5yZWR1Y2UoZnVuY3Rpb24gKHByZXZpb3VzLCBjdXJyZW50KSB7XG4gICAgaWYgKCFpc1VuZGVmaW5lZCh2YWxzW2N1cnJlbnRdKSkge1xuICAgICAgaWYgKHByZXZpb3VzKSB7XG4gICAgICAgIGNvbnZlcnQobWF0cml4LCB2YWxzLCBwcmV2aW91cywgdmFscywgY3VycmVudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcHJldmlvdXM7XG4gICAgfVxuICB9LCBudWxsKTtcbn1cbi8qKlxuICogQSBEdXJhdGlvbiBvYmplY3QgcmVwcmVzZW50cyBhIHBlcmlvZCBvZiB0aW1lLCBsaWtlIFwiMiBtb250aHNcIiBvciBcIjEgZGF5LCAxIGhvdXJcIi4gQ29uY2VwdHVhbGx5LCBpdCdzIGp1c3QgYSBtYXAgb2YgdW5pdHMgdG8gdGhlaXIgcXVhbnRpdGllcywgYWNjb21wYW5pZWQgYnkgc29tZSBhZGRpdGlvbmFsIGNvbmZpZ3VyYXRpb24gYW5kIG1ldGhvZHMgZm9yIGNyZWF0aW5nLCBwYXJzaW5nLCBpbnRlcnJvZ2F0aW5nLCB0cmFuc2Zvcm1pbmcsIGFuZCBmb3JtYXR0aW5nIHRoZW0uIFRoZXkgY2FuIGJlIHVzZWQgb24gdGhlaXIgb3duIG9yIGluIGNvbmp1bmN0aW9uIHdpdGggb3RoZXIgTHV4b24gdHlwZXM7IGZvciBleGFtcGxlLCB5b3UgY2FuIHVzZSB7QGxpbmsgRGF0ZVRpbWUucGx1c30gdG8gYWRkIGEgRHVyYXRpb24gb2JqZWN0IHRvIGEgRGF0ZVRpbWUsIHByb2R1Y2luZyBhbm90aGVyIERhdGVUaW1lLlxuICpcbiAqIEhlcmUgaXMgYSBicmllZiBvdmVydmlldyBvZiBjb21tb25seSB1c2VkIG1ldGhvZHMgYW5kIGdldHRlcnMgaW4gRHVyYXRpb246XG4gKlxuICogKiAqKkNyZWF0aW9uKiogVG8gY3JlYXRlIGEgRHVyYXRpb24sIHVzZSB7QGxpbmsgRHVyYXRpb24uZnJvbU1pbGxpc30sIHtAbGluayBEdXJhdGlvbi5mcm9tT2JqZWN0fSwgb3Ige0BsaW5rIER1cmF0aW9uLmZyb21JU099LlxuICogKiAqKlVuaXQgdmFsdWVzKiogU2VlIHRoZSB7QGxpbmsgRHVyYXRpb24ueWVhcnN9LCB7QGxpbmsgRHVyYXRpb24ubW9udGhzfSwge0BsaW5rIER1cmF0aW9uLndlZWtzfSwge0BsaW5rIER1cmF0aW9uLmRheXN9LCB7QGxpbmsgRHVyYXRpb24uaG91cnN9LCB7QGxpbmsgRHVyYXRpb24ubWludXRlc30sIHtAbGluayBEdXJhdGlvbi5zZWNvbmRzfSwge0BsaW5rIER1cmF0aW9uLm1pbGxpc2Vjb25kc30gYWNjZXNzb3JzLlxuICogKiAqKkNvbmZpZ3VyYXRpb24qKiBTZWUgIHtAbGluayBEdXJhdGlvbi5sb2NhbGV9IGFuZCB7QGxpbmsgRHVyYXRpb24ubnVtYmVyaW5nU3lzdGVtfSBhY2Nlc3NvcnMuXG4gKiAqICoqVHJhbnNmb3JtYXRpb24qKiBUbyBjcmVhdGUgbmV3IER1cmF0aW9ucyBvdXQgb2Ygb2xkIG9uZXMgdXNlIHtAbGluayBEdXJhdGlvbi5wbHVzfSwge0BsaW5rIER1cmF0aW9uLm1pbnVzfSwge0BsaW5rIER1cmF0aW9uLm5vcm1hbGl6ZX0sIHtAbGluayBEdXJhdGlvbi5zZXR9LCB7QGxpbmsgRHVyYXRpb24ucmVjb25maWd1cmV9LCB7QGxpbmsgRHVyYXRpb24uc2hpZnRUb30sIGFuZCB7QGxpbmsgRHVyYXRpb24ubmVnYXRlfS5cbiAqICogKipPdXRwdXQqKiBUbyBjb252ZXJ0IHRoZSBEdXJhdGlvbiBpbnRvIG90aGVyIHJlcHJlc2VudGF0aW9ucywgc2VlIHtAbGluayBEdXJhdGlvbi5hc30sIHtAbGluayBEdXJhdGlvbi50b0lTT30sIHtAbGluayBEdXJhdGlvbi50b0Zvcm1hdH0sIGFuZCB7QGxpbmsgRHVyYXRpb24udG9KU09OfVxuICpcbiAqIFRoZXJlJ3MgYXJlIG1vcmUgbWV0aG9kcyBkb2N1bWVudGVkIGJlbG93LiBJbiBhZGRpdGlvbiwgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gc3VidGxlciB0b3BpY3MgbGlrZSBpbnRlcm5hdGlvbmFsaXphdGlvbiBhbmQgdmFsaWRpdHksIHNlZSB0aGUgZXh0ZXJuYWwgZG9jdW1lbnRhdGlvbi5cbiAqL1xuXG5cbnZhciBEdXJhdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gRHVyYXRpb24oY29uZmlnKSB7XG4gICAgdmFyIGFjY3VyYXRlID0gY29uZmlnLmNvbnZlcnNpb25BY2N1cmFjeSA9PT0gXCJsb25ndGVybVwiIHx8IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgdGhpcy52YWx1ZXMgPSBjb25maWcudmFsdWVzO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgdGhpcy5sb2MgPSBjb25maWcubG9jIHx8IExvY2FsZS5jcmVhdGUoKTtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMuY29udmVyc2lvbkFjY3VyYWN5ID0gYWNjdXJhdGUgPyBcImxvbmd0ZXJtXCIgOiBcImNhc3VhbFwiO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgdGhpcy5pbnZhbGlkID0gY29uZmlnLmludmFsaWQgfHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMubWF0cml4ID0gYWNjdXJhdGUgPyBhY2N1cmF0ZU1hdHJpeCA6IGNhc3VhbE1hdHJpeDtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMuaXNMdXhvbkR1cmF0aW9uID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIER1cmF0aW9uIGZyb20gYSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gY291bnQgb2YgbWlsbGlzZWNvbmRzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyBmb3IgcGFyc2luZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdlbi1VUyddIC0gdGhlIGxvY2FsZSB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5jb252ZXJzaW9uQWNjdXJhY3k9J2Nhc3VhbCddIC0gdGhlIGNvbnZlcnNpb24gc3lzdGVtIHRvIHVzZVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG5cblxuICBEdXJhdGlvbi5mcm9tTWlsbGlzID0gZnVuY3Rpb24gZnJvbU1pbGxpcyhjb3VudCwgb3B0cykge1xuICAgIHJldHVybiBEdXJhdGlvbi5mcm9tT2JqZWN0KE9iamVjdC5hc3NpZ24oe1xuICAgICAgbWlsbGlzZWNvbmRzOiBjb3VudFxuICAgIH0sIG9wdHMpKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgRHVyYXRpb24gZnJvbSBhIEphdmFzY3JpcHQgb2JqZWN0IHdpdGgga2V5cyBsaWtlICd5ZWFycycgYW5kICdob3Vycy5cbiAgICogSWYgdGhpcyBvYmplY3QgaXMgZW1wdHkgdGhlbiBhIHplcm8gbWlsbGlzZWNvbmRzIGR1cmF0aW9uIGlzIHJldHVybmVkLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqIC0gdGhlIG9iamVjdCB0byBjcmVhdGUgdGhlIERhdGVUaW1lIGZyb21cbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai55ZWFyc1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLnF1YXJ0ZXJzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoubW9udGhzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoud2Vla3NcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5kYXlzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmouaG91cnNcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5taW51dGVzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmouc2Vjb25kc1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLm1pbGxpc2Vjb25kc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29iai5sb2NhbGU9J2VuLVVTJ10gLSB0aGUgbG9jYWxlIHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb2JqLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29iai5jb252ZXJzaW9uQWNjdXJhY3k9J2Nhc3VhbCddIC0gdGhlIGNvbnZlcnNpb24gc3lzdGVtIHRvIHVzZVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIDtcblxuICBEdXJhdGlvbi5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChvYmopIHtcbiAgICBpZiAob2JqID09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIikge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwiRHVyYXRpb24uZnJvbU9iamVjdDogYXJndW1lbnQgZXhwZWN0ZWQgdG8gYmUgYW4gb2JqZWN0LCBnb3QgXCIgKyAob2JqID09PSBudWxsID8gXCJudWxsXCIgOiB0eXBlb2Ygb2JqKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEdXJhdGlvbih7XG4gICAgICB2YWx1ZXM6IG5vcm1hbGl6ZU9iamVjdChvYmosIER1cmF0aW9uLm5vcm1hbGl6ZVVuaXQsIFtcImxvY2FsZVwiLCBcIm51bWJlcmluZ1N5c3RlbVwiLCBcImNvbnZlcnNpb25BY2N1cmFjeVwiLCBcInpvbmVcIiAvLyBhIGJpdCBvZiBkZWJ0OyBpdCdzIHN1cGVyIGluY29udmVuaWVudCBpbnRlcm5hbGx5IG5vdCB0byBiZSBhYmxlIHRvIGJsaW5kbHkgcGFzcyB0aGlzXG4gICAgICBdKSxcbiAgICAgIGxvYzogTG9jYWxlLmZyb21PYmplY3Qob2JqKSxcbiAgICAgIGNvbnZlcnNpb25BY2N1cmFjeTogb2JqLmNvbnZlcnNpb25BY2N1cmFjeVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEdXJhdGlvbiBmcm9tIGFuIElTTyA4NjAxIGR1cmF0aW9uIHN0cmluZy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0ZXh0IHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyBmb3IgcGFyc2luZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdlbi1VUyddIC0gdGhlIGxvY2FsZSB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5jb252ZXJzaW9uQWNjdXJhY3k9J2Nhc3VhbCddIC0gdGhlIGNvbnZlcnNpb24gc3lzdGVtIHRvIHVzZVxuICAgKiBAc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxI0R1cmF0aW9uc1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tSVNPKCdQM1k2TTFXNERUMTJIMzBNNVMnKS50b09iamVjdCgpIC8vPT4geyB5ZWFyczogMywgbW9udGhzOiA2LCB3ZWVrczogMSwgZGF5czogNCwgaG91cnM6IDEyLCBtaW51dGVzOiAzMCwgc2Vjb25kczogNSB9XG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21JU08oJ1BUMjNIJykudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDIzIH1cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbUlTTygnUDVZM00nKS50b09iamVjdCgpIC8vPT4geyB5ZWFyczogNSwgbW9udGhzOiAzIH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICA7XG5cbiAgRHVyYXRpb24uZnJvbUlTTyA9IGZ1bmN0aW9uIGZyb21JU08odGV4dCwgb3B0cykge1xuICAgIHZhciBfcGFyc2VJU09EdXJhdGlvbiA9IHBhcnNlSVNPRHVyYXRpb24odGV4dCksXG4gICAgICAgIHBhcnNlZCA9IF9wYXJzZUlTT0R1cmF0aW9uWzBdO1xuXG4gICAgaWYgKHBhcnNlZCkge1xuICAgICAgdmFyIG9iaiA9IE9iamVjdC5hc3NpZ24ocGFyc2VkLCBvcHRzKTtcbiAgICAgIHJldHVybiBEdXJhdGlvbi5mcm9tT2JqZWN0KG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBEdXJhdGlvbi5pbnZhbGlkKFwidW5wYXJzYWJsZVwiLCBcInRoZSBpbnB1dCBcXFwiXCIgKyB0ZXh0ICsgXCJcXFwiIGNhbid0IGJlIHBhcnNlZCBhcyBJU08gODYwMVwiKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpbnZhbGlkIER1cmF0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIC0gc2ltcGxlIHN0cmluZyBvZiB3aHkgdGhpcyBkYXRldGltZSBpcyBpbnZhbGlkLiBTaG91bGQgbm90IGNvbnRhaW4gcGFyYW1ldGVycyBvciBhbnl0aGluZyBlbHNlIGRhdGEtZGVwZW5kZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZXhwbGFuYXRpb249bnVsbF0gLSBsb25nZXIgZXhwbGFuYXRpb24sIG1heSBpbmNsdWRlIHBhcmFtZXRlcnMgYW5kIG90aGVyIHVzZWZ1bCBkZWJ1Z2dpbmcgaW5mb3JtYXRpb25cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICA7XG5cbiAgRHVyYXRpb24uaW52YWxpZCA9IGZ1bmN0aW9uIGludmFsaWQocmVhc29uLCBleHBsYW5hdGlvbikge1xuICAgIGlmIChleHBsYW5hdGlvbiA9PT0gdm9pZCAwKSB7XG4gICAgICBleHBsYW5hdGlvbiA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCFyZWFzb24pIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcIm5lZWQgdG8gc3BlY2lmeSBhIHJlYXNvbiB0aGUgRHVyYXRpb24gaXMgaW52YWxpZFwiKTtcbiAgICB9XG5cbiAgICB2YXIgaW52YWxpZCA9IHJlYXNvbiBpbnN0YW5jZW9mIEludmFsaWQgPyByZWFzb24gOiBuZXcgSW52YWxpZChyZWFzb24sIGV4cGxhbmF0aW9uKTtcblxuICAgIGlmIChTZXR0aW5ncy50aHJvd09uSW52YWxpZCkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWREdXJhdGlvbkVycm9yKGludmFsaWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IER1cmF0aW9uKHtcbiAgICAgICAgaW52YWxpZDogaW52YWxpZFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgO1xuXG4gIER1cmF0aW9uLm5vcm1hbGl6ZVVuaXQgPSBmdW5jdGlvbiBub3JtYWxpemVVbml0KHVuaXQpIHtcbiAgICB2YXIgbm9ybWFsaXplZCA9IHtcbiAgICAgIHllYXI6IFwieWVhcnNcIixcbiAgICAgIHllYXJzOiBcInllYXJzXCIsXG4gICAgICBxdWFydGVyOiBcInF1YXJ0ZXJzXCIsXG4gICAgICBxdWFydGVyczogXCJxdWFydGVyc1wiLFxuICAgICAgbW9udGg6IFwibW9udGhzXCIsXG4gICAgICBtb250aHM6IFwibW9udGhzXCIsXG4gICAgICB3ZWVrOiBcIndlZWtzXCIsXG4gICAgICB3ZWVrczogXCJ3ZWVrc1wiLFxuICAgICAgZGF5OiBcImRheXNcIixcbiAgICAgIGRheXM6IFwiZGF5c1wiLFxuICAgICAgaG91cjogXCJob3Vyc1wiLFxuICAgICAgaG91cnM6IFwiaG91cnNcIixcbiAgICAgIG1pbnV0ZTogXCJtaW51dGVzXCIsXG4gICAgICBtaW51dGVzOiBcIm1pbnV0ZXNcIixcbiAgICAgIHNlY29uZDogXCJzZWNvbmRzXCIsXG4gICAgICBzZWNvbmRzOiBcInNlY29uZHNcIixcbiAgICAgIG1pbGxpc2Vjb25kOiBcIm1pbGxpc2Vjb25kc1wiLFxuICAgICAgbWlsbGlzZWNvbmRzOiBcIm1pbGxpc2Vjb25kc1wiXG4gICAgfVt1bml0ID8gdW5pdC50b0xvd2VyQ2FzZSgpIDogdW5pdF07XG4gICAgaWYgKCFub3JtYWxpemVkKSB0aHJvdyBuZXcgSW52YWxpZFVuaXRFcnJvcih1bml0KTtcbiAgICByZXR1cm4gbm9ybWFsaXplZDtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gb2JqZWN0IGlzIGEgRHVyYXRpb24uIFdvcmtzIGFjcm9zcyBjb250ZXh0IGJvdW5kYXJpZXNcbiAgICogQHBhcmFtIHtvYmplY3R9IG9cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIDtcblxuICBEdXJhdGlvbi5pc0R1cmF0aW9uID0gZnVuY3Rpb24gaXNEdXJhdGlvbihvKSB7XG4gICAgcmV0dXJuIG8gJiYgby5pc0x1eG9uRHVyYXRpb24gfHwgZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIEdldCAgdGhlIGxvY2FsZSBvZiBhIER1cmF0aW9uLCBzdWNoICdlbi1HQidcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIDtcblxuICB2YXIgX3Byb3RvID0gRHVyYXRpb24ucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRHVyYXRpb24gZm9ybWF0dGVkIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGZvcm1hdCBzdHJpbmcuIFlvdSBtYXkgdXNlIHRoZXNlIHRva2VuczpcbiAgICogKiBgU2AgZm9yIG1pbGxpc2Vjb25kc1xuICAgKiAqIGBzYCBmb3Igc2Vjb25kc1xuICAgKiAqIGBtYCBmb3IgbWludXRlc1xuICAgKiAqIGBoYCBmb3IgaG91cnNcbiAgICogKiBgZGAgZm9yIGRheXNcbiAgICogKiBgTWAgZm9yIG1vbnRoc1xuICAgKiAqIGB5YCBmb3IgeWVhcnNcbiAgICogTm90ZXM6XG4gICAqICogQWRkIHBhZGRpbmcgYnkgcmVwZWF0aW5nIHRoZSB0b2tlbiwgZS5nLiBcInl5XCIgcGFkcyB0aGUgeWVhcnMgdG8gdHdvIGRpZ2l0cywgXCJoaGhoXCIgcGFkcyB0aGUgaG91cnMgb3V0IHRvIGZvdXIgZGlnaXRzXG4gICAqICogVGhlIGR1cmF0aW9uIHdpbGwgYmUgY29udmVydGVkIHRvIHRoZSBzZXQgb2YgdW5pdHMgaW4gdGhlIGZvcm1hdCBzdHJpbmcgdXNpbmcge0BsaW5rIER1cmF0aW9uLnNoaWZ0VG99IGFuZCB0aGUgRHVyYXRpb25zJ3MgY29udmVyc2lvbiBhY2N1cmFjeSBzZXR0aW5nLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm10IC0gdGhlIGZvcm1hdCBzdHJpbmdcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuZmxvb3I9dHJ1ZV0gLSBmbG9vciBudW1lcmljYWwgdmFsdWVzXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyB5ZWFyczogMSwgZGF5czogNiwgc2Vjb25kczogMiB9KS50b0Zvcm1hdChcInkgZCBzXCIpIC8vPT4gXCIxIDYgMlwiXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyB5ZWFyczogMSwgZGF5czogNiwgc2Vjb25kczogMiB9KS50b0Zvcm1hdChcInl5IGRkIHNzc1wiKSAvLz0+IFwiMDEgMDYgMDAyXCJcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IHllYXJzOiAxLCBkYXlzOiA2LCBzZWNvbmRzOiAyIH0pLnRvRm9ybWF0KFwiTSBTXCIpIC8vPT4gXCIxMiA1MTg0MDIwMDBcIlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBfcHJvdG8udG9Gb3JtYXQgPSBmdW5jdGlvbiB0b0Zvcm1hdChmbXQsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgLy8gcmV2ZXJzZS1jb21wYXQgc2luY2UgMS4yOyB3ZSBhbHdheXMgcm91bmQgZG93biBub3csIG5ldmVyIHVwLCBhbmQgd2UgZG8gaXQgYnkgZGVmYXVsdFxuICAgIHZhciBmbXRPcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0cywge1xuICAgICAgZmxvb3I6IG9wdHMucm91bmQgIT09IGZhbHNlICYmIG9wdHMuZmxvb3IgIT09IGZhbHNlXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IEZvcm1hdHRlci5jcmVhdGUodGhpcy5sb2MsIGZtdE9wdHMpLmZvcm1hdER1cmF0aW9uRnJvbVN0cmluZyh0aGlzLCBmbXQpIDogSU5WQUxJRDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIEphdmFzY3JpcHQgb2JqZWN0IHdpdGggdGhpcyBEdXJhdGlvbidzIHZhbHVlcy5cbiAgICogQHBhcmFtIG9wdHMgLSBvcHRpb25zIGZvciBnZW5lcmF0aW5nIHRoZSBvYmplY3RcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlQ29uZmlnPWZhbHNlXSAtIGluY2x1ZGUgY29uZmlndXJhdGlvbiBhdHRyaWJ1dGVzIGluIHRoZSBvdXRwdXRcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IHllYXJzOiAxLCBkYXlzOiA2LCBzZWNvbmRzOiAyIH0pLnRvT2JqZWN0KCkgLy89PiB7IHllYXJzOiAxLCBkYXlzOiA2LCBzZWNvbmRzOiAyIH1cbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB7fTtcbiAgICB2YXIgYmFzZSA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMudmFsdWVzKTtcblxuICAgIGlmIChvcHRzLmluY2x1ZGVDb25maWcpIHtcbiAgICAgIGJhc2UuY29udmVyc2lvbkFjY3VyYWN5ID0gdGhpcy5jb252ZXJzaW9uQWNjdXJhY3k7XG4gICAgICBiYXNlLm51bWJlcmluZ1N5c3RlbSA9IHRoaXMubG9jLm51bWJlcmluZ1N5c3RlbTtcbiAgICAgIGJhc2UubG9jYWxlID0gdGhpcy5sb2MubG9jYWxlO1xuICAgIH1cblxuICAgIHJldHVybiBiYXNlO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxLWNvbXBsaWFudCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEdXJhdGlvbi5cbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSNEdXJhdGlvbnNcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IHllYXJzOiAzLCBzZWNvbmRzOiA0NSB9KS50b0lTTygpIC8vPT4gJ1AzWVQ0NVMnXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBtb250aHM6IDQsIHNlY29uZHM6IDQ1IH0pLnRvSVNPKCkgLy89PiAnUDRNVDQ1UydcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IG1vbnRoczogNSB9KS50b0lTTygpIC8vPT4gJ1A1TSdcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IG1pbnV0ZXM6IDUgfSkudG9JU08oKSAvLz0+ICdQVDVNJ1xuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgbWlsbGlzZWNvbmRzOiA2IH0pLnRvSVNPKCkgLy89PiAnUFQwLjAwNlMnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9JU08gPSBmdW5jdGlvbiB0b0lTTygpIHtcbiAgICAvLyB3ZSBjb3VsZCB1c2UgdGhlIGZvcm1hdHRlciwgYnV0IHRoaXMgaXMgYW4gZWFzaWVyIHdheSB0byBnZXQgdGhlIG1pbmltdW0gc3RyaW5nXG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBudWxsO1xuICAgIHZhciBzID0gXCJQXCI7XG4gICAgaWYgKHRoaXMueWVhcnMgIT09IDApIHMgKz0gdGhpcy55ZWFycyArIFwiWVwiO1xuICAgIGlmICh0aGlzLm1vbnRocyAhPT0gMCB8fCB0aGlzLnF1YXJ0ZXJzICE9PSAwKSBzICs9IHRoaXMubW9udGhzICsgdGhpcy5xdWFydGVycyAqIDMgKyBcIk1cIjtcbiAgICBpZiAodGhpcy53ZWVrcyAhPT0gMCkgcyArPSB0aGlzLndlZWtzICsgXCJXXCI7XG4gICAgaWYgKHRoaXMuZGF5cyAhPT0gMCkgcyArPSB0aGlzLmRheXMgKyBcIkRcIjtcbiAgICBpZiAodGhpcy5ob3VycyAhPT0gMCB8fCB0aGlzLm1pbnV0ZXMgIT09IDAgfHwgdGhpcy5zZWNvbmRzICE9PSAwIHx8IHRoaXMubWlsbGlzZWNvbmRzICE9PSAwKSBzICs9IFwiVFwiO1xuICAgIGlmICh0aGlzLmhvdXJzICE9PSAwKSBzICs9IHRoaXMuaG91cnMgKyBcIkhcIjtcbiAgICBpZiAodGhpcy5taW51dGVzICE9PSAwKSBzICs9IHRoaXMubWludXRlcyArIFwiTVwiO1xuICAgIGlmICh0aGlzLnNlY29uZHMgIT09IDAgfHwgdGhpcy5taWxsaXNlY29uZHMgIT09IDApIC8vIHRoaXMgd2lsbCBoYW5kbGUgXCJmbG9hdGluZyBwb2ludCBtYWRuZXNzXCIgYnkgcmVtb3ZpbmcgZXh0cmEgZGVjaW1hbCBwbGFjZXNcbiAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU4ODAwNC9pcy1mbG9hdGluZy1wb2ludC1tYXRoLWJyb2tlblxuICAgICAgcyArPSByb3VuZFRvKHRoaXMuc2Vjb25kcyArIHRoaXMubWlsbGlzZWNvbmRzIC8gMTAwMCwgMykgKyBcIlNcIjtcbiAgICBpZiAocyA9PT0gXCJQXCIpIHMgKz0gXCJUMFNcIjtcbiAgICByZXR1cm4gcztcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIER1cmF0aW9uIGFwcHJvcHJpYXRlIGZvciB1c2UgaW4gSlNPTi5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9JU08oKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIER1cmF0aW9uIGFwcHJvcHJpYXRlIGZvciB1c2UgaW4gZGVidWdnaW5nLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9JU08oKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBtaWxsaXNlY29uZHMgdmFsdWUgb2YgdGhpcyBEdXJhdGlvbi5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by52YWx1ZU9mID0gZnVuY3Rpb24gdmFsdWVPZigpIHtcbiAgICByZXR1cm4gdGhpcy5hcyhcIm1pbGxpc2Vjb25kc1wiKTtcbiAgfVxuICAvKipcbiAgICogTWFrZSB0aGlzIER1cmF0aW9uIGxvbmdlciBieSB0aGUgc3BlY2lmaWVkIGFtb3VudC4gUmV0dXJuIGEgbmV3bHktY29uc3RydWN0ZWQgRHVyYXRpb24uXG4gICAqIEBwYXJhbSB7RHVyYXRpb258T2JqZWN0fG51bWJlcn0gZHVyYXRpb24gLSBUaGUgYW1vdW50IHRvIGFkZC4gRWl0aGVyIGEgTHV4b24gRHVyYXRpb24sIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgdGhlIG9iamVjdCBhcmd1bWVudCB0byBEdXJhdGlvbi5mcm9tT2JqZWN0KClcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBsdXMgPSBmdW5jdGlvbiBwbHVzKGR1cmF0aW9uKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuICAgIHZhciBkdXIgPSBmcmllbmRseUR1cmF0aW9uKGR1cmF0aW9uKSxcbiAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlKG9yZGVyZWRVbml0cyksIF9zdGVwOyAhKF9zdGVwID0gX2l0ZXJhdG9yKCkpLmRvbmU7KSB7XG4gICAgICB2YXIgayA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkoZHVyLnZhbHVlcywgaykgfHwgaGFzT3duUHJvcGVydHkodGhpcy52YWx1ZXMsIGspKSB7XG4gICAgICAgIHJlc3VsdFtrXSA9IGR1ci5nZXQoaykgKyB0aGlzLmdldChrKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmUodGhpcywge1xuICAgICAgdmFsdWVzOiByZXN1bHRcbiAgICB9LCB0cnVlKTtcbiAgfVxuICAvKipcbiAgICogTWFrZSB0aGlzIER1cmF0aW9uIHNob3J0ZXIgYnkgdGhlIHNwZWNpZmllZCBhbW91bnQuIFJldHVybiBhIG5ld2x5LWNvbnN0cnVjdGVkIER1cmF0aW9uLlxuICAgKiBAcGFyYW0ge0R1cmF0aW9ufE9iamVjdHxudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGFtb3VudCB0byBzdWJ0cmFjdC4gRWl0aGVyIGEgTHV4b24gRHVyYXRpb24sIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgdGhlIG9iamVjdCBhcmd1bWVudCB0byBEdXJhdGlvbi5mcm9tT2JqZWN0KClcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm1pbnVzID0gZnVuY3Rpb24gbWludXMoZHVyYXRpb24pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgdmFyIGR1ciA9IGZyaWVuZGx5RHVyYXRpb24oZHVyYXRpb24pO1xuICAgIHJldHVybiB0aGlzLnBsdXMoZHVyLm5lZ2F0ZSgpKTtcbiAgfVxuICAvKipcbiAgICogU2NhbGUgdGhpcyBEdXJhdGlvbiBieSB0aGUgc3BlY2lmaWVkIGFtb3VudC4gUmV0dXJuIGEgbmV3bHktY29uc3RydWN0ZWQgRHVyYXRpb24uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IHRvIGVhY2ggdW5pdC4gQXJpdHkgaXMgMSBvciAyOiB0aGUgdmFsdWUgb2YgdGhlIHVuaXQgYW5kLCBvcHRpb25hbGx5LCB0aGUgdW5pdCBuYW1lLiBNdXN0IHJldHVybiBhIG51bWJlci5cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxLCBtaW51dGVzOiAzMCB9KS5tYXBVbml0KHggPT4geCAqIDIpIC8vPT4geyBob3VyczogMiwgbWludXRlczogNjAgfVxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDEsIG1pbnV0ZXM6IDMwIH0pLm1hcFVuaXQoKHgsIHUpID0+IHUgPT09IFwiaG91clwiID8geCAqIDIgOiB4KSAvLz0+IHsgaG91cnM6IDIsIG1pbnV0ZXM6IDMwIH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm1hcFVuaXRzID0gZnVuY3Rpb24gbWFwVW5pdHMoZm4pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwLCBfT2JqZWN0JGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLnZhbHVlcyk7IF9pIDwgX09iamVjdCRrZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGsgPSBfT2JqZWN0JGtleXNbX2ldO1xuICAgICAgcmVzdWx0W2tdID0gYXNOdW1iZXIoZm4odGhpcy52YWx1ZXNba10sIGspKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmUodGhpcywge1xuICAgICAgdmFsdWVzOiByZXN1bHRcbiAgICB9LCB0cnVlKTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSB2YWx1ZSBvZiB1bml0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIGEgdW5pdCBzdWNoIGFzICdtaW51dGUnIG9yICdkYXknXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3Qoe3llYXJzOiAyLCBkYXlzOiAzfSkueWVhcnMgLy89PiAyXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3Qoe3llYXJzOiAyLCBkYXlzOiAzfSkubW9udGhzIC8vPT4gMFxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHt5ZWFyczogMiwgZGF5czogM30pLmRheXMgLy89PiAzXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0ID0gZnVuY3Rpb24gZ2V0KHVuaXQpIHtcbiAgICByZXR1cm4gdGhpc1tEdXJhdGlvbi5ub3JtYWxpemVVbml0KHVuaXQpXTtcbiAgfVxuICAvKipcbiAgICogXCJTZXRcIiB0aGUgdmFsdWVzIG9mIHNwZWNpZmllZCB1bml0cy4gUmV0dXJuIGEgbmV3bHktY29uc3RydWN0ZWQgRHVyYXRpb24uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZXMgLSBhIG1hcHBpbmcgb2YgdW5pdHMgdG8gbnVtYmVyc1xuICAgKiBAZXhhbXBsZSBkdXIuc2V0KHsgeWVhcnM6IDIwMTcgfSlcbiAgICogQGV4YW1wbGUgZHVyLnNldCh7IGhvdXJzOiA4LCBtaW51dGVzOiAzMCB9KVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2V0ID0gZnVuY3Rpb24gc2V0KHZhbHVlcykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICB2YXIgbWl4ZWQgPSBPYmplY3QuYXNzaWduKHRoaXMudmFsdWVzLCBub3JtYWxpemVPYmplY3QodmFsdWVzLCBEdXJhdGlvbi5ub3JtYWxpemVVbml0LCBbXSkpO1xuICAgIHJldHVybiBjbG9uZSh0aGlzLCB7XG4gICAgICB2YWx1ZXM6IG1peGVkXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhlIGxvY2FsZSBhbmQvb3IgbnVtYmVyaW5nU3lzdGVtLiAgUmV0dXJucyBhIG5ld2x5LWNvbnN0cnVjdGVkIER1cmF0aW9uLlxuICAgKiBAZXhhbXBsZSBkdXIucmVjb25maWd1cmUoeyBsb2NhbGU6ICdlbi1HQicgfSlcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlY29uZmlndXJlID0gZnVuY3Rpb24gcmVjb25maWd1cmUoX3RlbXApIHtcbiAgICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgICBsb2NhbGUgPSBfcmVmLmxvY2FsZSxcbiAgICAgICAgbnVtYmVyaW5nU3lzdGVtID0gX3JlZi5udW1iZXJpbmdTeXN0ZW0sXG4gICAgICAgIGNvbnZlcnNpb25BY2N1cmFjeSA9IF9yZWYuY29udmVyc2lvbkFjY3VyYWN5O1xuXG4gICAgdmFyIGxvYyA9IHRoaXMubG9jLmNsb25lKHtcbiAgICAgIGxvY2FsZTogbG9jYWxlLFxuICAgICAgbnVtYmVyaW5nU3lzdGVtOiBudW1iZXJpbmdTeXN0ZW1cbiAgICB9KSxcbiAgICAgICAgb3B0cyA9IHtcbiAgICAgIGxvYzogbG9jXG4gICAgfTtcblxuICAgIGlmIChjb252ZXJzaW9uQWNjdXJhY3kpIHtcbiAgICAgIG9wdHMuY29udmVyc2lvbkFjY3VyYWN5ID0gY29udmVyc2lvbkFjY3VyYWN5O1xuICAgIH1cblxuICAgIHJldHVybiBjbG9uZSh0aGlzLCBvcHRzKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGR1cmF0aW9uIGluIHRoZSBzcGVjaWZpZWQgdW5pdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSBhIHVuaXQgc3VjaCBhcyAnbWludXRlcycgb3IgJ2RheXMnXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3Qoe3llYXJzOiAxfSkuYXMoJ2RheXMnKSAvLz0+IDM2NVxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHt5ZWFyczogMX0pLmFzKCdtb250aHMnKSAvLz0+IDEyXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3Qoe2hvdXJzOiA2MH0pLmFzKCdkYXlzJykgLy89PiAyLjVcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hcyA9IGZ1bmN0aW9uIGFzKHVuaXQpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5zaGlmdFRvKHVuaXQpLmdldCh1bml0KSA6IE5hTjtcbiAgfVxuICAvKipcbiAgICogUmVkdWNlIHRoaXMgRHVyYXRpb24gdG8gaXRzIGNhbm9uaWNhbCByZXByZXNlbnRhdGlvbiBpbiBpdHMgY3VycmVudCB1bml0cy5cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IHllYXJzOiAyLCBkYXlzOiA1MDAwIH0pLm5vcm1hbGl6ZSgpLnRvT2JqZWN0KCkgLy89PiB7IHllYXJzOiAxNSwgZGF5czogMjU1IH1cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxMiwgbWludXRlczogLTQ1IH0pLm5vcm1hbGl6ZSgpLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAxMSwgbWludXRlczogMTUgfVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ubm9ybWFsaXplID0gZnVuY3Rpb24gbm9ybWFsaXplKCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICB2YXIgdmFscyA9IHRoaXMudG9PYmplY3QoKTtcbiAgICBub3JtYWxpemVWYWx1ZXModGhpcy5tYXRyaXgsIHZhbHMpO1xuICAgIHJldHVybiBjbG9uZSh0aGlzLCB7XG4gICAgICB2YWx1ZXM6IHZhbHNcbiAgICB9LCB0cnVlKTtcbiAgfVxuICAvKipcbiAgICogQ29udmVydCB0aGlzIER1cmF0aW9uIGludG8gaXRzIHJlcHJlc2VudGF0aW9uIGluIGEgZGlmZmVyZW50IHNldCBvZiB1bml0cy5cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxLCBzZWNvbmRzOiAzMCB9KS5zaGlmdFRvKCdtaW51dGVzJywgJ21pbGxpc2Vjb25kcycpLnRvT2JqZWN0KCkgLy89PiB7IG1pbnV0ZXM6IDYwLCBtaWxsaXNlY29uZHM6IDMwMDAwIH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNoaWZ0VG8gPSBmdW5jdGlvbiBzaGlmdFRvKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCB1bml0cyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIHVuaXRzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcblxuICAgIGlmICh1bml0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHVuaXRzID0gdW5pdHMubWFwKGZ1bmN0aW9uICh1KSB7XG4gICAgICByZXR1cm4gRHVyYXRpb24ubm9ybWFsaXplVW5pdCh1KTtcbiAgICB9KTtcbiAgICB2YXIgYnVpbHQgPSB7fSxcbiAgICAgICAgYWNjdW11bGF0ZWQgPSB7fSxcbiAgICAgICAgdmFscyA9IHRoaXMudG9PYmplY3QoKTtcbiAgICB2YXIgbGFzdFVuaXQ7XG5cbiAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShvcmRlcmVkVW5pdHMpLCBfc3RlcDI7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMigpKS5kb25lOykge1xuICAgICAgdmFyIGsgPSBfc3RlcDIudmFsdWU7XG5cbiAgICAgIGlmICh1bml0cy5pbmRleE9mKGspID49IDApIHtcbiAgICAgICAgbGFzdFVuaXQgPSBrO1xuICAgICAgICB2YXIgb3duID0gMDsgLy8gYW55dGhpbmcgd2UgaGF2ZW4ndCBib2lsZWQgZG93biB5ZXQgc2hvdWxkIGdldCBib2lsZWQgdG8gdGhpcyB1bml0XG5cbiAgICAgICAgZm9yICh2YXIgYWsgaW4gYWNjdW11bGF0ZWQpIHtcbiAgICAgICAgICBvd24gKz0gdGhpcy5tYXRyaXhbYWtdW2tdICogYWNjdW11bGF0ZWRbYWtdO1xuICAgICAgICAgIGFjY3VtdWxhdGVkW2FrXSA9IDA7XG4gICAgICAgIH0gLy8gcGx1cyBhbnl0aGluZyB0aGF0J3MgYWxyZWFkeSBpbiB0aGlzIHVuaXRcblxuXG4gICAgICAgIGlmIChpc051bWJlcih2YWxzW2tdKSkge1xuICAgICAgICAgIG93biArPSB2YWxzW2tdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGkgPSBNYXRoLnRydW5jKG93bik7XG4gICAgICAgIGJ1aWx0W2tdID0gaTtcbiAgICAgICAgYWNjdW11bGF0ZWRba10gPSBvd24gLSBpOyAvLyB3ZSdkIGxpa2UgdG8gYWJzb3JiIHRoZXNlIGZyYWN0aW9ucyBpbiBhbm90aGVyIHVuaXRcbiAgICAgICAgLy8gcGx1cyBhbnl0aGluZyBmdXJ0aGVyIGRvd24gdGhlIGNoYWluIHRoYXQgc2hvdWxkIGJlIHJvbGxlZCB1cCBpbiB0byB0aGlzXG5cbiAgICAgICAgZm9yICh2YXIgZG93biBpbiB2YWxzKSB7XG4gICAgICAgICAgaWYgKG9yZGVyZWRVbml0cy5pbmRleE9mKGRvd24pID4gb3JkZXJlZFVuaXRzLmluZGV4T2YoaykpIHtcbiAgICAgICAgICAgIGNvbnZlcnQodGhpcy5tYXRyaXgsIHZhbHMsIGRvd24sIGJ1aWx0LCBrKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gb3RoZXJ3aXNlLCBrZWVwIGl0IGluIHRoZSB3aW5ncyB0byBib2lsIGl0IGxhdGVyXG5cbiAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIodmFsc1trXSkpIHtcbiAgICAgICAgYWNjdW11bGF0ZWRba10gPSB2YWxzW2tdO1xuICAgICAgfVxuICAgIH0gLy8gYW55dGhpbmcgbGVmdG92ZXIgYmVjb21lcyB0aGUgZGVjaW1hbCBmb3IgdGhlIGxhc3QgdW5pdFxuICAgIC8vIGxhc3RVbml0IG11c3QgYmUgZGVmaW5lZCBzaW5jZSB1bml0cyBpcyBub3QgZW1wdHlcblxuXG4gICAgZm9yICh2YXIga2V5IGluIGFjY3VtdWxhdGVkKSB7XG4gICAgICBpZiAoYWNjdW11bGF0ZWRba2V5XSAhPT0gMCkge1xuICAgICAgICBidWlsdFtsYXN0VW5pdF0gKz0ga2V5ID09PSBsYXN0VW5pdCA/IGFjY3VtdWxhdGVkW2tleV0gOiBhY2N1bXVsYXRlZFtrZXldIC8gdGhpcy5tYXRyaXhbbGFzdFVuaXRdW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsb25lKHRoaXMsIHtcbiAgICAgIHZhbHVlczogYnVpbHRcbiAgICB9LCB0cnVlKS5ub3JtYWxpemUoKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHRoZSBuZWdhdGl2ZSBvZiB0aGlzIER1cmF0aW9uLlxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDEsIHNlY29uZHM6IDMwIH0pLm5lZ2F0ZSgpLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAtMSwgc2Vjb25kczogLTMwIH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm5lZ2F0ZSA9IGZ1bmN0aW9uIG5lZ2F0ZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgdmFyIG5lZ2F0ZWQgPSB7fTtcblxuICAgIGZvciAodmFyIF9pMiA9IDAsIF9PYmplY3Qka2V5czIgPSBPYmplY3Qua2V5cyh0aGlzLnZhbHVlcyk7IF9pMiA8IF9PYmplY3Qka2V5czIubGVuZ3RoOyBfaTIrKykge1xuICAgICAgdmFyIGsgPSBfT2JqZWN0JGtleXMyW19pMl07XG4gICAgICBuZWdhdGVkW2tdID0gLXRoaXMudmFsdWVzW2tdO1xuICAgIH1cblxuICAgIHJldHVybiBjbG9uZSh0aGlzLCB7XG4gICAgICB2YWx1ZXM6IG5lZ2F0ZWRcbiAgICB9LCB0cnVlKTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSB5ZWFycy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIDtcblxuICAvKipcbiAgICogRXF1YWxpdHkgY2hlY2tcbiAgICogVHdvIER1cmF0aW9ucyBhcmUgZXF1YWwgaWZmIHRoZXkgaGF2ZSB0aGUgc2FtZSB1bml0cyBhbmQgdGhlIHNhbWUgdmFsdWVzIGZvciBlYWNoIHVuaXQuXG4gICAqIEBwYXJhbSB7RHVyYXRpb259IG90aGVyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBfcHJvdG8uZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzKG90aGVyKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQgfHwgIW90aGVyLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMubG9jLmVxdWFscyhvdGhlci5sb2MpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2l0ZXJhdG9yMyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2Uob3JkZXJlZFVuaXRzKSwgX3N0ZXAzOyAhKF9zdGVwMyA9IF9pdGVyYXRvcjMoKSkuZG9uZTspIHtcbiAgICAgIHZhciB1ID0gX3N0ZXAzLnZhbHVlO1xuXG4gICAgICBpZiAodGhpcy52YWx1ZXNbdV0gIT09IG90aGVyLnZhbHVlc1t1XSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKER1cmF0aW9uLCBbe1xuICAgIGtleTogXCJsb2NhbGVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmxvYy5sb2NhbGUgOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIG51bWJlcmluZyBzeXN0ZW0gb2YgYSBEdXJhdGlvbiwgc3VjaCAnYmVuZycuIFRoZSBudW1iZXJpbmcgc3lzdGVtIGlzIHVzZWQgd2hlbiBmb3JtYXR0aW5nIHRoZSBEdXJhdGlvblxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm51bWJlcmluZ1N5c3RlbVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMubG9jLm51bWJlcmluZ1N5c3RlbSA6IG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInllYXJzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMueWVhcnMgfHwgMCA6IE5hTjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBxdWFydGVycy5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicXVhcnRlcnNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy5xdWFydGVycyB8fCAwIDogTmFOO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIG1vbnRocy5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibW9udGhzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMubW9udGhzIHx8IDAgOiBOYU47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgd2Vla3NcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwid2Vla3NcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy53ZWVrcyB8fCAwIDogTmFOO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGRheXMuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRheXNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy5kYXlzIHx8IDAgOiBOYU47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgaG91cnMuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImhvdXJzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMuaG91cnMgfHwgMCA6IE5hTjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBtaW51dGVzLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJtaW51dGVzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMubWludXRlcyB8fCAwIDogTmFOO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHNlY29uZHMuXG4gICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2Vjb25kc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudmFsdWVzLnNlY29uZHMgfHwgMCA6IE5hTjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBtaWxsaXNlY29uZHMuXG4gICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibWlsbGlzZWNvbmRzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMubWlsbGlzZWNvbmRzIHx8IDAgOiBOYU47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgRHVyYXRpb24gaXMgaW52YWxpZC4gSW52YWxpZCBkdXJhdGlvbnMgYXJlIHJldHVybmVkIGJ5IGRpZmYgb3BlcmF0aW9uc1xuICAgICAqIG9uIGludmFsaWQgRGF0ZVRpbWVzIG9yIEludGVydmFscy5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaXNWYWxpZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW52YWxpZCA9PT0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBlcnJvciBjb2RlIGlmIHRoaXMgRHVyYXRpb24gYmVjYW1lIGludmFsaWQsIG9yIG51bGwgaWYgdGhlIER1cmF0aW9uIGlzIHZhbGlkXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaW52YWxpZFJlYXNvblwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW52YWxpZCA/IHRoaXMuaW52YWxpZC5yZWFzb24gOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGV4cGxhbmF0aW9uIG9mIHdoeSB0aGlzIER1cmF0aW9uIGJlY2FtZSBpbnZhbGlkLCBvciBudWxsIGlmIHRoZSBEdXJhdGlvbiBpcyB2YWxpZFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJpbnZhbGlkRXhwbGFuYXRpb25cIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmludmFsaWQgPyB0aGlzLmludmFsaWQuZXhwbGFuYXRpb24gOiBudWxsO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEdXJhdGlvbjtcbn0oKTtcbmZ1bmN0aW9uIGZyaWVuZGx5RHVyYXRpb24oZHVyYXRpb25pc2gpIHtcbiAgaWYgKGlzTnVtYmVyKGR1cmF0aW9uaXNoKSkge1xuICAgIHJldHVybiBEdXJhdGlvbi5mcm9tTWlsbGlzKGR1cmF0aW9uaXNoKTtcbiAgfSBlbHNlIGlmIChEdXJhdGlvbi5pc0R1cmF0aW9uKGR1cmF0aW9uaXNoKSkge1xuICAgIHJldHVybiBkdXJhdGlvbmlzaDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZHVyYXRpb25pc2ggPT09IFwib2JqZWN0XCIpIHtcbiAgICByZXR1cm4gRHVyYXRpb24uZnJvbU9iamVjdChkdXJhdGlvbmlzaCk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwiVW5rbm93biBkdXJhdGlvbiBhcmd1bWVudCBcIiArIGR1cmF0aW9uaXNoICsgXCIgb2YgdHlwZSBcIiArIHR5cGVvZiBkdXJhdGlvbmlzaCk7XG4gIH1cbn1cblxudmFyIElOVkFMSUQkMSA9IFwiSW52YWxpZCBJbnRlcnZhbFwiOyAvLyBjaGVja3MgaWYgdGhlIHN0YXJ0IGlzIGVxdWFsIHRvIG9yIGJlZm9yZSB0aGUgZW5kXG5cbmZ1bmN0aW9uIHZhbGlkYXRlU3RhcnRFbmQoc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0IHx8ICFzdGFydC5pc1ZhbGlkKSB7XG4gICAgcmV0dXJuIEludGVydmFsLmludmFsaWQoXCJtaXNzaW5nIG9yIGludmFsaWQgc3RhcnRcIik7XG4gIH0gZWxzZSBpZiAoIWVuZCB8fCAhZW5kLmlzVmFsaWQpIHtcbiAgICByZXR1cm4gSW50ZXJ2YWwuaW52YWxpZChcIm1pc3Npbmcgb3IgaW52YWxpZCBlbmRcIik7XG4gIH0gZWxzZSBpZiAoZW5kIDwgc3RhcnQpIHtcbiAgICByZXR1cm4gSW50ZXJ2YWwuaW52YWxpZChcImVuZCBiZWZvcmUgc3RhcnRcIiwgXCJUaGUgZW5kIG9mIGFuIGludGVydmFsIG11c3QgYmUgYWZ0ZXIgaXRzIHN0YXJ0LCBidXQgeW91IGhhZCBzdGFydD1cIiArIHN0YXJ0LnRvSVNPKCkgKyBcIiBhbmQgZW5kPVwiICsgZW5kLnRvSVNPKCkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG4vKipcbiAqIEFuIEludGVydmFsIG9iamVjdCByZXByZXNlbnRzIGEgaGFsZi1vcGVuIGludGVydmFsIG9mIHRpbWUsIHdoZXJlIGVhY2ggZW5kcG9pbnQgaXMgYSB7QGxpbmsgRGF0ZVRpbWV9LiBDb25jZXB0dWFsbHksIGl0J3MgYSBjb250YWluZXIgZm9yIHRob3NlIHR3byBlbmRwb2ludHMsIGFjY29tcGFuaWVkIGJ5IG1ldGhvZHMgZm9yIGNyZWF0aW5nLCBwYXJzaW5nLCBpbnRlcnJvZ2F0aW5nLCBjb21wYXJpbmcsIHRyYW5zZm9ybWluZywgYW5kIGZvcm1hdHRpbmcgdGhlbS5cbiAqXG4gKiBIZXJlIGlzIGEgYnJpZWYgb3ZlcnZpZXcgb2YgdGhlIG1vc3QgY29tbW9ubHkgdXNlZCBtZXRob2RzIGFuZCBnZXR0ZXJzIGluIEludGVydmFsOlxuICpcbiAqICogKipDcmVhdGlvbioqIFRvIGNyZWF0ZSBhbiBJbnRlcnZhbCwgdXNlIHtAbGluayBmcm9tRGF0ZVRpbWVzfSwge0BsaW5rIGFmdGVyfSwge0BsaW5rIGJlZm9yZX0sIG9yIHtAbGluayBmcm9tSVNPfS5cbiAqICogKipBY2Nlc3NvcnMqKiBVc2Uge0BsaW5rIHN0YXJ0fSBhbmQge0BsaW5rIGVuZH0gdG8gZ2V0IHRoZSBzdGFydCBhbmQgZW5kLlxuICogKiAqKkludGVycm9nYXRpb24qKiBUbyBhbmFseXplIHRoZSBJbnRlcnZhbCwgdXNlIHtAbGluayBjb3VudH0sIHtAbGluayBsZW5ndGh9LCB7QGxpbmsgaGFzU2FtZX0sIHtAbGluayBjb250YWluc30sIHtAbGluayBpc0FmdGVyfSwgb3Ige0BsaW5rIGlzQmVmb3JlfS5cbiAqICogKipUcmFuc2Zvcm1hdGlvbioqIFRvIGNyZWF0ZSBvdGhlciBJbnRlcnZhbHMgb3V0IG9mIHRoaXMgb25lLCB1c2Uge0BsaW5rIHNldH0sIHtAbGluayBzcGxpdEF0fSwge0BsaW5rIHNwbGl0Qnl9LCB7QGxpbmsgZGl2aWRlRXF1YWxseX0sIHtAbGluayBtZXJnZX0sIHtAbGluayB4b3J9LCB7QGxpbmsgdW5pb259LCB7QGxpbmsgaW50ZXJzZWN0aW9ufSwgb3Ige0BsaW5rIGRpZmZlcmVuY2V9LlxuICogKiAqKkNvbXBhcmlzb24qKiBUbyBjb21wYXJlIHRoaXMgSW50ZXJ2YWwgdG8gYW5vdGhlciBvbmUsIHVzZSB7QGxpbmsgZXF1YWxzfSwge0BsaW5rIG92ZXJsYXBzfSwge0BsaW5rIGFidXRzU3RhcnR9LCB7QGxpbmsgYWJ1dHNFbmR9LCB7QGxpbmsgZW5ndWxmc30uXG4gKiAqICoqT3V0cHV0KiogVG8gY29udmVydCB0aGUgSW50ZXJ2YWwgaW50byBvdGhlciByZXByZXNlbnRhdGlvbnMsIHNlZSB7QGxpbmsgdG9TdHJpbmd9LCB7QGxpbmsgdG9JU099LCB7QGxpbmsgdG9JU09EYXRlfSwge0BsaW5rIHRvSVNPVGltZX0sIHtAbGluayB0b0Zvcm1hdH0sIGFuZCB7QGxpbmsgdG9EdXJhdGlvbn0uXG4gKi9cblxuXG52YXIgSW50ZXJ2YWwgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIEludGVydmFsKGNvbmZpZykge1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMucyA9IGNvbmZpZy5zdGFydDtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMuZSA9IGNvbmZpZy5lbmQ7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG5cbiAgICB0aGlzLmludmFsaWQgPSBjb25maWcuaW52YWxpZCB8fCBudWxsO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgdGhpcy5pc0x1eG9uSW50ZXJ2YWwgPSB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW52YWxpZCBJbnRlcnZhbC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiAtIHNpbXBsZSBzdHJpbmcgb2Ygd2h5IHRoaXMgSW50ZXJ2YWwgaXMgaW52YWxpZC4gU2hvdWxkIG5vdCBjb250YWluIHBhcmFtZXRlcnMgb3IgYW55dGhpbmcgZWxzZSBkYXRhLWRlcGVuZGVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2V4cGxhbmF0aW9uPW51bGxdIC0gbG9uZ2VyIGV4cGxhbmF0aW9uLCBtYXkgaW5jbHVkZSBwYXJhbWV0ZXJzIGFuZCBvdGhlciB1c2VmdWwgZGVidWdnaW5nIGluZm9ybWF0aW9uXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKi9cblxuXG4gIEludGVydmFsLmludmFsaWQgPSBmdW5jdGlvbiBpbnZhbGlkKHJlYXNvbiwgZXhwbGFuYXRpb24pIHtcbiAgICBpZiAoZXhwbGFuYXRpb24gPT09IHZvaWQgMCkge1xuICAgICAgZXhwbGFuYXRpb24gPSBudWxsO1xuICAgIH1cblxuICAgIGlmICghcmVhc29uKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXCJuZWVkIHRvIHNwZWNpZnkgYSByZWFzb24gdGhlIEludGVydmFsIGlzIGludmFsaWRcIik7XG4gICAgfVxuXG4gICAgdmFyIGludmFsaWQgPSByZWFzb24gaW5zdGFuY2VvZiBJbnZhbGlkID8gcmVhc29uIDogbmV3IEludmFsaWQocmVhc29uLCBleHBsYW5hdGlvbik7XG5cbiAgICBpZiAoU2V0dGluZ3MudGhyb3dPbkludmFsaWQpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkSW50ZXJ2YWxFcnJvcihpbnZhbGlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBJbnRlcnZhbCh7XG4gICAgICAgIGludmFsaWQ6IGludmFsaWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuIEludGVydmFsIGZyb20gYSBzdGFydCBEYXRlVGltZSBhbmQgYW4gZW5kIERhdGVUaW1lLiBJbmNsdXNpdmUgb2YgdGhlIHN0YXJ0IGJ1dCBub3QgdGhlIGVuZC5cbiAgICogQHBhcmFtIHtEYXRlVGltZXxEYXRlfE9iamVjdH0gc3RhcnRcbiAgICogQHBhcmFtIHtEYXRlVGltZXxEYXRlfE9iamVjdH0gZW5kXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKi9cbiAgO1xuXG4gIEludGVydmFsLmZyb21EYXRlVGltZXMgPSBmdW5jdGlvbiBmcm9tRGF0ZVRpbWVzKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgYnVpbHRTdGFydCA9IGZyaWVuZGx5RGF0ZVRpbWUoc3RhcnQpLFxuICAgICAgICBidWlsdEVuZCA9IGZyaWVuZGx5RGF0ZVRpbWUoZW5kKTtcbiAgICB2YXIgdmFsaWRhdGVFcnJvciA9IHZhbGlkYXRlU3RhcnRFbmQoYnVpbHRTdGFydCwgYnVpbHRFbmQpO1xuXG4gICAgaWYgKHZhbGlkYXRlRXJyb3IgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5ldyBJbnRlcnZhbCh7XG4gICAgICAgIHN0YXJ0OiBidWlsdFN0YXJ0LFxuICAgICAgICBlbmQ6IGJ1aWx0RW5kXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZhbGlkYXRlRXJyb3I7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gSW50ZXJ2YWwgZnJvbSBhIHN0YXJ0IERhdGVUaW1lIGFuZCBhIER1cmF0aW9uIHRvIGV4dGVuZCB0by5cbiAgICogQHBhcmFtIHtEYXRlVGltZXxEYXRlfE9iamVjdH0gc3RhcnRcbiAgICogQHBhcmFtIHtEdXJhdGlvbnxPYmplY3R8bnVtYmVyfSBkdXJhdGlvbiAtIHRoZSBsZW5ndGggb2YgdGhlIEludGVydmFsLlxuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG4gIDtcblxuICBJbnRlcnZhbC5hZnRlciA9IGZ1bmN0aW9uIGFmdGVyKHN0YXJ0LCBkdXJhdGlvbikge1xuICAgIHZhciBkdXIgPSBmcmllbmRseUR1cmF0aW9uKGR1cmF0aW9uKSxcbiAgICAgICAgZHQgPSBmcmllbmRseURhdGVUaW1lKHN0YXJ0KTtcbiAgICByZXR1cm4gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhkdCwgZHQucGx1cyhkdXIpKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuIEludGVydmFsIGZyb20gYW4gZW5kIERhdGVUaW1lIGFuZCBhIER1cmF0aW9uIHRvIGV4dGVuZCBiYWNrd2FyZHMgdG8uXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV8RGF0ZXxPYmplY3R9IGVuZFxuICAgKiBAcGFyYW0ge0R1cmF0aW9ufE9iamVjdHxudW1iZXJ9IGR1cmF0aW9uIC0gdGhlIGxlbmd0aCBvZiB0aGUgSW50ZXJ2YWwuXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKi9cbiAgO1xuXG4gIEludGVydmFsLmJlZm9yZSA9IGZ1bmN0aW9uIGJlZm9yZShlbmQsIGR1cmF0aW9uKSB7XG4gICAgdmFyIGR1ciA9IGZyaWVuZGx5RHVyYXRpb24oZHVyYXRpb24pLFxuICAgICAgICBkdCA9IGZyaWVuZGx5RGF0ZVRpbWUoZW5kKTtcbiAgICByZXR1cm4gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhkdC5taW51cyhkdXIpLCBkdCk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBJbnRlcnZhbCBmcm9tIGFuIElTTyA4NjAxIHN0cmluZy5cbiAgICogQWNjZXB0cyBgPHN0YXJ0Pi88ZW5kPmAsIGA8c3RhcnQ+LzxkdXJhdGlvbj5gLCBhbmQgYDxkdXJhdGlvbj4vPGVuZD5gIGZvcm1hdHMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIElTTyBzdHJpbmcgdG8gcGFyc2VcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzXSAtIG9wdGlvbnMgdG8gcGFzcyB7QGxpbmsgRGF0ZVRpbWUuZnJvbUlTT30gYW5kIG9wdGlvbmFsbHkge0BsaW5rIER1cmF0aW9uLmZyb21JU099XG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjVGltZV9pbnRlcnZhbHNcbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqL1xuICA7XG5cbiAgSW50ZXJ2YWwuZnJvbUlTTyA9IGZ1bmN0aW9uIGZyb21JU08odGV4dCwgb3B0cykge1xuICAgIHZhciBfc3BsaXQgPSAodGV4dCB8fCBcIlwiKS5zcGxpdChcIi9cIiwgMiksXG4gICAgICAgIHMgPSBfc3BsaXRbMF0sXG4gICAgICAgIGUgPSBfc3BsaXRbMV07XG5cbiAgICBpZiAocyAmJiBlKSB7XG4gICAgICB2YXIgc3RhcnQsIHN0YXJ0SXNWYWxpZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgc3RhcnQgPSBEYXRlVGltZS5mcm9tSVNPKHMsIG9wdHMpO1xuICAgICAgICBzdGFydElzVmFsaWQgPSBzdGFydC5pc1ZhbGlkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBzdGFydElzVmFsaWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVuZCwgZW5kSXNWYWxpZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZW5kID0gRGF0ZVRpbWUuZnJvbUlTTyhlLCBvcHRzKTtcbiAgICAgICAgZW5kSXNWYWxpZCA9IGVuZC5pc1ZhbGlkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBlbmRJc1ZhbGlkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGFydElzVmFsaWQgJiYgZW5kSXNWYWxpZCkge1xuICAgICAgICByZXR1cm4gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzdGFydCwgZW5kKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXJ0SXNWYWxpZCkge1xuICAgICAgICB2YXIgZHVyID0gRHVyYXRpb24uZnJvbUlTTyhlLCBvcHRzKTtcblxuICAgICAgICBpZiAoZHVyLmlzVmFsaWQpIHtcbiAgICAgICAgICByZXR1cm4gSW50ZXJ2YWwuYWZ0ZXIoc3RhcnQsIGR1cik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZW5kSXNWYWxpZCkge1xuICAgICAgICB2YXIgX2R1ciA9IER1cmF0aW9uLmZyb21JU08ocywgb3B0cyk7XG5cbiAgICAgICAgaWYgKF9kdXIuaXNWYWxpZCkge1xuICAgICAgICAgIHJldHVybiBJbnRlcnZhbC5iZWZvcmUoZW5kLCBfZHVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBJbnRlcnZhbC5pbnZhbGlkKFwidW5wYXJzYWJsZVwiLCBcInRoZSBpbnB1dCBcXFwiXCIgKyB0ZXh0ICsgXCJcXFwiIGNhbid0IGJlIHBhcnNlZCBhcyBJU08gODYwMVwiKTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gb2JqZWN0IGlzIGFuIEludGVydmFsLiBXb3JrcyBhY3Jvc3MgY29udGV4dCBib3VuZGFyaWVzXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICA7XG5cbiAgSW50ZXJ2YWwuaXNJbnRlcnZhbCA9IGZ1bmN0aW9uIGlzSW50ZXJ2YWwobykge1xuICAgIHJldHVybiBvICYmIG8uaXNMdXhvbkludGVydmFsIHx8IGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzdGFydCBvZiB0aGUgSW50ZXJ2YWxcbiAgICogQHR5cGUge0RhdGVUaW1lfVxuICAgKi9cbiAgO1xuXG4gIHZhciBfcHJvdG8gPSBJbnRlcnZhbC5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUgSW50ZXJ2YWwgaW4gdGhlIHNwZWNpZmllZCB1bml0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIHRoZSB1bml0IChzdWNoIGFzICdob3Vycycgb3IgJ2RheXMnKSB0byByZXR1cm4gdGhlIGxlbmd0aCBpbi5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgX3Byb3RvLmxlbmd0aCA9IGZ1bmN0aW9uIGxlbmd0aCh1bml0KSB7XG4gICAgaWYgKHVuaXQgPT09IHZvaWQgMCkge1xuICAgICAgdW5pdCA9IFwibWlsbGlzZWNvbmRzXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudG9EdXJhdGlvbi5hcHBseSh0aGlzLCBbdW5pdF0pLmdldCh1bml0KSA6IE5hTjtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY291bnQgb2YgbWludXRlcywgaG91cnMsIGRheXMsIG1vbnRocywgb3IgeWVhcnMgaW5jbHVkZWQgaW4gdGhlIEludGVydmFsLCBldmVuIGluIHBhcnQuXG4gICAqIFVubGlrZSB7QGxpbmsgbGVuZ3RofSB0aGlzIGNvdW50cyBzZWN0aW9ucyBvZiB0aGUgY2FsZW5kYXIsIG5vdCBwZXJpb2RzIG9mIHRpbWUsIGUuZy4gc3BlY2lmeWluZyAnZGF5J1xuICAgKiBhc2tzICd3aGF0IGRhdGVzIGFyZSBpbmNsdWRlZCBpbiB0aGlzIGludGVydmFsPycsIG5vdCAnaG93IG1hbnkgZGF5cyBsb25nIGlzIHRoaXMgaW50ZXJ2YWw/J1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW3VuaXQ9J21pbGxpc2Vjb25kcyddIC0gdGhlIHVuaXQgb2YgdGltZSB0byBjb3VudC5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jb3VudCA9IGZ1bmN0aW9uIGNvdW50KHVuaXQpIHtcbiAgICBpZiAodW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgICB1bml0ID0gXCJtaWxsaXNlY29uZHNcIjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIE5hTjtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLnN0YXJ0LnN0YXJ0T2YodW5pdCksXG4gICAgICAgIGVuZCA9IHRoaXMuZW5kLnN0YXJ0T2YodW5pdCk7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoZW5kLmRpZmYoc3RhcnQsIHVuaXQpLmdldCh1bml0KSkgKyAxO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCdzIHN0YXJ0IGFuZCBlbmQgYXJlIGJvdGggaW4gdGhlIHNhbWUgdW5pdCBvZiB0aW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1bml0IC0gdGhlIHVuaXQgb2YgdGltZSB0byBjaGVjayBzYW1lbmVzcyBvblxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYXNTYW1lID0gZnVuY3Rpb24gaGFzU2FtZSh1bml0KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuaXNFbXB0eSgpIHx8IHRoaXMuZS5taW51cygxKS5oYXNTYW1lKHRoaXMucywgdW5pdCkgOiBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCBoYXMgdGhlIHNhbWUgc3RhcnQgYW5kIGVuZCBEYXRlVGltZXMuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmlzRW1wdHkgPSBmdW5jdGlvbiBpc0VtcHR5KCkge1xuICAgIHJldHVybiB0aGlzLnMudmFsdWVPZigpID09PSB0aGlzLmUudmFsdWVPZigpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsJ3Mgc3RhcnQgaXMgYWZ0ZXIgdGhlIHNwZWNpZmllZCBEYXRlVGltZS5cbiAgICogQHBhcmFtIHtEYXRlVGltZX0gZGF0ZVRpbWVcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaXNBZnRlciA9IGZ1bmN0aW9uIGlzQWZ0ZXIoZGF0ZVRpbWUpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0aGlzLnMgPiBkYXRlVGltZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCdzIGVuZCBpcyBiZWZvcmUgdGhlIHNwZWNpZmllZCBEYXRlVGltZS5cbiAgICogQHBhcmFtIHtEYXRlVGltZX0gZGF0ZVRpbWVcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaXNCZWZvcmUgPSBmdW5jdGlvbiBpc0JlZm9yZShkYXRlVGltZSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXMuZSA8PSBkYXRlVGltZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCBjb250YWlucyB0aGUgc3BlY2lmaWVkIERhdGVUaW1lLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBkYXRlVGltZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jb250YWlucyA9IGZ1bmN0aW9uIGNvbnRhaW5zKGRhdGVUaW1lKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5zIDw9IGRhdGVUaW1lICYmIHRoaXMuZSA+IGRhdGVUaW1lO1xuICB9XG4gIC8qKlxuICAgKiBcIlNldHNcIiB0aGUgc3RhcnQgYW5kL29yIGVuZCBkYXRlcy4gUmV0dXJucyBhIG5ld2x5LWNvbnN0cnVjdGVkIEludGVydmFsLlxuICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWVzIC0gdGhlIHZhbHVlcyB0byBzZXRcbiAgICogQHBhcmFtIHtEYXRlVGltZX0gdmFsdWVzLnN0YXJ0IC0gdGhlIHN0YXJ0aW5nIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV9IHZhbHVlcy5lbmQgLSB0aGUgZW5kaW5nIERhdGVUaW1lXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXQgPSBmdW5jdGlvbiBzZXQoX3RlbXApIHtcbiAgICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgICBzdGFydCA9IF9yZWYuc3RhcnQsXG4gICAgICAgIGVuZCA9IF9yZWYuZW5kO1xuXG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHN0YXJ0IHx8IHRoaXMucywgZW5kIHx8IHRoaXMuZSk7XG4gIH1cbiAgLyoqXG4gICAqIFNwbGl0IHRoaXMgSW50ZXJ2YWwgYXQgZWFjaCBvZiB0aGUgc3BlY2lmaWVkIERhdGVUaW1lc1xuICAgKiBAcGFyYW0gey4uLltEYXRlVGltZV19IGRhdGVUaW1lcyAtIHRoZSB1bml0IG9mIHRpbWUgdG8gY291bnQuXG4gICAqIEByZXR1cm4ge1tJbnRlcnZhbF19XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNwbGl0QXQgPSBmdW5jdGlvbiBzcGxpdEF0KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIFtdO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGRhdGVUaW1lcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGRhdGVUaW1lc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgc29ydGVkID0gZGF0ZVRpbWVzLm1hcChmcmllbmRseURhdGVUaW1lKS5maWx0ZXIoZnVuY3Rpb24gKGQpIHtcbiAgICAgIHJldHVybiBfdGhpcy5jb250YWlucyhkKTtcbiAgICB9KS5zb3J0KCksXG4gICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICB2YXIgcyA9IHRoaXMucyxcbiAgICAgICAgaSA9IDA7XG5cbiAgICB3aGlsZSAocyA8IHRoaXMuZSkge1xuICAgICAgdmFyIGFkZGVkID0gc29ydGVkW2ldIHx8IHRoaXMuZSxcbiAgICAgICAgICBuZXh0ID0gK2FkZGVkID4gK3RoaXMuZSA/IHRoaXMuZSA6IGFkZGVkO1xuICAgICAgcmVzdWx0cy5wdXNoKEludGVydmFsLmZyb21EYXRlVGltZXMocywgbmV4dCkpO1xuICAgICAgcyA9IG5leHQ7XG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH1cbiAgLyoqXG4gICAqIFNwbGl0IHRoaXMgSW50ZXJ2YWwgaW50byBzbWFsbGVyIEludGVydmFscywgZWFjaCBvZiB0aGUgc3BlY2lmaWVkIGxlbmd0aC5cbiAgICogTGVmdCBvdmVyIHRpbWUgaXMgZ3JvdXBlZCBpbnRvIGEgc21hbGxlciBpbnRlcnZhbFxuICAgKiBAcGFyYW0ge0R1cmF0aW9ufE9iamVjdHxudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGxlbmd0aCBvZiBlYWNoIHJlc3VsdGluZyBpbnRlcnZhbC5cbiAgICogQHJldHVybiB7W0ludGVydmFsXX1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc3BsaXRCeSA9IGZ1bmN0aW9uIHNwbGl0QnkoZHVyYXRpb24pIHtcbiAgICB2YXIgZHVyID0gZnJpZW5kbHlEdXJhdGlvbihkdXJhdGlvbik7XG5cbiAgICBpZiAoIXRoaXMuaXNWYWxpZCB8fCAhZHVyLmlzVmFsaWQgfHwgZHVyLmFzKFwibWlsbGlzZWNvbmRzXCIpID09PSAwKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgdmFyIHMgPSB0aGlzLnMsXG4gICAgICAgIGFkZGVkLFxuICAgICAgICBuZXh0O1xuICAgIHZhciByZXN1bHRzID0gW107XG5cbiAgICB3aGlsZSAocyA8IHRoaXMuZSkge1xuICAgICAgYWRkZWQgPSBzLnBsdXMoZHVyKTtcbiAgICAgIG5leHQgPSArYWRkZWQgPiArdGhpcy5lID8gdGhpcy5lIDogYWRkZWQ7XG4gICAgICByZXN1bHRzLnB1c2goSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzLCBuZXh0KSk7XG4gICAgICBzID0gbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfVxuICAvKipcbiAgICogU3BsaXQgdGhpcyBJbnRlcnZhbCBpbnRvIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIHNtYWxsZXIgaW50ZXJ2YWxzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyT2ZQYXJ0cyAtIFRoZSBudW1iZXIgb2YgSW50ZXJ2YWxzIHRvIGRpdmlkZSB0aGUgSW50ZXJ2YWwgaW50by5cbiAgICogQHJldHVybiB7W0ludGVydmFsXX1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGl2aWRlRXF1YWxseSA9IGZ1bmN0aW9uIGRpdmlkZUVxdWFsbHkobnVtYmVyT2ZQYXJ0cykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gW107XG4gICAgcmV0dXJuIHRoaXMuc3BsaXRCeSh0aGlzLmxlbmd0aCgpIC8gbnVtYmVyT2ZQYXJ0cykuc2xpY2UoMCwgbnVtYmVyT2ZQYXJ0cyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwgb3ZlcmxhcHMgd2l0aCB0aGUgc3BlY2lmaWVkIEludGVydmFsXG4gICAqIEBwYXJhbSB7SW50ZXJ2YWx9IG90aGVyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm92ZXJsYXBzID0gZnVuY3Rpb24gb3ZlcmxhcHMob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy5lID4gb3RoZXIucyAmJiB0aGlzLnMgPCBvdGhlci5lO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsJ3MgZW5kIGlzIGFkamFjZW50IHRvIHRoZSBzcGVjaWZpZWQgSW50ZXJ2YWwncyBzdGFydC5cbiAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWJ1dHNTdGFydCA9IGZ1bmN0aW9uIGFidXRzU3RhcnQob3RoZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiArdGhpcy5lID09PSArb3RoZXIucztcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCdzIHN0YXJ0IGlzIGFkamFjZW50IHRvIHRoZSBzcGVjaWZpZWQgSW50ZXJ2YWwncyBlbmQuXG4gICAqIEBwYXJhbSB7SW50ZXJ2YWx9IG90aGVyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFidXRzRW5kID0gZnVuY3Rpb24gYWJ1dHNFbmQob3RoZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiArb3RoZXIuZSA9PT0gK3RoaXMucztcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCBlbmd1bGZzIHRoZSBzdGFydCBhbmQgZW5kIG9mIHRoZSBzcGVjaWZpZWQgSW50ZXJ2YWwuXG4gICAqIEBwYXJhbSB7SW50ZXJ2YWx9IG90aGVyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmVuZ3VsZnMgPSBmdW5jdGlvbiBlbmd1bGZzKG90aGVyKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5zIDw9IG90aGVyLnMgJiYgdGhpcy5lID49IG90aGVyLmU7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwgaGFzIHRoZSBzYW1lIHN0YXJ0IGFuZCBlbmQgYXMgdGhlIHNwZWNpZmllZCBJbnRlcnZhbC5cbiAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzKG90aGVyKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQgfHwgIW90aGVyLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zLmVxdWFscyhvdGhlci5zKSAmJiB0aGlzLmUuZXF1YWxzKG90aGVyLmUpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gSW50ZXJ2YWwgcmVwcmVzZW50aW5nIHRoZSBpbnRlcnNlY3Rpb24gb2YgdGhpcyBJbnRlcnZhbCBhbmQgdGhlIHNwZWNpZmllZCBJbnRlcnZhbC5cbiAgICogU3BlY2lmaWNhbGx5LCB0aGUgcmVzdWx0aW5nIEludGVydmFsIGhhcyB0aGUgbWF4aW11bSBzdGFydCB0aW1lIGFuZCB0aGUgbWluaW11bSBlbmQgdGltZSBvZiB0aGUgdHdvIEludGVydmFscy5cbiAgICogUmV0dXJucyBudWxsIGlmIHRoZSBpbnRlcnNlY3Rpb24gaXMgZW1wdHksIG1lYW5pbmcsIHRoZSBpbnRlcnZhbHMgZG9uJ3QgaW50ZXJzZWN0LlxuICAgKiBAcGFyYW0ge0ludGVydmFsfSBvdGhlclxuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW50ZXJzZWN0aW9uID0gZnVuY3Rpb24gaW50ZXJzZWN0aW9uKG90aGVyKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuICAgIHZhciBzID0gdGhpcy5zID4gb3RoZXIucyA/IHRoaXMucyA6IG90aGVyLnMsXG4gICAgICAgIGUgPSB0aGlzLmUgPCBvdGhlci5lID8gdGhpcy5lIDogb3RoZXIuZTtcblxuICAgIGlmIChzID4gZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHMsIGUpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGFuIEludGVydmFsIHJlcHJlc2VudGluZyB0aGUgdW5pb24gb2YgdGhpcyBJbnRlcnZhbCBhbmQgdGhlIHNwZWNpZmllZCBJbnRlcnZhbC5cbiAgICogU3BlY2lmaWNhbGx5LCB0aGUgcmVzdWx0aW5nIEludGVydmFsIGhhcyB0aGUgbWluaW11bSBzdGFydCB0aW1lIGFuZCB0aGUgbWF4aW11bSBlbmQgdGltZSBvZiB0aGUgdHdvIEludGVydmFscy5cbiAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXJcbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVuaW9uID0gZnVuY3Rpb24gdW5pb24ob3RoZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgdmFyIHMgPSB0aGlzLnMgPCBvdGhlci5zID8gdGhpcy5zIDogb3RoZXIucyxcbiAgICAgICAgZSA9IHRoaXMuZSA+IG90aGVyLmUgPyB0aGlzLmUgOiBvdGhlci5lO1xuICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHMsIGUpO1xuICB9XG4gIC8qKlxuICAgKiBNZXJnZSBhbiBhcnJheSBvZiBJbnRlcnZhbHMgaW50byBhIGVxdWl2YWxlbnQgbWluaW1hbCBzZXQgb2YgSW50ZXJ2YWxzLlxuICAgKiBDb21iaW5lcyBvdmVybGFwcGluZyBhbmQgYWRqYWNlbnQgSW50ZXJ2YWxzLlxuICAgKiBAcGFyYW0ge1tJbnRlcnZhbF19IGludGVydmFsc1xuICAgKiBAcmV0dXJuIHtbSW50ZXJ2YWxdfVxuICAgKi9cbiAgO1xuXG4gIEludGVydmFsLm1lcmdlID0gZnVuY3Rpb24gbWVyZ2UoaW50ZXJ2YWxzKSB7XG4gICAgdmFyIF9pbnRlcnZhbHMkc29ydCRyZWR1YyA9IGludGVydmFscy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYS5zIC0gYi5zO1xuICAgIH0pLnJlZHVjZShmdW5jdGlvbiAoX3JlZjIsIGl0ZW0pIHtcbiAgICAgIHZhciBzb2ZhciA9IF9yZWYyWzBdLFxuICAgICAgICAgIGN1cnJlbnQgPSBfcmVmMlsxXTtcblxuICAgICAgaWYgKCFjdXJyZW50KSB7XG4gICAgICAgIHJldHVybiBbc29mYXIsIGl0ZW1dO1xuICAgICAgfSBlbHNlIGlmIChjdXJyZW50Lm92ZXJsYXBzKGl0ZW0pIHx8IGN1cnJlbnQuYWJ1dHNTdGFydChpdGVtKSkge1xuICAgICAgICByZXR1cm4gW3NvZmFyLCBjdXJyZW50LnVuaW9uKGl0ZW0pXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbc29mYXIuY29uY2F0KFtjdXJyZW50XSksIGl0ZW1dO1xuICAgICAgfVxuICAgIH0sIFtbXSwgbnVsbF0pLFxuICAgICAgICBmb3VuZCA9IF9pbnRlcnZhbHMkc29ydCRyZWR1Y1swXSxcbiAgICAgICAgZmluYWwgPSBfaW50ZXJ2YWxzJHNvcnQkcmVkdWNbMV07XG5cbiAgICBpZiAoZmluYWwpIHtcbiAgICAgIGZvdW5kLnB1c2goZmluYWwpO1xuICAgIH1cblxuICAgIHJldHVybiBmb3VuZDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGFuIGFycmF5IG9mIEludGVydmFscyByZXByZXNlbnRpbmcgdGhlIHNwYW5zIG9mIHRpbWUgdGhhdCBvbmx5IGFwcGVhciBpbiBvbmUgb2YgdGhlIHNwZWNpZmllZCBJbnRlcnZhbHMuXG4gICAqIEBwYXJhbSB7W0ludGVydmFsXX0gaW50ZXJ2YWxzXG4gICAqIEByZXR1cm4ge1tJbnRlcnZhbF19XG4gICAqL1xuICA7XG5cbiAgSW50ZXJ2YWwueG9yID0gZnVuY3Rpb24geG9yKGludGVydmFscykge1xuICAgIHZhciBfQXJyYXkkcHJvdG90eXBlO1xuXG4gICAgdmFyIHN0YXJ0ID0gbnVsbCxcbiAgICAgICAgY3VycmVudENvdW50ID0gMDtcblxuICAgIHZhciByZXN1bHRzID0gW10sXG4gICAgICAgIGVuZHMgPSBpbnRlcnZhbHMubWFwKGZ1bmN0aW9uIChpKSB7XG4gICAgICByZXR1cm4gW3tcbiAgICAgICAgdGltZTogaS5zLFxuICAgICAgICB0eXBlOiBcInNcIlxuICAgICAgfSwge1xuICAgICAgICB0aW1lOiBpLmUsXG4gICAgICAgIHR5cGU6IFwiZVwiXG4gICAgICB9XTtcbiAgICB9KSxcbiAgICAgICAgZmxhdHRlbmVkID0gKF9BcnJheSRwcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGUpLmNvbmNhdC5hcHBseShfQXJyYXkkcHJvdG90eXBlLCBlbmRzKSxcbiAgICAgICAgYXJyID0gZmxhdHRlbmVkLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLnRpbWUgLSBiLnRpbWU7XG4gICAgfSk7XG5cbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlKGFyciksIF9zdGVwOyAhKF9zdGVwID0gX2l0ZXJhdG9yKCkpLmRvbmU7KSB7XG4gICAgICB2YXIgaSA9IF9zdGVwLnZhbHVlO1xuICAgICAgY3VycmVudENvdW50ICs9IGkudHlwZSA9PT0gXCJzXCIgPyAxIDogLTE7XG5cbiAgICAgIGlmIChjdXJyZW50Q291bnQgPT09IDEpIHtcbiAgICAgICAgc3RhcnQgPSBpLnRpbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc3RhcnQgJiYgK3N0YXJ0ICE9PSAraS50aW1lKSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKEludGVydmFsLmZyb21EYXRlVGltZXMoc3RhcnQsIGkudGltZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBJbnRlcnZhbC5tZXJnZShyZXN1bHRzKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGFuIEludGVydmFsIHJlcHJlc2VudGluZyB0aGUgc3BhbiBvZiB0aW1lIGluIHRoaXMgSW50ZXJ2YWwgdGhhdCBkb2Vzbid0IG92ZXJsYXAgd2l0aCBhbnkgb2YgdGhlIHNwZWNpZmllZCBJbnRlcnZhbHMuXG4gICAqIEBwYXJhbSB7Li4uSW50ZXJ2YWx9IGludGVydmFsc1xuICAgKiBAcmV0dXJuIHtbSW50ZXJ2YWxdfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kaWZmZXJlbmNlID0gZnVuY3Rpb24gZGlmZmVyZW5jZSgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgaW50ZXJ2YWxzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBpbnRlcnZhbHNbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICByZXR1cm4gSW50ZXJ2YWwueG9yKFt0aGlzXS5jb25jYXQoaW50ZXJ2YWxzKSkubWFwKGZ1bmN0aW9uIChpKSB7XG4gICAgICByZXR1cm4gX3RoaXMyLmludGVyc2VjdGlvbihpKTtcbiAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICAgIHJldHVybiBpICYmICFpLmlzRW1wdHkoKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIEludGVydmFsIGFwcHJvcHJpYXRlIGZvciBkZWJ1Z2dpbmcuXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIElOVkFMSUQkMTtcbiAgICByZXR1cm4gXCJbXCIgKyB0aGlzLnMudG9JU08oKSArIFwiIFxcdTIwMTMgXCIgKyB0aGlzLmUudG9JU08oKSArIFwiKVwiO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxLWNvbXBsaWFudCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBJbnRlcnZhbC5cbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSNUaW1lX2ludGVydmFsc1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIFRoZSBzYW1lIG9wdGlvbnMgYXMge0BsaW5rIERhdGVUaW1lLnRvSVNPfVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvSVNPID0gZnVuY3Rpb24gdG9JU08ob3B0cykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gSU5WQUxJRCQxO1xuICAgIHJldHVybiB0aGlzLnMudG9JU08ob3B0cykgKyBcIi9cIiArIHRoaXMuZS50b0lTTyhvcHRzKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGRhdGUgb2YgdGhpcyBJbnRlcnZhbC5cbiAgICogVGhlIHRpbWUgY29tcG9uZW50cyBhcmUgaWdub3JlZC5cbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSNUaW1lX2ludGVydmFsc1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvSVNPRGF0ZSA9IGZ1bmN0aW9uIHRvSVNPRGF0ZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIElOVkFMSUQkMTtcbiAgICByZXR1cm4gdGhpcy5zLnRvSVNPRGF0ZSgpICsgXCIvXCIgKyB0aGlzLmUudG9JU09EYXRlKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aW1lIG9mIHRoaXMgSW50ZXJ2YWwuXG4gICAqIFRoZSBkYXRlIGNvbXBvbmVudHMgYXJlIGlnbm9yZWQuXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjVGltZV9pbnRlcnZhbHNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBUaGUgc2FtZSBvcHRpb25zIGFzIHtAbGluayBEYXRlVGltZS50b0lTT31cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b0lTT1RpbWUgPSBmdW5jdGlvbiB0b0lTT1RpbWUob3B0cykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gSU5WQUxJRCQxO1xuICAgIHJldHVybiB0aGlzLnMudG9JU09UaW1lKG9wdHMpICsgXCIvXCIgKyB0aGlzLmUudG9JU09UaW1lKG9wdHMpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgSW50ZXJ2YWwgZm9ybWF0dGVkIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGZvcm1hdCBzdHJpbmcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRlRm9ybWF0IC0gdGhlIGZvcm1hdCBzdHJpbmcuIFRoaXMgc3RyaW5nIGZvcm1hdHMgdGhlIHN0YXJ0IGFuZCBlbmQgdGltZS4gU2VlIHtAbGluayBEYXRlVGltZS50b0Zvcm1hdH0gZm9yIGRldGFpbHMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuc2VwYXJhdG9yID0gICcg4oCTICddIC0gYSBzZXBhcmF0b3IgdG8gcGxhY2UgYmV0d2VlbiB0aGUgc3RhcnQgYW5kIGVuZCByZXByZXNlbnRhdGlvbnNcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b0Zvcm1hdCA9IGZ1bmN0aW9uIHRvRm9ybWF0KGRhdGVGb3JtYXQsIF90ZW1wMikge1xuICAgIHZhciBfcmVmMyA9IF90ZW1wMiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDIsXG4gICAgICAgIF9yZWYzJHNlcGFyYXRvciA9IF9yZWYzLnNlcGFyYXRvcixcbiAgICAgICAgc2VwYXJhdG9yID0gX3JlZjMkc2VwYXJhdG9yID09PSB2b2lkIDAgPyBcIiDigJMgXCIgOiBfcmVmMyRzZXBhcmF0b3I7XG5cbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIElOVkFMSUQkMTtcbiAgICByZXR1cm4gXCJcIiArIHRoaXMucy50b0Zvcm1hdChkYXRlRm9ybWF0KSArIHNlcGFyYXRvciArIHRoaXMuZS50b0Zvcm1hdChkYXRlRm9ybWF0KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGEgRHVyYXRpb24gcmVwcmVzZW50aW5nIHRoZSB0aW1lIHNwYW5uZWQgYnkgdGhpcyBpbnRlcnZhbC5cbiAgICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IFt1bml0PVsnbWlsbGlzZWNvbmRzJ11dIC0gdGhlIHVuaXQgb3IgdW5pdHMgKHN1Y2ggYXMgJ2hvdXJzJyBvciAnZGF5cycpIHRvIGluY2x1ZGUgaW4gdGhlIGR1cmF0aW9uLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgdGhhdCBhZmZlY3QgdGhlIGNyZWF0aW9uIG9mIHRoZSBEdXJhdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2VcbiAgICogQGV4YW1wbGUgSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhkdDEsIGR0MikudG9EdXJhdGlvbigpLnRvT2JqZWN0KCkgLy89PiB7IG1pbGxpc2Vjb25kczogODg0ODkyNTcgfVxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0MSwgZHQyKS50b0R1cmF0aW9uKCdkYXlzJykudG9PYmplY3QoKSAvLz0+IHsgZGF5czogMS4wMjQxODEyMTUyNzc3Nzc4IH1cbiAgICogQGV4YW1wbGUgSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhkdDEsIGR0MikudG9EdXJhdGlvbihbJ2hvdXJzJywgJ21pbnV0ZXMnXSkudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDI0LCBtaW51dGVzOiAzNC44MjA5NSB9XG4gICAqIEBleGFtcGxlIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQxLCBkdDIpLnRvRHVyYXRpb24oWydob3VycycsICdtaW51dGVzJywgJ3NlY29uZHMnXSkudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDI0LCBtaW51dGVzOiAzNCwgc2Vjb25kczogNDkuMjU3IH1cbiAgICogQGV4YW1wbGUgSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhkdDEsIGR0MikudG9EdXJhdGlvbignc2Vjb25kcycpLnRvT2JqZWN0KCkgLy89PiB7IHNlY29uZHM6IDg4NDg5LjI1NyB9XG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b0R1cmF0aW9uID0gZnVuY3Rpb24gdG9EdXJhdGlvbih1bml0LCBvcHRzKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBEdXJhdGlvbi5pbnZhbGlkKHRoaXMuaW52YWxpZFJlYXNvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZS5kaWZmKHRoaXMucywgdW5pdCwgb3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIFJ1biBtYXBGbiBvbiB0aGUgaW50ZXJ2YWwgc3RhcnQgYW5kIGVuZCwgcmV0dXJuaW5nIGEgbmV3IEludGVydmFsIGZyb20gdGhlIHJlc3VsdGluZyBEYXRlVGltZXNcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gbWFwRm5cbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqIEBleGFtcGxlIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQxLCBkdDIpLm1hcEVuZHBvaW50cyhlbmRwb2ludCA9PiBlbmRwb2ludC50b1VUQygpKVxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0MSwgZHQyKS5tYXBFbmRwb2ludHMoZW5kcG9pbnQgPT4gZW5kcG9pbnQucGx1cyh7IGhvdXJzOiAyIH0pKVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5tYXBFbmRwb2ludHMgPSBmdW5jdGlvbiBtYXBFbmRwb2ludHMobWFwRm4pIHtcbiAgICByZXR1cm4gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhtYXBGbih0aGlzLnMpLCBtYXBGbih0aGlzLmUpKTtcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoSW50ZXJ2YWwsIFt7XG4gICAga2V5OiBcInN0YXJ0XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5zIDogbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZW5kIG9mIHRoZSBJbnRlcnZhbFxuICAgICAqIEB0eXBlIHtEYXRlVGltZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImVuZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuZSA6IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGlzIEludGVydmFsJ3MgZW5kIGlzIGF0IGxlYXN0IGl0cyBzdGFydCwgbWVhbmluZyB0aGF0IHRoZSBJbnRlcnZhbCBpc24ndCAnYmFja3dhcmRzJy5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImlzVmFsaWRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmludmFsaWRSZWFzb24gPT09IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gZXJyb3IgY29kZSBpZiB0aGlzIEludGVydmFsIGlzIGludmFsaWQsIG9yIG51bGwgaWYgdGhlIEludGVydmFsIGlzIHZhbGlkXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImludmFsaWRSZWFzb25cIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmludmFsaWQgPyB0aGlzLmludmFsaWQucmVhc29uIDogbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBleHBsYW5hdGlvbiBvZiB3aHkgdGhpcyBJbnRlcnZhbCBiZWNhbWUgaW52YWxpZCwgb3IgbnVsbCBpZiB0aGUgSW50ZXJ2YWwgaXMgdmFsaWRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaW52YWxpZEV4cGxhbmF0aW9uXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnZhbGlkID8gdGhpcy5pbnZhbGlkLmV4cGxhbmF0aW9uIDogbnVsbDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSW50ZXJ2YWw7XG59KCk7XG5cbi8qKlxuICogVGhlIEluZm8gY2xhc3MgY29udGFpbnMgc3RhdGljIG1ldGhvZHMgZm9yIHJldHJpZXZpbmcgZ2VuZXJhbCB0aW1lIGFuZCBkYXRlIHJlbGF0ZWQgZGF0YS4gRm9yIGV4YW1wbGUsIGl0IGhhcyBtZXRob2RzIGZvciBmaW5kaW5nIG91dCBpZiBhIHRpbWUgem9uZSBoYXMgYSBEU1QsIGZvciBsaXN0aW5nIHRoZSBtb250aHMgaW4gYW55IHN1cHBvcnRlZCBsb2NhbGUsIGFuZCBmb3IgZGlzY292ZXJpbmcgd2hpY2ggb2YgTHV4b24gZmVhdHVyZXMgYXJlIGF2YWlsYWJsZSBpbiB0aGUgY3VycmVudCBlbnZpcm9ubWVudC5cbiAqL1xuXG52YXIgSW5mbyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEluZm8oKSB7fVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGUgc3BlY2lmaWVkIHpvbmUgY29udGFpbnMgYSBEU1QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFt6b25lPSdsb2NhbCddIC0gWm9uZSB0byBjaGVjay4gRGVmYXVsdHMgdG8gdGhlIGVudmlyb25tZW50J3MgbG9jYWwgem9uZS5cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIEluZm8uaGFzRFNUID0gZnVuY3Rpb24gaGFzRFNUKHpvbmUpIHtcbiAgICBpZiAoem9uZSA9PT0gdm9pZCAwKSB7XG4gICAgICB6b25lID0gU2V0dGluZ3MuZGVmYXVsdFpvbmU7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvID0gRGF0ZVRpbWUubG9jYWwoKS5zZXRab25lKHpvbmUpLnNldCh7XG4gICAgICBtb250aDogMTJcbiAgICB9KTtcbiAgICByZXR1cm4gIXpvbmUudW5pdmVyc2FsICYmIHByb3RvLm9mZnNldCAhPT0gcHJvdG8uc2V0KHtcbiAgICAgIG1vbnRoOiA2XG4gICAgfSkub2Zmc2V0O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGUgc3BlY2lmaWVkIHpvbmUgaXMgYSB2YWxpZCBJQU5BIHNwZWNpZmllci5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHpvbmUgLSBab25lIHRvIGNoZWNrXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICA7XG5cbiAgSW5mby5pc1ZhbGlkSUFOQVpvbmUgPSBmdW5jdGlvbiBpc1ZhbGlkSUFOQVpvbmUoem9uZSkge1xuICAgIHJldHVybiBJQU5BWm9uZS5pc1ZhbGlkU3BlY2lmaWVyKHpvbmUpICYmIElBTkFab25lLmlzVmFsaWRab25lKHpvbmUpO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGUgaW5wdXQgaW50byBhIHtAbGluayBab25lfSBpbnN0YW5jZS5cbiAgICpcbiAgICogKiBJZiBgaW5wdXRgIGlzIGFscmVhZHkgYSBab25lIGluc3RhbmNlLCBpdCBpcyByZXR1cm5lZCB1bmNoYW5nZWQuXG4gICAqICogSWYgYGlucHV0YCBpcyBhIHN0cmluZyBjb250YWluaW5nIGEgdmFsaWQgdGltZSB6b25lIG5hbWUsIGEgWm9uZSBpbnN0YW5jZVxuICAgKiAgIHdpdGggdGhhdCBuYW1lIGlzIHJldHVybmVkLlxuICAgKiAqIElmIGBpbnB1dGAgaXMgYSBzdHJpbmcgdGhhdCBkb2Vzbid0IHJlZmVyIHRvIGEga25vd24gdGltZSB6b25lLCBhIFpvbmVcbiAgICogICBpbnN0YW5jZSB3aXRoIHtAbGluayBab25lLmlzVmFsaWR9ID09IGZhbHNlIGlzIHJldHVybmVkLlxuICAgKiAqIElmIGBpbnB1dCBpcyBhIG51bWJlciwgYSBab25lIGluc3RhbmNlIHdpdGggdGhlIHNwZWNpZmllZCBmaXhlZCBvZmZzZXRcbiAgICogICBpbiBtaW51dGVzIGlzIHJldHVybmVkLlxuICAgKiAqIElmIGBpbnB1dGAgaXMgYG51bGxgIG9yIGB1bmRlZmluZWRgLCB0aGUgZGVmYXVsdCB6b25lIGlzIHJldHVybmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfG51bWJlcn0gW2lucHV0XSAtIHRoZSB2YWx1ZSB0byBiZSBjb252ZXJ0ZWRcbiAgICogQHJldHVybiB7Wm9uZX1cbiAgICovXG4gIDtcblxuICBJbmZvLm5vcm1hbGl6ZVpvbmUgPSBmdW5jdGlvbiBub3JtYWxpemVab25lJDEoaW5wdXQpIHtcbiAgICByZXR1cm4gbm9ybWFsaXplWm9uZShpbnB1dCwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gYXJyYXkgb2Ygc3RhbmRhbG9uZSBtb250aCBuYW1lcy5cbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9EYXRlVGltZUZvcm1hdFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2xlbmd0aD0nbG9uZyddIC0gdGhlIGxlbmd0aCBvZiB0aGUgbW9udGggcmVwcmVzZW50YXRpb24sIHN1Y2ggYXMgXCJudW1lcmljXCIsIFwiMi1kaWdpdFwiLCBcIm5hcnJvd1wiLCBcInNob3J0XCIsIFwibG9uZ1wiXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlXSAtIHRoZSBsb2NhbGUgY29kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubnVtYmVyaW5nU3lzdGVtPW51bGxdIC0gdGhlIG51bWJlcmluZyBzeXN0ZW1cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm91dHB1dENhbGVuZGFyPSdncmVnb3J5J10gLSB0aGUgY2FsZW5kYXJcbiAgICogQGV4YW1wbGUgSW5mby5tb250aHMoKVswXSAvLz0+ICdKYW51YXJ5J1xuICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygnc2hvcnQnKVswXSAvLz0+ICdKYW4nXG4gICAqIEBleGFtcGxlIEluZm8ubW9udGhzKCdudW1lcmljJylbMF0gLy89PiAnMSdcbiAgICogQGV4YW1wbGUgSW5mby5tb250aHMoJ3Nob3J0JywgeyBsb2NhbGU6ICdmci1DQScgfSApWzBdIC8vPT4gJ2phbnYuJ1xuICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygnbnVtZXJpYycsIHsgbG9jYWxlOiAnYXInIH0pWzBdIC8vPT4gJ9mhJ1xuICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygnbG9uZycsIHsgb3V0cHV0Q2FsZW5kYXI6ICdpc2xhbWljJyB9KVswXSAvLz0+ICdSYWJpyrsgSSdcbiAgICogQHJldHVybiB7W3N0cmluZ119XG4gICAqL1xuICA7XG5cbiAgSW5mby5tb250aHMgPSBmdW5jdGlvbiBtb250aHMobGVuZ3RoLCBfdGVtcCkge1xuICAgIGlmIChsZW5ndGggPT09IHZvaWQgMCkge1xuICAgICAgbGVuZ3RoID0gXCJsb25nXCI7XG4gICAgfVxuXG4gICAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgICAgX3JlZiRsb2NhbGUgPSBfcmVmLmxvY2FsZSxcbiAgICAgICAgbG9jYWxlID0gX3JlZiRsb2NhbGUgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmJGxvY2FsZSxcbiAgICAgICAgX3JlZiRudW1iZXJpbmdTeXN0ZW0gPSBfcmVmLm51bWJlcmluZ1N5c3RlbSxcbiAgICAgICAgbnVtYmVyaW5nU3lzdGVtID0gX3JlZiRudW1iZXJpbmdTeXN0ZW0gPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmJG51bWJlcmluZ1N5c3RlbSxcbiAgICAgICAgX3JlZiRvdXRwdXRDYWxlbmRhciA9IF9yZWYub3V0cHV0Q2FsZW5kYXIsXG4gICAgICAgIG91dHB1dENhbGVuZGFyID0gX3JlZiRvdXRwdXRDYWxlbmRhciA9PT0gdm9pZCAwID8gXCJncmVnb3J5XCIgOiBfcmVmJG91dHB1dENhbGVuZGFyO1xuXG4gICAgcmV0dXJuIExvY2FsZS5jcmVhdGUobG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyKS5tb250aHMobGVuZ3RoKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGFuIGFycmF5IG9mIGZvcm1hdCBtb250aCBuYW1lcy5cbiAgICogRm9ybWF0IG1vbnRocyBkaWZmZXIgZnJvbSBzdGFuZGFsb25lIG1vbnRocyBpbiB0aGF0IHRoZXkncmUgbWVhbnQgdG8gYXBwZWFyIG5leHQgdG8gdGhlIGRheSBvZiB0aGUgbW9udGguIEluIHNvbWUgbGFuZ3VhZ2VzLCB0aGF0XG4gICAqIGNoYW5nZXMgdGhlIHN0cmluZy5cbiAgICogU2VlIHtAbGluayBtb250aHN9XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbGVuZ3RoPSdsb25nJ10gLSB0aGUgbGVuZ3RoIG9mIHRoZSBtb250aCByZXByZXNlbnRhdGlvbiwgc3VjaCBhcyBcIm51bWVyaWNcIiwgXCIyLWRpZ2l0XCIsIFwibmFycm93XCIsIFwic2hvcnRcIiwgXCJsb25nXCJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGVdIC0gdGhlIGxvY2FsZSBjb2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5udW1iZXJpbmdTeXN0ZW09bnVsbF0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMub3V0cHV0Q2FsZW5kYXI9J2dyZWdvcnknXSAtIHRoZSBjYWxlbmRhclxuICAgKiBAcmV0dXJuIHtbc3RyaW5nXX1cbiAgICovXG4gIDtcblxuICBJbmZvLm1vbnRoc0Zvcm1hdCA9IGZ1bmN0aW9uIG1vbnRoc0Zvcm1hdChsZW5ndGgsIF90ZW1wMikge1xuICAgIGlmIChsZW5ndGggPT09IHZvaWQgMCkge1xuICAgICAgbGVuZ3RoID0gXCJsb25nXCI7XG4gICAgfVxuXG4gICAgdmFyIF9yZWYyID0gX3RlbXAyID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMixcbiAgICAgICAgX3JlZjIkbG9jYWxlID0gX3JlZjIubG9jYWxlLFxuICAgICAgICBsb2NhbGUgPSBfcmVmMiRsb2NhbGUgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmMiRsb2NhbGUsXG4gICAgICAgIF9yZWYyJG51bWJlcmluZ1N5c3RlbSA9IF9yZWYyLm51bWJlcmluZ1N5c3RlbSxcbiAgICAgICAgbnVtYmVyaW5nU3lzdGVtID0gX3JlZjIkbnVtYmVyaW5nU3lzdGVtID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjIkbnVtYmVyaW5nU3lzdGVtLFxuICAgICAgICBfcmVmMiRvdXRwdXRDYWxlbmRhciA9IF9yZWYyLm91dHB1dENhbGVuZGFyLFxuICAgICAgICBvdXRwdXRDYWxlbmRhciA9IF9yZWYyJG91dHB1dENhbGVuZGFyID09PSB2b2lkIDAgPyBcImdyZWdvcnlcIiA6IF9yZWYyJG91dHB1dENhbGVuZGFyO1xuXG4gICAgcmV0dXJuIExvY2FsZS5jcmVhdGUobG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyKS5tb250aHMobGVuZ3RoLCB0cnVlKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGFuIGFycmF5IG9mIHN0YW5kYWxvbmUgd2VlayBuYW1lcy5cbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9EYXRlVGltZUZvcm1hdFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2xlbmd0aD0nbG9uZyddIC0gdGhlIGxlbmd0aCBvZiB0aGUgd2Vla2RheSByZXByZXNlbnRhdGlvbiwgc3VjaCBhcyBcIm5hcnJvd1wiLCBcInNob3J0XCIsIFwibG9uZ1wiLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZV0gLSB0aGUgbG9jYWxlIGNvZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm51bWJlcmluZ1N5c3RlbT1udWxsXSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtXG4gICAqIEBleGFtcGxlIEluZm8ud2Vla2RheXMoKVswXSAvLz0+ICdNb25kYXknXG4gICAqIEBleGFtcGxlIEluZm8ud2Vla2RheXMoJ3Nob3J0JylbMF0gLy89PiAnTW9uJ1xuICAgKiBAZXhhbXBsZSBJbmZvLndlZWtkYXlzKCdzaG9ydCcsIHsgbG9jYWxlOiAnZnItQ0EnIH0pWzBdIC8vPT4gJ2x1bi4nXG4gICAqIEBleGFtcGxlIEluZm8ud2Vla2RheXMoJ3Nob3J0JywgeyBsb2NhbGU6ICdhcicgfSlbMF0gLy89PiAn2KfZhNin2KvZhtmK2YYnXG4gICAqIEByZXR1cm4ge1tzdHJpbmddfVxuICAgKi9cbiAgO1xuXG4gIEluZm8ud2Vla2RheXMgPSBmdW5jdGlvbiB3ZWVrZGF5cyhsZW5ndGgsIF90ZW1wMykge1xuICAgIGlmIChsZW5ndGggPT09IHZvaWQgMCkge1xuICAgICAgbGVuZ3RoID0gXCJsb25nXCI7XG4gICAgfVxuXG4gICAgdmFyIF9yZWYzID0gX3RlbXAzID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMyxcbiAgICAgICAgX3JlZjMkbG9jYWxlID0gX3JlZjMubG9jYWxlLFxuICAgICAgICBsb2NhbGUgPSBfcmVmMyRsb2NhbGUgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmMyRsb2NhbGUsXG4gICAgICAgIF9yZWYzJG51bWJlcmluZ1N5c3RlbSA9IF9yZWYzLm51bWJlcmluZ1N5c3RlbSxcbiAgICAgICAgbnVtYmVyaW5nU3lzdGVtID0gX3JlZjMkbnVtYmVyaW5nU3lzdGVtID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjMkbnVtYmVyaW5nU3lzdGVtO1xuXG4gICAgcmV0dXJuIExvY2FsZS5jcmVhdGUobG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG51bGwpLndlZWtkYXlzKGxlbmd0aCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBhbiBhcnJheSBvZiBmb3JtYXQgd2VlayBuYW1lcy5cbiAgICogRm9ybWF0IHdlZWtkYXlzIGRpZmZlciBmcm9tIHN0YW5kYWxvbmUgd2Vla2RheXMgaW4gdGhhdCB0aGV5J3JlIG1lYW50IHRvIGFwcGVhciBuZXh0IHRvIG1vcmUgZGF0ZSBpbmZvcm1hdGlvbi4gSW4gc29tZSBsYW5ndWFnZXMsIHRoYXRcbiAgICogY2hhbmdlcyB0aGUgc3RyaW5nLlxuICAgKiBTZWUge0BsaW5rIHdlZWtkYXlzfVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2xlbmd0aD0nbG9uZyddIC0gdGhlIGxlbmd0aCBvZiB0aGUgd2Vla2RheSByZXByZXNlbnRhdGlvbiwgc3VjaCBhcyBcIm5hcnJvd1wiLCBcInNob3J0XCIsIFwibG9uZ1wiLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT1udWxsXSAtIHRoZSBsb2NhbGUgY29kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubnVtYmVyaW5nU3lzdGVtPW51bGxdIC0gdGhlIG51bWJlcmluZyBzeXN0ZW1cbiAgICogQHJldHVybiB7W3N0cmluZ119XG4gICAqL1xuICA7XG5cbiAgSW5mby53ZWVrZGF5c0Zvcm1hdCA9IGZ1bmN0aW9uIHdlZWtkYXlzRm9ybWF0KGxlbmd0aCwgX3RlbXA0KSB7XG4gICAgaWYgKGxlbmd0aCA9PT0gdm9pZCAwKSB7XG4gICAgICBsZW5ndGggPSBcImxvbmdcIjtcbiAgICB9XG5cbiAgICB2YXIgX3JlZjQgPSBfdGVtcDQgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA0LFxuICAgICAgICBfcmVmNCRsb2NhbGUgPSBfcmVmNC5sb2NhbGUsXG4gICAgICAgIGxvY2FsZSA9IF9yZWY0JGxvY2FsZSA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWY0JGxvY2FsZSxcbiAgICAgICAgX3JlZjQkbnVtYmVyaW5nU3lzdGVtID0gX3JlZjQubnVtYmVyaW5nU3lzdGVtLFxuICAgICAgICBudW1iZXJpbmdTeXN0ZW0gPSBfcmVmNCRudW1iZXJpbmdTeXN0ZW0gPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmNCRudW1iZXJpbmdTeXN0ZW07XG5cbiAgICByZXR1cm4gTG9jYWxlLmNyZWF0ZShsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgbnVsbCkud2Vla2RheXMobGVuZ3RoLCB0cnVlKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGFuIGFycmF5IG9mIG1lcmlkaWVtcy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGVdIC0gdGhlIGxvY2FsZSBjb2RlXG4gICAqIEBleGFtcGxlIEluZm8ubWVyaWRpZW1zKCkgLy89PiBbICdBTScsICdQTScgXVxuICAgKiBAZXhhbXBsZSBJbmZvLm1lcmlkaWVtcyh7IGxvY2FsZTogJ215JyB9KSAvLz0+IFsgJ+GAlOGAtuGAlOGAgOGAuicsICfhgIrhgJThgLEnIF1cbiAgICogQHJldHVybiB7W3N0cmluZ119XG4gICAqL1xuICA7XG5cbiAgSW5mby5tZXJpZGllbXMgPSBmdW5jdGlvbiBtZXJpZGllbXMoX3RlbXA1KSB7XG4gICAgdmFyIF9yZWY1ID0gX3RlbXA1ID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wNSxcbiAgICAgICAgX3JlZjUkbG9jYWxlID0gX3JlZjUubG9jYWxlLFxuICAgICAgICBsb2NhbGUgPSBfcmVmNSRsb2NhbGUgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmNSRsb2NhbGU7XG5cbiAgICByZXR1cm4gTG9jYWxlLmNyZWF0ZShsb2NhbGUpLm1lcmlkaWVtcygpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgZXJhcywgc3VjaCBhcyBbJ0JDJywgJ0FEJ10uIFRoZSBsb2NhbGUgY2FuIGJlIHNwZWNpZmllZCwgYnV0IHRoZSBjYWxlbmRhciBzeXN0ZW0gaXMgYWx3YXlzIEdyZWdvcmlhbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsZW5ndGg9J3Nob3J0J10gLSB0aGUgbGVuZ3RoIG9mIHRoZSBlcmEgcmVwcmVzZW50YXRpb24sIHN1Y2ggYXMgXCJzaG9ydFwiIG9yIFwibG9uZ1wiLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZV0gLSB0aGUgbG9jYWxlIGNvZGVcbiAgICogQGV4YW1wbGUgSW5mby5lcmFzKCkgLy89PiBbICdCQycsICdBRCcgXVxuICAgKiBAZXhhbXBsZSBJbmZvLmVyYXMoJ2xvbmcnKSAvLz0+IFsgJ0JlZm9yZSBDaHJpc3QnLCAnQW5ubyBEb21pbmknIF1cbiAgICogQGV4YW1wbGUgSW5mby5lcmFzKCdsb25nJywgeyBsb2NhbGU6ICdmcicgfSkgLy89PiBbICdhdmFudCBKw6lzdXMtQ2hyaXN0JywgJ2FwcsOocyBKw6lzdXMtQ2hyaXN0JyBdXG4gICAqIEByZXR1cm4ge1tzdHJpbmddfVxuICAgKi9cbiAgO1xuXG4gIEluZm8uZXJhcyA9IGZ1bmN0aW9uIGVyYXMobGVuZ3RoLCBfdGVtcDYpIHtcbiAgICBpZiAobGVuZ3RoID09PSB2b2lkIDApIHtcbiAgICAgIGxlbmd0aCA9IFwic2hvcnRcIjtcbiAgICB9XG5cbiAgICB2YXIgX3JlZjYgPSBfdGVtcDYgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA2LFxuICAgICAgICBfcmVmNiRsb2NhbGUgPSBfcmVmNi5sb2NhbGUsXG4gICAgICAgIGxvY2FsZSA9IF9yZWY2JGxvY2FsZSA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWY2JGxvY2FsZTtcblxuICAgIHJldHVybiBMb2NhbGUuY3JlYXRlKGxvY2FsZSwgbnVsbCwgXCJncmVnb3J5XCIpLmVyYXMobGVuZ3RoKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHRoZSBzZXQgb2YgYXZhaWxhYmxlIGZlYXR1cmVzIGluIHRoaXMgZW52aXJvbm1lbnQuXG4gICAqIFNvbWUgZmVhdHVyZXMgb2YgTHV4b24gYXJlIG5vdCBhdmFpbGFibGUgaW4gYWxsIGVudmlyb25tZW50cy4gRm9yIGV4YW1wbGUsIG9uIG9sZGVyIGJyb3dzZXJzLCB0aW1lem9uZSBzdXBwb3J0IGlzIG5vdCBhdmFpbGFibGUuIFVzZSB0aGlzIGZ1bmN0aW9uIHRvIGZpZ3VyZSBvdXQgaWYgdGhhdCdzIHRoZSBjYXNlLlxuICAgKiBLZXlzOlxuICAgKiAqIGB6b25lc2A6IHdoZXRoZXIgdGhpcyBlbnZpcm9ubWVudCBzdXBwb3J0cyBJQU5BIHRpbWV6b25lc1xuICAgKiAqIGBpbnRsVG9rZW5zYDogd2hldGhlciB0aGlzIGVudmlyb25tZW50IHN1cHBvcnRzIGludGVybmF0aW9uYWxpemVkIHRva2VuLWJhc2VkIGZvcm1hdHRpbmcvcGFyc2luZ1xuICAgKiAqIGBpbnRsYDogd2hldGhlciB0aGlzIGVudmlyb25tZW50IHN1cHBvcnRzIGdlbmVyYWwgaW50ZXJuYXRpb25hbGl6YXRpb25cbiAgICogKiBgcmVsYXRpdmVgOiB3aGV0aGVyIHRoaXMgZW52aXJvbm1lbnQgc3VwcG9ydHMgcmVsYXRpdmUgdGltZSBmb3JtYXR0aW5nXG4gICAqIEBleGFtcGxlIEluZm8uZmVhdHVyZXMoKSAvLz0+IHsgaW50bDogdHJ1ZSwgaW50bFRva2VuczogZmFsc2UsIHpvbmVzOiB0cnVlLCByZWxhdGl2ZTogZmFsc2UgfVxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICA7XG5cbiAgSW5mby5mZWF0dXJlcyA9IGZ1bmN0aW9uIGZlYXR1cmVzKCkge1xuICAgIHZhciBpbnRsID0gZmFsc2UsXG4gICAgICAgIGludGxUb2tlbnMgPSBmYWxzZSxcbiAgICAgICAgem9uZXMgPSBmYWxzZSxcbiAgICAgICAgcmVsYXRpdmUgPSBmYWxzZTtcblxuICAgIGlmIChoYXNJbnRsKCkpIHtcbiAgICAgIGludGwgPSB0cnVlO1xuICAgICAgaW50bFRva2VucyA9IGhhc0Zvcm1hdFRvUGFydHMoKTtcbiAgICAgIHJlbGF0aXZlID0gaGFzUmVsYXRpdmUoKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgem9uZXMgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChcImVuXCIsIHtcbiAgICAgICAgICB0aW1lWm9uZTogXCJBbWVyaWNhL05ld19Zb3JrXCJcbiAgICAgICAgfSkucmVzb2x2ZWRPcHRpb25zKCkudGltZVpvbmUgPT09IFwiQW1lcmljYS9OZXdfWW9ya1wiO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB6b25lcyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBpbnRsOiBpbnRsLFxuICAgICAgaW50bFRva2VuczogaW50bFRva2VucyxcbiAgICAgIHpvbmVzOiB6b25lcyxcbiAgICAgIHJlbGF0aXZlOiByZWxhdGl2ZVxuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIEluZm87XG59KCk7XG5cbmZ1bmN0aW9uIGRheURpZmYoZWFybGllciwgbGF0ZXIpIHtcbiAgdmFyIHV0Y0RheVN0YXJ0ID0gZnVuY3Rpb24gdXRjRGF5U3RhcnQoZHQpIHtcbiAgICByZXR1cm4gZHQudG9VVEMoMCwge1xuICAgICAga2VlcExvY2FsVGltZTogdHJ1ZVxuICAgIH0pLnN0YXJ0T2YoXCJkYXlcIikudmFsdWVPZigpO1xuICB9LFxuICAgICAgbXMgPSB1dGNEYXlTdGFydChsYXRlcikgLSB1dGNEYXlTdGFydChlYXJsaWVyKTtcblxuICByZXR1cm4gTWF0aC5mbG9vcihEdXJhdGlvbi5mcm9tTWlsbGlzKG1zKS5hcyhcImRheXNcIikpO1xufVxuXG5mdW5jdGlvbiBoaWdoT3JkZXJEaWZmcyhjdXJzb3IsIGxhdGVyLCB1bml0cykge1xuICB2YXIgZGlmZmVycyA9IFtbXCJ5ZWFyc1wiLCBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBiLnllYXIgLSBhLnllYXI7XG4gIH1dLCBbXCJtb250aHNcIiwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYi5tb250aCAtIGEubW9udGggKyAoYi55ZWFyIC0gYS55ZWFyKSAqIDEyO1xuICB9XSwgW1wid2Vla3NcIiwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICB2YXIgZGF5cyA9IGRheURpZmYoYSwgYik7XG4gICAgcmV0dXJuIChkYXlzIC0gZGF5cyAlIDcpIC8gNztcbiAgfV0sIFtcImRheXNcIiwgZGF5RGlmZl1dO1xuICB2YXIgcmVzdWx0cyA9IHt9O1xuICB2YXIgbG93ZXN0T3JkZXIsIGhpZ2hXYXRlcjtcblxuICBmb3IgKHZhciBfaSA9IDAsIF9kaWZmZXJzID0gZGlmZmVyczsgX2kgPCBfZGlmZmVycy5sZW5ndGg7IF9pKyspIHtcbiAgICB2YXIgX2RpZmZlcnMkX2kgPSBfZGlmZmVyc1tfaV0sXG4gICAgICAgIHVuaXQgPSBfZGlmZmVycyRfaVswXSxcbiAgICAgICAgZGlmZmVyID0gX2RpZmZlcnMkX2lbMV07XG5cbiAgICBpZiAodW5pdHMuaW5kZXhPZih1bml0KSA+PSAwKSB7XG4gICAgICB2YXIgX2N1cnNvciRwbHVzO1xuXG4gICAgICBsb3dlc3RPcmRlciA9IHVuaXQ7XG4gICAgICB2YXIgZGVsdGEgPSBkaWZmZXIoY3Vyc29yLCBsYXRlcik7XG4gICAgICBoaWdoV2F0ZXIgPSBjdXJzb3IucGx1cygoX2N1cnNvciRwbHVzID0ge30sIF9jdXJzb3IkcGx1c1t1bml0XSA9IGRlbHRhLCBfY3Vyc29yJHBsdXMpKTtcblxuICAgICAgaWYgKGhpZ2hXYXRlciA+IGxhdGVyKSB7XG4gICAgICAgIHZhciBfY3Vyc29yJHBsdXMyO1xuXG4gICAgICAgIGN1cnNvciA9IGN1cnNvci5wbHVzKChfY3Vyc29yJHBsdXMyID0ge30sIF9jdXJzb3IkcGx1czJbdW5pdF0gPSBkZWx0YSAtIDEsIF9jdXJzb3IkcGx1czIpKTtcbiAgICAgICAgZGVsdGEgLT0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnNvciA9IGhpZ2hXYXRlcjtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0c1t1bml0XSA9IGRlbHRhO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBbY3Vyc29yLCByZXN1bHRzLCBoaWdoV2F0ZXIsIGxvd2VzdE9yZGVyXTtcbn1cblxuZnVuY3Rpb24gX2RpZmYgKGVhcmxpZXIsIGxhdGVyLCB1bml0cywgb3B0cykge1xuICB2YXIgX2hpZ2hPcmRlckRpZmZzID0gaGlnaE9yZGVyRGlmZnMoZWFybGllciwgbGF0ZXIsIHVuaXRzKSxcbiAgICAgIGN1cnNvciA9IF9oaWdoT3JkZXJEaWZmc1swXSxcbiAgICAgIHJlc3VsdHMgPSBfaGlnaE9yZGVyRGlmZnNbMV0sXG4gICAgICBoaWdoV2F0ZXIgPSBfaGlnaE9yZGVyRGlmZnNbMl0sXG4gICAgICBsb3dlc3RPcmRlciA9IF9oaWdoT3JkZXJEaWZmc1szXTtcblxuICB2YXIgcmVtYWluaW5nTWlsbGlzID0gbGF0ZXIgLSBjdXJzb3I7XG4gIHZhciBsb3dlck9yZGVyVW5pdHMgPSB1bml0cy5maWx0ZXIoZnVuY3Rpb24gKHUpIHtcbiAgICByZXR1cm4gW1wiaG91cnNcIiwgXCJtaW51dGVzXCIsIFwic2Vjb25kc1wiLCBcIm1pbGxpc2Vjb25kc1wiXS5pbmRleE9mKHUpID49IDA7XG4gIH0pO1xuXG4gIGlmIChsb3dlck9yZGVyVW5pdHMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGhpZ2hXYXRlciA8IGxhdGVyKSB7XG4gICAgICB2YXIgX2N1cnNvciRwbHVzMztcblxuICAgICAgaGlnaFdhdGVyID0gY3Vyc29yLnBsdXMoKF9jdXJzb3IkcGx1czMgPSB7fSwgX2N1cnNvciRwbHVzM1tsb3dlc3RPcmRlcl0gPSAxLCBfY3Vyc29yJHBsdXMzKSk7XG4gICAgfVxuXG4gICAgaWYgKGhpZ2hXYXRlciAhPT0gY3Vyc29yKSB7XG4gICAgICByZXN1bHRzW2xvd2VzdE9yZGVyXSA9IChyZXN1bHRzW2xvd2VzdE9yZGVyXSB8fCAwKSArIHJlbWFpbmluZ01pbGxpcyAvIChoaWdoV2F0ZXIgLSBjdXJzb3IpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBkdXJhdGlvbiA9IER1cmF0aW9uLmZyb21PYmplY3QoT2JqZWN0LmFzc2lnbihyZXN1bHRzLCBvcHRzKSk7XG5cbiAgaWYgKGxvd2VyT3JkZXJVbml0cy5sZW5ndGggPiAwKSB7XG4gICAgdmFyIF9EdXJhdGlvbiRmcm9tTWlsbGlzO1xuXG4gICAgcmV0dXJuIChfRHVyYXRpb24kZnJvbU1pbGxpcyA9IER1cmF0aW9uLmZyb21NaWxsaXMocmVtYWluaW5nTWlsbGlzLCBvcHRzKSkuc2hpZnRUby5hcHBseShfRHVyYXRpb24kZnJvbU1pbGxpcywgbG93ZXJPcmRlclVuaXRzKS5wbHVzKGR1cmF0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZHVyYXRpb247XG4gIH1cbn1cblxudmFyIG51bWJlcmluZ1N5c3RlbXMgPSB7XG4gIGFyYWI6IFwiW1xcdTA2NjAtXFx1MDY2OV1cIixcbiAgYXJhYmV4dDogXCJbXFx1MDZGMC1cXHUwNkY5XVwiLFxuICBiYWxpOiBcIltcXHUxQjUwLVxcdTFCNTldXCIsXG4gIGJlbmc6IFwiW1xcdTA5RTYtXFx1MDlFRl1cIixcbiAgZGV2YTogXCJbXFx1MDk2Ni1cXHUwOTZGXVwiLFxuICBmdWxsd2lkZTogXCJbXFx1RkYxMC1cXHVGRjE5XVwiLFxuICBndWpyOiBcIltcXHUwQUU2LVxcdTBBRUZdXCIsXG4gIGhhbmlkZWM6IFwiW+OAh3zkuIB85LqMfOS4iXzlm5t85LqUfOWFrXzkuIN85YWrfOS5nV1cIixcbiAga2htcjogXCJbXFx1MTdFMC1cXHUxN0U5XVwiLFxuICBrbmRhOiBcIltcXHUwQ0U2LVxcdTBDRUZdXCIsXG4gIGxhb286IFwiW1xcdTBFRDAtXFx1MEVEOV1cIixcbiAgbGltYjogXCJbXFx1MTk0Ni1cXHUxOTRGXVwiLFxuICBtbHltOiBcIltcXHUwRDY2LVxcdTBENkZdXCIsXG4gIG1vbmc6IFwiW1xcdTE4MTAtXFx1MTgxOV1cIixcbiAgbXltcjogXCJbXFx1MTA0MC1cXHUxMDQ5XVwiLFxuICBvcnlhOiBcIltcXHUwQjY2LVxcdTBCNkZdXCIsXG4gIHRhbWxkZWM6IFwiW1xcdTBCRTYtXFx1MEJFRl1cIixcbiAgdGVsdTogXCJbXFx1MEM2Ni1cXHUwQzZGXVwiLFxuICB0aGFpOiBcIltcXHUwRTUwLVxcdTBFNTldXCIsXG4gIHRpYnQ6IFwiW1xcdTBGMjAtXFx1MEYyOV1cIixcbiAgbGF0bjogXCJcXFxcZFwiXG59O1xudmFyIG51bWJlcmluZ1N5c3RlbXNVVEYxNiA9IHtcbiAgYXJhYjogWzE2MzIsIDE2NDFdLFxuICBhcmFiZXh0OiBbMTc3NiwgMTc4NV0sXG4gIGJhbGk6IFs2OTkyLCA3MDAxXSxcbiAgYmVuZzogWzI1MzQsIDI1NDNdLFxuICBkZXZhOiBbMjQwNiwgMjQxNV0sXG4gIGZ1bGx3aWRlOiBbNjUyOTYsIDY1MzAzXSxcbiAgZ3VqcjogWzI3OTAsIDI3OTldLFxuICBraG1yOiBbNjExMiwgNjEyMV0sXG4gIGtuZGE6IFszMzAyLCAzMzExXSxcbiAgbGFvbzogWzM3OTIsIDM4MDFdLFxuICBsaW1iOiBbNjQ3MCwgNjQ3OV0sXG4gIG1seW06IFszNDMwLCAzNDM5XSxcbiAgbW9uZzogWzYxNjAsIDYxNjldLFxuICBteW1yOiBbNDE2MCwgNDE2OV0sXG4gIG9yeWE6IFsyOTE4LCAyOTI3XSxcbiAgdGFtbGRlYzogWzMwNDYsIDMwNTVdLFxuICB0ZWx1OiBbMzE3NCwgMzE4M10sXG4gIHRoYWk6IFszNjY0LCAzNjczXSxcbiAgdGlidDogWzM4NzIsIDM4ODFdXG59OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxudmFyIGhhbmlkZWNDaGFycyA9IG51bWJlcmluZ1N5c3RlbXMuaGFuaWRlYy5yZXBsYWNlKC9bXFxbfFxcXV0vZywgXCJcIikuc3BsaXQoXCJcIik7XG5mdW5jdGlvbiBwYXJzZURpZ2l0cyhzdHIpIHtcbiAgdmFyIHZhbHVlID0gcGFyc2VJbnQoc3RyLCAxMCk7XG5cbiAgaWYgKGlzTmFOKHZhbHVlKSkge1xuICAgIHZhbHVlID0gXCJcIjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY29kZSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuXG4gICAgICBpZiAoc3RyW2ldLnNlYXJjaChudW1iZXJpbmdTeXN0ZW1zLmhhbmlkZWMpICE9PSAtMSkge1xuICAgICAgICB2YWx1ZSArPSBoYW5pZGVjQ2hhcnMuaW5kZXhPZihzdHJbaV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG51bWJlcmluZ1N5c3RlbXNVVEYxNikge1xuICAgICAgICAgIHZhciBfbnVtYmVyaW5nU3lzdGVtc1VURiA9IG51bWJlcmluZ1N5c3RlbXNVVEYxNltrZXldLFxuICAgICAgICAgICAgICBtaW4gPSBfbnVtYmVyaW5nU3lzdGVtc1VURlswXSxcbiAgICAgICAgICAgICAgbWF4ID0gX251bWJlcmluZ1N5c3RlbXNVVEZbMV07XG5cbiAgICAgICAgICBpZiAoY29kZSA+PSBtaW4gJiYgY29kZSA8PSBtYXgpIHtcbiAgICAgICAgICAgIHZhbHVlICs9IGNvZGUgLSBtaW47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5mdW5jdGlvbiBkaWdpdFJlZ2V4KF9yZWYsIGFwcGVuZCkge1xuICB2YXIgbnVtYmVyaW5nU3lzdGVtID0gX3JlZi5udW1iZXJpbmdTeXN0ZW07XG5cbiAgaWYgKGFwcGVuZCA9PT0gdm9pZCAwKSB7XG4gICAgYXBwZW5kID0gXCJcIjtcbiAgfVxuXG4gIHJldHVybiBuZXcgUmVnRXhwKFwiXCIgKyBudW1iZXJpbmdTeXN0ZW1zW251bWJlcmluZ1N5c3RlbSB8fCBcImxhdG5cIl0gKyBhcHBlbmQpO1xufVxuXG52YXIgTUlTU0lOR19GVFAgPSBcIm1pc3NpbmcgSW50bC5EYXRlVGltZUZvcm1hdC5mb3JtYXRUb1BhcnRzIHN1cHBvcnRcIjtcblxuZnVuY3Rpb24gaW50VW5pdChyZWdleCwgcG9zdCkge1xuICBpZiAocG9zdCA9PT0gdm9pZCAwKSB7XG4gICAgcG9zdCA9IGZ1bmN0aW9uIHBvc3QoaSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcmVnZXg6IHJlZ2V4LFxuICAgIGRlc2VyOiBmdW5jdGlvbiBkZXNlcihfcmVmKSB7XG4gICAgICB2YXIgcyA9IF9yZWZbMF07XG4gICAgICByZXR1cm4gcG9zdChwYXJzZURpZ2l0cyhzKSk7XG4gICAgfVxuICB9O1xufVxuXG52YXIgTkJTUCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMTYwKTtcbnZhciBzcGFjZU9yTkJTUCA9IFwiKCB8XCIgKyBOQlNQICsgXCIpXCI7XG52YXIgc3BhY2VPck5CU1BSZWdFeHAgPSBuZXcgUmVnRXhwKHNwYWNlT3JOQlNQLCBcImdcIik7XG5cbmZ1bmN0aW9uIGZpeExpc3RSZWdleChzKSB7XG4gIC8vIG1ha2UgZG90cyBvcHRpb25hbCBhbmQgYWxzbyBtYWtlIHRoZW0gbGl0ZXJhbFxuICAvLyBtYWtlIHNwYWNlIGFuZCBub24gYnJlYWthYmxlIHNwYWNlIGNoYXJhY3RlcnMgaW50ZXJjaGFuZ2VhYmxlXG4gIHJldHVybiBzLnJlcGxhY2UoL1xcLi9nLCBcIlxcXFwuP1wiKS5yZXBsYWNlKHNwYWNlT3JOQlNQUmVnRXhwLCBzcGFjZU9yTkJTUCk7XG59XG5cbmZ1bmN0aW9uIHN0cmlwSW5zZW5zaXRpdml0aWVzKHMpIHtcbiAgcmV0dXJuIHMucmVwbGFjZSgvXFwuL2csIFwiXCIpIC8vIGlnbm9yZSBkb3RzIHRoYXQgd2VyZSBtYWRlIG9wdGlvbmFsXG4gIC5yZXBsYWNlKHNwYWNlT3JOQlNQUmVnRXhwLCBcIiBcIikgLy8gaW50ZXJjaGFuZ2Ugc3BhY2UgYW5kIG5ic3BcbiAgLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIG9uZU9mKHN0cmluZ3MsIHN0YXJ0SW5kZXgpIHtcbiAgaWYgKHN0cmluZ3MgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVnZXg6IFJlZ0V4cChzdHJpbmdzLm1hcChmaXhMaXN0UmVnZXgpLmpvaW4oXCJ8XCIpKSxcbiAgICAgIGRlc2VyOiBmdW5jdGlvbiBkZXNlcihfcmVmMikge1xuICAgICAgICB2YXIgcyA9IF9yZWYyWzBdO1xuICAgICAgICByZXR1cm4gc3RyaW5ncy5maW5kSW5kZXgoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICByZXR1cm4gc3RyaXBJbnNlbnNpdGl2aXRpZXMocykgPT09IHN0cmlwSW5zZW5zaXRpdml0aWVzKGkpO1xuICAgICAgICB9KSArIHN0YXJ0SW5kZXg7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvZmZzZXQocmVnZXgsIGdyb3Vwcykge1xuICByZXR1cm4ge1xuICAgIHJlZ2V4OiByZWdleCxcbiAgICBkZXNlcjogZnVuY3Rpb24gZGVzZXIoX3JlZjMpIHtcbiAgICAgIHZhciBoID0gX3JlZjNbMV0sXG4gICAgICAgICAgbSA9IF9yZWYzWzJdO1xuICAgICAgcmV0dXJuIHNpZ25lZE9mZnNldChoLCBtKTtcbiAgICB9LFxuICAgIGdyb3VwczogZ3JvdXBzXG4gIH07XG59XG5cbmZ1bmN0aW9uIHNpbXBsZShyZWdleCkge1xuICByZXR1cm4ge1xuICAgIHJlZ2V4OiByZWdleCxcbiAgICBkZXNlcjogZnVuY3Rpb24gZGVzZXIoX3JlZjQpIHtcbiAgICAgIHZhciBzID0gX3JlZjRbMF07XG4gICAgICByZXR1cm4gcztcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVzY2FwZVRva2VuKHZhbHVlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuICByZXR1cm4gdmFsdWUucmVwbGFjZSgvW1xcLVxcW1xcXXt9KCkqKz8uLFxcXFxcXF4kfCNcXHNdL2csIFwiXFxcXCQmXCIpO1xufVxuXG5mdW5jdGlvbiB1bml0Rm9yVG9rZW4odG9rZW4sIGxvYykge1xuICB2YXIgb25lID0gZGlnaXRSZWdleChsb2MpLFxuICAgICAgdHdvID0gZGlnaXRSZWdleChsb2MsIFwiezJ9XCIpLFxuICAgICAgdGhyZWUgPSBkaWdpdFJlZ2V4KGxvYywgXCJ7M31cIiksXG4gICAgICBmb3VyID0gZGlnaXRSZWdleChsb2MsIFwiezR9XCIpLFxuICAgICAgc2l4ID0gZGlnaXRSZWdleChsb2MsIFwiezZ9XCIpLFxuICAgICAgb25lT3JUd28gPSBkaWdpdFJlZ2V4KGxvYywgXCJ7MSwyfVwiKSxcbiAgICAgIG9uZVRvVGhyZWUgPSBkaWdpdFJlZ2V4KGxvYywgXCJ7MSwzfVwiKSxcbiAgICAgIG9uZVRvU2l4ID0gZGlnaXRSZWdleChsb2MsIFwiezEsNn1cIiksXG4gICAgICBvbmVUb05pbmUgPSBkaWdpdFJlZ2V4KGxvYywgXCJ7MSw5fVwiKSxcbiAgICAgIHR3b1RvRm91ciA9IGRpZ2l0UmVnZXgobG9jLCBcInsyLDR9XCIpLFxuICAgICAgZm91clRvU2l4ID0gZGlnaXRSZWdleChsb2MsIFwiezQsNn1cIiksXG4gICAgICBsaXRlcmFsID0gZnVuY3Rpb24gbGl0ZXJhbCh0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlZ2V4OiBSZWdFeHAoZXNjYXBlVG9rZW4odC52YWwpKSxcbiAgICAgIGRlc2VyOiBmdW5jdGlvbiBkZXNlcihfcmVmNSkge1xuICAgICAgICB2YXIgcyA9IF9yZWY1WzBdO1xuICAgICAgICByZXR1cm4gcztcbiAgICAgIH0sXG4gICAgICBsaXRlcmFsOiB0cnVlXG4gICAgfTtcbiAgfSxcbiAgICAgIHVuaXRhdGUgPSBmdW5jdGlvbiB1bml0YXRlKHQpIHtcbiAgICBpZiAodG9rZW4ubGl0ZXJhbCkge1xuICAgICAgcmV0dXJuIGxpdGVyYWwodCk7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0LnZhbCkge1xuICAgICAgLy8gZXJhXG4gICAgICBjYXNlIFwiR1wiOlxuICAgICAgICByZXR1cm4gb25lT2YobG9jLmVyYXMoXCJzaG9ydFwiLCBmYWxzZSksIDApO1xuXG4gICAgICBjYXNlIFwiR0dcIjpcbiAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5lcmFzKFwibG9uZ1wiLCBmYWxzZSksIDApO1xuICAgICAgLy8geWVhcnNcblxuICAgICAgY2FzZSBcInlcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQob25lVG9TaXgpO1xuXG4gICAgICBjYXNlIFwieXlcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQodHdvVG9Gb3VyLCB1bnRydW5jYXRlWWVhcik7XG5cbiAgICAgIGNhc2UgXCJ5eXl5XCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KGZvdXIpO1xuXG4gICAgICBjYXNlIFwieXl5eXlcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQoZm91clRvU2l4KTtcblxuICAgICAgY2FzZSBcInl5eXl5eVwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChzaXgpO1xuICAgICAgLy8gbW9udGhzXG5cbiAgICAgIGNhc2UgXCJNXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcblxuICAgICAgY2FzZSBcIk1NXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG5cbiAgICAgIGNhc2UgXCJNTU1cIjpcbiAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5tb250aHMoXCJzaG9ydFwiLCB0cnVlLCBmYWxzZSksIDEpO1xuXG4gICAgICBjYXNlIFwiTU1NTVwiOlxuICAgICAgICByZXR1cm4gb25lT2YobG9jLm1vbnRocyhcImxvbmdcIiwgdHJ1ZSwgZmFsc2UpLCAxKTtcblxuICAgICAgY2FzZSBcIkxcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pO1xuXG4gICAgICBjYXNlIFwiTExcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcblxuICAgICAgY2FzZSBcIkxMTFwiOlxuICAgICAgICByZXR1cm4gb25lT2YobG9jLm1vbnRocyhcInNob3J0XCIsIGZhbHNlLCBmYWxzZSksIDEpO1xuXG4gICAgICBjYXNlIFwiTExMTFwiOlxuICAgICAgICByZXR1cm4gb25lT2YobG9jLm1vbnRocyhcImxvbmdcIiwgZmFsc2UsIGZhbHNlKSwgMSk7XG4gICAgICAvLyBkYXRlc1xuXG4gICAgICBjYXNlIFwiZFwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG5cbiAgICAgIGNhc2UgXCJkZFwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuICAgICAgLy8gb3JkaW5hbHNcblxuICAgICAgY2FzZSBcIm9cIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQob25lVG9UaHJlZSk7XG5cbiAgICAgIGNhc2UgXCJvb29cIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQodGhyZWUpO1xuICAgICAgLy8gdGltZVxuXG4gICAgICBjYXNlIFwiSEhcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcblxuICAgICAgY2FzZSBcIkhcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pO1xuXG4gICAgICBjYXNlIFwiaGhcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcblxuICAgICAgY2FzZSBcImhcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pO1xuXG4gICAgICBjYXNlIFwibW1cIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcblxuICAgICAgY2FzZSBcIm1cIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pO1xuXG4gICAgICBjYXNlIFwicVwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG5cbiAgICAgIGNhc2UgXCJxcVwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuXG4gICAgICBjYXNlIFwic1wiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG5cbiAgICAgIGNhc2UgXCJzc1wiOlxuICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuXG4gICAgICBjYXNlIFwiU1wiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChvbmVUb1RocmVlKTtcblxuICAgICAgY2FzZSBcIlNTU1wiOlxuICAgICAgICByZXR1cm4gaW50VW5pdCh0aHJlZSk7XG5cbiAgICAgIGNhc2UgXCJ1XCI6XG4gICAgICAgIHJldHVybiBzaW1wbGUob25lVG9OaW5lKTtcbiAgICAgIC8vIG1lcmlkaWVtXG5cbiAgICAgIGNhc2UgXCJhXCI6XG4gICAgICAgIHJldHVybiBvbmVPZihsb2MubWVyaWRpZW1zKCksIDApO1xuICAgICAgLy8gd2Vla1llYXIgKGspXG5cbiAgICAgIGNhc2UgXCJra2trXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KGZvdXIpO1xuXG4gICAgICBjYXNlIFwia2tcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQodHdvVG9Gb3VyLCB1bnRydW5jYXRlWWVhcik7XG4gICAgICAvLyB3ZWVrTnVtYmVyIChXKVxuXG4gICAgICBjYXNlIFwiV1wiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG5cbiAgICAgIGNhc2UgXCJXV1wiOlxuICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuICAgICAgLy8gd2Vla2RheXNcblxuICAgICAgY2FzZSBcIkVcIjpcbiAgICAgIGNhc2UgXCJjXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZSk7XG5cbiAgICAgIGNhc2UgXCJFRUVcIjpcbiAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy53ZWVrZGF5cyhcInNob3J0XCIsIGZhbHNlLCBmYWxzZSksIDEpO1xuXG4gICAgICBjYXNlIFwiRUVFRVwiOlxuICAgICAgICByZXR1cm4gb25lT2YobG9jLndlZWtkYXlzKFwibG9uZ1wiLCBmYWxzZSwgZmFsc2UpLCAxKTtcblxuICAgICAgY2FzZSBcImNjY1wiOlxuICAgICAgICByZXR1cm4gb25lT2YobG9jLndlZWtkYXlzKFwic2hvcnRcIiwgdHJ1ZSwgZmFsc2UpLCAxKTtcblxuICAgICAgY2FzZSBcImNjY2NcIjpcbiAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy53ZWVrZGF5cyhcImxvbmdcIiwgdHJ1ZSwgZmFsc2UpLCAxKTtcbiAgICAgIC8vIG9mZnNldC96b25lXG5cbiAgICAgIGNhc2UgXCJaXCI6XG4gICAgICBjYXNlIFwiWlpcIjpcbiAgICAgICAgcmV0dXJuIG9mZnNldChuZXcgUmVnRXhwKFwiKFsrLV1cIiArIG9uZU9yVHdvLnNvdXJjZSArIFwiKSg/OjooXCIgKyB0d28uc291cmNlICsgXCIpKT9cIiksIDIpO1xuXG4gICAgICBjYXNlIFwiWlpaXCI6XG4gICAgICAgIHJldHVybiBvZmZzZXQobmV3IFJlZ0V4cChcIihbKy1dXCIgKyBvbmVPclR3by5zb3VyY2UgKyBcIikoXCIgKyB0d28uc291cmNlICsgXCIpP1wiKSwgMik7XG4gICAgICAvLyB3ZSBkb24ndCBzdXBwb3J0IFpaWlogKFBTVCkgb3IgWlpaWlogKFBhY2lmaWMgU3RhbmRhcmQgVGltZSkgaW4gcGFyc2luZ1xuICAgICAgLy8gYmVjYXVzZSB3ZSBkb24ndCBoYXZlIGFueSB3YXkgdG8gZmlndXJlIG91dCB3aGF0IHRoZXkgYXJlXG5cbiAgICAgIGNhc2UgXCJ6XCI6XG4gICAgICAgIHJldHVybiBzaW1wbGUoL1thLXpfKy0vXXsxLDI1Nn0/L2kpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbGl0ZXJhbCh0KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHVuaXQgPSB1bml0YXRlKHRva2VuKSB8fCB7XG4gICAgaW52YWxpZFJlYXNvbjogTUlTU0lOR19GVFBcbiAgfTtcbiAgdW5pdC50b2tlbiA9IHRva2VuO1xuICByZXR1cm4gdW5pdDtcbn1cblxudmFyIHBhcnRUeXBlU3R5bGVUb1Rva2VuVmFsID0ge1xuICB5ZWFyOiB7XG4gICAgXCIyLWRpZ2l0XCI6IFwieXlcIixcbiAgICBudW1lcmljOiBcInl5eXl5XCJcbiAgfSxcbiAgbW9udGg6IHtcbiAgICBudW1lcmljOiBcIk1cIixcbiAgICBcIjItZGlnaXRcIjogXCJNTVwiLFxuICAgIHNob3J0OiBcIk1NTVwiLFxuICAgIGxvbmc6IFwiTU1NTVwiXG4gIH0sXG4gIGRheToge1xuICAgIG51bWVyaWM6IFwiZFwiLFxuICAgIFwiMi1kaWdpdFwiOiBcImRkXCJcbiAgfSxcbiAgd2Vla2RheToge1xuICAgIHNob3J0OiBcIkVFRVwiLFxuICAgIGxvbmc6IFwiRUVFRVwiXG4gIH0sXG4gIGRheXBlcmlvZDogXCJhXCIsXG4gIGRheVBlcmlvZDogXCJhXCIsXG4gIGhvdXI6IHtcbiAgICBudW1lcmljOiBcImhcIixcbiAgICBcIjItZGlnaXRcIjogXCJoaFwiXG4gIH0sXG4gIG1pbnV0ZToge1xuICAgIG51bWVyaWM6IFwibVwiLFxuICAgIFwiMi1kaWdpdFwiOiBcIm1tXCJcbiAgfSxcbiAgc2Vjb25kOiB7XG4gICAgbnVtZXJpYzogXCJzXCIsXG4gICAgXCIyLWRpZ2l0XCI6IFwic3NcIlxuICB9XG59O1xuXG5mdW5jdGlvbiB0b2tlbkZvclBhcnQocGFydCwgbG9jYWxlLCBmb3JtYXRPcHRzKSB7XG4gIHZhciB0eXBlID0gcGFydC50eXBlLFxuICAgICAgdmFsdWUgPSBwYXJ0LnZhbHVlO1xuXG4gIGlmICh0eXBlID09PSBcImxpdGVyYWxcIikge1xuICAgIHJldHVybiB7XG4gICAgICBsaXRlcmFsOiB0cnVlLFxuICAgICAgdmFsOiB2YWx1ZVxuICAgIH07XG4gIH1cblxuICB2YXIgc3R5bGUgPSBmb3JtYXRPcHRzW3R5cGVdO1xuICB2YXIgdmFsID0gcGFydFR5cGVTdHlsZVRvVG9rZW5WYWxbdHlwZV07XG5cbiAgaWYgKHR5cGVvZiB2YWwgPT09IFwib2JqZWN0XCIpIHtcbiAgICB2YWwgPSB2YWxbc3R5bGVdO1xuICB9XG5cbiAgaWYgKHZhbCkge1xuICAgIHJldHVybiB7XG4gICAgICBsaXRlcmFsOiBmYWxzZSxcbiAgICAgIHZhbDogdmFsXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkUmVnZXgodW5pdHMpIHtcbiAgdmFyIHJlID0gdW5pdHMubWFwKGZ1bmN0aW9uICh1KSB7XG4gICAgcmV0dXJuIHUucmVnZXg7XG4gIH0pLnJlZHVjZShmdW5jdGlvbiAoZiwgcikge1xuICAgIHJldHVybiBmICsgXCIoXCIgKyByLnNvdXJjZSArIFwiKVwiO1xuICB9LCBcIlwiKTtcbiAgcmV0dXJuIFtcIl5cIiArIHJlICsgXCIkXCIsIHVuaXRzXTtcbn1cblxuZnVuY3Rpb24gbWF0Y2goaW5wdXQsIHJlZ2V4LCBoYW5kbGVycykge1xuICB2YXIgbWF0Y2hlcyA9IGlucHV0Lm1hdGNoKHJlZ2V4KTtcblxuICBpZiAobWF0Y2hlcykge1xuICAgIHZhciBhbGwgPSB7fTtcbiAgICB2YXIgbWF0Y2hJbmRleCA9IDE7XG5cbiAgICBmb3IgKHZhciBpIGluIGhhbmRsZXJzKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkoaGFuZGxlcnMsIGkpKSB7XG4gICAgICAgIHZhciBoID0gaGFuZGxlcnNbaV0sXG4gICAgICAgICAgICBncm91cHMgPSBoLmdyb3VwcyA/IGguZ3JvdXBzICsgMSA6IDE7XG5cbiAgICAgICAgaWYgKCFoLmxpdGVyYWwgJiYgaC50b2tlbikge1xuICAgICAgICAgIGFsbFtoLnRva2VuLnZhbFswXV0gPSBoLmRlc2VyKG1hdGNoZXMuc2xpY2UobWF0Y2hJbmRleCwgbWF0Y2hJbmRleCArIGdyb3VwcykpO1xuICAgICAgICB9XG5cbiAgICAgICAgbWF0Y2hJbmRleCArPSBncm91cHM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFttYXRjaGVzLCBhbGxdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBbbWF0Y2hlcywge31dO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRhdGVUaW1lRnJvbU1hdGNoZXMobWF0Y2hlcykge1xuICB2YXIgdG9GaWVsZCA9IGZ1bmN0aW9uIHRvRmllbGQodG9rZW4pIHtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlIFwiU1wiOlxuICAgICAgICByZXR1cm4gXCJtaWxsaXNlY29uZFwiO1xuXG4gICAgICBjYXNlIFwic1wiOlxuICAgICAgICByZXR1cm4gXCJzZWNvbmRcIjtcblxuICAgICAgY2FzZSBcIm1cIjpcbiAgICAgICAgcmV0dXJuIFwibWludXRlXCI7XG5cbiAgICAgIGNhc2UgXCJoXCI6XG4gICAgICBjYXNlIFwiSFwiOlxuICAgICAgICByZXR1cm4gXCJob3VyXCI7XG5cbiAgICAgIGNhc2UgXCJkXCI6XG4gICAgICAgIHJldHVybiBcImRheVwiO1xuXG4gICAgICBjYXNlIFwib1wiOlxuICAgICAgICByZXR1cm4gXCJvcmRpbmFsXCI7XG5cbiAgICAgIGNhc2UgXCJMXCI6XG4gICAgICBjYXNlIFwiTVwiOlxuICAgICAgICByZXR1cm4gXCJtb250aFwiO1xuXG4gICAgICBjYXNlIFwieVwiOlxuICAgICAgICByZXR1cm4gXCJ5ZWFyXCI7XG5cbiAgICAgIGNhc2UgXCJFXCI6XG4gICAgICBjYXNlIFwiY1wiOlxuICAgICAgICByZXR1cm4gXCJ3ZWVrZGF5XCI7XG5cbiAgICAgIGNhc2UgXCJXXCI6XG4gICAgICAgIHJldHVybiBcIndlZWtOdW1iZXJcIjtcblxuICAgICAgY2FzZSBcImtcIjpcbiAgICAgICAgcmV0dXJuIFwid2Vla1llYXJcIjtcblxuICAgICAgY2FzZSBcInFcIjpcbiAgICAgICAgcmV0dXJuIFwicXVhcnRlclwiO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHpvbmU7XG5cbiAgaWYgKCFpc1VuZGVmaW5lZChtYXRjaGVzLlopKSB7XG4gICAgem9uZSA9IG5ldyBGaXhlZE9mZnNldFpvbmUobWF0Y2hlcy5aKTtcbiAgfSBlbHNlIGlmICghaXNVbmRlZmluZWQobWF0Y2hlcy56KSkge1xuICAgIHpvbmUgPSBJQU5BWm9uZS5jcmVhdGUobWF0Y2hlcy56KTtcbiAgfSBlbHNlIHtcbiAgICB6b25lID0gbnVsbDtcbiAgfVxuXG4gIGlmICghaXNVbmRlZmluZWQobWF0Y2hlcy5xKSkge1xuICAgIG1hdGNoZXMuTSA9IChtYXRjaGVzLnEgLSAxKSAqIDMgKyAxO1xuICB9XG5cbiAgaWYgKCFpc1VuZGVmaW5lZChtYXRjaGVzLmgpKSB7XG4gICAgaWYgKG1hdGNoZXMuaCA8IDEyICYmIG1hdGNoZXMuYSA9PT0gMSkge1xuICAgICAgbWF0Y2hlcy5oICs9IDEyO1xuICAgIH0gZWxzZSBpZiAobWF0Y2hlcy5oID09PSAxMiAmJiBtYXRjaGVzLmEgPT09IDApIHtcbiAgICAgIG1hdGNoZXMuaCA9IDA7XG4gICAgfVxuICB9XG5cbiAgaWYgKG1hdGNoZXMuRyA9PT0gMCAmJiBtYXRjaGVzLnkpIHtcbiAgICBtYXRjaGVzLnkgPSAtbWF0Y2hlcy55O1xuICB9XG5cbiAgaWYgKCFpc1VuZGVmaW5lZChtYXRjaGVzLnUpKSB7XG4gICAgbWF0Y2hlcy5TID0gcGFyc2VNaWxsaXMobWF0Y2hlcy51KTtcbiAgfVxuXG4gIHZhciB2YWxzID0gT2JqZWN0LmtleXMobWF0Y2hlcykucmVkdWNlKGZ1bmN0aW9uIChyLCBrKSB7XG4gICAgdmFyIGYgPSB0b0ZpZWxkKGspO1xuXG4gICAgaWYgKGYpIHtcbiAgICAgIHJbZl0gPSBtYXRjaGVzW2tdO1xuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9LCB7fSk7XG4gIHJldHVybiBbdmFscywgem9uZV07XG59XG5cbnZhciBkdW1teURhdGVUaW1lQ2FjaGUgPSBudWxsO1xuXG5mdW5jdGlvbiBnZXREdW1teURhdGVUaW1lKCkge1xuICBpZiAoIWR1bW15RGF0ZVRpbWVDYWNoZSkge1xuICAgIGR1bW15RGF0ZVRpbWVDYWNoZSA9IERhdGVUaW1lLmZyb21NaWxsaXMoMTU1NTU1NTU1NTU1NSk7XG4gIH1cblxuICByZXR1cm4gZHVtbXlEYXRlVGltZUNhY2hlO1xufVxuXG5mdW5jdGlvbiBtYXliZUV4cGFuZE1hY3JvVG9rZW4odG9rZW4sIGxvY2FsZSkge1xuICBpZiAodG9rZW4ubGl0ZXJhbCkge1xuICAgIHJldHVybiB0b2tlbjtcbiAgfVxuXG4gIHZhciBmb3JtYXRPcHRzID0gRm9ybWF0dGVyLm1hY3JvVG9rZW5Ub0Zvcm1hdE9wdHModG9rZW4udmFsKTtcblxuICBpZiAoIWZvcm1hdE9wdHMpIHtcbiAgICByZXR1cm4gdG9rZW47XG4gIH1cblxuICB2YXIgZm9ybWF0dGVyID0gRm9ybWF0dGVyLmNyZWF0ZShsb2NhbGUsIGZvcm1hdE9wdHMpO1xuICB2YXIgcGFydHMgPSBmb3JtYXR0ZXIuZm9ybWF0RGF0ZVRpbWVQYXJ0cyhnZXREdW1teURhdGVUaW1lKCkpO1xuICB2YXIgdG9rZW5zID0gcGFydHMubWFwKGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHRva2VuRm9yUGFydChwLCBsb2NhbGUsIGZvcm1hdE9wdHMpO1xuICB9KTtcblxuICBpZiAodG9rZW5zLmluY2x1ZGVzKHVuZGVmaW5lZCkpIHtcbiAgICByZXR1cm4gdG9rZW47XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufVxuXG5mdW5jdGlvbiBleHBhbmRNYWNyb1Rva2Vucyh0b2tlbnMsIGxvY2FsZSkge1xuICB2YXIgX0FycmF5JHByb3RvdHlwZTtcblxuICByZXR1cm4gKF9BcnJheSRwcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGUpLmNvbmNhdC5hcHBseShfQXJyYXkkcHJvdG90eXBlLCB0b2tlbnMubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIG1heWJlRXhwYW5kTWFjcm9Ub2tlbih0LCBsb2NhbGUpO1xuICB9KSk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBleHBsYWluRnJvbVRva2Vucyhsb2NhbGUsIGlucHV0LCBmb3JtYXQpIHtcbiAgdmFyIHRva2VucyA9IGV4cGFuZE1hY3JvVG9rZW5zKEZvcm1hdHRlci5wYXJzZUZvcm1hdChmb3JtYXQpLCBsb2NhbGUpLFxuICAgICAgdW5pdHMgPSB0b2tlbnMubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIHVuaXRGb3JUb2tlbih0LCBsb2NhbGUpO1xuICB9KSxcbiAgICAgIGRpc3F1YWxpZnlpbmdVbml0ID0gdW5pdHMuZmluZChmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiB0LmludmFsaWRSZWFzb247XG4gIH0pO1xuXG4gIGlmIChkaXNxdWFsaWZ5aW5nVW5pdCkge1xuICAgIHJldHVybiB7XG4gICAgICBpbnB1dDogaW5wdXQsXG4gICAgICB0b2tlbnM6IHRva2VucyxcbiAgICAgIGludmFsaWRSZWFzb246IGRpc3F1YWxpZnlpbmdVbml0LmludmFsaWRSZWFzb25cbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHZhciBfYnVpbGRSZWdleCA9IGJ1aWxkUmVnZXgodW5pdHMpLFxuICAgICAgICByZWdleFN0cmluZyA9IF9idWlsZFJlZ2V4WzBdLFxuICAgICAgICBoYW5kbGVycyA9IF9idWlsZFJlZ2V4WzFdLFxuICAgICAgICByZWdleCA9IFJlZ0V4cChyZWdleFN0cmluZywgXCJpXCIpLFxuICAgICAgICBfbWF0Y2ggPSBtYXRjaChpbnB1dCwgcmVnZXgsIGhhbmRsZXJzKSxcbiAgICAgICAgcmF3TWF0Y2hlcyA9IF9tYXRjaFswXSxcbiAgICAgICAgbWF0Y2hlcyA9IF9tYXRjaFsxXSxcbiAgICAgICAgX3JlZjYgPSBtYXRjaGVzID8gZGF0ZVRpbWVGcm9tTWF0Y2hlcyhtYXRjaGVzKSA6IFtudWxsLCBudWxsXSxcbiAgICAgICAgcmVzdWx0ID0gX3JlZjZbMF0sXG4gICAgICAgIHpvbmUgPSBfcmVmNlsxXTtcblxuICAgIGlmIChoYXNPd25Qcm9wZXJ0eShtYXRjaGVzLCBcImFcIikgJiYgaGFzT3duUHJvcGVydHkobWF0Y2hlcywgXCJIXCIpKSB7XG4gICAgICB0aHJvdyBuZXcgQ29uZmxpY3RpbmdTcGVjaWZpY2F0aW9uRXJyb3IoXCJDYW4ndCBpbmNsdWRlIG1lcmlkaWVtIHdoZW4gc3BlY2lmeWluZyAyNC1ob3VyIGZvcm1hdFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgaW5wdXQ6IGlucHV0LFxuICAgICAgdG9rZW5zOiB0b2tlbnMsXG4gICAgICByZWdleDogcmVnZXgsXG4gICAgICByYXdNYXRjaGVzOiByYXdNYXRjaGVzLFxuICAgICAgbWF0Y2hlczogbWF0Y2hlcyxcbiAgICAgIHJlc3VsdDogcmVzdWx0LFxuICAgICAgem9uZTogem9uZVxuICAgIH07XG4gIH1cbn1cbmZ1bmN0aW9uIHBhcnNlRnJvbVRva2Vucyhsb2NhbGUsIGlucHV0LCBmb3JtYXQpIHtcbiAgdmFyIF9leHBsYWluRnJvbVRva2VucyA9IGV4cGxhaW5Gcm9tVG9rZW5zKGxvY2FsZSwgaW5wdXQsIGZvcm1hdCksXG4gICAgICByZXN1bHQgPSBfZXhwbGFpbkZyb21Ub2tlbnMucmVzdWx0LFxuICAgICAgem9uZSA9IF9leHBsYWluRnJvbVRva2Vucy56b25lLFxuICAgICAgaW52YWxpZFJlYXNvbiA9IF9leHBsYWluRnJvbVRva2Vucy5pbnZhbGlkUmVhc29uO1xuXG4gIHJldHVybiBbcmVzdWx0LCB6b25lLCBpbnZhbGlkUmVhc29uXTtcbn1cblxudmFyIG5vbkxlYXBMYWRkZXIgPSBbMCwgMzEsIDU5LCA5MCwgMTIwLCAxNTEsIDE4MSwgMjEyLCAyNDMsIDI3MywgMzA0LCAzMzRdLFxuICAgIGxlYXBMYWRkZXIgPSBbMCwgMzEsIDYwLCA5MSwgMTIxLCAxNTIsIDE4MiwgMjEzLCAyNDQsIDI3NCwgMzA1LCAzMzVdO1xuXG5mdW5jdGlvbiB1bml0T3V0T2ZSYW5nZSh1bml0LCB2YWx1ZSkge1xuICByZXR1cm4gbmV3IEludmFsaWQoXCJ1bml0IG91dCBvZiByYW5nZVwiLCBcInlvdSBzcGVjaWZpZWQgXCIgKyB2YWx1ZSArIFwiIChvZiB0eXBlIFwiICsgdHlwZW9mIHZhbHVlICsgXCIpIGFzIGEgXCIgKyB1bml0ICsgXCIsIHdoaWNoIGlzIGludmFsaWRcIik7XG59XG5cbmZ1bmN0aW9uIGRheU9mV2Vlayh5ZWFyLCBtb250aCwgZGF5KSB7XG4gIHZhciBqcyA9IG5ldyBEYXRlKERhdGUuVVRDKHllYXIsIG1vbnRoIC0gMSwgZGF5KSkuZ2V0VVRDRGF5KCk7XG4gIHJldHVybiBqcyA9PT0gMCA/IDcgOiBqcztcbn1cblxuZnVuY3Rpb24gY29tcHV0ZU9yZGluYWwoeWVhciwgbW9udGgsIGRheSkge1xuICByZXR1cm4gZGF5ICsgKGlzTGVhcFllYXIoeWVhcikgPyBsZWFwTGFkZGVyIDogbm9uTGVhcExhZGRlcilbbW9udGggLSAxXTtcbn1cblxuZnVuY3Rpb24gdW5jb21wdXRlT3JkaW5hbCh5ZWFyLCBvcmRpbmFsKSB7XG4gIHZhciB0YWJsZSA9IGlzTGVhcFllYXIoeWVhcikgPyBsZWFwTGFkZGVyIDogbm9uTGVhcExhZGRlcixcbiAgICAgIG1vbnRoMCA9IHRhYmxlLmZpbmRJbmRleChmdW5jdGlvbiAoaSkge1xuICAgIHJldHVybiBpIDwgb3JkaW5hbDtcbiAgfSksXG4gICAgICBkYXkgPSBvcmRpbmFsIC0gdGFibGVbbW9udGgwXTtcbiAgcmV0dXJuIHtcbiAgICBtb250aDogbW9udGgwICsgMSxcbiAgICBkYXk6IGRheVxuICB9O1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gZ3JlZ29yaWFuVG9XZWVrKGdyZWdPYmopIHtcbiAgdmFyIHllYXIgPSBncmVnT2JqLnllYXIsXG4gICAgICBtb250aCA9IGdyZWdPYmoubW9udGgsXG4gICAgICBkYXkgPSBncmVnT2JqLmRheSxcbiAgICAgIG9yZGluYWwgPSBjb21wdXRlT3JkaW5hbCh5ZWFyLCBtb250aCwgZGF5KSxcbiAgICAgIHdlZWtkYXkgPSBkYXlPZldlZWsoeWVhciwgbW9udGgsIGRheSk7XG4gIHZhciB3ZWVrTnVtYmVyID0gTWF0aC5mbG9vcigob3JkaW5hbCAtIHdlZWtkYXkgKyAxMCkgLyA3KSxcbiAgICAgIHdlZWtZZWFyO1xuXG4gIGlmICh3ZWVrTnVtYmVyIDwgMSkge1xuICAgIHdlZWtZZWFyID0geWVhciAtIDE7XG4gICAgd2Vla051bWJlciA9IHdlZWtzSW5XZWVrWWVhcih3ZWVrWWVhcik7XG4gIH0gZWxzZSBpZiAod2Vla051bWJlciA+IHdlZWtzSW5XZWVrWWVhcih5ZWFyKSkge1xuICAgIHdlZWtZZWFyID0geWVhciArIDE7XG4gICAgd2Vla051bWJlciA9IDE7XG4gIH0gZWxzZSB7XG4gICAgd2Vla1llYXIgPSB5ZWFyO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe1xuICAgIHdlZWtZZWFyOiB3ZWVrWWVhcixcbiAgICB3ZWVrTnVtYmVyOiB3ZWVrTnVtYmVyLFxuICAgIHdlZWtkYXk6IHdlZWtkYXlcbiAgfSwgdGltZU9iamVjdChncmVnT2JqKSk7XG59XG5mdW5jdGlvbiB3ZWVrVG9HcmVnb3JpYW4od2Vla0RhdGEpIHtcbiAgdmFyIHdlZWtZZWFyID0gd2Vla0RhdGEud2Vla1llYXIsXG4gICAgICB3ZWVrTnVtYmVyID0gd2Vla0RhdGEud2Vla051bWJlcixcbiAgICAgIHdlZWtkYXkgPSB3ZWVrRGF0YS53ZWVrZGF5LFxuICAgICAgd2Vla2RheU9mSmFuNCA9IGRheU9mV2Vlayh3ZWVrWWVhciwgMSwgNCksXG4gICAgICB5ZWFySW5EYXlzID0gZGF5c0luWWVhcih3ZWVrWWVhcik7XG4gIHZhciBvcmRpbmFsID0gd2Vla051bWJlciAqIDcgKyB3ZWVrZGF5IC0gd2Vla2RheU9mSmFuNCAtIDMsXG4gICAgICB5ZWFyO1xuXG4gIGlmIChvcmRpbmFsIDwgMSkge1xuICAgIHllYXIgPSB3ZWVrWWVhciAtIDE7XG4gICAgb3JkaW5hbCArPSBkYXlzSW5ZZWFyKHllYXIpO1xuICB9IGVsc2UgaWYgKG9yZGluYWwgPiB5ZWFySW5EYXlzKSB7XG4gICAgeWVhciA9IHdlZWtZZWFyICsgMTtcbiAgICBvcmRpbmFsIC09IGRheXNJblllYXIod2Vla1llYXIpO1xuICB9IGVsc2Uge1xuICAgIHllYXIgPSB3ZWVrWWVhcjtcbiAgfVxuXG4gIHZhciBfdW5jb21wdXRlT3JkaW5hbCA9IHVuY29tcHV0ZU9yZGluYWwoeWVhciwgb3JkaW5hbCksXG4gICAgICBtb250aCA9IF91bmNvbXB1dGVPcmRpbmFsLm1vbnRoLFxuICAgICAgZGF5ID0gX3VuY29tcHV0ZU9yZGluYWwuZGF5O1xuXG4gIHJldHVybiBPYmplY3QuYXNzaWduKHtcbiAgICB5ZWFyOiB5ZWFyLFxuICAgIG1vbnRoOiBtb250aCxcbiAgICBkYXk6IGRheVxuICB9LCB0aW1lT2JqZWN0KHdlZWtEYXRhKSk7XG59XG5mdW5jdGlvbiBncmVnb3JpYW5Ub09yZGluYWwoZ3JlZ0RhdGEpIHtcbiAgdmFyIHllYXIgPSBncmVnRGF0YS55ZWFyLFxuICAgICAgbW9udGggPSBncmVnRGF0YS5tb250aCxcbiAgICAgIGRheSA9IGdyZWdEYXRhLmRheSxcbiAgICAgIG9yZGluYWwgPSBjb21wdXRlT3JkaW5hbCh5ZWFyLCBtb250aCwgZGF5KTtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe1xuICAgIHllYXI6IHllYXIsXG4gICAgb3JkaW5hbDogb3JkaW5hbFxuICB9LCB0aW1lT2JqZWN0KGdyZWdEYXRhKSk7XG59XG5mdW5jdGlvbiBvcmRpbmFsVG9HcmVnb3JpYW4ob3JkaW5hbERhdGEpIHtcbiAgdmFyIHllYXIgPSBvcmRpbmFsRGF0YS55ZWFyLFxuICAgICAgb3JkaW5hbCA9IG9yZGluYWxEYXRhLm9yZGluYWwsXG4gICAgICBfdW5jb21wdXRlT3JkaW5hbDIgPSB1bmNvbXB1dGVPcmRpbmFsKHllYXIsIG9yZGluYWwpLFxuICAgICAgbW9udGggPSBfdW5jb21wdXRlT3JkaW5hbDIubW9udGgsXG4gICAgICBkYXkgPSBfdW5jb21wdXRlT3JkaW5hbDIuZGF5O1xuXG4gIHJldHVybiBPYmplY3QuYXNzaWduKHtcbiAgICB5ZWFyOiB5ZWFyLFxuICAgIG1vbnRoOiBtb250aCxcbiAgICBkYXk6IGRheVxuICB9LCB0aW1lT2JqZWN0KG9yZGluYWxEYXRhKSk7XG59XG5mdW5jdGlvbiBoYXNJbnZhbGlkV2Vla0RhdGEob2JqKSB7XG4gIHZhciB2YWxpZFllYXIgPSBpc0ludGVnZXIob2JqLndlZWtZZWFyKSxcbiAgICAgIHZhbGlkV2VlayA9IGludGVnZXJCZXR3ZWVuKG9iai53ZWVrTnVtYmVyLCAxLCB3ZWVrc0luV2Vla1llYXIob2JqLndlZWtZZWFyKSksXG4gICAgICB2YWxpZFdlZWtkYXkgPSBpbnRlZ2VyQmV0d2VlbihvYmoud2Vla2RheSwgMSwgNyk7XG5cbiAgaWYgKCF2YWxpZFllYXIpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJ3ZWVrWWVhclwiLCBvYmoud2Vla1llYXIpO1xuICB9IGVsc2UgaWYgKCF2YWxpZFdlZWspIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJ3ZWVrXCIsIG9iai53ZWVrKTtcbiAgfSBlbHNlIGlmICghdmFsaWRXZWVrZGF5KSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwid2Vla2RheVwiLCBvYmoud2Vla2RheSk7XG4gIH0gZWxzZSByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBoYXNJbnZhbGlkT3JkaW5hbERhdGEob2JqKSB7XG4gIHZhciB2YWxpZFllYXIgPSBpc0ludGVnZXIob2JqLnllYXIpLFxuICAgICAgdmFsaWRPcmRpbmFsID0gaW50ZWdlckJldHdlZW4ob2JqLm9yZGluYWwsIDEsIGRheXNJblllYXIob2JqLnllYXIpKTtcblxuICBpZiAoIXZhbGlkWWVhcikge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcInllYXJcIiwgb2JqLnllYXIpO1xuICB9IGVsc2UgaWYgKCF2YWxpZE9yZGluYWwpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJvcmRpbmFsXCIsIG9iai5vcmRpbmFsKTtcbiAgfSBlbHNlIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGhhc0ludmFsaWRHcmVnb3JpYW5EYXRhKG9iaikge1xuICB2YXIgdmFsaWRZZWFyID0gaXNJbnRlZ2VyKG9iai55ZWFyKSxcbiAgICAgIHZhbGlkTW9udGggPSBpbnRlZ2VyQmV0d2VlbihvYmoubW9udGgsIDEsIDEyKSxcbiAgICAgIHZhbGlkRGF5ID0gaW50ZWdlckJldHdlZW4ob2JqLmRheSwgMSwgZGF5c0luTW9udGgob2JqLnllYXIsIG9iai5tb250aCkpO1xuXG4gIGlmICghdmFsaWRZZWFyKSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwieWVhclwiLCBvYmoueWVhcik7XG4gIH0gZWxzZSBpZiAoIXZhbGlkTW9udGgpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJtb250aFwiLCBvYmoubW9udGgpO1xuICB9IGVsc2UgaWYgKCF2YWxpZERheSkge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcImRheVwiLCBvYmouZGF5KTtcbiAgfSBlbHNlIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGhhc0ludmFsaWRUaW1lRGF0YShvYmopIHtcbiAgdmFyIGhvdXIgPSBvYmouaG91cixcbiAgICAgIG1pbnV0ZSA9IG9iai5taW51dGUsXG4gICAgICBzZWNvbmQgPSBvYmouc2Vjb25kLFxuICAgICAgbWlsbGlzZWNvbmQgPSBvYmoubWlsbGlzZWNvbmQ7XG4gIHZhciB2YWxpZEhvdXIgPSBpbnRlZ2VyQmV0d2Vlbihob3VyLCAwLCAyMykgfHwgaG91ciA9PT0gMjQgJiYgbWludXRlID09PSAwICYmIHNlY29uZCA9PT0gMCAmJiBtaWxsaXNlY29uZCA9PT0gMCxcbiAgICAgIHZhbGlkTWludXRlID0gaW50ZWdlckJldHdlZW4obWludXRlLCAwLCA1OSksXG4gICAgICB2YWxpZFNlY29uZCA9IGludGVnZXJCZXR3ZWVuKHNlY29uZCwgMCwgNTkpLFxuICAgICAgdmFsaWRNaWxsaXNlY29uZCA9IGludGVnZXJCZXR3ZWVuKG1pbGxpc2Vjb25kLCAwLCA5OTkpO1xuXG4gIGlmICghdmFsaWRIb3VyKSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwiaG91clwiLCBob3VyKTtcbiAgfSBlbHNlIGlmICghdmFsaWRNaW51dGUpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJtaW51dGVcIiwgbWludXRlKTtcbiAgfSBlbHNlIGlmICghdmFsaWRTZWNvbmQpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJzZWNvbmRcIiwgc2Vjb25kKTtcbiAgfSBlbHNlIGlmICghdmFsaWRNaWxsaXNlY29uZCkge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcIm1pbGxpc2Vjb25kXCIsIG1pbGxpc2Vjb25kKTtcbiAgfSBlbHNlIHJldHVybiBmYWxzZTtcbn1cblxudmFyIElOVkFMSUQkMiA9IFwiSW52YWxpZCBEYXRlVGltZVwiO1xudmFyIE1BWF9EQVRFID0gOC42NGUxNTtcblxuZnVuY3Rpb24gdW5zdXBwb3J0ZWRab25lKHpvbmUpIHtcbiAgcmV0dXJuIG5ldyBJbnZhbGlkKFwidW5zdXBwb3J0ZWQgem9uZVwiLCBcInRoZSB6b25lIFxcXCJcIiArIHpvbmUubmFtZSArIFwiXFxcIiBpcyBub3Qgc3VwcG9ydGVkXCIpO1xufSAvLyB3ZSBjYWNoZSB3ZWVrIGRhdGEgb24gdGhlIERUIG9iamVjdCBhbmQgdGhpcyBpbnRlcm1lZGlhdGVzIHRoZSBjYWNoZVxuXG5cbmZ1bmN0aW9uIHBvc3NpYmx5Q2FjaGVkV2Vla0RhdGEoZHQpIHtcbiAgaWYgKGR0LndlZWtEYXRhID09PSBudWxsKSB7XG4gICAgZHQud2Vla0RhdGEgPSBncmVnb3JpYW5Ub1dlZWsoZHQuYyk7XG4gIH1cblxuICByZXR1cm4gZHQud2Vla0RhdGE7XG59IC8vIGNsb25lIHJlYWxseSBtZWFucywgXCJtYWtlIGEgbmV3IG9iamVjdCB3aXRoIHRoZXNlIG1vZGlmaWNhdGlvbnNcIi4gYWxsIFwic2V0dGVyc1wiIHJlYWxseSB1c2UgdGhpc1xuLy8gdG8gY3JlYXRlIGEgbmV3IG9iamVjdCB3aGlsZSBvbmx5IGNoYW5naW5nIHNvbWUgb2YgdGhlIHByb3BlcnRpZXNcblxuXG5mdW5jdGlvbiBjbG9uZSQxKGluc3QsIGFsdHMpIHtcbiAgdmFyIGN1cnJlbnQgPSB7XG4gICAgdHM6IGluc3QudHMsXG4gICAgem9uZTogaW5zdC56b25lLFxuICAgIGM6IGluc3QuYyxcbiAgICBvOiBpbnN0Lm8sXG4gICAgbG9jOiBpbnN0LmxvYyxcbiAgICBpbnZhbGlkOiBpbnN0LmludmFsaWRcbiAgfTtcbiAgcmV0dXJuIG5ldyBEYXRlVGltZShPYmplY3QuYXNzaWduKHt9LCBjdXJyZW50LCBhbHRzLCB7XG4gICAgb2xkOiBjdXJyZW50XG4gIH0pKTtcbn0gLy8gZmluZCB0aGUgcmlnaHQgb2Zmc2V0IGEgZ2l2ZW4gbG9jYWwgdGltZS4gVGhlIG8gaW5wdXQgaXMgb3VyIGd1ZXNzLCB3aGljaCBkZXRlcm1pbmVzIHdoaWNoXG4vLyBvZmZzZXQgd2UnbGwgcGljayBpbiBhbWJpZ3VvdXMgY2FzZXMgKGUuZy4gdGhlcmUgYXJlIHR3byAzIEFNcyBiL2MgRmFsbGJhY2sgRFNUKVxuXG5cbmZ1bmN0aW9uIGZpeE9mZnNldChsb2NhbFRTLCBvLCB0eikge1xuICAvLyBPdXIgVVRDIHRpbWUgaXMganVzdCBhIGd1ZXNzIGJlY2F1c2Ugb3VyIG9mZnNldCBpcyBqdXN0IGEgZ3Vlc3NcbiAgdmFyIHV0Y0d1ZXNzID0gbG9jYWxUUyAtIG8gKiA2MCAqIDEwMDA7IC8vIFRlc3Qgd2hldGhlciB0aGUgem9uZSBtYXRjaGVzIHRoZSBvZmZzZXQgZm9yIHRoaXMgdHNcblxuICB2YXIgbzIgPSB0ei5vZmZzZXQodXRjR3Vlc3MpOyAvLyBJZiBzbywgb2Zmc2V0IGRpZG4ndCBjaGFuZ2UgYW5kIHdlJ3JlIGRvbmVcblxuICBpZiAobyA9PT0gbzIpIHtcbiAgICByZXR1cm4gW3V0Y0d1ZXNzLCBvXTtcbiAgfSAvLyBJZiBub3QsIGNoYW5nZSB0aGUgdHMgYnkgdGhlIGRpZmZlcmVuY2UgaW4gdGhlIG9mZnNldFxuXG5cbiAgdXRjR3Vlc3MgLT0gKG8yIC0gbykgKiA2MCAqIDEwMDA7IC8vIElmIHRoYXQgZ2l2ZXMgdXMgdGhlIGxvY2FsIHRpbWUgd2Ugd2FudCwgd2UncmUgZG9uZVxuXG4gIHZhciBvMyA9IHR6Lm9mZnNldCh1dGNHdWVzcyk7XG5cbiAgaWYgKG8yID09PSBvMykge1xuICAgIHJldHVybiBbdXRjR3Vlc3MsIG8yXTtcbiAgfSAvLyBJZiBpdCdzIGRpZmZlcmVudCwgd2UncmUgaW4gYSBob2xlIHRpbWUuIFRoZSBvZmZzZXQgaGFzIGNoYW5nZWQsIGJ1dCB0aGUgd2UgZG9uJ3QgYWRqdXN0IHRoZSB0aW1lXG5cblxuICByZXR1cm4gW2xvY2FsVFMgLSBNYXRoLm1pbihvMiwgbzMpICogNjAgKiAxMDAwLCBNYXRoLm1heChvMiwgbzMpXTtcbn0gLy8gY29udmVydCBhbiBlcG9jaCB0aW1lc3RhbXAgaW50byBhIGNhbGVuZGFyIG9iamVjdCB3aXRoIHRoZSBnaXZlbiBvZmZzZXRcblxuXG5mdW5jdGlvbiB0c1RvT2JqKHRzLCBvZmZzZXQpIHtcbiAgdHMgKz0gb2Zmc2V0ICogNjAgKiAxMDAwO1xuICB2YXIgZCA9IG5ldyBEYXRlKHRzKTtcbiAgcmV0dXJuIHtcbiAgICB5ZWFyOiBkLmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgbW9udGg6IGQuZ2V0VVRDTW9udGgoKSArIDEsXG4gICAgZGF5OiBkLmdldFVUQ0RhdGUoKSxcbiAgICBob3VyOiBkLmdldFVUQ0hvdXJzKCksXG4gICAgbWludXRlOiBkLmdldFVUQ01pbnV0ZXMoKSxcbiAgICBzZWNvbmQ6IGQuZ2V0VVRDU2Vjb25kcygpLFxuICAgIG1pbGxpc2Vjb25kOiBkLmdldFVUQ01pbGxpc2Vjb25kcygpXG4gIH07XG59IC8vIGNvbnZlcnQgYSBjYWxlbmRhciBvYmplY3QgdG8gYSBlcG9jaCB0aW1lc3RhbXBcblxuXG5mdW5jdGlvbiBvYmpUb1RTKG9iaiwgb2Zmc2V0LCB6b25lKSB7XG4gIHJldHVybiBmaXhPZmZzZXQob2JqVG9Mb2NhbFRTKG9iaiksIG9mZnNldCwgem9uZSk7XG59IC8vIGNyZWF0ZSBhIG5ldyBEVCBpbnN0YW5jZSBieSBhZGRpbmcgYSBkdXJhdGlvbiwgYWRqdXN0aW5nIGZvciBEU1RzXG5cblxuZnVuY3Rpb24gYWRqdXN0VGltZShpbnN0LCBkdXIpIHtcbiAgdmFyIG9QcmUgPSBpbnN0Lm8sXG4gICAgICB5ZWFyID0gaW5zdC5jLnllYXIgKyBNYXRoLnRydW5jKGR1ci55ZWFycyksXG4gICAgICBtb250aCA9IGluc3QuYy5tb250aCArIE1hdGgudHJ1bmMoZHVyLm1vbnRocykgKyBNYXRoLnRydW5jKGR1ci5xdWFydGVycykgKiAzLFxuICAgICAgYyA9IE9iamVjdC5hc3NpZ24oe30sIGluc3QuYywge1xuICAgIHllYXI6IHllYXIsXG4gICAgbW9udGg6IG1vbnRoLFxuICAgIGRheTogTWF0aC5taW4oaW5zdC5jLmRheSwgZGF5c0luTW9udGgoeWVhciwgbW9udGgpKSArIE1hdGgudHJ1bmMoZHVyLmRheXMpICsgTWF0aC50cnVuYyhkdXIud2Vla3MpICogN1xuICB9KSxcbiAgICAgIG1pbGxpc1RvQWRkID0gRHVyYXRpb24uZnJvbU9iamVjdCh7XG4gICAgeWVhcnM6IGR1ci55ZWFycyAtIE1hdGgudHJ1bmMoZHVyLnllYXJzKSxcbiAgICBxdWFydGVyczogZHVyLnF1YXJ0ZXJzIC0gTWF0aC50cnVuYyhkdXIucXVhcnRlcnMpLFxuICAgIG1vbnRoczogZHVyLm1vbnRocyAtIE1hdGgudHJ1bmMoZHVyLm1vbnRocyksXG4gICAgd2Vla3M6IGR1ci53ZWVrcyAtIE1hdGgudHJ1bmMoZHVyLndlZWtzKSxcbiAgICBkYXlzOiBkdXIuZGF5cyAtIE1hdGgudHJ1bmMoZHVyLmRheXMpLFxuICAgIGhvdXJzOiBkdXIuaG91cnMsXG4gICAgbWludXRlczogZHVyLm1pbnV0ZXMsXG4gICAgc2Vjb25kczogZHVyLnNlY29uZHMsXG4gICAgbWlsbGlzZWNvbmRzOiBkdXIubWlsbGlzZWNvbmRzXG4gIH0pLmFzKFwibWlsbGlzZWNvbmRzXCIpLFxuICAgICAgbG9jYWxUUyA9IG9ialRvTG9jYWxUUyhjKTtcblxuICB2YXIgX2ZpeE9mZnNldCA9IGZpeE9mZnNldChsb2NhbFRTLCBvUHJlLCBpbnN0LnpvbmUpLFxuICAgICAgdHMgPSBfZml4T2Zmc2V0WzBdLFxuICAgICAgbyA9IF9maXhPZmZzZXRbMV07XG5cbiAgaWYgKG1pbGxpc1RvQWRkICE9PSAwKSB7XG4gICAgdHMgKz0gbWlsbGlzVG9BZGQ7IC8vIHRoYXQgY291bGQgaGF2ZSBjaGFuZ2VkIHRoZSBvZmZzZXQgYnkgZ29pbmcgb3ZlciBhIERTVCwgYnV0IHdlIHdhbnQgdG8ga2VlcCB0aGUgdHMgdGhlIHNhbWVcblxuICAgIG8gPSBpbnN0LnpvbmUub2Zmc2V0KHRzKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHM6IHRzLFxuICAgIG86IG9cbiAgfTtcbn0gLy8gaGVscGVyIHVzZWZ1bCBpbiB0dXJuaW5nIHRoZSByZXN1bHRzIG9mIHBhcnNpbmcgaW50byByZWFsIGRhdGVzXG4vLyBieSBoYW5kbGluZyB0aGUgem9uZSBvcHRpb25zXG5cblxuZnVuY3Rpb24gcGFyc2VEYXRhVG9EYXRlVGltZShwYXJzZWQsIHBhcnNlZFpvbmUsIG9wdHMsIGZvcm1hdCwgdGV4dCkge1xuICB2YXIgc2V0Wm9uZSA9IG9wdHMuc2V0Wm9uZSxcbiAgICAgIHpvbmUgPSBvcHRzLnpvbmU7XG5cbiAgaWYgKHBhcnNlZCAmJiBPYmplY3Qua2V5cyhwYXJzZWQpLmxlbmd0aCAhPT0gMCkge1xuICAgIHZhciBpbnRlcnByZXRhdGlvblpvbmUgPSBwYXJzZWRab25lIHx8IHpvbmUsXG4gICAgICAgIGluc3QgPSBEYXRlVGltZS5mcm9tT2JqZWN0KE9iamVjdC5hc3NpZ24ocGFyc2VkLCBvcHRzLCB7XG4gICAgICB6b25lOiBpbnRlcnByZXRhdGlvblpvbmUsXG4gICAgICAvLyBzZXRab25lIGlzIGEgdmFsaWQgb3B0aW9uIGluIHRoZSBjYWxsaW5nIG1ldGhvZHMsIGJ1dCBub3QgaW4gZnJvbU9iamVjdFxuICAgICAgc2V0Wm9uZTogdW5kZWZpbmVkXG4gICAgfSkpO1xuICAgIHJldHVybiBzZXRab25lID8gaW5zdCA6IGluc3Quc2V0Wm9uZSh6b25lKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChuZXcgSW52YWxpZChcInVucGFyc2FibGVcIiwgXCJ0aGUgaW5wdXQgXFxcIlwiICsgdGV4dCArIFwiXFxcIiBjYW4ndCBiZSBwYXJzZWQgYXMgXCIgKyBmb3JtYXQpKTtcbiAgfVxufSAvLyBpZiB5b3Ugd2FudCB0byBvdXRwdXQgYSB0ZWNobmljYWwgZm9ybWF0IChlLmcuIFJGQyAyODIyKSwgdGhpcyBoZWxwZXJcbi8vIGhlbHBzIGhhbmRsZSB0aGUgZGV0YWlsc1xuXG5cbmZ1bmN0aW9uIHRvVGVjaEZvcm1hdChkdCwgZm9ybWF0LCBhbGxvd1opIHtcbiAgaWYgKGFsbG93WiA9PT0gdm9pZCAwKSB7XG4gICAgYWxsb3daID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBkdC5pc1ZhbGlkID8gRm9ybWF0dGVyLmNyZWF0ZShMb2NhbGUuY3JlYXRlKFwiZW4tVVNcIiksIHtcbiAgICBhbGxvd1o6IGFsbG93WixcbiAgICBmb3JjZVNpbXBsZTogdHJ1ZVxuICB9KS5mb3JtYXREYXRlVGltZUZyb21TdHJpbmcoZHQsIGZvcm1hdCkgOiBudWxsO1xufSAvLyB0ZWNobmljYWwgdGltZSBmb3JtYXRzIChlLmcuIHRoZSB0aW1lIHBhcnQgb2YgSVNPIDg2MDEpLCB0YWtlIHNvbWUgb3B0aW9uc1xuLy8gYW5kIHRoaXMgY29tbW9uaXplcyB0aGVpciBoYW5kbGluZ1xuXG5cbmZ1bmN0aW9uIHRvVGVjaFRpbWVGb3JtYXQoZHQsIF9yZWYpIHtcbiAgdmFyIF9yZWYkc3VwcHJlc3NTZWNvbmRzID0gX3JlZi5zdXBwcmVzc1NlY29uZHMsXG4gICAgICBzdXBwcmVzc1NlY29uZHMgPSBfcmVmJHN1cHByZXNzU2Vjb25kcyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJHN1cHByZXNzU2Vjb25kcyxcbiAgICAgIF9yZWYkc3VwcHJlc3NNaWxsaXNlYyA9IF9yZWYuc3VwcHJlc3NNaWxsaXNlY29uZHMsXG4gICAgICBzdXBwcmVzc01pbGxpc2Vjb25kcyA9IF9yZWYkc3VwcHJlc3NNaWxsaXNlYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJHN1cHByZXNzTWlsbGlzZWMsXG4gICAgICBpbmNsdWRlT2Zmc2V0ID0gX3JlZi5pbmNsdWRlT2Zmc2V0LFxuICAgICAgX3JlZiRpbmNsdWRlWm9uZSA9IF9yZWYuaW5jbHVkZVpvbmUsXG4gICAgICBpbmNsdWRlWm9uZSA9IF9yZWYkaW5jbHVkZVpvbmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRpbmNsdWRlWm9uZSxcbiAgICAgIF9yZWYkc3BhY2Vab25lID0gX3JlZi5zcGFjZVpvbmUsXG4gICAgICBzcGFjZVpvbmUgPSBfcmVmJHNwYWNlWm9uZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJHNwYWNlWm9uZSxcbiAgICAgIF9yZWYkZm9ybWF0ID0gX3JlZi5mb3JtYXQsXG4gICAgICBmb3JtYXQgPSBfcmVmJGZvcm1hdCA9PT0gdm9pZCAwID8gXCJleHRlbmRlZFwiIDogX3JlZiRmb3JtYXQ7XG4gIHZhciBmbXQgPSBmb3JtYXQgPT09IFwiYmFzaWNcIiA/IFwiSEhtbVwiIDogXCJISDptbVwiO1xuXG4gIGlmICghc3VwcHJlc3NTZWNvbmRzIHx8IGR0LnNlY29uZCAhPT0gMCB8fCBkdC5taWxsaXNlY29uZCAhPT0gMCkge1xuICAgIGZtdCArPSBmb3JtYXQgPT09IFwiYmFzaWNcIiA/IFwic3NcIiA6IFwiOnNzXCI7XG5cbiAgICBpZiAoIXN1cHByZXNzTWlsbGlzZWNvbmRzIHx8IGR0Lm1pbGxpc2Vjb25kICE9PSAwKSB7XG4gICAgICBmbXQgKz0gXCIuU1NTXCI7XG4gICAgfVxuICB9XG5cbiAgaWYgKChpbmNsdWRlWm9uZSB8fCBpbmNsdWRlT2Zmc2V0KSAmJiBzcGFjZVpvbmUpIHtcbiAgICBmbXQgKz0gXCIgXCI7XG4gIH1cblxuICBpZiAoaW5jbHVkZVpvbmUpIHtcbiAgICBmbXQgKz0gXCJ6XCI7XG4gIH0gZWxzZSBpZiAoaW5jbHVkZU9mZnNldCkge1xuICAgIGZtdCArPSBmb3JtYXQgPT09IFwiYmFzaWNcIiA/IFwiWlpaXCIgOiBcIlpaXCI7XG4gIH1cblxuICByZXR1cm4gdG9UZWNoRm9ybWF0KGR0LCBmbXQpO1xufSAvLyBkZWZhdWx0cyBmb3IgdW5zcGVjaWZpZWQgdW5pdHMgaW4gdGhlIHN1cHBvcnRlZCBjYWxlbmRhcnNcblxuXG52YXIgZGVmYXVsdFVuaXRWYWx1ZXMgPSB7XG4gIG1vbnRoOiAxLFxuICBkYXk6IDEsXG4gIGhvdXI6IDAsXG4gIG1pbnV0ZTogMCxcbiAgc2Vjb25kOiAwLFxuICBtaWxsaXNlY29uZDogMFxufSxcbiAgICBkZWZhdWx0V2Vla1VuaXRWYWx1ZXMgPSB7XG4gIHdlZWtOdW1iZXI6IDEsXG4gIHdlZWtkYXk6IDEsXG4gIGhvdXI6IDAsXG4gIG1pbnV0ZTogMCxcbiAgc2Vjb25kOiAwLFxuICBtaWxsaXNlY29uZDogMFxufSxcbiAgICBkZWZhdWx0T3JkaW5hbFVuaXRWYWx1ZXMgPSB7XG4gIG9yZGluYWw6IDEsXG4gIGhvdXI6IDAsXG4gIG1pbnV0ZTogMCxcbiAgc2Vjb25kOiAwLFxuICBtaWxsaXNlY29uZDogMFxufTsgLy8gVW5pdHMgaW4gdGhlIHN1cHBvcnRlZCBjYWxlbmRhcnMsIHNvcnRlZCBieSBiaWduZXNzXG5cbnZhciBvcmRlcmVkVW5pdHMkMSA9IFtcInllYXJcIiwgXCJtb250aFwiLCBcImRheVwiLCBcImhvdXJcIiwgXCJtaW51dGVcIiwgXCJzZWNvbmRcIiwgXCJtaWxsaXNlY29uZFwiXSxcbiAgICBvcmRlcmVkV2Vla1VuaXRzID0gW1wid2Vla1llYXJcIiwgXCJ3ZWVrTnVtYmVyXCIsIFwid2Vla2RheVwiLCBcImhvdXJcIiwgXCJtaW51dGVcIiwgXCJzZWNvbmRcIiwgXCJtaWxsaXNlY29uZFwiXSxcbiAgICBvcmRlcmVkT3JkaW5hbFVuaXRzID0gW1wieWVhclwiLCBcIm9yZGluYWxcIiwgXCJob3VyXCIsIFwibWludXRlXCIsIFwic2Vjb25kXCIsIFwibWlsbGlzZWNvbmRcIl07IC8vIHN0YW5kYXJkaXplIGNhc2UgYW5kIHBsdXJhbGl0eSBpbiB1bml0c1xuXG5mdW5jdGlvbiBub3JtYWxpemVVbml0KHVuaXQpIHtcbiAgdmFyIG5vcm1hbGl6ZWQgPSB7XG4gICAgeWVhcjogXCJ5ZWFyXCIsXG4gICAgeWVhcnM6IFwieWVhclwiLFxuICAgIG1vbnRoOiBcIm1vbnRoXCIsXG4gICAgbW9udGhzOiBcIm1vbnRoXCIsXG4gICAgZGF5OiBcImRheVwiLFxuICAgIGRheXM6IFwiZGF5XCIsXG4gICAgaG91cjogXCJob3VyXCIsXG4gICAgaG91cnM6IFwiaG91clwiLFxuICAgIG1pbnV0ZTogXCJtaW51dGVcIixcbiAgICBtaW51dGVzOiBcIm1pbnV0ZVwiLFxuICAgIHF1YXJ0ZXI6IFwicXVhcnRlclwiLFxuICAgIHF1YXJ0ZXJzOiBcInF1YXJ0ZXJcIixcbiAgICBzZWNvbmQ6IFwic2Vjb25kXCIsXG4gICAgc2Vjb25kczogXCJzZWNvbmRcIixcbiAgICBtaWxsaXNlY29uZDogXCJtaWxsaXNlY29uZFwiLFxuICAgIG1pbGxpc2Vjb25kczogXCJtaWxsaXNlY29uZFwiLFxuICAgIHdlZWtkYXk6IFwid2Vla2RheVwiLFxuICAgIHdlZWtkYXlzOiBcIndlZWtkYXlcIixcbiAgICB3ZWVrbnVtYmVyOiBcIndlZWtOdW1iZXJcIixcbiAgICB3ZWVrc251bWJlcjogXCJ3ZWVrTnVtYmVyXCIsXG4gICAgd2Vla251bWJlcnM6IFwid2Vla051bWJlclwiLFxuICAgIHdlZWt5ZWFyOiBcIndlZWtZZWFyXCIsXG4gICAgd2Vla3llYXJzOiBcIndlZWtZZWFyXCIsXG4gICAgb3JkaW5hbDogXCJvcmRpbmFsXCJcbiAgfVt1bml0LnRvTG93ZXJDYXNlKCldO1xuICBpZiAoIW5vcm1hbGl6ZWQpIHRocm93IG5ldyBJbnZhbGlkVW5pdEVycm9yKHVuaXQpO1xuICByZXR1cm4gbm9ybWFsaXplZDtcbn0gLy8gdGhpcyBpcyBhIGR1bWJlZCBkb3duIHZlcnNpb24gb2YgZnJvbU9iamVjdCgpIHRoYXQgcnVucyBhYm91dCA2MCUgZmFzdGVyXG4vLyBidXQgZG9lc24ndCBkbyBhbnkgdmFsaWRhdGlvbiwgbWFrZXMgYSBidW5jaCBvZiBhc3N1bXB0aW9ucyBhYm91dCB3aGF0IHVuaXRzXG4vLyBhcmUgcHJlc2VudCwgYW5kIHNvIG9uLlxuXG5cbmZ1bmN0aW9uIHF1aWNrRFQob2JqLCB6b25lKSB7XG4gIC8vIGFzc3VtZSB3ZSBoYXZlIHRoZSBoaWdoZXItb3JkZXIgdW5pdHNcbiAgZm9yICh2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShvcmRlcmVkVW5pdHMkMSksIF9zdGVwOyAhKF9zdGVwID0gX2l0ZXJhdG9yKCkpLmRvbmU7KSB7XG4gICAgdmFyIHUgPSBfc3RlcC52YWx1ZTtcblxuICAgIGlmIChpc1VuZGVmaW5lZChvYmpbdV0pKSB7XG4gICAgICBvYmpbdV0gPSBkZWZhdWx0VW5pdFZhbHVlc1t1XTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW52YWxpZCA9IGhhc0ludmFsaWRHcmVnb3JpYW5EYXRhKG9iaikgfHwgaGFzSW52YWxpZFRpbWVEYXRhKG9iaik7XG5cbiAgaWYgKGludmFsaWQpIHtcbiAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChpbnZhbGlkKTtcbiAgfVxuXG4gIHZhciB0c05vdyA9IFNldHRpbmdzLm5vdygpLFxuICAgICAgb2Zmc2V0UHJvdmlzID0gem9uZS5vZmZzZXQodHNOb3cpLFxuICAgICAgX29ialRvVFMgPSBvYmpUb1RTKG9iaiwgb2Zmc2V0UHJvdmlzLCB6b25lKSxcbiAgICAgIHRzID0gX29ialRvVFNbMF0sXG4gICAgICBvID0gX29ialRvVFNbMV07XG5cbiAgcmV0dXJuIG5ldyBEYXRlVGltZSh7XG4gICAgdHM6IHRzLFxuICAgIHpvbmU6IHpvbmUsXG4gICAgbzogb1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZGlmZlJlbGF0aXZlKHN0YXJ0LCBlbmQsIG9wdHMpIHtcbiAgdmFyIHJvdW5kID0gaXNVbmRlZmluZWQob3B0cy5yb3VuZCkgPyB0cnVlIDogb3B0cy5yb3VuZCxcbiAgICAgIGZvcm1hdCA9IGZ1bmN0aW9uIGZvcm1hdChjLCB1bml0KSB7XG4gICAgYyA9IHJvdW5kVG8oYywgcm91bmQgfHwgb3B0cy5jYWxlbmRhcnkgPyAwIDogMiwgdHJ1ZSk7XG4gICAgdmFyIGZvcm1hdHRlciA9IGVuZC5sb2MuY2xvbmUob3B0cykucmVsRm9ybWF0dGVyKG9wdHMpO1xuICAgIHJldHVybiBmb3JtYXR0ZXIuZm9ybWF0KGMsIHVuaXQpO1xuICB9LFxuICAgICAgZGlmZmVyID0gZnVuY3Rpb24gZGlmZmVyKHVuaXQpIHtcbiAgICBpZiAob3B0cy5jYWxlbmRhcnkpIHtcbiAgICAgIGlmICghZW5kLmhhc1NhbWUoc3RhcnQsIHVuaXQpKSB7XG4gICAgICAgIHJldHVybiBlbmQuc3RhcnRPZih1bml0KS5kaWZmKHN0YXJ0LnN0YXJ0T2YodW5pdCksIHVuaXQpLmdldCh1bml0KTtcbiAgICAgIH0gZWxzZSByZXR1cm4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVuZC5kaWZmKHN0YXJ0LCB1bml0KS5nZXQodW5pdCk7XG4gICAgfVxuICB9O1xuXG4gIGlmIChvcHRzLnVuaXQpIHtcbiAgICByZXR1cm4gZm9ybWF0KGRpZmZlcihvcHRzLnVuaXQpLCBvcHRzLnVuaXQpO1xuICB9XG5cbiAgZm9yICh2YXIgX2l0ZXJhdG9yMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2Uob3B0cy51bml0cyksIF9zdGVwMjsgIShfc3RlcDIgPSBfaXRlcmF0b3IyKCkpLmRvbmU7KSB7XG4gICAgdmFyIHVuaXQgPSBfc3RlcDIudmFsdWU7XG4gICAgdmFyIGNvdW50ID0gZGlmZmVyKHVuaXQpO1xuXG4gICAgaWYgKE1hdGguYWJzKGNvdW50KSA+PSAxKSB7XG4gICAgICByZXR1cm4gZm9ybWF0KGNvdW50LCB1bml0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZm9ybWF0KDAsIG9wdHMudW5pdHNbb3B0cy51bml0cy5sZW5ndGggLSAxXSk7XG59XG4vKipcbiAqIEEgRGF0ZVRpbWUgaXMgYW4gaW1tdXRhYmxlIGRhdGEgc3RydWN0dXJlIHJlcHJlc2VudGluZyBhIHNwZWNpZmljIGRhdGUgYW5kIHRpbWUgYW5kIGFjY29tcGFueWluZyBtZXRob2RzLiBJdCBjb250YWlucyBjbGFzcyBhbmQgaW5zdGFuY2UgbWV0aG9kcyBmb3IgY3JlYXRpbmcsIHBhcnNpbmcsIGludGVycm9nYXRpbmcsIHRyYW5zZm9ybWluZywgYW5kIGZvcm1hdHRpbmcgdGhlbS5cbiAqXG4gKiBBIERhdGVUaW1lIGNvbXByaXNlcyBvZjpcbiAqICogQSB0aW1lc3RhbXAuIEVhY2ggRGF0ZVRpbWUgaW5zdGFuY2UgcmVmZXJzIHRvIGEgc3BlY2lmaWMgbWlsbGlzZWNvbmQgb2YgdGhlIFVuaXggZXBvY2guXG4gKiAqIEEgdGltZSB6b25lLiBFYWNoIGluc3RhbmNlIGlzIGNvbnNpZGVyZWQgaW4gdGhlIGNvbnRleHQgb2YgYSBzcGVjaWZpYyB6b25lIChieSBkZWZhdWx0IHRoZSBsb2NhbCBzeXN0ZW0ncyB6b25lKS5cbiAqICogQ29uZmlndXJhdGlvbiBwcm9wZXJ0aWVzIHRoYXQgZWZmZWN0IGhvdyBvdXRwdXQgc3RyaW5ncyBhcmUgZm9ybWF0dGVkLCBzdWNoIGFzIGBsb2NhbGVgLCBgbnVtYmVyaW5nU3lzdGVtYCwgYW5kIGBvdXRwdXRDYWxlbmRhcmAuXG4gKlxuICogSGVyZSBpcyBhIGJyaWVmIG92ZXJ2aWV3IG9mIHRoZSBtb3N0IGNvbW1vbmx5IHVzZWQgZnVuY3Rpb25hbGl0eSBpdCBwcm92aWRlczpcbiAqXG4gKiAqICoqQ3JlYXRpb24qKjogVG8gY3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBpdHMgY29tcG9uZW50cywgdXNlIG9uZSBvZiBpdHMgZmFjdG9yeSBjbGFzcyBtZXRob2RzOiB7QGxpbmsgbG9jYWx9LCB7QGxpbmsgdXRjfSwgYW5kIChtb3N0IGZsZXhpYmx5KSB7QGxpbmsgZnJvbU9iamVjdH0uIFRvIGNyZWF0ZSBvbmUgZnJvbSBhIHN0YW5kYXJkIHN0cmluZyBmb3JtYXQsIHVzZSB7QGxpbmsgZnJvbUlTT30sIHtAbGluayBmcm9tSFRUUH0sIGFuZCB7QGxpbmsgZnJvbVJGQzI4MjJ9LiBUbyBjcmVhdGUgb25lIGZyb20gYSBjdXN0b20gc3RyaW5nIGZvcm1hdCwgdXNlIHtAbGluayBmcm9tRm9ybWF0fS4gVG8gY3JlYXRlIG9uZSBmcm9tIGEgbmF0aXZlIEpTIGRhdGUsIHVzZSB7QGxpbmsgZnJvbUpTRGF0ZX0uXG4gKiAqICoqR3JlZ29yaWFuIGNhbGVuZGFyIGFuZCB0aW1lKio6IFRvIGV4YW1pbmUgdGhlIEdyZWdvcmlhbiBwcm9wZXJ0aWVzIG9mIGEgRGF0ZVRpbWUgaW5kaXZpZHVhbGx5IChpLmUgYXMgb3Bwb3NlZCB0byBjb2xsZWN0aXZlbHkgdGhyb3VnaCB7QGxpbmsgdG9PYmplY3R9KSwgdXNlIHRoZSB7QGxpbmsgeWVhcn0sIHtAbGluayBtb250aH0sXG4gKiB7QGxpbmsgZGF5fSwge0BsaW5rIGhvdXJ9LCB7QGxpbmsgbWludXRlfSwge0BsaW5rIHNlY29uZH0sIHtAbGluayBtaWxsaXNlY29uZH0gYWNjZXNzb3JzLlxuICogKiAqKldlZWsgY2FsZW5kYXIqKjogRm9yIElTTyB3ZWVrIGNhbGVuZGFyIGF0dHJpYnV0ZXMsIHNlZSB0aGUge0BsaW5rIHdlZWtZZWFyfSwge0BsaW5rIHdlZWtOdW1iZXJ9LCBhbmQge0BsaW5rIHdlZWtkYXl9IGFjY2Vzc29ycy5cbiAqICogKipDb25maWd1cmF0aW9uKiogU2VlIHRoZSB7QGxpbmsgbG9jYWxlfSBhbmQge0BsaW5rIG51bWJlcmluZ1N5c3RlbX0gYWNjZXNzb3JzLlxuICogKiAqKlRyYW5zZm9ybWF0aW9uKio6IFRvIHRyYW5zZm9ybSB0aGUgRGF0ZVRpbWUgaW50byBvdGhlciBEYXRlVGltZXMsIHVzZSB7QGxpbmsgc2V0fSwge0BsaW5rIHJlY29uZmlndXJlfSwge0BsaW5rIHNldFpvbmV9LCB7QGxpbmsgc2V0TG9jYWxlfSwge0BsaW5rIHBsdXN9LCB7QGxpbmsgbWludXN9LCB7QGxpbmsgZW5kT2Z9LCB7QGxpbmsgc3RhcnRPZn0sIHtAbGluayB0b1VUQ30sIGFuZCB7QGxpbmsgdG9Mb2NhbH0uXG4gKiAqICoqT3V0cHV0Kio6IFRvIGNvbnZlcnQgdGhlIERhdGVUaW1lIHRvIG90aGVyIHJlcHJlc2VudGF0aW9ucywgdXNlIHRoZSB7QGxpbmsgdG9SZWxhdGl2ZX0sIHtAbGluayB0b1JlbGF0aXZlQ2FsZW5kYXJ9LCB7QGxpbmsgdG9KU09OfSwge0BsaW5rIHRvSVNPfSwge0BsaW5rIHRvSFRUUH0sIHtAbGluayB0b09iamVjdH0sIHtAbGluayB0b1JGQzI4MjJ9LCB7QGxpbmsgdG9TdHJpbmd9LCB7QGxpbmsgdG9Mb2NhbGVTdHJpbmd9LCB7QGxpbmsgdG9Gb3JtYXR9LCB7QGxpbmsgdG9NaWxsaXN9IGFuZCB7QGxpbmsgdG9KU0RhdGV9LlxuICpcbiAqIFRoZXJlJ3MgcGxlbnR5IG90aGVycyBkb2N1bWVudGVkIGJlbG93LiBJbiBhZGRpdGlvbiwgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gc3VidGxlciB0b3BpY3MgbGlrZSBpbnRlcm5hdGlvbmFsaXphdGlvbiwgdGltZSB6b25lcywgYWx0ZXJuYXRpdmUgY2FsZW5kYXJzLCB2YWxpZGl0eSwgYW5kIHNvIG9uLCBzZWUgdGhlIGV4dGVybmFsIGRvY3VtZW50YXRpb24uXG4gKi9cblxuXG52YXIgRGF0ZVRpbWUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQGFjY2VzcyBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBEYXRlVGltZShjb25maWcpIHtcbiAgICB2YXIgem9uZSA9IGNvbmZpZy56b25lIHx8IFNldHRpbmdzLmRlZmF1bHRab25lO1xuICAgIHZhciBpbnZhbGlkID0gY29uZmlnLmludmFsaWQgfHwgKE51bWJlci5pc05hTihjb25maWcudHMpID8gbmV3IEludmFsaWQoXCJpbnZhbGlkIGlucHV0XCIpIDogbnVsbCkgfHwgKCF6b25lLmlzVmFsaWQgPyB1bnN1cHBvcnRlZFpvbmUoem9uZSkgOiBudWxsKTtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMudHMgPSBpc1VuZGVmaW5lZChjb25maWcudHMpID8gU2V0dGluZ3Mubm93KCkgOiBjb25maWcudHM7XG4gICAgdmFyIGMgPSBudWxsLFxuICAgICAgICBvID0gbnVsbDtcblxuICAgIGlmICghaW52YWxpZCkge1xuICAgICAgdmFyIHVuY2hhbmdlZCA9IGNvbmZpZy5vbGQgJiYgY29uZmlnLm9sZC50cyA9PT0gdGhpcy50cyAmJiBjb25maWcub2xkLnpvbmUuZXF1YWxzKHpvbmUpO1xuXG4gICAgICBpZiAodW5jaGFuZ2VkKSB7XG4gICAgICAgIHZhciBfcmVmMiA9IFtjb25maWcub2xkLmMsIGNvbmZpZy5vbGQub107XG4gICAgICAgIGMgPSBfcmVmMlswXTtcbiAgICAgICAgbyA9IF9yZWYyWzFdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG90ID0gem9uZS5vZmZzZXQodGhpcy50cyk7XG4gICAgICAgIGMgPSB0c1RvT2JqKHRoaXMudHMsIG90KTtcbiAgICAgICAgaW52YWxpZCA9IE51bWJlci5pc05hTihjLnllYXIpID8gbmV3IEludmFsaWQoXCJpbnZhbGlkIGlucHV0XCIpIDogbnVsbDtcbiAgICAgICAgYyA9IGludmFsaWQgPyBudWxsIDogYztcbiAgICAgICAgbyA9IGludmFsaWQgPyBudWxsIDogb3Q7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuXG5cbiAgICB0aGlzLl96b25lID0gem9uZTtcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMubG9jID0gY29uZmlnLmxvYyB8fCBMb2NhbGUuY3JlYXRlKCk7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG5cbiAgICB0aGlzLmludmFsaWQgPSBpbnZhbGlkO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgdGhpcy53ZWVrRGF0YSA9IG51bGw7XG4gICAgLyoqXG4gICAgICogQGFjY2VzcyBwcml2YXRlXG4gICAgICovXG5cbiAgICB0aGlzLmMgPSBjO1xuICAgIC8qKlxuICAgICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgICAqL1xuXG4gICAgdGhpcy5vID0gbztcbiAgICAvKipcbiAgICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICAgKi9cblxuICAgIHRoaXMuaXNMdXhvbkRhdGVUaW1lID0gdHJ1ZTtcbiAgfSAvLyBDT05TVFJVQ1RcblxuICAvKipcbiAgICogQ3JlYXRlIGEgbG9jYWwgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtudW1iZXJ9IFt5ZWFyXSAtIFRoZSBjYWxlbmRhciB5ZWFyLiBJZiBvbWl0dGVkIChhcyBpbiwgY2FsbCBgbG9jYWwoKWAgd2l0aCBubyBhcmd1bWVudHMpLCB0aGUgY3VycmVudCB0aW1lIHdpbGwgYmUgdXNlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gW21vbnRoPTFdIC0gVGhlIG1vbnRoLCAxLWluZGV4ZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtkYXk9MV0gLSBUaGUgZGF5IG9mIHRoZSBtb250aFxuICAgKiBAcGFyYW0ge251bWJlcn0gW2hvdXI9MF0gLSBUaGUgaG91ciBvZiB0aGUgZGF5LCBpbiAyNC1ob3VyIHRpbWVcbiAgICogQHBhcmFtIHtudW1iZXJ9IFttaW51dGU9MF0gLSBUaGUgbWludXRlIG9mIHRoZSBob3VyLCBtZWFuaW5nIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgNTlcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtzZWNvbmQ9MF0gLSBUaGUgc2Vjb25kIG9mIHRoZSBtaW51dGUsIG1lYW5pbmcgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCA1OVxuICAgKiBAcGFyYW0ge251bWJlcn0gW21pbGxpc2Vjb25kPTBdIC0gVGhlIG1pbGxpc2Vjb25kIG9mIHRoZSBzZWNvbmQsIG1lYW5pbmcgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCA5OTlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL34+IG5vd1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3KSAgICAgICAgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMS0wMVQwMDowMDowMFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCAzKSAgICAgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMy0wMVQwMDowMDowMFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCAzLCAxMikgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMy0xMlQwMDowMDowMFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCAzLCAxMiwgNSkgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMy0xMlQwNTowMDowMFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCAzLCAxMiwgNSwgNDUpICAgICAgICAgIC8vfj4gMjAxNy0wMy0xMlQwNTo0NTowMFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCAzLCAxMiwgNSwgNDUsIDEwKSAgICAgIC8vfj4gMjAxNy0wMy0xMlQwNTo0NToxMFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCAzLCAxMiwgNSwgNDUsIDEwLCA3NjUpIC8vfj4gMjAxNy0wMy0xMlQwNTo0NToxMC43NjVcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuXG5cbiAgRGF0ZVRpbWUubG9jYWwgPSBmdW5jdGlvbiBsb2NhbCh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQoeWVhcikpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoe1xuICAgICAgICB0czogU2V0dGluZ3Mubm93KClcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcXVpY2tEVCh7XG4gICAgICAgIHllYXI6IHllYXIsXG4gICAgICAgIG1vbnRoOiBtb250aCxcbiAgICAgICAgZGF5OiBkYXksXG4gICAgICAgIGhvdXI6IGhvdXIsXG4gICAgICAgIG1pbnV0ZTogbWludXRlLFxuICAgICAgICBzZWNvbmQ6IHNlY29uZCxcbiAgICAgICAgbWlsbGlzZWNvbmQ6IG1pbGxpc2Vjb25kXG4gICAgICB9LCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBpbiBVVENcbiAgICogQHBhcmFtIHtudW1iZXJ9IFt5ZWFyXSAtIFRoZSBjYWxlbmRhciB5ZWFyLiBJZiBvbWl0dGVkIChhcyBpbiwgY2FsbCBgdXRjKClgIHdpdGggbm8gYXJndW1lbnRzKSwgdGhlIGN1cnJlbnQgdGltZSB3aWxsIGJlIHVzZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFttb250aD0xXSAtIFRoZSBtb250aCwgMS1pbmRleGVkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbZGF5PTFdIC0gVGhlIGRheSBvZiB0aGUgbW9udGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtob3VyPTBdIC0gVGhlIGhvdXIgb2YgdGhlIGRheSwgaW4gMjQtaG91ciB0aW1lXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbbWludXRlPTBdIC0gVGhlIG1pbnV0ZSBvZiB0aGUgaG91ciwgbWVhbmluZyBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDU5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbc2Vjb25kPTBdIC0gVGhlIHNlY29uZCBvZiB0aGUgbWludXRlLCBtZWFuaW5nIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgNTlcbiAgICogQHBhcmFtIHtudW1iZXJ9IFttaWxsaXNlY29uZD0wXSAtIFRoZSBtaWxsaXNlY29uZCBvZiB0aGUgc2Vjb25kLCBtZWFuaW5nIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgOTk5XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygpICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfj4gbm93XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3KSAgICAgICAgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMS0wMVQwMDowMDowMFpcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTcsIDMpICAgICAgICAgICAgICAgICAgICAgLy9+PiAyMDE3LTAzLTAxVDAwOjAwOjAwWlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNywgMywgMTIpICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMTJUMDA6MDA6MDBaXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMiwgNSkgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMy0xMlQwNTowMDowMFpcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTcsIDMsIDEyLCA1LCA0NSkgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjAwWlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNywgMywgMTIsIDUsIDQ1LCAxMCkgICAgICAvL34+IDIwMTctMDMtMTJUMDU6NDU6MTBaXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMiwgNSwgNDUsIDEwLCA3NjUpIC8vfj4gMjAxNy0wMy0xMlQwNTo0NToxMC43NjVaXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgO1xuXG4gIERhdGVUaW1lLnV0YyA9IGZ1bmN0aW9uIHV0Yyh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQoeWVhcikpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoe1xuICAgICAgICB0czogU2V0dGluZ3Mubm93KCksXG4gICAgICAgIHpvbmU6IEZpeGVkT2Zmc2V0Wm9uZS51dGNJbnN0YW5jZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBxdWlja0RUKHtcbiAgICAgICAgeWVhcjogeWVhcixcbiAgICAgICAgbW9udGg6IG1vbnRoLFxuICAgICAgICBkYXk6IGRheSxcbiAgICAgICAgaG91cjogaG91cixcbiAgICAgICAgbWludXRlOiBtaW51dGUsXG4gICAgICAgIHNlY29uZDogc2Vjb25kLFxuICAgICAgICBtaWxsaXNlY29uZDogbWlsbGlzZWNvbmRcbiAgICAgIH0sIEZpeGVkT2Zmc2V0Wm9uZS51dGNJbnN0YW5jZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGEgSmF2YXNjcmlwdCBEYXRlIG9iamVjdC4gVXNlcyB0aGUgZGVmYXVsdCB6b25lLlxuICAgKiBAcGFyYW0ge0RhdGV9IGRhdGUgLSBhIEphdmFzY3JpcHQgRGF0ZSBvYmplY3RcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBEYXRlVGltZVxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbb3B0aW9ucy56b25lPSdsb2NhbCddIC0gdGhlIHpvbmUgdG8gcGxhY2UgdGhlIERhdGVUaW1lIGludG9cbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICA7XG5cbiAgRGF0ZVRpbWUuZnJvbUpTRGF0ZSA9IGZ1bmN0aW9uIGZyb21KU0RhdGUoZGF0ZSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgdHMgPSBpc0RhdGUoZGF0ZSkgPyBkYXRlLnZhbHVlT2YoKSA6IE5hTjtcblxuICAgIGlmIChOdW1iZXIuaXNOYU4odHMpKSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChcImludmFsaWQgaW5wdXRcIik7XG4gICAgfVxuXG4gICAgdmFyIHpvbmVUb1VzZSA9IG5vcm1hbGl6ZVpvbmUob3B0aW9ucy56b25lLCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSk7XG5cbiAgICBpZiAoIXpvbmVUb1VzZS5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZCh1bnN1cHBvcnRlZFpvbmUoem9uZVRvVXNlKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlVGltZSh7XG4gICAgICB0czogdHMsXG4gICAgICB6b25lOiB6b25lVG9Vc2UsXG4gICAgICBsb2M6IExvY2FsZS5mcm9tT2JqZWN0KG9wdGlvbnMpXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHNpbmNlIHRoZSBlcG9jaCAobWVhbmluZyBzaW5jZSAxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLiBVc2VzIHRoZSBkZWZhdWx0IHpvbmUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtaWxsaXNlY29uZHMgLSBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMgc2luY2UgMTk3MCBVVENcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBEYXRlVGltZVxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbb3B0aW9ucy56b25lPSdsb2NhbCddIC0gdGhlIHpvbmUgdG8gcGxhY2UgdGhlIERhdGVUaW1lIGludG9cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmxvY2FsZV0gLSBhIGxvY2FsZSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5vdXRwdXRDYWxlbmRhciAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICA7XG5cbiAgRGF0ZVRpbWUuZnJvbU1pbGxpcyA9IGZ1bmN0aW9uIGZyb21NaWxsaXMobWlsbGlzZWNvbmRzLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmICghaXNOdW1iZXIobWlsbGlzZWNvbmRzKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwiZnJvbU1pbGxpcyByZXF1aXJlcyBhIG51bWVyaWNhbCBpbnB1dCwgYnV0IHJlY2VpdmVkIGEgXCIgKyB0eXBlb2YgbWlsbGlzZWNvbmRzICsgXCIgd2l0aCB2YWx1ZSBcIiArIG1pbGxpc2Vjb25kcyk7XG4gICAgfSBlbHNlIGlmIChtaWxsaXNlY29uZHMgPCAtTUFYX0RBVEUgfHwgbWlsbGlzZWNvbmRzID4gTUFYX0RBVEUpIHtcbiAgICAgIC8vIHRoaXMgaXNuJ3QgcGVyZmVjdCBiZWNhdXNlIGJlY2F1c2Ugd2UgY2FuIHN0aWxsIGVuZCB1cCBvdXQgb2YgcmFuZ2UgYmVjYXVzZSBvZiBhZGRpdGlvbmFsIHNoaWZ0aW5nLCBidXQgaXQncyBhIHN0YXJ0XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChcIlRpbWVzdGFtcCBvdXQgb2YgcmFuZ2VcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoe1xuICAgICAgICB0czogbWlsbGlzZWNvbmRzLFxuICAgICAgICB6b25lOiBub3JtYWxpemVab25lKG9wdGlvbnMuem9uZSwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpLFxuICAgICAgICBsb2M6IExvY2FsZS5mcm9tT2JqZWN0KG9wdGlvbnMpXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYSBudW1iZXIgb2Ygc2Vjb25kcyBzaW5jZSB0aGUgZXBvY2ggKG1lYW5pbmcgc2luY2UgMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS4gVXNlcyB0aGUgZGVmYXVsdCB6b25lLlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2Vjb25kcyAtIGEgbnVtYmVyIG9mIHNlY29uZHMgc2luY2UgMTk3MCBVVENcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBEYXRlVGltZVxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbb3B0aW9ucy56b25lPSdsb2NhbCddIC0gdGhlIHpvbmUgdG8gcGxhY2UgdGhlIERhdGVUaW1lIGludG9cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmxvY2FsZV0gLSBhIGxvY2FsZSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5vdXRwdXRDYWxlbmRhciAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICA7XG5cbiAgRGF0ZVRpbWUuZnJvbVNlY29uZHMgPSBmdW5jdGlvbiBmcm9tU2Vjb25kcyhzZWNvbmRzLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmICghaXNOdW1iZXIoc2Vjb25kcykpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcImZyb21TZWNvbmRzIHJlcXVpcmVzIGEgbnVtZXJpY2FsIGlucHV0XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IERhdGVUaW1lKHtcbiAgICAgICAgdHM6IHNlY29uZHMgKiAxMDAwLFxuICAgICAgICB6b25lOiBub3JtYWxpemVab25lKG9wdGlvbnMuem9uZSwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpLFxuICAgICAgICBsb2M6IExvY2FsZS5mcm9tT2JqZWN0KG9wdGlvbnMpXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYSBKYXZhc2NyaXB0IG9iamVjdCB3aXRoIGtleXMgbGlrZSAneWVhcicgYW5kICdob3VyJyB3aXRoIHJlYXNvbmFibGUgZGVmYXVsdHMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmogLSB0aGUgb2JqZWN0IHRvIGNyZWF0ZSB0aGUgRGF0ZVRpbWUgZnJvbVxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLnllYXIgLSBhIHllYXIsIHN1Y2ggYXMgMTk4N1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLm1vbnRoIC0gYSBtb250aCwgMS0xMlxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLmRheSAtIGEgZGF5IG9mIHRoZSBtb250aCwgMS0zMSwgZGVwZW5kaW5nIG9uIHRoZSBtb250aFxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLm9yZGluYWwgLSBkYXkgb2YgdGhlIHllYXIsIDEtMzY1IG9yIDM2NlxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLndlZWtZZWFyIC0gYW4gSVNPIHdlZWsgeWVhclxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLndlZWtOdW1iZXIgLSBhbiBJU08gd2VlayBudW1iZXIsIGJldHdlZW4gMSBhbmQgNTIgb3IgNTMsIGRlcGVuZGluZyBvbiB0aGUgeWVhclxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLndlZWtkYXkgLSBhbiBJU08gd2Vla2RheSwgMS03LCB3aGVyZSAxIGlzIE1vbmRheSBhbmQgNyBpcyBTdW5kYXlcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5ob3VyIC0gaG91ciBvZiB0aGUgZGF5LCAwLTIzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoubWludXRlIC0gbWludXRlIG9mIHRoZSBob3VyLCAwLTU5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmouc2Vjb25kIC0gc2Vjb25kIG9mIHRoZSBtaW51dGUsIDAtNTlcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5taWxsaXNlY29uZCAtIG1pbGxpc2Vjb25kIG9mIHRoZSBzZWNvbmQsIDAtOTk5XG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFtvYmouem9uZT0nbG9jYWwnXSAtIGludGVycHJldCB0aGUgbnVtYmVycyBpbiB0aGUgY29udGV4dCBvZiBhIHBhcnRpY3VsYXIgem9uZS4gQ2FuIHRha2UgYW55IHZhbHVlIHRha2VuIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byBzZXRab25lKClcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvYmoubG9jYWxlPSdzeXN0ZW0ncyBsb2NhbGUnXSAtIGEgbG9jYWxlIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvYmoub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvYmoubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbU9iamVjdCh7IHllYXI6IDE5ODIsIG1vbnRoOiA1LCBkYXk6IDI1fSkudG9JU09EYXRlKCkgLy89PiAnMTk4Mi0wNS0yNSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbU9iamVjdCh7IHllYXI6IDE5ODIgfSkudG9JU09EYXRlKCkgLy89PiAnMTk4Mi0wMS0wMSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbU9iamVjdCh7IGhvdXI6IDEwLCBtaW51dGU6IDI2LCBzZWNvbmQ6IDYgfSkgLy9+PiB0b2RheSBhdCAxMDoyNjowNlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tT2JqZWN0KHsgaG91cjogMTAsIG1pbnV0ZTogMjYsIHNlY29uZDogNiwgem9uZTogJ3V0YycgfSksXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyBob3VyOiAxMCwgbWludXRlOiAyNiwgc2Vjb25kOiA2LCB6b25lOiAnbG9jYWwnIH0pXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyBob3VyOiAxMCwgbWludXRlOiAyNiwgc2Vjb25kOiA2LCB6b25lOiAnQW1lcmljYS9OZXdfWW9yaycgfSlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbU9iamVjdCh7IHdlZWtZZWFyOiAyMDE2LCB3ZWVrTnVtYmVyOiAyLCB3ZWVrZGF5OiAzIH0pLnRvSVNPRGF0ZSgpIC8vPT4gJzIwMTYtMDEtMTMnXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgO1xuXG4gIERhdGVUaW1lLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KG9iaikge1xuICAgIHZhciB6b25lVG9Vc2UgPSBub3JtYWxpemVab25lKG9iai56b25lLCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSk7XG5cbiAgICBpZiAoIXpvbmVUb1VzZS5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZCh1bnN1cHBvcnRlZFpvbmUoem9uZVRvVXNlKSk7XG4gICAgfVxuXG4gICAgdmFyIHRzTm93ID0gU2V0dGluZ3Mubm93KCksXG4gICAgICAgIG9mZnNldFByb3ZpcyA9IHpvbmVUb1VzZS5vZmZzZXQodHNOb3cpLFxuICAgICAgICBub3JtYWxpemVkID0gbm9ybWFsaXplT2JqZWN0KG9iaiwgbm9ybWFsaXplVW5pdCwgW1wiem9uZVwiLCBcImxvY2FsZVwiLCBcIm91dHB1dENhbGVuZGFyXCIsIFwibnVtYmVyaW5nU3lzdGVtXCJdKSxcbiAgICAgICAgY29udGFpbnNPcmRpbmFsID0gIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQub3JkaW5hbCksXG4gICAgICAgIGNvbnRhaW5zR3JlZ29yWWVhciA9ICFpc1VuZGVmaW5lZChub3JtYWxpemVkLnllYXIpLFxuICAgICAgICBjb250YWluc0dyZWdvck1EID0gIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQubW9udGgpIHx8ICFpc1VuZGVmaW5lZChub3JtYWxpemVkLmRheSksXG4gICAgICAgIGNvbnRhaW5zR3JlZ29yID0gY29udGFpbnNHcmVnb3JZZWFyIHx8IGNvbnRhaW5zR3JlZ29yTUQsXG4gICAgICAgIGRlZmluaXRlV2Vla0RlZiA9IG5vcm1hbGl6ZWQud2Vla1llYXIgfHwgbm9ybWFsaXplZC53ZWVrTnVtYmVyLFxuICAgICAgICBsb2MgPSBMb2NhbGUuZnJvbU9iamVjdChvYmopOyAvLyBjYXNlczpcbiAgICAvLyBqdXN0IGEgd2Vla2RheSAtPiB0aGlzIHdlZWsncyBpbnN0YW5jZSBvZiB0aGF0IHdlZWtkYXksIG5vIHdvcnJpZXNcbiAgICAvLyAoZ3JlZ29yaWFuIGRhdGEgb3Igb3JkaW5hbCkgKyAod2Vla1llYXIgb3Igd2Vla051bWJlcikgLT4gZXJyb3JcbiAgICAvLyAoZ3JlZ29yaWFuIG1vbnRoIG9yIGRheSkgKyBvcmRpbmFsIC0+IGVycm9yXG4gICAgLy8gb3RoZXJ3aXNlIGp1c3QgdXNlIHdlZWtzIG9yIG9yZGluYWxzIG9yIGdyZWdvcmlhbiwgZGVwZW5kaW5nIG9uIHdoYXQncyBzcGVjaWZpZWRcblxuICAgIGlmICgoY29udGFpbnNHcmVnb3IgfHwgY29udGFpbnNPcmRpbmFsKSAmJiBkZWZpbml0ZVdlZWtEZWYpIHtcbiAgICAgIHRocm93IG5ldyBDb25mbGljdGluZ1NwZWNpZmljYXRpb25FcnJvcihcIkNhbid0IG1peCB3ZWVrWWVhci93ZWVrTnVtYmVyIHVuaXRzIHdpdGggeWVhci9tb250aC9kYXkgb3Igb3JkaW5hbHNcIik7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRhaW5zR3JlZ29yTUQgJiYgY29udGFpbnNPcmRpbmFsKSB7XG4gICAgICB0aHJvdyBuZXcgQ29uZmxpY3RpbmdTcGVjaWZpY2F0aW9uRXJyb3IoXCJDYW4ndCBtaXggb3JkaW5hbCBkYXRlcyB3aXRoIG1vbnRoL2RheVwiKTtcbiAgICB9XG5cbiAgICB2YXIgdXNlV2Vla0RhdGEgPSBkZWZpbml0ZVdlZWtEZWYgfHwgbm9ybWFsaXplZC53ZWVrZGF5ICYmICFjb250YWluc0dyZWdvcjsgLy8gY29uZmlndXJlIG91cnNlbHZlcyB0byBkZWFsIHdpdGggZ3JlZ29yaWFuIGRhdGVzIG9yIHdlZWsgc3R1ZmZcblxuICAgIHZhciB1bml0cyxcbiAgICAgICAgZGVmYXVsdFZhbHVlcyxcbiAgICAgICAgb2JqTm93ID0gdHNUb09iaih0c05vdywgb2Zmc2V0UHJvdmlzKTtcblxuICAgIGlmICh1c2VXZWVrRGF0YSkge1xuICAgICAgdW5pdHMgPSBvcmRlcmVkV2Vla1VuaXRzO1xuICAgICAgZGVmYXVsdFZhbHVlcyA9IGRlZmF1bHRXZWVrVW5pdFZhbHVlcztcbiAgICAgIG9iak5vdyA9IGdyZWdvcmlhblRvV2VlayhvYmpOb3cpO1xuICAgIH0gZWxzZSBpZiAoY29udGFpbnNPcmRpbmFsKSB7XG4gICAgICB1bml0cyA9IG9yZGVyZWRPcmRpbmFsVW5pdHM7XG4gICAgICBkZWZhdWx0VmFsdWVzID0gZGVmYXVsdE9yZGluYWxVbml0VmFsdWVzO1xuICAgICAgb2JqTm93ID0gZ3JlZ29yaWFuVG9PcmRpbmFsKG9iak5vdyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVuaXRzID0gb3JkZXJlZFVuaXRzJDE7XG4gICAgICBkZWZhdWx0VmFsdWVzID0gZGVmYXVsdFVuaXRWYWx1ZXM7XG4gICAgfSAvLyBzZXQgZGVmYXVsdCB2YWx1ZXMgZm9yIG1pc3Npbmcgc3R1ZmZcblxuXG4gICAgdmFyIGZvdW5kRmlyc3QgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIF9pdGVyYXRvcjMgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlKHVuaXRzKSwgX3N0ZXAzOyAhKF9zdGVwMyA9IF9pdGVyYXRvcjMoKSkuZG9uZTspIHtcbiAgICAgIHZhciB1ID0gX3N0ZXAzLnZhbHVlO1xuICAgICAgdmFyIHYgPSBub3JtYWxpemVkW3VdO1xuXG4gICAgICBpZiAoIWlzVW5kZWZpbmVkKHYpKSB7XG4gICAgICAgIGZvdW5kRmlyc3QgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChmb3VuZEZpcnN0KSB7XG4gICAgICAgIG5vcm1hbGl6ZWRbdV0gPSBkZWZhdWx0VmFsdWVzW3VdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9ybWFsaXplZFt1XSA9IG9iak5vd1t1XTtcbiAgICAgIH1cbiAgICB9IC8vIG1ha2Ugc3VyZSB0aGUgdmFsdWVzIHdlIGhhdmUgYXJlIGluIHJhbmdlXG5cblxuICAgIHZhciBoaWdoZXJPcmRlckludmFsaWQgPSB1c2VXZWVrRGF0YSA/IGhhc0ludmFsaWRXZWVrRGF0YShub3JtYWxpemVkKSA6IGNvbnRhaW5zT3JkaW5hbCA/IGhhc0ludmFsaWRPcmRpbmFsRGF0YShub3JtYWxpemVkKSA6IGhhc0ludmFsaWRHcmVnb3JpYW5EYXRhKG5vcm1hbGl6ZWQpLFxuICAgICAgICBpbnZhbGlkID0gaGlnaGVyT3JkZXJJbnZhbGlkIHx8IGhhc0ludmFsaWRUaW1lRGF0YShub3JtYWxpemVkKTtcblxuICAgIGlmIChpbnZhbGlkKSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChpbnZhbGlkKTtcbiAgICB9IC8vIGNvbXB1dGUgdGhlIGFjdHVhbCB0aW1lXG5cblxuICAgIHZhciBncmVnb3JpYW4gPSB1c2VXZWVrRGF0YSA/IHdlZWtUb0dyZWdvcmlhbihub3JtYWxpemVkKSA6IGNvbnRhaW5zT3JkaW5hbCA/IG9yZGluYWxUb0dyZWdvcmlhbihub3JtYWxpemVkKSA6IG5vcm1hbGl6ZWQsXG4gICAgICAgIF9vYmpUb1RTMiA9IG9ialRvVFMoZ3JlZ29yaWFuLCBvZmZzZXRQcm92aXMsIHpvbmVUb1VzZSksXG4gICAgICAgIHRzRmluYWwgPSBfb2JqVG9UUzJbMF0sXG4gICAgICAgIG9mZnNldEZpbmFsID0gX29ialRvVFMyWzFdLFxuICAgICAgICBpbnN0ID0gbmV3IERhdGVUaW1lKHtcbiAgICAgIHRzOiB0c0ZpbmFsLFxuICAgICAgem9uZTogem9uZVRvVXNlLFxuICAgICAgbzogb2Zmc2V0RmluYWwsXG4gICAgICBsb2M6IGxvY1xuICAgIH0pOyAvLyBncmVnb3JpYW4gZGF0YSArIHdlZWtkYXkgc2VydmVzIG9ubHkgdG8gdmFsaWRhdGVcblxuXG4gICAgaWYgKG5vcm1hbGl6ZWQud2Vla2RheSAmJiBjb250YWluc0dyZWdvciAmJiBvYmoud2Vla2RheSAhPT0gaW5zdC53ZWVrZGF5KSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChcIm1pc21hdGNoZWQgd2Vla2RheVwiLCBcInlvdSBjYW4ndCBzcGVjaWZ5IGJvdGggYSB3ZWVrZGF5IG9mIFwiICsgbm9ybWFsaXplZC53ZWVrZGF5ICsgXCIgYW5kIGEgZGF0ZSBvZiBcIiArIGluc3QudG9JU08oKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3Q7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYW4gSVNPIDg2MDEgc3RyaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIElTTyBzdHJpbmdcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRvIGFmZmVjdCB0aGUgY3JlYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdHMuem9uZT0nbG9jYWwnXSAtIHVzZSB0aGlzIHpvbmUgaWYgbm8gb2Zmc2V0IGlzIHNwZWNpZmllZCBpbiB0aGUgaW5wdXQgc3RyaW5nIGl0c2VsZi4gV2lsbCBhbHNvIGNvbnZlcnQgdGhlIHRpbWUgdG8gdGhpcyB6b25lXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc2V0Wm9uZT1mYWxzZV0gLSBvdmVycmlkZSB0aGUgem9uZSB3aXRoIGEgZml4ZWQtb2Zmc2V0IHpvbmUgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaXRzZWxmLCBpZiBpdCBzcGVjaWZpZXMgb25lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J3N5c3RlbSdzIGxvY2FsZSddIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21JU08oJzIwMTYtMDUtMjVUMDk6MDg6MzQuMTIzJylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUlTTygnMjAxNi0wNS0yNVQwOTowODozNC4xMjMrMDY6MDAnKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tSVNPKCcyMDE2LTA1LTI1VDA5OjA4OjM0LjEyMyswNjowMCcsIHtzZXRab25lOiB0cnVlfSlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUlTTygnMjAxNi0wNS0yNVQwOTowODozNC4xMjMnLCB7em9uZTogJ3V0Yyd9KVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tSVNPKCcyMDE2LVcwNS00JylcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICA7XG5cbiAgRGF0ZVRpbWUuZnJvbUlTTyA9IGZ1bmN0aW9uIGZyb21JU08odGV4dCwgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX3BhcnNlSVNPRGF0ZSA9IHBhcnNlSVNPRGF0ZSh0ZXh0KSxcbiAgICAgICAgdmFscyA9IF9wYXJzZUlTT0RhdGVbMF0sXG4gICAgICAgIHBhcnNlZFpvbmUgPSBfcGFyc2VJU09EYXRlWzFdO1xuXG4gICAgcmV0dXJuIHBhcnNlRGF0YVRvRGF0ZVRpbWUodmFscywgcGFyc2VkWm9uZSwgb3B0cywgXCJJU08gODYwMVwiLCB0ZXh0KTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBhbiBSRkMgMjgyMiBzdHJpbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0aGUgUkZDIDI4MjIgc3RyaW5nXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0byBhZmZlY3QgdGhlIGNyZWF0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFtvcHRzLnpvbmU9J2xvY2FsJ10gLSBjb252ZXJ0IHRoZSB0aW1lIHRvIHRoaXMgem9uZS4gU2luY2UgdGhlIG9mZnNldCBpcyBhbHdheXMgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaXRzZWxmLCB0aGlzIGhhcyBubyBlZmZlY3Qgb24gdGhlIGludGVycHJldGF0aW9uIG9mIHN0cmluZywgbWVyZWx5IHRoZSB6b25lIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaXMgZXhwcmVzc2VkIGluLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnNldFpvbmU9ZmFsc2VdIC0gb3ZlcnJpZGUgdGhlIHpvbmUgd2l0aCBhIGZpeGVkLW9mZnNldCB6b25lIHNwZWNpZmllZCBpbiB0aGUgc3RyaW5nIGl0c2VsZiwgaWYgaXQgc3BlY2lmaWVzIG9uZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdzeXN0ZW0ncyBsb2NhbGUnXSAtIGEgbG9jYWxlIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm91dHB1dENhbGVuZGFyIC0gdGhlIG91dHB1dCBjYWxlbmRhciB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5udW1iZXJpbmdTeXN0ZW0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tUkZDMjgyMignMjUgTm92IDIwMTYgMTM6MjM6MTIgR01UJylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVJGQzI4MjIoJ0ZyaSwgMjUgTm92IDIwMTYgMTM6MjM6MTIgKzA2MDAnKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tUkZDMjgyMignMjUgTm92IDIwMTYgMTM6MjMgWicpXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgO1xuXG4gIERhdGVUaW1lLmZyb21SRkMyODIyID0gZnVuY3Rpb24gZnJvbVJGQzI4MjIodGV4dCwgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX3BhcnNlUkZDMjgyMkRhdGUgPSBwYXJzZVJGQzI4MjJEYXRlKHRleHQpLFxuICAgICAgICB2YWxzID0gX3BhcnNlUkZDMjgyMkRhdGVbMF0sXG4gICAgICAgIHBhcnNlZFpvbmUgPSBfcGFyc2VSRkMyODIyRGF0ZVsxXTtcblxuICAgIHJldHVybiBwYXJzZURhdGFUb0RhdGVUaW1lKHZhbHMsIHBhcnNlZFpvbmUsIG9wdHMsIFwiUkZDIDI4MjJcIiwgdGV4dCk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYW4gSFRUUCBoZWFkZXIgZGF0ZVxuICAgKiBAc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9Qcm90b2NvbHMvcmZjMjYxNi9yZmMyNjE2LXNlYzMuaHRtbCNzZWMzLjMuMVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIHRoZSBIVFRQIGhlYWRlciBkYXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0byBhZmZlY3QgdGhlIGNyZWF0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfFpvbmV9IFtvcHRzLnpvbmU9J2xvY2FsJ10gLSBjb252ZXJ0IHRoZSB0aW1lIHRvIHRoaXMgem9uZS4gU2luY2UgSFRUUCBkYXRlcyBhcmUgYWx3YXlzIGluIFVUQywgdGhpcyBoYXMgbm8gZWZmZWN0IG9uIHRoZSBpbnRlcnByZXRhdGlvbiBvZiBzdHJpbmcsIG1lcmVseSB0aGUgem9uZSB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGlzIGV4cHJlc3NlZCBpbi5cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zZXRab25lPWZhbHNlXSAtIG92ZXJyaWRlIHRoZSB6b25lIHdpdGggdGhlIGZpeGVkLW9mZnNldCB6b25lIHNwZWNpZmllZCBpbiB0aGUgc3RyaW5nLiBGb3IgSFRUUCBkYXRlcywgdGhpcyBpcyBhbHdheXMgVVRDLCBzbyB0aGlzIG9wdGlvbiBpcyBlcXVpdmFsZW50IHRvIHNldHRpbmcgdGhlIGB6b25lYCBvcHRpb24gdG8gJ3V0YycsIGJ1dCB0aGlzIG9wdGlvbiBpcyBpbmNsdWRlZCBmb3IgY29uc2lzdGVuY3kgd2l0aCBzaW1pbGFyIG1ldGhvZHMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J3N5c3RlbSdzIGxvY2FsZSddIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21IVFRQKCdTdW4sIDA2IE5vdiAxOTk0IDA4OjQ5OjM3IEdNVCcpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21IVFRQKCdTdW5kYXksIDA2LU5vdi05NCAwODo0OTozNyBHTVQnKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tSFRUUCgnU3VuIE5vdiAgNiAwODo0OTozNyAxOTk0JylcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICA7XG5cbiAgRGF0ZVRpbWUuZnJvbUhUVFAgPSBmdW5jdGlvbiBmcm9tSFRUUCh0ZXh0LCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBfcGFyc2VIVFRQRGF0ZSA9IHBhcnNlSFRUUERhdGUodGV4dCksXG4gICAgICAgIHZhbHMgPSBfcGFyc2VIVFRQRGF0ZVswXSxcbiAgICAgICAgcGFyc2VkWm9uZSA9IF9wYXJzZUhUVFBEYXRlWzFdO1xuXG4gICAgcmV0dXJuIHBhcnNlRGF0YVRvRGF0ZVRpbWUodmFscywgcGFyc2VkWm9uZSwgb3B0cywgXCJIVFRQXCIsIG9wdHMpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGFuIGlucHV0IHN0cmluZyBhbmQgZm9ybWF0IHN0cmluZy5cbiAgICogRGVmYXVsdHMgdG8gZW4tVVMgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZCwgcmVnYXJkbGVzcyBvZiB0aGUgc3lzdGVtJ3MgbG9jYWxlLlxuICAgKiBAc2VlIGh0dHBzOi8vbW9tZW50LmdpdGh1Yi5pby9sdXhvbi9kb2NzL21hbnVhbC9wYXJzaW5nLmh0bWwjdGFibGUtb2YtdG9rZW5zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIHN0cmluZyB0byBwYXJzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm10IC0gdGhlIGZvcm1hdCB0aGUgc3RyaW5nIGlzIGV4cGVjdGVkIHRvIGJlIGluIChzZWUgdGhlIGxpbmsgYmVsb3cgZm9yIHRoZSBmb3JtYXRzKVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgdG8gYWZmZWN0IHRoZSBjcmVhdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbb3B0cy56b25lPSdsb2NhbCddIC0gdXNlIHRoaXMgem9uZSBpZiBubyBvZmZzZXQgaXMgc3BlY2lmaWVkIGluIHRoZSBpbnB1dCBzdHJpbmcgaXRzZWxmLiBXaWxsIGFsc28gY29udmVydCB0aGUgRGF0ZVRpbWUgdG8gdGhpcyB6b25lXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc2V0Wm9uZT1mYWxzZV0gLSBvdmVycmlkZSB0aGUgem9uZSB3aXRoIGEgem9uZSBzcGVjaWZpZWQgaW4gdGhlIHN0cmluZyBpdHNlbGYsIGlmIGl0IHNwZWNpZmllcyBvbmVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nZW4tVVMnXSAtIGEgbG9jYWxlIHN0cmluZyB0byB1c2Ugd2hlbiBwYXJzaW5nLiBXaWxsIGFsc28gc2V0IHRoZSBEYXRlVGltZSB0byB0aGlzIGxvY2FsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5udW1iZXJpbmdTeXN0ZW0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byB1c2Ugd2hlbiBwYXJzaW5nLiBXaWxsIGFsc28gc2V0IHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgdG8gdGhpcyBudW1iZXJpbmcgc3lzdGVtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm91dHB1dENhbGVuZGFyIC0gdGhlIG91dHB1dCBjYWxlbmRhciB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIDtcblxuICBEYXRlVGltZS5mcm9tRm9ybWF0ID0gZnVuY3Rpb24gZnJvbUZvcm1hdCh0ZXh0LCBmbXQsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgaWYgKGlzVW5kZWZpbmVkKHRleHQpIHx8IGlzVW5kZWZpbmVkKGZtdCkpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcImZyb21Gb3JtYXQgcmVxdWlyZXMgYW4gaW5wdXQgc3RyaW5nIGFuZCBhIGZvcm1hdFwiKTtcbiAgICB9XG5cbiAgICB2YXIgX29wdHMgPSBvcHRzLFxuICAgICAgICBfb3B0cyRsb2NhbGUgPSBfb3B0cy5sb2NhbGUsXG4gICAgICAgIGxvY2FsZSA9IF9vcHRzJGxvY2FsZSA9PT0gdm9pZCAwID8gbnVsbCA6IF9vcHRzJGxvY2FsZSxcbiAgICAgICAgX29wdHMkbnVtYmVyaW5nU3lzdGVtID0gX29wdHMubnVtYmVyaW5nU3lzdGVtLFxuICAgICAgICBudW1iZXJpbmdTeXN0ZW0gPSBfb3B0cyRudW1iZXJpbmdTeXN0ZW0gPT09IHZvaWQgMCA/IG51bGwgOiBfb3B0cyRudW1iZXJpbmdTeXN0ZW0sXG4gICAgICAgIGxvY2FsZVRvVXNlID0gTG9jYWxlLmZyb21PcHRzKHtcbiAgICAgIGxvY2FsZTogbG9jYWxlLFxuICAgICAgbnVtYmVyaW5nU3lzdGVtOiBudW1iZXJpbmdTeXN0ZW0sXG4gICAgICBkZWZhdWx0VG9FTjogdHJ1ZVxuICAgIH0pLFxuICAgICAgICBfcGFyc2VGcm9tVG9rZW5zID0gcGFyc2VGcm9tVG9rZW5zKGxvY2FsZVRvVXNlLCB0ZXh0LCBmbXQpLFxuICAgICAgICB2YWxzID0gX3BhcnNlRnJvbVRva2Vuc1swXSxcbiAgICAgICAgcGFyc2VkWm9uZSA9IF9wYXJzZUZyb21Ub2tlbnNbMV0sXG4gICAgICAgIGludmFsaWQgPSBfcGFyc2VGcm9tVG9rZW5zWzJdO1xuXG4gICAgaWYgKGludmFsaWQpIHtcbiAgICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKGludmFsaWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcGFyc2VEYXRhVG9EYXRlVGltZSh2YWxzLCBwYXJzZWRab25lLCBvcHRzLCBcImZvcm1hdCBcIiArIGZtdCwgdGV4dCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCB1c2UgZnJvbUZvcm1hdCBpbnN0ZWFkXG4gICAqL1xuICA7XG5cbiAgRGF0ZVRpbWUuZnJvbVN0cmluZyA9IGZ1bmN0aW9uIGZyb21TdHJpbmcodGV4dCwgZm10LCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cblxuICAgIHJldHVybiBEYXRlVGltZS5mcm9tRm9ybWF0KHRleHQsIGZtdCwgb3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYSBTUUwgZGF0ZSwgdGltZSwgb3IgZGF0ZXRpbWVcbiAgICogRGVmYXVsdHMgdG8gZW4tVVMgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZCwgcmVnYXJkbGVzcyBvZiB0aGUgc3lzdGVtJ3MgbG9jYWxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIHN0cmluZyB0byBwYXJzZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgdG8gYWZmZWN0IHRoZSBjcmVhdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbb3B0cy56b25lPSdsb2NhbCddIC0gdXNlIHRoaXMgem9uZSBpZiBubyBvZmZzZXQgaXMgc3BlY2lmaWVkIGluIHRoZSBpbnB1dCBzdHJpbmcgaXRzZWxmLiBXaWxsIGFsc28gY29udmVydCB0aGUgRGF0ZVRpbWUgdG8gdGhpcyB6b25lXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc2V0Wm9uZT1mYWxzZV0gLSBvdmVycmlkZSB0aGUgem9uZSB3aXRoIGEgem9uZSBzcGVjaWZpZWQgaW4gdGhlIHN0cmluZyBpdHNlbGYsIGlmIGl0IHNwZWNpZmllcyBvbmVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nZW4tVVMnXSAtIGEgbG9jYWxlIHN0cmluZyB0byB1c2Ugd2hlbiBwYXJzaW5nLiBXaWxsIGFsc28gc2V0IHRoZSBEYXRlVGltZSB0byB0aGlzIGxvY2FsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5udW1iZXJpbmdTeXN0ZW0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byB1c2Ugd2hlbiBwYXJzaW5nLiBXaWxsIGFsc28gc2V0IHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgdG8gdGhpcyBudW1iZXJpbmcgc3lzdGVtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm91dHB1dENhbGVuZGFyIC0gdGhlIG91dHB1dCBjYWxlbmRhciB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tU1FMKCcyMDE3LTA1LTE1JylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVNRTCgnMjAxNy0wNS0xNSAwOToxMjozNCcpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21TUUwoJzIwMTctMDUtMTUgMDk6MTI6MzQuMzQyJylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVNRTCgnMjAxNy0wNS0xNSAwOToxMjozNC4zNDIrMDY6MDAnKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tU1FMKCcyMDE3LTA1LTE1IDA5OjEyOjM0LjM0MiBBbWVyaWNhL0xvc19BbmdlbGVzJylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbVNRTCgnMjAxNy0wNS0xNSAwOToxMjozNC4zNDIgQW1lcmljYS9Mb3NfQW5nZWxlcycsIHsgc2V0Wm9uZTogdHJ1ZSB9KVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tU1FMKCcyMDE3LTA1LTE1IDA5OjEyOjM0LjM0MicsIHsgem9uZTogJ0FtZXJpY2EvTG9zX0FuZ2VsZXMnIH0pXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21TUUwoJzA5OjEyOjM0LjM0MicpXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgO1xuXG4gIERhdGVUaW1lLmZyb21TUUwgPSBmdW5jdGlvbiBmcm9tU1FMKHRleHQsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgdmFyIF9wYXJzZVNRTCA9IHBhcnNlU1FMKHRleHQpLFxuICAgICAgICB2YWxzID0gX3BhcnNlU1FMWzBdLFxuICAgICAgICBwYXJzZWRab25lID0gX3BhcnNlU1FMWzFdO1xuXG4gICAgcmV0dXJuIHBhcnNlRGF0YVRvRGF0ZVRpbWUodmFscywgcGFyc2VkWm9uZSwgb3B0cywgXCJTUUxcIiwgdGV4dCk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpbnZhbGlkIERhdGVUaW1lLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIC0gc2ltcGxlIHN0cmluZyBvZiB3aHkgdGhpcyBEYXRlVGltZSBpcyBpbnZhbGlkLiBTaG91bGQgbm90IGNvbnRhaW4gcGFyYW1ldGVycyBvciBhbnl0aGluZyBlbHNlIGRhdGEtZGVwZW5kZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZXhwbGFuYXRpb249bnVsbF0gLSBsb25nZXIgZXhwbGFuYXRpb24sIG1heSBpbmNsdWRlIHBhcmFtZXRlcnMgYW5kIG90aGVyIHVzZWZ1bCBkZWJ1Z2dpbmcgaW5mb3JtYXRpb25cbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICA7XG5cbiAgRGF0ZVRpbWUuaW52YWxpZCA9IGZ1bmN0aW9uIGludmFsaWQocmVhc29uLCBleHBsYW5hdGlvbikge1xuICAgIGlmIChleHBsYW5hdGlvbiA9PT0gdm9pZCAwKSB7XG4gICAgICBleHBsYW5hdGlvbiA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCFyZWFzb24pIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcIm5lZWQgdG8gc3BlY2lmeSBhIHJlYXNvbiB0aGUgRGF0ZVRpbWUgaXMgaW52YWxpZFwiKTtcbiAgICB9XG5cbiAgICB2YXIgaW52YWxpZCA9IHJlYXNvbiBpbnN0YW5jZW9mIEludmFsaWQgPyByZWFzb24gOiBuZXcgSW52YWxpZChyZWFzb24sIGV4cGxhbmF0aW9uKTtcblxuICAgIGlmIChTZXR0aW5ncy50aHJvd09uSW52YWxpZCkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWREYXRlVGltZUVycm9yKGludmFsaWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IERhdGVUaW1lKHtcbiAgICAgICAgaW52YWxpZDogaW52YWxpZFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBvYmplY3QgaXMgYSBEYXRlVGltZS4gV29ya3MgYWNyb3NzIGNvbnRleHQgYm91bmRhcmllc1xuICAgKiBAcGFyYW0ge29iamVjdH0gb1xuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgO1xuXG4gIERhdGVUaW1lLmlzRGF0ZVRpbWUgPSBmdW5jdGlvbiBpc0RhdGVUaW1lKG8pIHtcbiAgICByZXR1cm4gbyAmJiBvLmlzTHV4b25EYXRlVGltZSB8fCBmYWxzZTtcbiAgfSAvLyBJTkZPXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgdmFsdWUgb2YgdW5pdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXQgLSBhIHVuaXQgc3VjaCBhcyAnbWludXRlJyBvciAnZGF5J1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA3LCA0KS5nZXQoJ21vbnRoJyk7IC8vPT4gN1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA3LCA0KS5nZXQoJ2RheScpOyAvLz0+IDRcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgO1xuXG4gIHZhciBfcHJvdG8gPSBEYXRlVGltZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldCA9IGZ1bmN0aW9uIGdldCh1bml0KSB7XG4gICAgcmV0dXJuIHRoaXNbdW5pdF07XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgRGF0ZVRpbWUgaXMgdmFsaWQuIEludmFsaWQgRGF0ZVRpbWVzIG9jY3VyIHdoZW46XG4gICAqICogVGhlIERhdGVUaW1lIHdhcyBjcmVhdGVkIGZyb20gaW52YWxpZCBjYWxlbmRhciBpbmZvcm1hdGlvbiwgc3VjaCBhcyB0aGUgMTN0aCBtb250aCBvciBGZWJydWFyeSAzMFxuICAgKiAqIFRoZSBEYXRlVGltZSB3YXMgY3JlYXRlZCBieSBhbiBvcGVyYXRpb24gb24gYW5vdGhlciBpbnZhbGlkIGRhdGVcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICA7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHJlc29sdmVkIEludGwgb3B0aW9ucyBmb3IgdGhpcyBEYXRlVGltZS5cbiAgICogVGhpcyBpcyB1c2VmdWwgaW4gdW5kZXJzdGFuZGluZyB0aGUgYmVoYXZpb3Igb2YgZm9ybWF0dGluZyBtZXRob2RzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gdGhlIHNhbWUgb3B0aW9ucyBhcyB0b0xvY2FsZVN0cmluZ1xuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICBfcHJvdG8ucmVzb2x2ZWRMb2NhbGVPcHRzID0gZnVuY3Rpb24gcmVzb2x2ZWRMb2NhbGVPcHRzKG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgdmFyIF9Gb3JtYXR0ZXIkY3JlYXRlJHJlcyA9IEZvcm1hdHRlci5jcmVhdGUodGhpcy5sb2MuY2xvbmUob3B0cyksIG9wdHMpLnJlc29sdmVkT3B0aW9ucyh0aGlzKSxcbiAgICAgICAgbG9jYWxlID0gX0Zvcm1hdHRlciRjcmVhdGUkcmVzLmxvY2FsZSxcbiAgICAgICAgbnVtYmVyaW5nU3lzdGVtID0gX0Zvcm1hdHRlciRjcmVhdGUkcmVzLm51bWJlcmluZ1N5c3RlbSxcbiAgICAgICAgY2FsZW5kYXIgPSBfRm9ybWF0dGVyJGNyZWF0ZSRyZXMuY2FsZW5kYXI7XG5cbiAgICByZXR1cm4ge1xuICAgICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgICBudW1iZXJpbmdTeXN0ZW06IG51bWJlcmluZ1N5c3RlbSxcbiAgICAgIG91dHB1dENhbGVuZGFyOiBjYWxlbmRhclxuICAgIH07XG4gIH0gLy8gVFJBTlNGT1JNXG5cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhlIERhdGVUaW1lJ3Mgem9uZSB0byBVVEMuIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEYXRlVGltZS5cbiAgICpcbiAgICogRXF1aXZhbGVudCB0byB7QGxpbmsgc2V0Wm9uZX0oJ3V0YycpXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0PTBdIC0gb3B0aW9uYWxseSwgYW4gb2Zmc2V0IGZyb20gVVRDIGluIG1pbnV0ZXNcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzPXt9XSAtIG9wdGlvbnMgdG8gcGFzcyB0byBgc2V0Wm9uZSgpYFxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9VVEMgPSBmdW5jdGlvbiB0b1VUQyhvZmZzZXQsIG9wdHMpIHtcbiAgICBpZiAob2Zmc2V0ID09PSB2b2lkIDApIHtcbiAgICAgIG9mZnNldCA9IDA7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNldFpvbmUoRml4ZWRPZmZzZXRab25lLmluc3RhbmNlKG9mZnNldCksIG9wdHMpO1xuICB9XG4gIC8qKlxuICAgKiBcIlNldFwiIHRoZSBEYXRlVGltZSdzIHpvbmUgdG8gdGhlIGhvc3QncyBsb2NhbCB6b25lLiBSZXR1cm5zIGEgbmV3bHktY29uc3RydWN0ZWQgRGF0ZVRpbWUuXG4gICAqXG4gICAqIEVxdWl2YWxlbnQgdG8gYHNldFpvbmUoJ2xvY2FsJylgXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b0xvY2FsID0gZnVuY3Rpb24gdG9Mb2NhbCgpIHtcbiAgICByZXR1cm4gdGhpcy5zZXRab25lKFNldHRpbmdzLmRlZmF1bHRab25lKTtcbiAgfVxuICAvKipcbiAgICogXCJTZXRcIiB0aGUgRGF0ZVRpbWUncyB6b25lIHRvIHNwZWNpZmllZCB6b25lLiBSZXR1cm5zIGEgbmV3bHktY29uc3RydWN0ZWQgRGF0ZVRpbWUuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSBzZXR0ZXIga2VlcHMgdGhlIHVuZGVybHlpbmcgdGltZSB0aGUgc2FtZSAoYXMgaW4sIHRoZSBzYW1lIHRpbWVzdGFtcCksIGJ1dCB0aGUgbmV3IGluc3RhbmNlIHdpbGwgcmVwb3J0IGRpZmZlcmVudCBsb2NhbCB0aW1lcyBhbmQgY29uc2lkZXIgRFNUcyB3aGVuIG1ha2luZyBjb21wdXRhdGlvbnMsIGFzIHdpdGgge0BsaW5rIHBsdXN9LiBZb3UgbWF5IHdpc2ggdG8gdXNlIHtAbGluayB0b0xvY2FsfSBhbmQge0BsaW5rIHRvVVRDfSB3aGljaCBwcm92aWRlIHNpbXBsZSBjb252ZW5pZW5jZSB3cmFwcGVycyBmb3IgY29tbW9ubHkgdXNlZCB6b25lcy5cbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW3pvbmU9J2xvY2FsJ10gLSBhIHpvbmUgaWRlbnRpZmllci4gQXMgYSBzdHJpbmcsIHRoYXQgY2FuIGJlIGFueSBJQU5BIHpvbmUgc3VwcG9ydGVkIGJ5IHRoZSBob3N0IGVudmlyb25tZW50LCBvciBhIGZpeGVkLW9mZnNldCBuYW1lIG9mIHRoZSBmb3JtICdVVEMrMycsIG9yIHRoZSBzdHJpbmdzICdsb2NhbCcgb3IgJ3V0YycuIFlvdSBtYXkgYWxzbyBzdXBwbHkgYW4gaW5zdGFuY2Ugb2YgYSB7QGxpbmsgWm9uZX0gY2xhc3MuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmtlZXBMb2NhbFRpbWU9ZmFsc2VdIC0gSWYgdHJ1ZSwgYWRqdXN0IHRoZSB1bmRlcmx5aW5nIHRpbWUgc28gdGhhdCB0aGUgbG9jYWwgdGltZSBzdGF5cyB0aGUgc2FtZSwgYnV0IGluIHRoZSB0YXJnZXQgem9uZS4gWW91IHNob3VsZCByYXJlbHkgbmVlZCB0aGlzLlxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2V0Wm9uZSA9IGZ1bmN0aW9uIHNldFpvbmUoem9uZSwgX3RlbXApIHtcbiAgICB2YXIgX3JlZjMgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgICAgX3JlZjMka2VlcExvY2FsVGltZSA9IF9yZWYzLmtlZXBMb2NhbFRpbWUsXG4gICAgICAgIGtlZXBMb2NhbFRpbWUgPSBfcmVmMyRrZWVwTG9jYWxUaW1lID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYzJGtlZXBMb2NhbFRpbWUsXG4gICAgICAgIF9yZWYzJGtlZXBDYWxlbmRhclRpbSA9IF9yZWYzLmtlZXBDYWxlbmRhclRpbWUsXG4gICAgICAgIGtlZXBDYWxlbmRhclRpbWUgPSBfcmVmMyRrZWVwQ2FsZW5kYXJUaW0gPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjMka2VlcENhbGVuZGFyVGltO1xuXG4gICAgem9uZSA9IG5vcm1hbGl6ZVpvbmUoem9uZSwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpO1xuXG4gICAgaWYgKHpvbmUuZXF1YWxzKHRoaXMuem9uZSkpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSBpZiAoIXpvbmUuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQodW5zdXBwb3J0ZWRab25lKHpvbmUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG5ld1RTID0gdGhpcy50cztcblxuICAgICAgaWYgKGtlZXBMb2NhbFRpbWUgfHwga2VlcENhbGVuZGFyVGltZSkge1xuICAgICAgICB2YXIgb2Zmc2V0R3Vlc3MgPSB6b25lLm9mZnNldCh0aGlzLnRzKTtcbiAgICAgICAgdmFyIGFzT2JqID0gdGhpcy50b09iamVjdCgpO1xuXG4gICAgICAgIHZhciBfb2JqVG9UUzMgPSBvYmpUb1RTKGFzT2JqLCBvZmZzZXRHdWVzcywgem9uZSk7XG5cbiAgICAgICAgbmV3VFMgPSBfb2JqVG9UUzNbMF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjbG9uZSQxKHRoaXMsIHtcbiAgICAgICAgdHM6IG5ld1RTLFxuICAgICAgICB6b25lOiB6b25lXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhlIGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvciBvdXRwdXRDYWxlbmRhci4gUmV0dXJucyBhIG5ld2x5LWNvbnN0cnVjdGVkIERhdGVUaW1lLlxuICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyAtIHRoZSBwcm9wZXJ0aWVzIHRvIHNldFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkucmVjb25maWd1cmUoeyBsb2NhbGU6ICdlbi1HQicgfSlcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlY29uZmlndXJlID0gZnVuY3Rpb24gcmVjb25maWd1cmUoX3RlbXAyKSB7XG4gICAgdmFyIF9yZWY0ID0gX3RlbXAyID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMixcbiAgICAgICAgbG9jYWxlID0gX3JlZjQubG9jYWxlLFxuICAgICAgICBudW1iZXJpbmdTeXN0ZW0gPSBfcmVmNC5udW1iZXJpbmdTeXN0ZW0sXG4gICAgICAgIG91dHB1dENhbGVuZGFyID0gX3JlZjQub3V0cHV0Q2FsZW5kYXI7XG5cbiAgICB2YXIgbG9jID0gdGhpcy5sb2MuY2xvbmUoe1xuICAgICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgICBudW1iZXJpbmdTeXN0ZW06IG51bWJlcmluZ1N5c3RlbSxcbiAgICAgIG91dHB1dENhbGVuZGFyOiBvdXRwdXRDYWxlbmRhclxuICAgIH0pO1xuICAgIHJldHVybiBjbG9uZSQxKHRoaXMsIHtcbiAgICAgIGxvYzogbG9jXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhlIGxvY2FsZS4gUmV0dXJucyBhIG5ld2x5LWNvbnN0cnVjdGVkIERhdGVUaW1lLlxuICAgKiBKdXN0IGEgY29udmVuaWVudCBhbGlhcyBmb3IgcmVjb25maWd1cmUoeyBsb2NhbGUgfSlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUpLnNldExvY2FsZSgnZW4tR0InKVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2V0TG9jYWxlID0gZnVuY3Rpb24gc2V0TG9jYWxlKGxvY2FsZSkge1xuICAgIHJldHVybiB0aGlzLnJlY29uZmlndXJlKHtcbiAgICAgIGxvY2FsZTogbG9jYWxlXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhlIHZhbHVlcyBvZiBzcGVjaWZpZWQgdW5pdHMuIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEYXRlVGltZS5cbiAgICogWW91IGNhbiBvbmx5IHNldCB1bml0cyB3aXRoIHRoaXMgbWV0aG9kOyBmb3IgXCJzZXR0aW5nXCIgbWV0YWRhdGEsIHNlZSB7QGxpbmsgcmVjb25maWd1cmV9IGFuZCB7QGxpbmsgc2V0Wm9uZX0uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZXMgLSBhIG1hcHBpbmcgb2YgdW5pdHMgdG8gbnVtYmVyc1xuICAgKiBAZXhhbXBsZSBkdC5zZXQoeyB5ZWFyOiAyMDE3IH0pXG4gICAqIEBleGFtcGxlIGR0LnNldCh7IGhvdXI6IDgsIG1pbnV0ZTogMzAgfSlcbiAgICogQGV4YW1wbGUgZHQuc2V0KHsgd2Vla2RheTogNSB9KVxuICAgKiBAZXhhbXBsZSBkdC5zZXQoeyB5ZWFyOiAyMDA1LCBvcmRpbmFsOiAyMzQgfSlcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNldCA9IGZ1bmN0aW9uIHNldCh2YWx1ZXMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgdmFyIG5vcm1hbGl6ZWQgPSBub3JtYWxpemVPYmplY3QodmFsdWVzLCBub3JtYWxpemVVbml0LCBbXSksXG4gICAgICAgIHNldHRpbmdXZWVrU3R1ZmYgPSAhaXNVbmRlZmluZWQobm9ybWFsaXplZC53ZWVrWWVhcikgfHwgIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQud2Vla051bWJlcikgfHwgIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQud2Vla2RheSk7XG4gICAgdmFyIG1peGVkO1xuXG4gICAgaWYgKHNldHRpbmdXZWVrU3R1ZmYpIHtcbiAgICAgIG1peGVkID0gd2Vla1RvR3JlZ29yaWFuKE9iamVjdC5hc3NpZ24oZ3JlZ29yaWFuVG9XZWVrKHRoaXMuYyksIG5vcm1hbGl6ZWQpKTtcbiAgICB9IGVsc2UgaWYgKCFpc1VuZGVmaW5lZChub3JtYWxpemVkLm9yZGluYWwpKSB7XG4gICAgICBtaXhlZCA9IG9yZGluYWxUb0dyZWdvcmlhbihPYmplY3QuYXNzaWduKGdyZWdvcmlhblRvT3JkaW5hbCh0aGlzLmMpLCBub3JtYWxpemVkKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1peGVkID0gT2JqZWN0LmFzc2lnbih0aGlzLnRvT2JqZWN0KCksIG5vcm1hbGl6ZWQpOyAvLyBpZiB3ZSBkaWRuJ3Qgc2V0IHRoZSBkYXkgYnV0IHdlIGVuZGVkIHVwIG9uIGFuIG92ZXJmbG93IGRhdGUsXG4gICAgICAvLyB1c2UgdGhlIGxhc3QgZGF5IG9mIHRoZSByaWdodCBtb250aFxuXG4gICAgICBpZiAoaXNVbmRlZmluZWQobm9ybWFsaXplZC5kYXkpKSB7XG4gICAgICAgIG1peGVkLmRheSA9IE1hdGgubWluKGRheXNJbk1vbnRoKG1peGVkLnllYXIsIG1peGVkLm1vbnRoKSwgbWl4ZWQuZGF5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgX29ialRvVFM0ID0gb2JqVG9UUyhtaXhlZCwgdGhpcy5vLCB0aGlzLnpvbmUpLFxuICAgICAgICB0cyA9IF9vYmpUb1RTNFswXSxcbiAgICAgICAgbyA9IF9vYmpUb1RTNFsxXTtcblxuICAgIHJldHVybiBjbG9uZSQxKHRoaXMsIHtcbiAgICAgIHRzOiB0cyxcbiAgICAgIG86IG9cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQWRkIGEgcGVyaW9kIG9mIHRpbWUgdG8gdGhpcyBEYXRlVGltZSBhbmQgcmV0dXJuIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWVcbiAgICpcbiAgICogQWRkaW5nIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBvciBtaWxsaXNlY29uZHMgaW5jcmVhc2VzIHRoZSB0aW1lc3RhbXAgYnkgdGhlIHJpZ2h0IG51bWJlciBvZiBtaWxsaXNlY29uZHMuIEFkZGluZyBkYXlzLCBtb250aHMsIG9yIHllYXJzIHNoaWZ0cyB0aGUgY2FsZW5kYXIsIGFjY291bnRpbmcgZm9yIERTVHMgYW5kIGxlYXAgeWVhcnMgYWxvbmcgdGhlIHdheS4gVGh1cywgYGR0LnBsdXMoeyBob3VyczogMjQgfSlgIG1heSByZXN1bHQgaW4gYSBkaWZmZXJlbnQgdGltZSB0aGFuIGBkdC5wbHVzKHsgZGF5czogMSB9KWAgaWYgdGhlcmUncyBhIERTVCBzaGlmdCBpbiBiZXR3ZWVuLlxuICAgKiBAcGFyYW0ge0R1cmF0aW9ufE9iamVjdHxudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGFtb3VudCB0byBhZGQuIEVpdGhlciBhIEx1eG9uIER1cmF0aW9uLCBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIHRoZSBvYmplY3QgYXJndW1lbnQgdG8gRHVyYXRpb24uZnJvbU9iamVjdCgpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKCkucGx1cygxMjMpIC8vfj4gaW4gMTIzIG1pbGxpc2Vjb25kc1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpLnBsdXMoeyBtaW51dGVzOiAxNSB9KSAvL34+IGluIDE1IG1pbnV0ZXNcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoKS5wbHVzKHsgZGF5czogMSB9KSAvL34+IHRoaXMgdGltZSB0b21vcnJvd1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpLnBsdXMoeyBkYXlzOiAtMSB9KSAvL34+IHRoaXMgdGltZSB5ZXN0ZXJkYXlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoKS5wbHVzKHsgaG91cnM6IDMsIG1pbnV0ZXM6IDEzIH0pIC8vfj4gaW4gMyBociwgMTMgbWluXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKCkucGx1cyhEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDMsIG1pbnV0ZXM6IDEzIH0pKSAvL34+IGluIDMgaHIsIDEzIG1pblxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGx1cyA9IGZ1bmN0aW9uIHBsdXMoZHVyYXRpb24pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgdmFyIGR1ciA9IGZyaWVuZGx5RHVyYXRpb24oZHVyYXRpb24pO1xuICAgIHJldHVybiBjbG9uZSQxKHRoaXMsIGFkanVzdFRpbWUodGhpcywgZHVyKSk7XG4gIH1cbiAgLyoqXG4gICAqIFN1YnRyYWN0IGEgcGVyaW9kIG9mIHRpbWUgdG8gdGhpcyBEYXRlVGltZSBhbmQgcmV0dXJuIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWVcbiAgICogU2VlIHtAbGluayBwbHVzfVxuICAgKiBAcGFyYW0ge0R1cmF0aW9ufE9iamVjdHxudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGFtb3VudCB0byBzdWJ0cmFjdC4gRWl0aGVyIGEgTHV4b24gRHVyYXRpb24sIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgdGhlIG9iamVjdCBhcmd1bWVudCB0byBEdXJhdGlvbi5mcm9tT2JqZWN0KClcbiAgIEByZXR1cm4ge0RhdGVUaW1lfVxuICAqL1xuICA7XG5cbiAgX3Byb3RvLm1pbnVzID0gZnVuY3Rpb24gbWludXMoZHVyYXRpb24pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgdmFyIGR1ciA9IGZyaWVuZGx5RHVyYXRpb24oZHVyYXRpb24pLm5lZ2F0ZSgpO1xuICAgIHJldHVybiBjbG9uZSQxKHRoaXMsIGFkanVzdFRpbWUodGhpcywgZHVyKSk7XG4gIH1cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhpcyBEYXRlVGltZSB0byB0aGUgYmVnaW5uaW5nIG9mIGEgdW5pdCBvZiB0aW1lLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIFRoZSB1bml0IHRvIGdvIHRvIHRoZSBiZWdpbm5pbmcgb2YuIENhbiBiZSAneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCcsIG9yICdtaWxsaXNlY29uZCcuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMpLnN0YXJ0T2YoJ21vbnRoJykudG9JU09EYXRlKCk7IC8vPT4gJzIwMTQtMDMtMDEnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMpLnN0YXJ0T2YoJ3llYXInKS50b0lTT0RhdGUoKTsgLy89PiAnMjAxNC0wMS0wMSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMywgMywgNSwgMzApLnN0YXJ0T2YoJ2RheScpLnRvSVNPVGltZSgpOyAvLz0+ICcwMDowMC4wMDAtMDU6MDAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMsIDUsIDMwKS5zdGFydE9mKCdob3VyJykudG9JU09UaW1lKCk7IC8vPT4gJzA1OjAwOjAwLjAwMC0wNTowMCdcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnN0YXJ0T2YgPSBmdW5jdGlvbiBzdGFydE9mKHVuaXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG4gICAgdmFyIG8gPSB7fSxcbiAgICAgICAgbm9ybWFsaXplZFVuaXQgPSBEdXJhdGlvbi5ub3JtYWxpemVVbml0KHVuaXQpO1xuXG4gICAgc3dpdGNoIChub3JtYWxpemVkVW5pdCkge1xuICAgICAgY2FzZSBcInllYXJzXCI6XG4gICAgICAgIG8ubW9udGggPSAxO1xuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuXG4gICAgICBjYXNlIFwicXVhcnRlcnNcIjpcbiAgICAgIGNhc2UgXCJtb250aHNcIjpcbiAgICAgICAgby5kYXkgPSAxO1xuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuXG4gICAgICBjYXNlIFwid2Vla3NcIjpcbiAgICAgIGNhc2UgXCJkYXlzXCI6XG4gICAgICAgIG8uaG91ciA9IDA7XG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG5cbiAgICAgIGNhc2UgXCJob3Vyc1wiOlxuICAgICAgICBvLm1pbnV0ZSA9IDA7XG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG5cbiAgICAgIGNhc2UgXCJtaW51dGVzXCI6XG4gICAgICAgIG8uc2Vjb25kID0gMDtcbiAgICAgIC8vIGZhbGxzIHRocm91Z2hcblxuICAgICAgY2FzZSBcInNlY29uZHNcIjpcbiAgICAgICAgby5taWxsaXNlY29uZCA9IDA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gbm8gZGVmYXVsdCwgaW52YWxpZCB1bml0cyB0aHJvdyBpbiBub3JtYWxpemVVbml0KClcbiAgICB9XG5cbiAgICBpZiAobm9ybWFsaXplZFVuaXQgPT09IFwid2Vla3NcIikge1xuICAgICAgby53ZWVrZGF5ID0gMTtcbiAgICB9XG5cbiAgICBpZiAobm9ybWFsaXplZFVuaXQgPT09IFwicXVhcnRlcnNcIikge1xuICAgICAgdmFyIHEgPSBNYXRoLmNlaWwodGhpcy5tb250aCAvIDMpO1xuICAgICAgby5tb250aCA9IChxIC0gMSkgKiAzICsgMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zZXQobyk7XG4gIH1cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhpcyBEYXRlVGltZSB0byB0aGUgZW5kIChtZWFuaW5nIHRoZSBsYXN0IG1pbGxpc2Vjb25kKSBvZiBhIHVuaXQgb2YgdGltZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIFRoZSB1bml0IHRvIGdvIHRvIHRoZSBlbmQgb2YuIENhbiBiZSAneWVhcicsICdtb250aCcsICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJywgb3IgJ21pbGxpc2Vjb25kJy5cbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMywgMykuZW5kT2YoJ21vbnRoJykudG9JU08oKTsgLy89PiAnMjAxNC0wMy0zMVQyMzo1OTo1OS45OTktMDU6MDAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMpLmVuZE9mKCd5ZWFyJykudG9JU08oKTsgLy89PiAnMjAxNC0xMi0zMVQyMzo1OTo1OS45OTktMDU6MDAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMsIDUsIDMwKS5lbmRPZignZGF5JykudG9JU08oKTsgLy89PiAnMjAxNC0wMy0wM1QyMzo1OTo1OS45OTktMDU6MDAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDMsIDMsIDUsIDMwKS5lbmRPZignaG91cicpLnRvSVNPKCk7IC8vPT4gJzIwMTQtMDMtMDNUMDU6NTk6NTkuOTk5LTA1OjAwJ1xuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZW5kT2YgPSBmdW5jdGlvbiBlbmRPZih1bml0KSB7XG4gICAgdmFyIF90aGlzJHBsdXM7XG5cbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5wbHVzKChfdGhpcyRwbHVzID0ge30sIF90aGlzJHBsdXNbdW5pdF0gPSAxLCBfdGhpcyRwbHVzKSkuc3RhcnRPZih1bml0KS5taW51cygxKSA6IHRoaXM7XG4gIH0gLy8gT1VUUFVUXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSBmb3JtYXR0ZWQgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgZm9ybWF0IHN0cmluZy5cbiAgICogKipZb3UgbWF5IG5vdCB3YW50IHRoaXMuKiogU2VlIHtAbGluayB0b0xvY2FsZVN0cmluZ30gZm9yIGEgbW9yZSBmbGV4aWJsZSBmb3JtYXR0aW5nIHRvb2wuIEZvciBhIHRhYmxlIG9mIHRva2VucyBhbmQgdGhlaXIgaW50ZXJwcmV0YXRpb25zLCBzZWUgW2hlcmVdKGh0dHBzOi8vbW9tZW50LmdpdGh1Yi5pby9sdXhvbi9kb2NzL21hbnVhbC9mb3JtYXR0aW5nLmh0bWwjdGFibGUtb2YtdG9rZW5zKS5cbiAgICogRGVmYXVsdHMgdG8gZW4tVVMgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZCwgcmVnYXJkbGVzcyBvZiB0aGUgc3lzdGVtJ3MgbG9jYWxlLlxuICAgKiBAc2VlIGh0dHBzOi8vbW9tZW50LmdpdGh1Yi5pby9sdXhvbi9kb2NzL21hbnVhbC9mb3JtYXR0aW5nLmh0bWwjdGFibGUtb2YtdG9rZW5zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmbXQgLSB0aGUgZm9ybWF0IHN0cmluZ1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdHMgdG8gb3ZlcnJpZGUgdGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9uc1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpLnRvRm9ybWF0KCd5eXl5IExMTCBkZCcpIC8vPT4gJzIwMTcgQXByIDIyJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpLnNldExvY2FsZSgnZnInKS50b0Zvcm1hdCgneXl5eSBMTEwgZGQnKSAvLz0+ICcyMDE3IGF2ci4gMjInXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKCkudG9Gb3JtYXQoJ3l5eXkgTExMIGRkJywgeyBsb2NhbGU6IFwiZnJcIiB9KSAvLz0+ICcyMDE3IGF2ci4gMjInXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKCkudG9Gb3JtYXQoXCJISCAnaG91cnMgYW5kJyBtbSAnbWludXRlcydcIikgLy89PiAnMjAgaG91cnMgYW5kIDU1IG1pbnV0ZXMnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9Gb3JtYXQgPSBmdW5jdGlvbiB0b0Zvcm1hdChmbXQsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IEZvcm1hdHRlci5jcmVhdGUodGhpcy5sb2MucmVkZWZhdWx0VG9FTihvcHRzKSkuZm9ybWF0RGF0ZVRpbWVGcm9tU3RyaW5nKHRoaXMsIGZtdCkgOiBJTlZBTElEJDI7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsb2NhbGl6ZWQgc3RyaW5nIHJlcHJlc2VudGluZyB0aGlzIGRhdGUuIEFjY2VwdHMgdGhlIHNhbWUgb3B0aW9ucyBhcyB0aGUgSW50bC5EYXRlVGltZUZvcm1hdCBjb25zdHJ1Y3RvciBhbmQgYW55IHByZXNldHMgZGVmaW5lZCBieSBMdXhvbiwgc3VjaCBhcyBgRGF0ZVRpbWUuREFURV9GVUxMYCBvciBgRGF0ZVRpbWUuVElNRV9TSU1QTEVgLlxuICAgKiBUaGUgZXhhY3QgYmVoYXZpb3Igb2YgdGhpcyBtZXRob2QgaXMgYnJvd3Nlci1zcGVjaWZpYywgYnV0IGluIGdlbmVyYWwgaXQgd2lsbCByZXR1cm4gYW4gYXBwcm9wcmlhdGUgcmVwcmVzZW50YXRpb25cbiAgICogb2YgdGhlIERhdGVUaW1lIGluIHRoZSBhc3NpZ25lZCBsb2NhbGUuXG4gICAqIERlZmF1bHRzIHRvIHRoZSBzeXN0ZW0ncyBsb2NhbGUgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZFxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0RhdGVUaW1lRm9ybWF0XG4gICAqIEBwYXJhbSBvcHRzIHtPYmplY3R9IC0gSW50bC5EYXRlVGltZUZvcm1hdCBjb25zdHJ1Y3RvciBvcHRpb25zIGFuZCBjb25maWd1cmF0aW9uIG9wdGlvbnNcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoKS50b0xvY2FsZVN0cmluZygpOyAvLz0+IDQvMjAvMjAxN1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpLnNldExvY2FsZSgnZW4tZ2InKS50b0xvY2FsZVN0cmluZygpOyAvLz0+ICcyMC8wNC8yMDE3J1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpLnRvTG9jYWxlU3RyaW5nKHsgbG9jYWxlOiAnZW4tZ2InIH0pOyAvLz0+ICcyMC8wNC8yMDE3J1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpLnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLkRBVEVfRlVMTCk7IC8vPT4gJ0FwcmlsIDIwLCAyMDE3J1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpLnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLlRJTUVfU0lNUExFKTsgLy89PiAnMTE6MzIgQU0nXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKCkudG9Mb2NhbGVTdHJpbmcoRGF0ZVRpbWUuREFURVRJTUVfU0hPUlQpOyAvLz0+ICc0LzIwLzIwMTcsIDExOjMyIEFNJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpLnRvTG9jYWxlU3RyaW5nKHsgd2Vla2RheTogJ2xvbmcnLCBtb250aDogJ2xvbmcnLCBkYXk6ICcyLWRpZ2l0JyB9KTsgLy89PiAnVGh1cnNkYXksIEFwcmlsIDIwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpLnRvTG9jYWxlU3RyaW5nKHsgd2Vla2RheTogJ3Nob3J0JywgbW9udGg6ICdzaG9ydCcsIGRheTogJzItZGlnaXQnLCBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnIH0pOyAvLz0+ICdUaHUsIEFwciAyMCwgMTE6MjcgQU0nXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKCkudG9Mb2NhbGVTdHJpbmcoeyBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnLCBob3VyMTI6IGZhbHNlIH0pOyAvLz0+ICcxMTozMidcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0gREFURV9TSE9SVDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gRm9ybWF0dGVyLmNyZWF0ZSh0aGlzLmxvYy5jbG9uZShvcHRzKSwgb3B0cykuZm9ybWF0RGF0ZVRpbWUodGhpcykgOiBJTlZBTElEJDI7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYXJyYXkgb2YgZm9ybWF0IFwicGFydHNcIiwgbWVhbmluZyBpbmRpdmlkdWFsIHRva2VucyBhbG9uZyB3aXRoIG1ldGFkYXRhLiBUaGlzIGlzIGFsbG93cyBjYWxsZXJzIHRvIHBvc3QtcHJvY2VzcyBpbmRpdmlkdWFsIHNlY3Rpb25zIG9mIHRoZSBmb3JtYXR0ZWQgb3V0cHV0LlxuICAgKiBEZWZhdWx0cyB0byB0aGUgc3lzdGVtJ3MgbG9jYWxlIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWRcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9EYXRlVGltZUZvcm1hdC9mb3JtYXRUb1BhcnRzXG4gICAqIEBwYXJhbSBvcHRzIHtPYmplY3R9IC0gSW50bC5EYXRlVGltZUZvcm1hdCBjb25zdHJ1Y3RvciBvcHRpb25zLCBzYW1lIGFzIGB0b0xvY2FsZVN0cmluZ2AuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKCkudG9Mb2NhbGVQYXJ0cygpOyAvLz0+IFtcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vPT4gICB7IHR5cGU6ICdkYXknLCB2YWx1ZTogJzI1JyB9LFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy89PiAgIHsgdHlwZTogJ2xpdGVyYWwnLCB2YWx1ZTogJy8nIH0sXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLz0+ICAgeyB0eXBlOiAnbW9udGgnLCB2YWx1ZTogJzA1JyB9LFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy89PiAgIHsgdHlwZTogJ2xpdGVyYWwnLCB2YWx1ZTogJy8nIH0sXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLz0+ICAgeyB0eXBlOiAneWVhcicsIHZhbHVlOiAnMTk4MicgfVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy89PiBdXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvTG9jYWxlUGFydHMgPSBmdW5jdGlvbiB0b0xvY2FsZVBhcnRzKG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IEZvcm1hdHRlci5jcmVhdGUodGhpcy5sb2MuY2xvbmUob3B0cyksIG9wdHMpLmZvcm1hdERhdGVUaW1lUGFydHModGhpcykgOiBbXTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc3VwcHJlc3NNaWxsaXNlY29uZHM9ZmFsc2VdIC0gZXhjbHVkZSBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZm9ybWF0IGlmIHRoZXkncmUgMFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnN1cHByZXNzU2Vjb25kcz1mYWxzZV0gLSBleGNsdWRlIHNlY29uZHMgZnJvbSB0aGUgZm9ybWF0IGlmIHRoZXkncmUgMFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVPZmZzZXQ9dHJ1ZV0gLSBpbmNsdWRlIHRoZSBvZmZzZXQsIHN1Y2ggYXMgJ1onIG9yICctMDQ6MDAnXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5mb3JtYXQ9J2V4dGVuZGVkJ10gLSBjaG9vc2UgYmV0d2VlbiB0aGUgYmFzaWMgYW5kIGV4dGVuZGVkIGZvcm1hdFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMTk4MiwgNSwgMjUpLnRvSVNPKCkgLy89PiAnMTk4Mi0wNS0yNVQwMDowMDowMC4wMDBaJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpLnRvSVNPKCkgLy89PiAnMjAxNy0wNC0yMlQyMDo0NzowNS4zMzUtMDQ6MDAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKCkudG9JU08oeyBpbmNsdWRlT2Zmc2V0OiBmYWxzZSB9KSAvLz0+ICcyMDE3LTA0LTIyVDIwOjQ3OjA1LjMzNSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoKS50b0lTTyh7IGZvcm1hdDogJ2Jhc2ljJyB9KSAvLz0+ICcyMDE3MDQyMlQyMDQ3MDUuMzM1LTA0MDAnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9JU08gPSBmdW5jdGlvbiB0b0lTTyhvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50b0lTT0RhdGUob3B0cykgKyBcIlRcIiArIHRoaXMudG9JU09UaW1lKG9wdHMpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxLWNvbXBsaWFudCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSdzIGRhdGUgY29tcG9uZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuZm9ybWF0PSdleHRlbmRlZCddIC0gY2hvb3NlIGJldHdlZW4gdGhlIGJhc2ljIGFuZCBleHRlbmRlZCBmb3JtYXRcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDE5ODIsIDUsIDI1KS50b0lTT0RhdGUoKSAvLz0+ICcxOTgyLTA1LTI1J1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMTk4MiwgNSwgMjUpLnRvSVNPRGF0ZSh7IGZvcm1hdDogJ2Jhc2ljJyB9KSAvLz0+ICcxOTgyMDUyNSdcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b0lTT0RhdGUgPSBmdW5jdGlvbiB0b0lTT0RhdGUoX3RlbXAzKSB7XG4gICAgdmFyIF9yZWY1ID0gX3RlbXAzID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMyxcbiAgICAgICAgX3JlZjUkZm9ybWF0ID0gX3JlZjUuZm9ybWF0LFxuICAgICAgICBmb3JtYXQgPSBfcmVmNSRmb3JtYXQgPT09IHZvaWQgMCA/IFwiZXh0ZW5kZWRcIiA6IF9yZWY1JGZvcm1hdDtcblxuICAgIHZhciBmbXQgPSBmb3JtYXQgPT09IFwiYmFzaWNcIiA/IFwieXl5eU1NZGRcIiA6IFwieXl5eS1NTS1kZFwiO1xuXG4gICAgaWYgKHRoaXMueWVhciA+IDk5OTkpIHtcbiAgICAgIGZtdCA9IFwiK1wiICsgZm10O1xuICAgIH1cblxuICAgIHJldHVybiB0b1RlY2hGb3JtYXQodGhpcywgZm10KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUncyB3ZWVrIGRhdGVcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDE5ODIsIDUsIDI1KS50b0lTT1dlZWtEYXRlKCkgLy89PiAnMTk4Mi1XMjEtMidcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b0lTT1dlZWtEYXRlID0gZnVuY3Rpb24gdG9JU09XZWVrRGF0ZSgpIHtcbiAgICByZXR1cm4gdG9UZWNoRm9ybWF0KHRoaXMsIFwia2tray0nVydXVy1jXCIpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxLWNvbXBsaWFudCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSdzIHRpbWUgY29tcG9uZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnN1cHByZXNzTWlsbGlzZWNvbmRzPWZhbHNlXSAtIGV4Y2x1ZGUgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGZvcm1hdCBpZiB0aGV5J3JlIDBcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zdXBwcmVzc1NlY29uZHM9ZmFsc2VdIC0gZXhjbHVkZSBzZWNvbmRzIGZyb20gdGhlIGZvcm1hdCBpZiB0aGV5J3JlIDBcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlT2Zmc2V0PXRydWVdIC0gaW5jbHVkZSB0aGUgb2Zmc2V0LCBzdWNoIGFzICdaJyBvciAnLTA0OjAwJ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuZm9ybWF0PSdleHRlbmRlZCddIC0gY2hvb3NlIGJldHdlZW4gdGhlIGJhc2ljIGFuZCBleHRlbmRlZCBmb3JtYXRcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkuc2V0KHsgaG91cjogNywgbWludXRlOiAzNCB9KS50b0lTT1RpbWUoKSAvLz0+ICcwNzozNDoxOS4zNjFaJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoKS5zZXQoeyBob3VyOiA3LCBtaW51dGU6IDM0LCBzZWNvbmRzOiAwLCBtaWxsaXNlY29uZHM6IDAgfSkudG9JU09UaW1lKHsgc3VwcHJlc3NTZWNvbmRzOiB0cnVlIH0pIC8vPT4gJzA3OjM0WidcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkuc2V0KHsgaG91cjogNywgbWludXRlOiAzNCB9KS50b0lTT1RpbWUoeyBmb3JtYXQ6ICdiYXNpYycgfSkgLy89PiAnMDczNDE5LjM2MVonXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9JU09UaW1lID0gZnVuY3Rpb24gdG9JU09UaW1lKF90ZW1wNCkge1xuICAgIHZhciBfcmVmNiA9IF90ZW1wNCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDQsXG4gICAgICAgIF9yZWY2JHN1cHByZXNzTWlsbGlzZSA9IF9yZWY2LnN1cHByZXNzTWlsbGlzZWNvbmRzLFxuICAgICAgICBzdXBwcmVzc01pbGxpc2Vjb25kcyA9IF9yZWY2JHN1cHByZXNzTWlsbGlzZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmNiRzdXBwcmVzc01pbGxpc2UsXG4gICAgICAgIF9yZWY2JHN1cHByZXNzU2Vjb25kcyA9IF9yZWY2LnN1cHByZXNzU2Vjb25kcyxcbiAgICAgICAgc3VwcHJlc3NTZWNvbmRzID0gX3JlZjYkc3VwcHJlc3NTZWNvbmRzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY2JHN1cHByZXNzU2Vjb25kcyxcbiAgICAgICAgX3JlZjYkaW5jbHVkZU9mZnNldCA9IF9yZWY2LmluY2x1ZGVPZmZzZXQsXG4gICAgICAgIGluY2x1ZGVPZmZzZXQgPSBfcmVmNiRpbmNsdWRlT2Zmc2V0ID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjYkaW5jbHVkZU9mZnNldCxcbiAgICAgICAgX3JlZjYkZm9ybWF0ID0gX3JlZjYuZm9ybWF0LFxuICAgICAgICBmb3JtYXQgPSBfcmVmNiRmb3JtYXQgPT09IHZvaWQgMCA/IFwiZXh0ZW5kZWRcIiA6IF9yZWY2JGZvcm1hdDtcblxuICAgIHJldHVybiB0b1RlY2hUaW1lRm9ybWF0KHRoaXMsIHtcbiAgICAgIHN1cHByZXNzU2Vjb25kczogc3VwcHJlc3NTZWNvbmRzLFxuICAgICAgc3VwcHJlc3NNaWxsaXNlY29uZHM6IHN1cHByZXNzTWlsbGlzZWNvbmRzLFxuICAgICAgaW5jbHVkZU9mZnNldDogaW5jbHVkZU9mZnNldCxcbiAgICAgIGZvcm1hdDogZm9ybWF0XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gUkZDIDI4MjItY29tcGF0aWJsZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSwgYWx3YXlzIGluIFVUQ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNCwgNywgMTMpLnRvUkZDMjgyMigpIC8vPT4gJ1N1biwgMTMgSnVsIDIwMTQgMDA6MDA6MDAgKzAwMDAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDcsIDEzKS50b1JGQzI4MjIoKSAvLz0+ICdTdW4sIDEzIEp1bCAyMDE0IDAwOjAwOjAwIC0wNDAwJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvUkZDMjgyMiA9IGZ1bmN0aW9uIHRvUkZDMjgyMigpIHtcbiAgICByZXR1cm4gdG9UZWNoRm9ybWF0KHRoaXMsIFwiRUVFLCBkZCBMTEwgeXl5eSBISDptbTpzcyBaWlpcIiwgZmFsc2UpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUgYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBIVFRQIGhlYWRlcnMuXG4gICAqIFNwZWNpZmljYWxseSwgdGhlIHN0cmluZyBjb25mb3JtcyB0byBSRkMgMTEyMy5cbiAgICogQHNlZSBodHRwczovL3d3dy53My5vcmcvUHJvdG9jb2xzL3JmYzI2MTYvcmZjMjYxNi1zZWMzLmh0bWwjc2VjMy4zLjFcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTQsIDcsIDEzKS50b0hUVFAoKSAvLz0+ICdTdW4sIDEzIEp1bCAyMDE0IDAwOjAwOjAwIEdNVCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTQsIDcsIDEzLCAxOSkudG9IVFRQKCkgLy89PiAnU3VuLCAxMyBKdWwgMjAxNCAxOTowMDowMCBHTVQnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9IVFRQID0gZnVuY3Rpb24gdG9IVFRQKCkge1xuICAgIHJldHVybiB0b1RlY2hGb3JtYXQodGhpcy50b1VUQygpLCBcIkVFRSwgZGQgTExMIHl5eXkgSEg6bW06c3MgJ0dNVCdcIik7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSBhcHByb3ByaWF0ZSBmb3IgdXNlIGluIFNRTCBEYXRlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE0LCA3LCAxMykudG9TUUxEYXRlKCkgLy89PiAnMjAxNC0wNy0xMydcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1NRTERhdGUgPSBmdW5jdGlvbiB0b1NRTERhdGUoKSB7XG4gICAgcmV0dXJuIHRvVGVjaEZvcm1hdCh0aGlzLCBcInl5eXktTU0tZGRcIik7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSBhcHByb3ByaWF0ZSBmb3IgdXNlIGluIFNRTCBUaW1lXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVab25lPWZhbHNlXSAtIGluY2x1ZGUgdGhlIHpvbmUsIHN1Y2ggYXMgJ0FtZXJpY2EvTmV3X1lvcmsnLiBPdmVycmlkZXMgaW5jbHVkZU9mZnNldC5cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlT2Zmc2V0PXRydWVdIC0gaW5jbHVkZSB0aGUgb2Zmc2V0LCBzdWNoIGFzICdaJyBvciAnLTA0OjAwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoKS50b1NRTCgpIC8vPT4gJzA1OjE1OjE2LjM0NSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoKS50b1NRTCgpIC8vPT4gJzA1OjE1OjE2LjM0NSAtMDQ6MDAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKCkudG9TUUwoeyBpbmNsdWRlT2Zmc2V0OiBmYWxzZSB9KSAvLz0+ICcwNToxNToxNi4zNDUnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKCkudG9TUUwoeyBpbmNsdWRlWm9uZTogZmFsc2UgfSkgLy89PiAnMDU6MTU6MTYuMzQ1IEFtZXJpY2EvTmV3X1lvcmsnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TUUxUaW1lID0gZnVuY3Rpb24gdG9TUUxUaW1lKF90ZW1wNSkge1xuICAgIHZhciBfcmVmNyA9IF90ZW1wNSA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDUsXG4gICAgICAgIF9yZWY3JGluY2x1ZGVPZmZzZXQgPSBfcmVmNy5pbmNsdWRlT2Zmc2V0LFxuICAgICAgICBpbmNsdWRlT2Zmc2V0ID0gX3JlZjckaW5jbHVkZU9mZnNldCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWY3JGluY2x1ZGVPZmZzZXQsXG4gICAgICAgIF9yZWY3JGluY2x1ZGVab25lID0gX3JlZjcuaW5jbHVkZVpvbmUsXG4gICAgICAgIGluY2x1ZGVab25lID0gX3JlZjckaW5jbHVkZVpvbmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjckaW5jbHVkZVpvbmU7XG5cbiAgICByZXR1cm4gdG9UZWNoVGltZUZvcm1hdCh0aGlzLCB7XG4gICAgICBpbmNsdWRlT2Zmc2V0OiBpbmNsdWRlT2Zmc2V0LFxuICAgICAgaW5jbHVkZVpvbmU6IGluY2x1ZGVab25lLFxuICAgICAgc3BhY2Vab25lOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSBhcHByb3ByaWF0ZSBmb3IgdXNlIGluIFNRTCBEYXRlVGltZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlWm9uZT1mYWxzZV0gLSBpbmNsdWRlIHRoZSB6b25lLCBzdWNoIGFzICdBbWVyaWNhL05ld19Zb3JrJy4gT3ZlcnJpZGVzIGluY2x1ZGVPZmZzZXQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaW5jbHVkZU9mZnNldD10cnVlXSAtIGluY2x1ZGUgdGhlIG9mZnNldCwgc3VjaCBhcyAnWicgb3IgJy0wNDowMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTQsIDcsIDEzKS50b1NRTCgpIC8vPT4gJzIwMTQtMDctMTMgMDA6MDA6MDAuMDAwIFonXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDcsIDEzKS50b1NRTCgpIC8vPT4gJzIwMTQtMDctMTMgMDA6MDA6MDAuMDAwIC0wNDowMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgNywgMTMpLnRvU1FMKHsgaW5jbHVkZU9mZnNldDogZmFsc2UgfSkgLy89PiAnMjAxNC0wNy0xMyAwMDowMDowMC4wMDAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDcsIDEzKS50b1NRTCh7IGluY2x1ZGVab25lOiB0cnVlIH0pIC8vPT4gJzIwMTQtMDctMTMgMDA6MDA6MDAuMDAwIEFtZXJpY2EvTmV3X1lvcmsnXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TUUwgPSBmdW5jdGlvbiB0b1NRTChvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50b1NRTERhdGUoKSArIFwiIFwiICsgdGhpcy50b1NRTFRpbWUob3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSBhcHByb3ByaWF0ZSBmb3IgZGVidWdnaW5nXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy50b0lTTygpIDogSU5WQUxJRCQyO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBlcG9jaCBtaWxsaXNlY29uZHMgb2YgdGhpcyBEYXRlVGltZS4gQWxpYXMgb2Yge0BsaW5rIHRvTWlsbGlzfVxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnZhbHVlT2YgPSBmdW5jdGlvbiB2YWx1ZU9mKCkge1xuICAgIHJldHVybiB0aGlzLnRvTWlsbGlzKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGVwb2NoIG1pbGxpc2Vjb25kcyBvZiB0aGlzIERhdGVUaW1lLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvTWlsbGlzID0gZnVuY3Rpb24gdG9NaWxsaXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudHMgOiBOYU47XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGVwb2NoIHNlY29uZHMgb2YgdGhpcyBEYXRlVGltZS5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1NlY29uZHMgPSBmdW5jdGlvbiB0b1NlY29uZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudHMgLyAxMDAwIDogTmFOO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUgYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBKU09OLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy50b0lTTygpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgQlNPTiBzZXJpYWxpemFibGUgZXF1aXZhbGVudCB0byB0aGlzIERhdGVUaW1lLlxuICAgKiBAcmV0dXJuIHtEYXRlfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b0JTT04gPSBmdW5jdGlvbiB0b0JTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9KU0RhdGUoKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIEphdmFzY3JpcHQgb2JqZWN0IHdpdGggdGhpcyBEYXRlVGltZSdzIHllYXIsIG1vbnRoLCBkYXksIGFuZCBzbyBvbi5cbiAgICogQHBhcmFtIG9wdHMgLSBvcHRpb25zIGZvciBnZW5lcmF0aW5nIHRoZSBvYmplY3RcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlQ29uZmlnPWZhbHNlXSAtIGluY2x1ZGUgY29uZmlndXJhdGlvbiBhdHRyaWJ1dGVzIGluIHRoZSBvdXRwdXRcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoKS50b09iamVjdCgpIC8vPT4geyB5ZWFyOiAyMDE3LCBtb250aDogNCwgZGF5OiAyMiwgaG91cjogMjAsIG1pbnV0ZTogNDksIHNlY29uZDogNDIsIG1pbGxpc2Vjb25kOiAyNjggfVxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3Qob3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHt9O1xuICAgIHZhciBiYXNlID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jKTtcblxuICAgIGlmIChvcHRzLmluY2x1ZGVDb25maWcpIHtcbiAgICAgIGJhc2Uub3V0cHV0Q2FsZW5kYXIgPSB0aGlzLm91dHB1dENhbGVuZGFyO1xuICAgICAgYmFzZS5udW1iZXJpbmdTeXN0ZW0gPSB0aGlzLmxvYy5udW1iZXJpbmdTeXN0ZW07XG4gICAgICBiYXNlLmxvY2FsZSA9IHRoaXMubG9jLmxvY2FsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmFzZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIEphdmFzY3JpcHQgRGF0ZSBlcXVpdmFsZW50IHRvIHRoaXMgRGF0ZVRpbWUuXG4gICAqIEByZXR1cm4ge0RhdGV9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvSlNEYXRlID0gZnVuY3Rpb24gdG9KU0RhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMuaXNWYWxpZCA/IHRoaXMudHMgOiBOYU4pO1xuICB9IC8vIENPTVBBUkVcblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdHdvIERhdGVUaW1lcyBhcyBhIER1cmF0aW9uLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBvdGhlckRhdGVUaW1lIC0gdGhlIERhdGVUaW1lIHRvIGNvbXBhcmUgdGhpcyBvbmUgdG9cbiAgICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IFt1bml0PVsnbWlsbGlzZWNvbmRzJ11dIC0gdGhlIHVuaXQgb3IgYXJyYXkgb2YgdW5pdHMgKHN1Y2ggYXMgJ2hvdXJzJyBvciAnZGF5cycpIHRvIGluY2x1ZGUgaW4gdGhlIGR1cmF0aW9uLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgdGhhdCBhZmZlY3QgdGhlIGNyZWF0aW9uIG9mIHRoZSBEdXJhdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2VcbiAgICogQGV4YW1wbGVcbiAgICogdmFyIGkxID0gRGF0ZVRpbWUuZnJvbUlTTygnMTk4Mi0wNS0yNVQwOTo0NScpLFxuICAgKiAgICAgaTIgPSBEYXRlVGltZS5mcm9tSVNPKCcxOTgzLTEwLTE0VDEwOjMwJyk7XG4gICAqIGkyLmRpZmYoaTEpLnRvT2JqZWN0KCkgLy89PiB7IG1pbGxpc2Vjb25kczogNDM4MDc1MDAwMDAgfVxuICAgKiBpMi5kaWZmKGkxLCAnaG91cnMnKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMTIxNjguNzUgfVxuICAgKiBpMi5kaWZmKGkxLCBbJ21vbnRocycsICdkYXlzJ10pLnRvT2JqZWN0KCkgLy89PiB7IG1vbnRoczogMTYsIGRheXM6IDE5LjAzMTI1IH1cbiAgICogaTIuZGlmZihpMSwgWydtb250aHMnLCAnZGF5cycsICdob3VycyddKS50b09iamVjdCgpIC8vPT4geyBtb250aHM6IDE2LCBkYXlzOiAxOSwgaG91cnM6IDAuNzUgfVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGlmZiA9IGZ1bmN0aW9uIGRpZmYob3RoZXJEYXRlVGltZSwgdW5pdCwgb3B0cykge1xuICAgIGlmICh1bml0ID09PSB2b2lkIDApIHtcbiAgICAgIHVuaXQgPSBcIm1pbGxpc2Vjb25kc1wiO1xuICAgIH1cblxuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNWYWxpZCB8fCAhb3RoZXJEYXRlVGltZS5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gRHVyYXRpb24uaW52YWxpZCh0aGlzLmludmFsaWQgfHwgb3RoZXJEYXRlVGltZS5pbnZhbGlkLCBcImNyZWF0ZWQgYnkgZGlmZmluZyBhbiBpbnZhbGlkIERhdGVUaW1lXCIpO1xuICAgIH1cblxuICAgIHZhciBkdXJPcHRzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICBsb2NhbGU6IHRoaXMubG9jYWxlLFxuICAgICAgbnVtYmVyaW5nU3lzdGVtOiB0aGlzLm51bWJlcmluZ1N5c3RlbVxuICAgIH0sIG9wdHMpO1xuXG4gICAgdmFyIHVuaXRzID0gbWF5YmVBcnJheSh1bml0KS5tYXAoRHVyYXRpb24ubm9ybWFsaXplVW5pdCksXG4gICAgICAgIG90aGVySXNMYXRlciA9IG90aGVyRGF0ZVRpbWUudmFsdWVPZigpID4gdGhpcy52YWx1ZU9mKCksXG4gICAgICAgIGVhcmxpZXIgPSBvdGhlcklzTGF0ZXIgPyB0aGlzIDogb3RoZXJEYXRlVGltZSxcbiAgICAgICAgbGF0ZXIgPSBvdGhlcklzTGF0ZXIgPyBvdGhlckRhdGVUaW1lIDogdGhpcyxcbiAgICAgICAgZGlmZmVkID0gX2RpZmYoZWFybGllciwgbGF0ZXIsIHVuaXRzLCBkdXJPcHRzKTtcblxuICAgIHJldHVybiBvdGhlcklzTGF0ZXIgPyBkaWZmZWQubmVnYXRlKCkgOiBkaWZmZWQ7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoaXMgRGF0ZVRpbWUgYW5kIHJpZ2h0IG5vdy5cbiAgICogU2VlIHtAbGluayBkaWZmfVxuICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gW3VuaXQ9WydtaWxsaXNlY29uZHMnXV0gLSB0aGUgdW5pdCBvciB1bml0cyB1bml0cyAoc3VjaCBhcyAnaG91cnMnIG9yICdkYXlzJykgdG8gaW5jbHVkZSBpbiB0aGUgZHVyYXRpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRoYXQgYWZmZWN0IHRoZSBjcmVhdGlvbiBvZiB0aGUgRHVyYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmNvbnZlcnNpb25BY2N1cmFjeT0nY2FzdWFsJ10gLSB0aGUgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kaWZmTm93ID0gZnVuY3Rpb24gZGlmZk5vdyh1bml0LCBvcHRzKSB7XG4gICAgaWYgKHVuaXQgPT09IHZvaWQgMCkge1xuICAgICAgdW5pdCA9IFwibWlsbGlzZWNvbmRzXCI7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmRpZmYoRGF0ZVRpbWUubG9jYWwoKSwgdW5pdCwgb3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBhbiBJbnRlcnZhbCBzcGFubmluZyBiZXR3ZWVuIHRoaXMgRGF0ZVRpbWUgYW5kIGFub3RoZXIgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtEYXRlVGltZX0gb3RoZXJEYXRlVGltZSAtIHRoZSBvdGhlciBlbmQgcG9pbnQgb2YgdGhlIEludGVydmFsXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51bnRpbCA9IGZ1bmN0aW9uIHVudGlsKG90aGVyRGF0ZVRpbWUpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyh0aGlzLCBvdGhlckRhdGVUaW1lKSA6IHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgRGF0ZVRpbWUgaXMgaW4gdGhlIHNhbWUgdW5pdCBvZiB0aW1lIGFzIGFub3RoZXIgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtEYXRlVGltZX0gb3RoZXJEYXRlVGltZSAtIHRoZSBvdGhlciBEYXRlVGltZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIHRoZSB1bml0IG9mIHRpbWUgdG8gY2hlY2sgc2FtZW5lc3Mgb25cbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoKS5oYXNTYW1lKG90aGVyRFQsICdkYXknKTsgLy9+PiB0cnVlIGlmIGJvdGggdGhlIHNhbWUgY2FsZW5kYXIgZGF5XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhc1NhbWUgPSBmdW5jdGlvbiBoYXNTYW1lKG90aGVyRGF0ZVRpbWUsIHVuaXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHVuaXQgPT09IFwibWlsbGlzZWNvbmRcIikge1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpID09PSBvdGhlckRhdGVUaW1lLnZhbHVlT2YoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGlucHV0TXMgPSBvdGhlckRhdGVUaW1lLnZhbHVlT2YoKTtcbiAgICAgIHJldHVybiB0aGlzLnN0YXJ0T2YodW5pdCkgPD0gaW5wdXRNcyAmJiBpbnB1dE1zIDw9IHRoaXMuZW5kT2YodW5pdCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBFcXVhbGl0eSBjaGVja1xuICAgKiBUd28gRGF0ZVRpbWVzIGFyZSBlcXVhbCBpZmYgdGhleSByZXByZXNlbnQgdGhlIHNhbWUgbWlsbGlzZWNvbmQsIGhhdmUgdGhlIHNhbWUgem9uZSBhbmQgbG9jYXRpb24sIGFuZCBhcmUgYm90aCB2YWxpZC5cbiAgICogVG8gY29tcGFyZSBqdXN0IHRoZSBtaWxsaXNlY29uZCB2YWx1ZXMsIHVzZSBgK2R0MSA9PT0gK2R0MmAuXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV9IG90aGVyIC0gdGhlIG90aGVyIERhdGVUaW1lXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyhvdGhlcikge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgJiYgb3RoZXIuaXNWYWxpZCAmJiB0aGlzLnZhbHVlT2YoKSA9PT0gb3RoZXIudmFsdWVPZigpICYmIHRoaXMuem9uZS5lcXVhbHMob3RoZXIuem9uZSkgJiYgdGhpcy5sb2MuZXF1YWxzKG90aGVyLmxvYyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSB0aGlzIHRpbWUgcmVsYXRpdmUgdG8gbm93LCBzdWNoIGFzIFwiaW4gdHdvIGRheXNcIi4gQ2FuIG9ubHkgaW50ZXJuYXRpb25hbGl6ZSBpZiB5b3VyXG4gICAqIHBsYXRmb3JtIHN1cHBvcnRzIEludGwuUmVsYXRpdmVUaW1lRm9ybWF0LiBSb3VuZHMgZG93biBieSBkZWZhdWx0LlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbnMgdGhhdCBhZmZlY3QgdGhlIG91dHB1dFxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBbb3B0aW9ucy5iYXNlPURhdGVUaW1lLmxvY2FsKCldIC0gdGhlIERhdGVUaW1lIHRvIHVzZSBhcyB0aGUgYmFzaXMgdG8gd2hpY2ggdGhpcyB0aW1lIGlzIGNvbXBhcmVkLiBEZWZhdWx0cyB0byBub3cuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zdHlsZT1cImxvbmdcIl0gLSB0aGUgc3R5bGUgb2YgdW5pdHMsIG11c3QgYmUgXCJsb25nXCIsIFwic2hvcnRcIiwgb3IgXCJuYXJyb3dcIlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy51bml0IC0gdXNlIGEgc3BlY2lmaWMgdW5pdDsgaWYgb21pdHRlZCwgdGhlIG1ldGhvZCB3aWxsIHBpY2sgdGhlIHVuaXQuIFVzZSBvbmUgb2YgXCJ5ZWFyc1wiLCBcInF1YXJ0ZXJzXCIsIFwibW9udGhzXCIsIFwid2Vla3NcIiwgXCJkYXlzXCIsIFwiaG91cnNcIiwgXCJtaW51dGVzXCIsIG9yIFwic2Vjb25kc1wiXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucm91bmQ9dHJ1ZV0gLSB3aGV0aGVyIHRvIHJvdW5kIHRoZSBudW1iZXJzIGluIHRoZSBvdXRwdXQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucGFkZGluZz0wXSAtIHBhZGRpbmcgaW4gbWlsbGlzZWNvbmRzLiBUaGlzIGFsbG93cyB5b3UgdG8gcm91bmQgdXAgdGhlIHJlc3VsdCBpZiBpdCBmaXRzIGluc2lkZSB0aGUgdGhyZXNob2xkLiBEb24ndCB1c2UgaW4gY29tYmluYXRpb24gd2l0aCB7cm91bmQ6IGZhbHNlfSBiZWNhdXNlIHRoZSBkZWNpbWFsIG91dHB1dCB3aWxsIGluY2x1ZGUgdGhlIHBhZGRpbmcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmxvY2FsZSAtIG92ZXJyaWRlIHRoZSBsb2NhbGUgb2YgdGhpcyBEYXRlVGltZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5udW1iZXJpbmdTeXN0ZW0gLSBvdmVycmlkZSB0aGUgbnVtYmVyaW5nU3lzdGVtIG9mIHRoaXMgRGF0ZVRpbWUuIFRoZSBJbnRsIHN5c3RlbSBtYXkgY2hvb3NlIG5vdCB0byBob25vciB0aGlzXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKCkucGx1cyh7IGRheXM6IDEgfSkudG9SZWxhdGl2ZSgpIC8vPT4gXCJpbiAxIGRheVwiXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKCkuc2V0TG9jYWxlKFwiZXNcIikudG9SZWxhdGl2ZSh7IGRheXM6IDEgfSkgLy89PiBcImRlbnRybyBkZSAxIGTDrWFcIlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpLnBsdXMoeyBkYXlzOiAxIH0pLnRvUmVsYXRpdmUoeyBsb2NhbGU6IFwiZnJcIiB9KSAvLz0+IFwiZGFucyAyMyBoZXVyZXNcIlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpLm1pbnVzKHsgZGF5czogMiB9KS50b1JlbGF0aXZlKCkgLy89PiBcIjIgZGF5cyBhZ29cIlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpLm1pbnVzKHsgZGF5czogMiB9KS50b1JlbGF0aXZlKHsgdW5pdDogXCJob3Vyc1wiIH0pIC8vPT4gXCI0OCBob3VycyBhZ29cIlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpLm1pbnVzKHsgaG91cnM6IDM2IH0pLnRvUmVsYXRpdmUoeyByb3VuZDogZmFsc2UgfSkgLy89PiBcIjEuNSBkYXlzIGFnb1wiXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvUmVsYXRpdmUgPSBmdW5jdGlvbiB0b1JlbGF0aXZlKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBudWxsO1xuICAgIHZhciBiYXNlID0gb3B0aW9ucy5iYXNlIHx8IERhdGVUaW1lLmZyb21PYmplY3Qoe1xuICAgICAgem9uZTogdGhpcy56b25lXG4gICAgfSksXG4gICAgICAgIHBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmcgPyB0aGlzIDwgYmFzZSA/IC1vcHRpb25zLnBhZGRpbmcgOiBvcHRpb25zLnBhZGRpbmcgOiAwO1xuICAgIHJldHVybiBkaWZmUmVsYXRpdmUoYmFzZSwgdGhpcy5wbHVzKHBhZGRpbmcpLCBPYmplY3QuYXNzaWduKG9wdGlvbnMsIHtcbiAgICAgIG51bWVyaWM6IFwiYWx3YXlzXCIsXG4gICAgICB1bml0czogW1wieWVhcnNcIiwgXCJtb250aHNcIiwgXCJkYXlzXCIsIFwiaG91cnNcIiwgXCJtaW51dGVzXCIsIFwic2Vjb25kc1wiXVxuICAgIH0pKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGRhdGUgcmVsYXRpdmUgdG8gdG9kYXksIHN1Y2ggYXMgXCJ5ZXN0ZXJkYXlcIiBvciBcIm5leHQgbW9udGhcIi5cbiAgICogT25seSBpbnRlcm5hdGlvbmFsaXplcyBvbiBwbGF0Zm9ybXMgdGhhdCBzdXBwb3J0cyBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdC5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25zIHRoYXQgYWZmZWN0IHRoZSBvdXRwdXRcbiAgICogQHBhcmFtIHtEYXRlVGltZX0gW29wdGlvbnMuYmFzZT1EYXRlVGltZS5sb2NhbCgpXSAtIHRoZSBEYXRlVGltZSB0byB1c2UgYXMgdGhlIGJhc2lzIHRvIHdoaWNoIHRoaXMgdGltZSBpcyBjb21wYXJlZC4gRGVmYXVsdHMgdG8gbm93LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5sb2NhbGUgLSBvdmVycmlkZSB0aGUgbG9jYWxlIG9mIHRoaXMgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMudW5pdCAtIHVzZSBhIHNwZWNpZmljIHVuaXQ7IGlmIG9taXR0ZWQsIHRoZSBtZXRob2Qgd2lsbCBwaWNrIHRoZSB1bml0LiBVc2Ugb25lIG9mIFwieWVhcnNcIiwgXCJxdWFydGVyc1wiLCBcIm1vbnRoc1wiLCBcIndlZWtzXCIsIG9yIFwiZGF5c1wiXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm51bWJlcmluZ1N5c3RlbSAtIG92ZXJyaWRlIHRoZSBudW1iZXJpbmdTeXN0ZW0gb2YgdGhpcyBEYXRlVGltZS4gVGhlIEludGwgc3lzdGVtIG1heSBjaG9vc2Ugbm90IHRvIGhvbm9yIHRoaXNcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoKS5wbHVzKHsgZGF5czogMSB9KS50b1JlbGF0aXZlQ2FsZW5kYXIoKSAvLz0+IFwidG9tb3Jyb3dcIlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpLnNldExvY2FsZShcImVzXCIpLnBsdXMoeyBkYXlzOiAxIH0pLnRvUmVsYXRpdmUoKSAvLz0+IFwiXCJtYcOxYW5hXCJcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoKS5wbHVzKHsgZGF5czogMSB9KS50b1JlbGF0aXZlQ2FsZW5kYXIoeyBsb2NhbGU6IFwiZnJcIiB9KSAvLz0+IFwiZGVtYWluXCJcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoKS5taW51cyh7IGRheXM6IDIgfSkudG9SZWxhdGl2ZUNhbGVuZGFyKCkgLy89PiBcIjIgZGF5cyBhZ29cIlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1JlbGF0aXZlQ2FsZW5kYXIgPSBmdW5jdGlvbiB0b1JlbGF0aXZlQ2FsZW5kYXIob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIGRpZmZSZWxhdGl2ZShvcHRpb25zLmJhc2UgfHwgRGF0ZVRpbWUuZnJvbU9iamVjdCh7XG4gICAgICB6b25lOiB0aGlzLnpvbmVcbiAgICB9KSwgdGhpcywgT2JqZWN0LmFzc2lnbihvcHRpb25zLCB7XG4gICAgICBudW1lcmljOiBcImF1dG9cIixcbiAgICAgIHVuaXRzOiBbXCJ5ZWFyc1wiLCBcIm1vbnRoc1wiLCBcImRheXNcIl0sXG4gICAgICBjYWxlbmRhcnk6IHRydWVcbiAgICB9KSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbWluIG9mIHNldmVyYWwgZGF0ZSB0aW1lc1xuICAgKiBAcGFyYW0gey4uLkRhdGVUaW1lfSBkYXRlVGltZXMgLSB0aGUgRGF0ZVRpbWVzIGZyb20gd2hpY2ggdG8gY2hvb3NlIHRoZSBtaW5pbXVtXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfSB0aGUgbWluIERhdGVUaW1lLCBvciB1bmRlZmluZWQgaWYgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRcbiAgICovXG4gIDtcblxuICBEYXRlVGltZS5taW4gPSBmdW5jdGlvbiBtaW4oKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGRhdGVUaW1lcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGRhdGVUaW1lc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAoIWRhdGVUaW1lcy5ldmVyeShEYXRlVGltZS5pc0RhdGVUaW1lKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwibWluIHJlcXVpcmVzIGFsbCBhcmd1bWVudHMgYmUgRGF0ZVRpbWVzXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBiZXN0QnkoZGF0ZVRpbWVzLCBmdW5jdGlvbiAoaSkge1xuICAgICAgcmV0dXJuIGkudmFsdWVPZigpO1xuICAgIH0sIE1hdGgubWluKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHRoZSBtYXggb2Ygc2V2ZXJhbCBkYXRlIHRpbWVzXG4gICAqIEBwYXJhbSB7Li4uRGF0ZVRpbWV9IGRhdGVUaW1lcyAtIHRoZSBEYXRlVGltZXMgZnJvbSB3aGljaCB0byBjaG9vc2UgdGhlIG1heGltdW1cbiAgICogQHJldHVybiB7RGF0ZVRpbWV9IHRoZSBtYXggRGF0ZVRpbWUsIG9yIHVuZGVmaW5lZCBpZiBjYWxsZWQgd2l0aCBubyBhcmd1bWVudFxuICAgKi9cbiAgO1xuXG4gIERhdGVUaW1lLm1heCA9IGZ1bmN0aW9uIG1heCgpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGRhdGVUaW1lcyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgZGF0ZVRpbWVzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgaWYgKCFkYXRlVGltZXMuZXZlcnkoRGF0ZVRpbWUuaXNEYXRlVGltZSkpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcIm1heCByZXF1aXJlcyBhbGwgYXJndW1lbnRzIGJlIERhdGVUaW1lc1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmVzdEJ5KGRhdGVUaW1lcywgZnVuY3Rpb24gKGkpIHtcbiAgICAgIHJldHVybiBpLnZhbHVlT2YoKTtcbiAgICB9LCBNYXRoLm1heCk7XG4gIH0gLy8gTUlTQ1xuXG4gIC8qKlxuICAgKiBFeHBsYWluIGhvdyBhIHN0cmluZyB3b3VsZCBiZSBwYXJzZWQgYnkgZnJvbUZvcm1hdCgpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIHN0cmluZyB0byBwYXJzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm10IC0gdGhlIGZvcm1hdCB0aGUgc3RyaW5nIGlzIGV4cGVjdGVkIHRvIGJlIGluIChzZWUgZGVzY3JpcHRpb24pXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9ucyB0YWtlbiBieSBmcm9tRm9ybWF0KClcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgO1xuXG4gIERhdGVUaW1lLmZyb21Gb3JtYXRFeHBsYWluID0gZnVuY3Rpb24gZnJvbUZvcm1hdEV4cGxhaW4odGV4dCwgZm10LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICAgIF9vcHRpb25zJGxvY2FsZSA9IF9vcHRpb25zLmxvY2FsZSxcbiAgICAgICAgbG9jYWxlID0gX29wdGlvbnMkbG9jYWxlID09PSB2b2lkIDAgPyBudWxsIDogX29wdGlvbnMkbG9jYWxlLFxuICAgICAgICBfb3B0aW9ucyRudW1iZXJpbmdTeXMgPSBfb3B0aW9ucy5udW1iZXJpbmdTeXN0ZW0sXG4gICAgICAgIG51bWJlcmluZ1N5c3RlbSA9IF9vcHRpb25zJG51bWJlcmluZ1N5cyA9PT0gdm9pZCAwID8gbnVsbCA6IF9vcHRpb25zJG51bWJlcmluZ1N5cyxcbiAgICAgICAgbG9jYWxlVG9Vc2UgPSBMb2NhbGUuZnJvbU9wdHMoe1xuICAgICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgICBudW1iZXJpbmdTeXN0ZW06IG51bWJlcmluZ1N5c3RlbSxcbiAgICAgIGRlZmF1bHRUb0VOOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGV4cGxhaW5Gcm9tVG9rZW5zKGxvY2FsZVRvVXNlLCB0ZXh0LCBmbXQpO1xuICB9XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCB1c2UgZnJvbUZvcm1hdEV4cGxhaW4gaW5zdGVhZFxuICAgKi9cbiAgO1xuXG4gIERhdGVUaW1lLmZyb21TdHJpbmdFeHBsYWluID0gZnVuY3Rpb24gZnJvbVN0cmluZ0V4cGxhaW4odGV4dCwgZm10LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHJldHVybiBEYXRlVGltZS5mcm9tRm9ybWF0RXhwbGFpbih0ZXh0LCBmbXQsIG9wdGlvbnMpO1xuICB9IC8vIEZPUk1BVCBQUkVTRVRTXG5cbiAgLyoqXG4gICAqIHtAbGluayB0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgMTAvMTQvMTk4M1xuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgO1xuXG4gIF9jcmVhdGVDbGFzcyhEYXRlVGltZSwgW3tcbiAgICBrZXk6IFwiaXNWYWxpZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW52YWxpZCA9PT0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBlcnJvciBjb2RlIGlmIHRoaXMgRGF0ZVRpbWUgaXMgaW52YWxpZCwgb3IgbnVsbCBpZiB0aGUgRGF0ZVRpbWUgaXMgdmFsaWRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaW52YWxpZFJlYXNvblwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW52YWxpZCA/IHRoaXMuaW52YWxpZC5yZWFzb24gOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGV4cGxhbmF0aW9uIG9mIHdoeSB0aGlzIERhdGVUaW1lIGJlY2FtZSBpbnZhbGlkLCBvciBudWxsIGlmIHRoZSBEYXRlVGltZSBpcyB2YWxpZFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJpbnZhbGlkRXhwbGFuYXRpb25cIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmludmFsaWQgPyB0aGlzLmludmFsaWQuZXhwbGFuYXRpb24gOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGxvY2FsZSBvZiBhIERhdGVUaW1lLCBzdWNoICdlbi1HQicuIFRoZSBsb2NhbGUgaXMgdXNlZCB3aGVuIGZvcm1hdHRpbmcgdGhlIERhdGVUaW1lXG4gICAgICpcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibG9jYWxlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5sb2MubG9jYWxlIDogbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBudW1iZXJpbmcgc3lzdGVtIG9mIGEgRGF0ZVRpbWUsIHN1Y2ggJ2JlbmcnLiBUaGUgbnVtYmVyaW5nIHN5c3RlbSBpcyB1c2VkIHdoZW4gZm9ybWF0dGluZyB0aGUgRGF0ZVRpbWVcbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJudW1iZXJpbmdTeXN0ZW1cIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmxvYy5udW1iZXJpbmdTeXN0ZW0gOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIG91dHB1dCBjYWxlbmRhciBvZiBhIERhdGVUaW1lLCBzdWNoICdpc2xhbWljJy4gVGhlIG91dHB1dCBjYWxlbmRhciBpcyB1c2VkIHdoZW4gZm9ybWF0dGluZyB0aGUgRGF0ZVRpbWVcbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJvdXRwdXRDYWxlbmRhclwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMubG9jLm91dHB1dENhbGVuZGFyIDogbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB0aW1lIHpvbmUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgRGF0ZVRpbWUuXG4gICAgICogQHR5cGUge1pvbmV9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ6b25lXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fem9uZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBuYW1lIG9mIHRoZSB0aW1lIHpvbmUuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInpvbmVOYW1lXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy56b25lLm5hbWUgOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHllYXJcbiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkueWVhciAvLz0+IDIwMTdcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwieWVhclwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuYy55ZWFyIDogTmFOO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHF1YXJ0ZXJcbiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkucXVhcnRlciAvLz0+IDJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicXVhcnRlclwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IE1hdGguY2VpbCh0aGlzLmMubW9udGggLyAzKSA6IE5hTjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBtb250aCAoMS0xMikuXG4gICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUpLm1vbnRoIC8vPT4gNVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJtb250aFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuYy5tb250aCA6IE5hTjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkYXkgb2YgdGhlIG1vbnRoICgxLTMwaXNoKS5cbiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkuZGF5IC8vPT4gMjVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZGF5XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLmRheSA6IE5hTjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBob3VyIG9mIHRoZSBkYXkgKDAtMjMpLlxuICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1LCA5KS5ob3VyIC8vPT4gOVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJob3VyXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLmhvdXIgOiBOYU47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbWludXRlIG9mIHRoZSBob3VyICgwLTU5KS5cbiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSwgOSwgMzApLm1pbnV0ZSAvLz0+IDMwXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm1pbnV0ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuYy5taW51dGUgOiBOYU47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgc2Vjb25kIG9mIHRoZSBtaW51dGUgKDAtNTkpLlxuICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1LCA5LCAzMCwgNTIpLnNlY29uZCAvLz0+IDUyXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNlY29uZFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuYy5zZWNvbmQgOiBOYU47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbWlsbGlzZWNvbmQgb2YgdGhlIHNlY29uZCAoMC05OTkpLlxuICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1LCA5LCAzMCwgNTIsIDY1NCkubWlsbGlzZWNvbmQgLy89PiA2NTRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibWlsbGlzZWNvbmRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmMubWlsbGlzZWNvbmQgOiBOYU47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgd2VlayB5ZWFyXG4gICAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMTEsIDMxKS53ZWVrWWVhciAvLz0+IDIwMTVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwid2Vla1llYXJcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBwb3NzaWJseUNhY2hlZFdlZWtEYXRhKHRoaXMpLndlZWtZZWFyIDogTmFOO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHdlZWsgbnVtYmVyIG9mIHRoZSB3ZWVrIHllYXIgKDEtNTJpc2gpLlxuICAgICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZVxuICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS53ZWVrTnVtYmVyIC8vPT4gMjFcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwid2Vla051bWJlclwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHBvc3NpYmx5Q2FjaGVkV2Vla0RhdGEodGhpcykud2Vla051bWJlciA6IE5hTjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICogMSBpcyBNb25kYXkgYW5kIDcgaXMgU3VuZGF5XG4gICAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMTEsIDMxKS53ZWVrZGF5IC8vPT4gNFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ3ZWVrZGF5XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gcG9zc2libHlDYWNoZWRXZWVrRGF0YSh0aGlzKS53ZWVrZGF5IDogTmFOO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIG9yZGluYWwgKG1lYW5pbmcgdGhlIGRheSBvZiB0aGUgeWVhcilcbiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSkub3JkaW5hbCAvLz0+IDE0NVxuICAgICAqIEB0eXBlIHtudW1iZXJ8RGF0ZVRpbWV9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJvcmRpbmFsXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gZ3JlZ29yaWFuVG9PcmRpbmFsKHRoaXMuYykub3JkaW5hbCA6IE5hTjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBodW1hbiByZWFkYWJsZSBzaG9ydCBtb250aCBuYW1lLCBzdWNoIGFzICdPY3QnLlxuICAgICAqIERlZmF1bHRzIHRvIHRoZSBzeXN0ZW0ncyBsb2NhbGUgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZFxuICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDEwLCAzMCkubW9udGhTaG9ydCAvLz0+IE9jdFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJtb250aFNob3J0XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gSW5mby5tb250aHMoXCJzaG9ydFwiLCB7XG4gICAgICAgIGxvY2FsZTogdGhpcy5sb2NhbGVcbiAgICAgIH0pW3RoaXMubW9udGggLSAxXSA6IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgaHVtYW4gcmVhZGFibGUgbG9uZyBtb250aCBuYW1lLCBzdWNoIGFzICdPY3RvYmVyJy5cbiAgICAgKiBEZWZhdWx0cyB0byB0aGUgc3lzdGVtJ3MgbG9jYWxlIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWRcbiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCAxMCwgMzApLm1vbnRoTG9uZyAvLz0+IE9jdG9iZXJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibW9udGhMb25nXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gSW5mby5tb250aHMoXCJsb25nXCIsIHtcbiAgICAgICAgbG9jYWxlOiB0aGlzLmxvY2FsZVxuICAgICAgfSlbdGhpcy5tb250aCAtIDFdIDogbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBodW1hbiByZWFkYWJsZSBzaG9ydCB3ZWVrZGF5LCBzdWNoIGFzICdNb24nLlxuICAgICAqIERlZmF1bHRzIHRvIHRoZSBzeXN0ZW0ncyBsb2NhbGUgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZFxuICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDEwLCAzMCkud2Vla2RheVNob3J0IC8vPT4gTW9uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIndlZWtkYXlTaG9ydFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IEluZm8ud2Vla2RheXMoXCJzaG9ydFwiLCB7XG4gICAgICAgIGxvY2FsZTogdGhpcy5sb2NhbGVcbiAgICAgIH0pW3RoaXMud2Vla2RheSAtIDFdIDogbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBodW1hbiByZWFkYWJsZSBsb25nIHdlZWtkYXksIHN1Y2ggYXMgJ01vbmRheScuXG4gICAgICogRGVmYXVsdHMgdG8gdGhlIHN5c3RlbSdzIGxvY2FsZSBpZiBubyBsb2NhbGUgaGFzIGJlZW4gc3BlY2lmaWVkXG4gICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgMTAsIDMwKS53ZWVrZGF5TG9uZyAvLz0+IE1vbmRheVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ3ZWVrZGF5TG9uZ1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IEluZm8ud2Vla2RheXMoXCJsb25nXCIsIHtcbiAgICAgICAgbG9jYWxlOiB0aGlzLmxvY2FsZVxuICAgICAgfSlbdGhpcy53ZWVrZGF5IC0gMV0gOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIFVUQyBvZmZzZXQgb2YgdGhpcyBEYXRlVGltZSBpbiBtaW51dGVzXG4gICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoKS5vZmZzZXQgLy89PiAtMjQwXG4gICAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkub2Zmc2V0IC8vPT4gMFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJvZmZzZXRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyArdGhpcy5vIDogTmFOO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHNob3J0IGh1bWFuIG5hbWUgZm9yIHRoZSB6b25lJ3MgY3VycmVudCBvZmZzZXQsIGZvciBleGFtcGxlIFwiRVNUXCIgb3IgXCJFRFRcIi5cbiAgICAgKiBEZWZhdWx0cyB0byB0aGUgc3lzdGVtJ3MgbG9jYWxlIGlmIG5vIGxvY2FsZSBoYXMgYmVlbiBzcGVjaWZpZWRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwib2Zmc2V0TmFtZVNob3J0XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAodGhpcy5pc1ZhbGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnpvbmUub2Zmc2V0TmFtZSh0aGlzLnRzLCB7XG4gICAgICAgICAgZm9ybWF0OiBcInNob3J0XCIsXG4gICAgICAgICAgbG9jYWxlOiB0aGlzLmxvY2FsZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGxvbmcgaHVtYW4gbmFtZSBmb3IgdGhlIHpvbmUncyBjdXJyZW50IG9mZnNldCwgZm9yIGV4YW1wbGUgXCJFYXN0ZXJuIFN0YW5kYXJkIFRpbWVcIiBvciBcIkVhc3Rlcm4gRGF5bGlnaHQgVGltZVwiLlxuICAgICAqIERlZmF1bHRzIHRvIHRoZSBzeXN0ZW0ncyBsb2NhbGUgaWYgbm8gbG9jYWxlIGhhcyBiZWVuIHNwZWNpZmllZFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJvZmZzZXROYW1lTG9uZ1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKHRoaXMuaXNWYWxpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy56b25lLm9mZnNldE5hbWUodGhpcy50cywge1xuICAgICAgICAgIGZvcm1hdDogXCJsb25nXCIsXG4gICAgICAgICAgbG9jYWxlOiB0aGlzLmxvY2FsZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgd2hldGhlciB0aGlzIHpvbmUncyBvZmZzZXQgZXZlciBjaGFuZ2VzLCBhcyBpbiBhIERTVC5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImlzT2Zmc2V0Rml4ZWRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnpvbmUudW5pdmVyc2FsIDogbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHdoZXRoZXIgdGhlIERhdGVUaW1lIGlzIGluIGEgRFNULlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaXNJbkRTVFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKHRoaXMuaXNPZmZzZXRGaXhlZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5vZmZzZXQgPiB0aGlzLnNldCh7XG4gICAgICAgICAgbW9udGg6IDFcbiAgICAgICAgfSkub2Zmc2V0IHx8IHRoaXMub2Zmc2V0ID4gdGhpcy5zZXQoe1xuICAgICAgICAgIG1vbnRoOiA1XG4gICAgICAgIH0pLm9mZnNldDtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgRGF0ZVRpbWUgaXMgaW4gYSBsZWFwIHllYXIsIGZhbHNlIG90aGVyd2lzZVxuICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTYpLmlzSW5MZWFwWWVhciAvLz0+IHRydWVcbiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDEzKS5pc0luTGVhcFllYXIgLy89PiBmYWxzZVxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaXNJbkxlYXBZZWFyXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gaXNMZWFwWWVhcih0aGlzLnllYXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZGF5cyBpbiB0aGlzIERhdGVUaW1lJ3MgbW9udGhcbiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE2LCAyKS5kYXlzSW5Nb250aCAvLz0+IDI5XG4gICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNiwgMykuZGF5c0luTW9udGggLy89PiAzMVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJkYXlzSW5Nb250aFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIGRheXNJbk1vbnRoKHRoaXMueWVhciwgdGhpcy5tb250aCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG51bWJlciBvZiBkYXlzIGluIHRoaXMgRGF0ZVRpbWUncyB5ZWFyXG4gICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNikuZGF5c0luWWVhciAvLz0+IDM2NlxuICAgICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTMpLmRheXNJblllYXIgLy89PiAzNjVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZGF5c0luWWVhclwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IGRheXNJblllYXIodGhpcy55ZWFyKSA6IE5hTjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHdlZWtzIGluIHRoaXMgRGF0ZVRpbWUncyB5ZWFyXG4gICAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gICAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAwNCkud2Vla3NJbldlZWtZZWFyIC8vPT4gNTNcbiAgICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDEzKS53ZWVrc0luV2Vla1llYXIgLy89PiA1MlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ3ZWVrc0luV2Vla1llYXJcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB3ZWVrc0luV2Vla1llYXIodGhpcy53ZWVrWWVhcikgOiBOYU47XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiREFURV9TSE9SVFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIERBVEVfU0hPUlQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHtAbGluayB0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ09jdCAxNCwgMTk4MydcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiREFURV9NRURcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBEQVRFX01FRDtcbiAgICB9XG4gICAgLyoqXG4gICAgICoge0BsaW5rIHRvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnRnJpLCBPY3QgMTQsIDE5ODMnXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIkRBVEVfTUVEX1dJVEhfV0VFS0RBWVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIERBVEVfTUVEX1dJVEhfV0VFS0RBWTtcbiAgICB9XG4gICAgLyoqXG4gICAgICoge0BsaW5rIHRvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnT2N0b2JlciAxNCwgMTk4MydcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiREFURV9GVUxMXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gREFURV9GVUxMO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiB7QGxpbmsgdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdUdWVzZGF5LCBPY3RvYmVyIDE0LCAxOTgzJ1xuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJEQVRFX0hVR0VcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBEQVRFX0hVR0U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHtAbGluayB0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIlRJTUVfU0lNUExFXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gVElNRV9TSU1QTEU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHtAbGluayB0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwOjIzIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIlRJTUVfV0lUSF9TRUNPTkRTXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gVElNRV9XSVRIX1NFQ09ORFM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHtAbGluayB0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwOjIzIEFNIEVEVCcuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJUSU1FX1dJVEhfU0hPUlRfT0ZGU0VUXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gVElNRV9XSVRIX1NIT1JUX09GRlNFVDtcbiAgICB9XG4gICAgLyoqXG4gICAgICoge0BsaW5rIHRvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMDk6MzA6MjMgQU0gRWFzdGVybiBEYXlsaWdodCBUaW1lJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIlRJTUVfV0lUSF9MT05HX09GRlNFVFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIFRJTUVfV0lUSF9MT05HX09GRlNFVDtcbiAgICB9XG4gICAgLyoqXG4gICAgICoge0BsaW5rIHRvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMDk6MzAnLCBhbHdheXMgMjQtaG91ci5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiVElNRV8yNF9TSU1QTEVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBUSU1FXzI0X1NJTVBMRTtcbiAgICB9XG4gICAgLyoqXG4gICAgICoge0BsaW5rIHRvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMDk6MzA6MjMnLCBhbHdheXMgMjQtaG91ci5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiVElNRV8yNF9XSVRIX1NFQ09ORFNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBUSU1FXzI0X1dJVEhfU0VDT05EUztcbiAgICB9XG4gICAgLyoqXG4gICAgICoge0BsaW5rIHRvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMDk6MzA6MjMgRURUJywgYWx3YXlzIDI0LWhvdXIuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIlRJTUVfMjRfV0lUSF9TSE9SVF9PRkZTRVRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBUSU1FXzI0X1dJVEhfU0hPUlRfT0ZGU0VUO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiB7QGxpbmsgdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMDoyMyBFYXN0ZXJuIERheWxpZ2h0IFRpbWUnLCBhbHdheXMgMjQtaG91ci5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiVElNRV8yNF9XSVRIX0xPTkdfT0ZGU0VUXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gVElNRV8yNF9XSVRIX0xPTkdfT0ZGU0VUO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiB7QGxpbmsgdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcxMC8xNC8xOTgzLCA5OjMwIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIkRBVEVUSU1FX1NIT1JUXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gREFURVRJTUVfU0hPUlQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHtAbGluayB0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzEwLzE0LzE5ODMsIDk6MzA6MzMgQU0nLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiREFURVRJTUVfU0hPUlRfV0lUSF9TRUNPTkRTXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gREFURVRJTUVfU0hPUlRfV0lUSF9TRUNPTkRTO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiB7QGxpbmsgdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdPY3QgMTQsIDE5ODMsIDk6MzAgQU0nLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiREFURVRJTUVfTUVEXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gREFURVRJTUVfTUVEO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiB7QGxpbmsgdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdPY3QgMTQsIDE5ODMsIDk6MzA6MzMgQU0nLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiREFURVRJTUVfTUVEX1dJVEhfU0VDT05EU1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIERBVEVUSU1FX01FRF9XSVRIX1NFQ09ORFM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHtAbGluayB0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ0ZyaSwgMTQgT2N0IDE5ODMsIDk6MzAgQU0nLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiREFURVRJTUVfTUVEX1dJVEhfV0VFS0RBWVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIERBVEVUSU1FX01FRF9XSVRIX1dFRUtEQVk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHtAbGluayB0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ09jdG9iZXIgMTQsIDE5ODMsIDk6MzAgQU0gRURUJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIkRBVEVUSU1FX0ZVTExcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBEQVRFVElNRV9GVUxMO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiB7QGxpbmsgdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdPY3RvYmVyIDE0LCAxOTgzLCA5OjMwOjMzIEFNIEVEVCcuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJEQVRFVElNRV9GVUxMX1dJVEhfU0VDT05EU1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIERBVEVUSU1FX0ZVTExfV0lUSF9TRUNPTkRTO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiB7QGxpbmsgdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdGcmlkYXksIE9jdG9iZXIgMTQsIDE5ODMsIDk6MzAgQU0gRWFzdGVybiBEYXlsaWdodCBUaW1lJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIkRBVEVUSU1FX0hVR0VcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBEQVRFVElNRV9IVUdFO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiB7QGxpbmsgdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdGcmlkYXksIE9jdG9iZXIgMTQsIDE5ODMsIDk6MzA6MzMgQU0gRWFzdGVybiBEYXlsaWdodCBUaW1lJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIkRBVEVUSU1FX0hVR0VfV0lUSF9TRUNPTkRTXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gREFURVRJTUVfSFVHRV9XSVRIX1NFQ09ORFM7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERhdGVUaW1lO1xufSgpO1xuZnVuY3Rpb24gZnJpZW5kbHlEYXRlVGltZShkYXRlVGltZWlzaCkge1xuICBpZiAoRGF0ZVRpbWUuaXNEYXRlVGltZShkYXRlVGltZWlzaCkpIHtcbiAgICByZXR1cm4gZGF0ZVRpbWVpc2g7XG4gIH0gZWxzZSBpZiAoZGF0ZVRpbWVpc2ggJiYgZGF0ZVRpbWVpc2gudmFsdWVPZiAmJiBpc051bWJlcihkYXRlVGltZWlzaC52YWx1ZU9mKCkpKSB7XG4gICAgcmV0dXJuIERhdGVUaW1lLmZyb21KU0RhdGUoZGF0ZVRpbWVpc2gpO1xuICB9IGVsc2UgaWYgKGRhdGVUaW1laXNoICYmIHR5cGVvZiBkYXRlVGltZWlzaCA9PT0gXCJvYmplY3RcIikge1xuICAgIHJldHVybiBEYXRlVGltZS5mcm9tT2JqZWN0KGRhdGVUaW1laXNoKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXCJVbmtub3duIGRhdGV0aW1lIGFyZ3VtZW50OiBcIiArIGRhdGVUaW1laXNoICsgXCIsIG9mIHR5cGUgXCIgKyB0eXBlb2YgZGF0ZVRpbWVpc2gpO1xuICB9XG59XG5cbmV4cG9ydHMuRGF0ZVRpbWUgPSBEYXRlVGltZTtcbmV4cG9ydHMuRHVyYXRpb24gPSBEdXJhdGlvbjtcbmV4cG9ydHMuRml4ZWRPZmZzZXRab25lID0gRml4ZWRPZmZzZXRab25lO1xuZXhwb3J0cy5JQU5BWm9uZSA9IElBTkFab25lO1xuZXhwb3J0cy5JbmZvID0gSW5mbztcbmV4cG9ydHMuSW50ZXJ2YWwgPSBJbnRlcnZhbDtcbmV4cG9ydHMuSW52YWxpZFpvbmUgPSBJbnZhbGlkWm9uZTtcbmV4cG9ydHMuTG9jYWxab25lID0gTG9jYWxab25lO1xuZXhwb3J0cy5TZXR0aW5ncyA9IFNldHRpbmdzO1xuZXhwb3J0cy5ab25lID0gWm9uZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWx1eG9uLmpzLm1hcFxuIiwiaW1wb3J0IHsgVGVtcGxlU2V0dGluZ3MgfSBmcm9tICcuLi9zZXR0aW5ncy9UZW1wbGVTZXR0aW5ncyc7XHJcbmltcG9ydCB7IGluamVjdCwgaW5qZWN0YWJsZSB9IGZyb20gJ3RzeXJpbmdlJztcclxuaW1wb3J0IHsgU3ltYm9scyB9IGZyb20gJy4uL1N5bWJvbHMnO1xyXG5pbXBvcnQgeyBEYXRlVGltZSB9IGZyb20gJ2x1eG9uJztcclxuXHJcblxyXG5AaW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBEYXRlVGltZVByb3ZpZGVyIHtcclxuXHRjb25zdHJ1Y3RvcihAaW5qZWN0KFN5bWJvbHMuVGVtcGxlU2V0dGluZ3MpIHByaXZhdGUgX3NldHRpbmdzOiBUZW1wbGVTZXR0aW5ncykgeyB9XHJcblxyXG5cdHB1YmxpYyBub3coKTogRGF0ZVRpbWUge1xyXG5cdFx0cmV0dXJuIHRoaXMuYXBwbHkoRGF0ZVRpbWUubG9jYWwoKSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBBcHBseSBsb2NhbGUgYW5kIHRpbWV6b25lIHNldHRpbmdzXHJcblx0ICovXHJcblx0cHVibGljIGFwcGx5KGR0OiBEYXRlVGltZSk6IERhdGVUaW1lIHtcclxuXHRcdGlmICh0aGlzLl9zZXR0aW5ncy5kYXRldGltZS5sb2NhbGUpIHtcclxuXHRcdFx0ZHQgPSBkdC5zZXRMb2NhbGUodGhpcy5fc2V0dGluZ3MuZGF0ZXRpbWUubG9jYWxlKTtcclxuXHRcdH1cclxuXHRcdGlmICh0aGlzLl9zZXR0aW5ncy5kYXRldGltZS50aW1lem9uZSkge1xyXG5cdFx0XHRkdCA9IGR0LnNldFpvbmUodGhpcy5fc2V0dGluZ3MuZGF0ZXRpbWUudGltZXpvbmUpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGR0O1xyXG5cdH1cclxufVxyXG4iLCJpbXBvcnQgeyBJVGVtcGxlUHJvdmlkZXIgfSBmcm9tICcuL0lUZW1wbGVQcm92aWRlcic7XHJcbmltcG9ydCB7IERhdGVUaW1lQ29udGV4dCB9IGZyb20gJy4vRGF0ZVRpbWVDb250ZXh0JztcclxuaW1wb3J0IHsgVGVtcGxlQ29udGV4dCB9IGZyb20gJy4vVGVtcGxlQ29udGV4dCc7XHJcbmltcG9ydCB7IGluamVjdGFibGUgfSBmcm9tICd0c3lyaW5nZSc7XHJcbmltcG9ydCB7IERhdGVUaW1lUHJvdmlkZXIgfSBmcm9tICcuL0RhdGVUaW1lUHJvdmlkZXInO1xyXG5pbXBvcnQgeyBUZW1wbGVEb2NzQ29udGV4dCB9IGZyb20gJy4vVGVtcGxlRG9jc0NvbnRleHQnO1xyXG5cclxuQGluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRGF0ZVRpbWVUZW1wbGVQcm92aWRlciBpbXBsZW1lbnRzIElUZW1wbGVQcm92aWRlcjxEYXRlVGltZUNvbnRleHQ+IHtcclxuICAgIG5hbWUgPSAnZGF0ZXRpbWUnO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2RhdGV0aW1lOiBEYXRlVGltZVByb3ZpZGVyKSB7IH1cclxuXHJcbiAgICBhc3luYyBkb2NzKCk6IFByb21pc2U8VGVtcGxlRG9jc0NvbnRleHQ8RGF0ZVRpbWVDb250ZXh0Pj4ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNvbnRleHQ6IGF3YWl0IHRoaXMucHJvdmlkZSgpLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZTogYFxyXG4jIFxcYGRhdGV0aW1lXFxgXHJcblxyXG5SZXR1cm5zIHRoZSBjdXJyZW50IGRhdGUgYW5kIHRpbWUgYXMgTHV4b24gW1xcYERhdGVUaW1lXFxgXShodHRwczovL2dpdGh1Yi5jb20vRGVmaW5pdGVseVR5cGVkL0RlZmluaXRlbHlUeXBlZC9ibG9iL2U1ZTYzYjU2ZDZiYjUyYTk1Y2M1ZTdjZmFkYzVkMWJlYzMwMjNmMTQvdHlwZXMvbHV4b24vaW5kZXguZC50cyNMMTUxKS5cclxuXHJcbiMjIFVzYWdlXHJcblxyXG57JSByYXcgJX1cXGBcXGBcXGBcclxubm93OiB7eyBkYXRldGltZS5ub3cgfX1cclxuXHJcbmRheToge3sgZGF0ZXRpbWUubm93LmRheSB9fVxyXG5tb250aDoge3sgZGF0ZXRpbWUubm93Lm1vbnRoIH19XHJcbnllYXI6IHt7IGRhdGV0aW1lLm5vdy55ZWFyIH19XHJcblxyXG5ob3VyOiB7eyBkYXRldGltZS5ub3cuaG91ciB9fVxyXG5taW51dGU6IHt7IGRhdGV0aW1lLm5vdy5taW51dGUgfX1cclxuc2Vjb25kOiB7eyBkYXRldGltZS5ub3cuc2Vjb25kIH19XHJcblxcYFxcYFxcYHslIGVuZHJhdyAlfVxyXG5cclxub3V0cHV0czpcclxuXHJcblxcYFxcYFxcYFxyXG5ub3c6IHt7IGRhdGV0aW1lLm5vdyB9fVxyXG5cclxuZGF5OiB7eyBkYXRldGltZS5ub3cuZGF5IH19XHJcbm1vbnRoOiB7eyBkYXRldGltZS5ub3cubW9udGggfX1cclxueWVhcjoge3sgZGF0ZXRpbWUubm93LnllYXIgfX1cclxuXHJcbmhvdXI6IHt7IGRhdGV0aW1lLm5vdy5ob3VyIH19XHJcbm1pbnV0ZToge3sgZGF0ZXRpbWUubm93Lm1pbnV0ZSB9fVxyXG5zZWNvbmQ6IHt7IGRhdGV0aW1lLm5vdy5zZWNvbmQgfX1cclxuXFxgXFxgXFxgXHJcblxyXG5cclxuIyMgRm9ybWF0dGluZyB3aXRoIFxcYGRhdGVGb3JtYXRcXGAgZmlsdGVyXHJcblxyXG5cXGBkYXRlRm9ybWF0XFxgIHVzZXMgW0x1eG9uXShodHRwczovL21vbWVudC5naXRodWIuaW8vbHV4b24vaW5kZXguaHRtbCkgdW5kZXItdGhlLWhvb2QgZm9yIGRhdGUgZm9ybWF0dGluZy4gRm9yIGV4YW1wbGU6XHJcblxyXG57JSByYXcgJX1cXGBcXGBcXGBcclxubm93OiB7eyBkYXRldGltZS5ub3cgfCBkYXRlRm9ybWF0KFwiZmZmZlwiKSB9fVxyXG5cXGBcXGBcXGB7JSBlbmRyYXcgJX1cclxuXHJcbm91dHB1dHM6XHJcblxyXG5cXGBcXGBcXGBcclxubm93OiB7eyBkYXRldGltZS5ub3cgfCBkYXRlRm9ybWF0KFwiZmZmZlwiKSB9fVxyXG5cXGBcXGBcXGBcclxuXHJcblNlZSBbTHV4b24ncyBkb2N1bWVudGF0aW9uXShodHRwczovL21vbWVudC5naXRodWIuaW8vbHV4b24vZG9jcy9tYW51YWwvZm9ybWF0dGluZy5odG1sI3RhYmxlLW9mLXRva2VucykgZm9yIGEgY29tcGxldGUgbGlzdCBvZiBmb3JtYXR0aW5nIHRva2VucyB0aGF0IGNhbiBiZSB1c2VkLlxyXG5cclxuIyBTZXR0aW5nc1xyXG5cclxuWW91IGNhbiBvdmVycmlkZSB0aGUgZGVmYXVsdCBsb2NhbGUgYW5kIHRpbWV6b25lIHVuZGVyIFNldHRpbmdzLlxyXG5gXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHByb3ZpZGUoKTogUHJvbWlzZTxUZW1wbGVDb250ZXh0PERhdGVUaW1lQ29udGV4dD4+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFRlbXBsZUNvbnRleHQobmV3IERhdGVUaW1lQ29udGV4dCh0aGlzLl9kYXRldGltZS5ub3coKSkpO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGNsYXNzIFpldHRlbENvbnRleHQge1xyXG5cdGNvbnN0cnVjdG9yKHB1YmxpYyB1aWQ6IHN0cmluZywgcHVibGljIHRpdGxlOiBzdHJpbmcpIHsgfVxyXG59IiwiaW1wb3J0IHsgV29ya3NwYWNlIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgeyBUZW1wbGVTZXR0aW5ncyB9IGZyb20gJ3NyYy9zZXR0aW5ncy9UZW1wbGVTZXR0aW5ncyc7XHJcbmltcG9ydCB7IFN5bWJvbHMgfSBmcm9tICdzcmMvU3ltYm9scyc7XHJcbmltcG9ydCB7IGluamVjdCwgaW5qZWN0YWJsZSB9IGZyb20gJ3RzeXJpbmdlJztcclxuaW1wb3J0IHsgSVRlbXBsZVByb3ZpZGVyIH0gZnJvbSAnLi9JVGVtcGxlUHJvdmlkZXInO1xyXG5pbXBvcnQgeyBUZW1wbGVDb250ZXh0IH0gZnJvbSAnLi9UZW1wbGVDb250ZXh0JztcclxuaW1wb3J0IHsgVGVtcGxlRG9jc0NvbnRleHQgfSBmcm9tICcuL1RlbXBsZURvY3NDb250ZXh0JztcclxuaW1wb3J0IHsgWmV0dGVsQ29udGV4dCB9IGZyb20gJy4vWmV0dGVsQ29udGV4dCc7XHJcblxyXG5AaW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBaZXR0ZWxUZW1wbGVQcm92aWRlciBpbXBsZW1lbnRzIElUZW1wbGVQcm92aWRlcjxaZXR0ZWxDb250ZXh0PiB7XHJcbiAgICBuYW1lID0gJ3pldHRlbCc7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfd29ya3NwYWNlOiBXb3Jrc3BhY2UsIEBpbmplY3QoU3ltYm9scy5UZW1wbGVTZXR0aW5ncykgcHJpdmF0ZSBfc2V0dGluZ3M6IFRlbXBsZVNldHRpbmdzKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGRvY3MoKTogUHJvbWlzZTxUZW1wbGVEb2NzQ29udGV4dDxaZXR0ZWxDb250ZXh0Pj4ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNvbnRleHQ6IG5ldyBUZW1wbGVDb250ZXh0KHRoaXMuZXh0cmFjdCgnMjAyMDEyMjQwMzA0MDYgdGl0bGUubWQnKSksXHJcbiAgICAgICAgICAgIHRlbXBsYXRlOiBgXHJcbiMgXFxgemV0dGVsXFxgXHJcblxyXG5FeHRyYWN0cyB1aWQgYW5kIHRpdGxlIGZyb20gbm90ZXMgdGhhdCBoYXZlIHRoZSBaZXR0ZWxrYXN0ZW4gSUQuXHJcblxyXG4jIyBVc2FnZXNcclxuXHJcbkdpdmVuIGEgZmlsZSBuYW1lZCBcXGAyMDIwMTIyNDAzMDQwNiB0aXRsZS5tZFxcYCwgdGhlIGZvbGxvd2luZyB0ZW1wbGF0ZVxyXG5cclxueyUgcmF3ICV9XFxgXFxgXFxgXHJcbnVpZDoge3sgemV0dGVsLnVpZCB9fVxyXG50aXRsZToge3sgemV0dGVsLnRpdGxlIH19XHJcblxcYFxcYFxcYHslIGVuZHJhdyAlfVxyXG5cclxub3V0cHV0czpcclxuXHJcblxcYFxcYFxcYFxyXG51aWQ6IHt7IHpldHRlbC51aWQgfX1cclxudGl0bGU6IHt7IHpldHRlbC50aXRsZSB9fVxyXG5cXGBcXGBcXGBcclxuXHJcbldvcmtzIGV2ZW4gaWYgdGhlIFxcYHVpZFxcYCBpcyB1c2VkIGFzIGEgc3VmZml4LCBlZy4gXFxgdGl0bGUgMjAyMDEyMjQwMzA0MDYubWRcXGAuXHJcblxyXG4jIyBTZXR0aW5nc1xyXG5cclxuWW91IGNhbiBvdmVycmlkZSB0aGUgZXh0cmFjdGlvbiByZWdleCB1bmRlciBTZXR0aW5ncy5cclxuYFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwcm92aWRlKCk6IFByb21pc2U8VGVtcGxlQ29udGV4dDxaZXR0ZWxDb250ZXh0Pj4ge1xyXG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLl93b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xyXG4gICAgICAgIGlmIChmaWxlID09IG51bGwpXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmV4dHJhY3QoZmlsZS5iYXNlbmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBUZW1wbGVDb250ZXh0KGNvbnRleHQpO1xyXG4gICAgfVxyXG5cclxuICAgIGV4dHJhY3QobmFtZTogc3RyaW5nKTogWmV0dGVsQ29udGV4dCB7XHJcbiAgICAgICAgbGV0IGNvbnRleHQgPSB0aGlzLmV4dHJhY3RQcmVmaXgobmFtZSlcclxuICAgICAgICAgICAgPz8gdGhpcy5leHRyYWN0U3VmZml4KG5hbWUpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fc2V0dGluZ3MuemV0dGVsLnJlZ2V4KSB7XHJcbiAgICAgICAgICAgIC8vIG92ZXJyaWRlIGlmIGEgY3VzdG9tIHJlZ2V4IGlzIHNldFxyXG4gICAgICAgICAgICBjb250ZXh0ID0gdGhpcy5leHRyYWN0Q3VzdG9tKG5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29udGV4dDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHVzZSBjdXN0b20gcmVnZXggZnJvbSBzZXR0aW5ncyBmb3IgZXh0cmFjdGlvblxyXG4gICAgICovXHJcbiAgICBleHRyYWN0Q3VzdG9tKG5hbWU6IHN0cmluZyk6IFpldHRlbENvbnRleHQge1xyXG4gICAgICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cCh0aGlzLl9zZXR0aW5ncy56ZXR0ZWwucmVnZXgsICdnbScpXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZXh0cmFjdFJlZ2V4KG5hbWUsIHJlZ2V4KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIDx1aWQ+IDx0aXRsZT5cclxuICAgICAqL1xyXG4gICAgZXh0cmFjdFByZWZpeChuYW1lOiBzdHJpbmcpOiBaZXR0ZWxDb250ZXh0IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5leHRyYWN0UmVnZXgobmFtZSwgLyg/PHVpZD5eXFxkKykoXFxzKD88dGl0bGU+LiokKSk/L2dtKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIDx0aXRsZT4gPHVpZD5cclxuICAgICAqL1xyXG4gICAgZXh0cmFjdFN1ZmZpeChuYW1lOiBzdHJpbmcpOiBaZXR0ZWxDb250ZXh0IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5leHRyYWN0UmVnZXgobmFtZSwgLygoPzx0aXRsZT5eLiopXFxzKT8oPzx1aWQ+XFxkKyQpL2dtKTtcclxuICAgIH1cclxuXHJcbiAgICBleHRyYWN0UmVnZXgobmFtZTogc3RyaW5nLCByZWdleDogUmVnRXhwKTogWmV0dGVsQ29udGV4dCB7XHJcbiAgICAgICAgY29uc3QgbWF0Y2hlcyA9IHJlZ2V4LmV4ZWMobmFtZSk7XHJcblxyXG4gICAgICAgIGlmIChtYXRjaGVzPy5ncm91cHMgPT0gbnVsbCkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgY29uc3QgeyBncm91cHM6IHsgdWlkLCB0aXRsZSB9IH0gPSBtYXRjaGVzO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFpldHRlbENvbnRleHQodWlkLCB0aXRsZSk7XHJcbiAgICB9XHJcbn1cclxuIiwiLyohIEJyb3dzZXIgYnVuZGxlIG9mIG51bmp1Y2tzIDMuMi4yICAqL1xuKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wibnVuanVja3NcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wibnVuanVja3NcIl0gPSBmYWN0b3J5KCk7XG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDExKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG52YXIgT2JqUHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xudmFyIGVzY2FwZU1hcCA9IHtcbiAgJyYnOiAnJmFtcDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgJ1xcJyc6ICcmIzM5OycsXG4gICc8JzogJyZsdDsnLFxuICAnPic6ICcmZ3Q7J1xufTtcbnZhciBlc2NhcGVSZWdleCA9IC9bJlwiJzw+XS9nO1xudmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG5mdW5jdGlvbiBoYXNPd25Qcm9wKG9iaiwgaykge1xuICByZXR1cm4gT2JqUHJvdG8uaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGspO1xufVxuXG5leHBvcnRzLmhhc093blByb3AgPSBoYXNPd25Qcm9wO1xuXG5mdW5jdGlvbiBsb29rdXBFc2NhcGUoY2gpIHtcbiAgcmV0dXJuIGVzY2FwZU1hcFtjaF07XG59XG5cbmZ1bmN0aW9uIF9wcmV0dGlmeUVycm9yKHBhdGgsIHdpdGhJbnRlcm5hbHMsIGVycikge1xuICBpZiAoIWVyci5VcGRhdGUpIHtcbiAgICAvLyBub3Qgb25lIG9mIG91cnMsIGNhc3QgaXRcbiAgICBlcnIgPSBuZXcgZXhwb3J0cy5UZW1wbGF0ZUVycm9yKGVycik7XG4gIH1cblxuICBlcnIuVXBkYXRlKHBhdGgpOyAvLyBVbmxlc3MgdGhleSBtYXJrZWQgdGhlIGRldiBmbGFnLCBzaG93IHRoZW0gYSB0cmFjZSBmcm9tIGhlcmVcblxuICBpZiAoIXdpdGhJbnRlcm5hbHMpIHtcbiAgICB2YXIgb2xkID0gZXJyO1xuICAgIGVyciA9IG5ldyBFcnJvcihvbGQubWVzc2FnZSk7XG4gICAgZXJyLm5hbWUgPSBvbGQubmFtZTtcbiAgfVxuXG4gIHJldHVybiBlcnI7XG59XG5cbmV4cG9ydHMuX3ByZXR0aWZ5RXJyb3IgPSBfcHJldHRpZnlFcnJvcjtcblxuZnVuY3Rpb24gVGVtcGxhdGVFcnJvcihtZXNzYWdlLCBsaW5lbm8sIGNvbG5vKSB7XG4gIHZhciBlcnI7XG4gIHZhciBjYXVzZTtcblxuICBpZiAobWVzc2FnZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgY2F1c2UgPSBtZXNzYWdlO1xuICAgIG1lc3NhZ2UgPSBjYXVzZS5uYW1lICsgXCI6IFwiICsgY2F1c2UubWVzc2FnZTtcbiAgfVxuXG4gIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICBlcnIgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGVyciwgVGVtcGxhdGVFcnJvci5wcm90b3R5cGUpO1xuICB9IGVsc2Uge1xuICAgIGVyciA9IHRoaXM7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVyciwgJ21lc3NhZ2UnLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IG1lc3NhZ2VcbiAgICB9KTtcbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnIsICduYW1lJywge1xuICAgIHZhbHVlOiAnVGVtcGxhdGUgcmVuZGVyIGVycm9yJ1xuICB9KTtcblxuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShlcnIsIHRoaXMuY29uc3RydWN0b3IpO1xuICB9XG5cbiAgdmFyIGdldFN0YWNrO1xuXG4gIGlmIChjYXVzZSkge1xuICAgIHZhciBzdGFja0Rlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGNhdXNlLCAnc3RhY2snKTtcblxuICAgIGdldFN0YWNrID0gc3RhY2tEZXNjcmlwdG9yICYmIChzdGFja0Rlc2NyaXB0b3IuZ2V0IHx8IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdGFja0Rlc2NyaXB0b3IudmFsdWU7XG4gICAgfSk7XG5cbiAgICBpZiAoIWdldFN0YWNrKSB7XG4gICAgICBnZXRTdGFjayA9IGZ1bmN0aW9uIGdldFN0YWNrKCkge1xuICAgICAgICByZXR1cm4gY2F1c2Uuc3RhY2s7XG4gICAgICB9O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgc3RhY2sgPSBuZXcgRXJyb3IobWVzc2FnZSkuc3RhY2s7XG5cbiAgICBnZXRTdGFjayA9IGZ1bmN0aW9uIGdldFN0YWNrKCkge1xuICAgICAgcmV0dXJuIHN0YWNrO1xuICAgIH07XG4gIH1cblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXJyLCAnc3RhY2snLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gZ2V0U3RhY2suY2FsbChlcnIpO1xuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnIsICdjYXVzZScsIHtcbiAgICB2YWx1ZTogY2F1c2VcbiAgfSk7XG4gIGVyci5saW5lbm8gPSBsaW5lbm87XG4gIGVyci5jb2xubyA9IGNvbG5vO1xuICBlcnIuZmlyc3RVcGRhdGUgPSB0cnVlO1xuXG4gIGVyci5VcGRhdGUgPSBmdW5jdGlvbiBVcGRhdGUocGF0aCkge1xuICAgIHZhciBtc2cgPSAnKCcgKyAocGF0aCB8fCAndW5rbm93biBwYXRoJykgKyAnKSc7IC8vIG9ubHkgc2hvdyBsaW5lbm8gKyBjb2xubyBuZXh0IHRvIHBhdGggb2YgdGVtcGxhdGVcbiAgICAvLyB3aGVyZSBlcnJvciBvY2N1cnJlZFxuXG4gICAgaWYgKHRoaXMuZmlyc3RVcGRhdGUpIHtcbiAgICAgIGlmICh0aGlzLmxpbmVubyAmJiB0aGlzLmNvbG5vKSB7XG4gICAgICAgIG1zZyArPSBcIiBbTGluZSBcIiArIHRoaXMubGluZW5vICsgXCIsIENvbHVtbiBcIiArIHRoaXMuY29sbm8gKyBcIl1cIjtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5saW5lbm8pIHtcbiAgICAgICAgbXNnICs9IFwiIFtMaW5lIFwiICsgdGhpcy5saW5lbm8gKyBcIl1cIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtc2cgKz0gJ1xcbiAnO1xuXG4gICAgaWYgKHRoaXMuZmlyc3RVcGRhdGUpIHtcbiAgICAgIG1zZyArPSAnICc7XG4gICAgfVxuXG4gICAgdGhpcy5tZXNzYWdlID0gbXNnICsgKHRoaXMubWVzc2FnZSB8fCAnJyk7XG4gICAgdGhpcy5maXJzdFVwZGF0ZSA9IGZhbHNlO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHJldHVybiBlcnI7XG59XG5cbmlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKFRlbXBsYXRlRXJyb3IucHJvdG90eXBlLCBFcnJvci5wcm90b3R5cGUpO1xufSBlbHNlIHtcbiAgVGVtcGxhdGVFcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogVGVtcGxhdGVFcnJvclxuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydHMuVGVtcGxhdGVFcnJvciA9IFRlbXBsYXRlRXJyb3I7XG5cbmZ1bmN0aW9uIGVzY2FwZSh2YWwpIHtcbiAgcmV0dXJuIHZhbC5yZXBsYWNlKGVzY2FwZVJlZ2V4LCBsb29rdXBFc2NhcGUpO1xufVxuXG5leHBvcnRzLmVzY2FwZSA9IGVzY2FwZTtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihvYmopIHtcbiAgcmV0dXJuIE9ialByb3RvLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNBcnJheShvYmopIHtcbiAgcmV0dXJuIE9ialByb3RvLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNTdHJpbmcob2JqKSB7XG4gIHJldHVybiBPYmpQcm90by50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IFN0cmluZ10nO1xufVxuXG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICByZXR1cm4gT2JqUHJvdG8udG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cblxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IGF0dHJcbiAqIEByZXR1cm5zIHsoc3RyaW5nfG51bWJlcilbXX1cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gX3ByZXBhcmVBdHRyaWJ1dGVQYXJ0cyhhdHRyKSB7XG4gIGlmICghYXR0cikge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYXR0ciA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gYXR0ci5zcGxpdCgnLicpO1xuICB9XG5cbiAgcmV0dXJuIFthdHRyXTtcbn1cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9ICAgYXR0cmlidXRlICAgICAgQXR0cmlidXRlIHZhbHVlLiBEb3RzIGFsbG93ZWQuXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oT2JqZWN0KTogKn1cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldEF0dHJHZXR0ZXIoYXR0cmlidXRlKSB7XG4gIHZhciBwYXJ0cyA9IF9wcmVwYXJlQXR0cmlidXRlUGFydHMoYXR0cmlidXRlKTtcblxuICByZXR1cm4gZnVuY3Rpb24gYXR0ckdldHRlcihpdGVtKSB7XG4gICAgdmFyIF9pdGVtID0gaXRlbTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwYXJ0ID0gcGFydHNbaV07IC8vIElmIGl0ZW0gaXMgbm90IGFuIG9iamVjdCwgYW5kIHdlIHN0aWxsIGdvdCBwYXJ0cyB0byBoYW5kbGUsIGl0IG1lYW5zXG4gICAgICAvLyB0aGF0IHNvbWV0aGluZyBnb2VzIHdyb25nLiBKdXN0IHJvbGwgb3V0IHRvIHVuZGVmaW5lZCBpbiB0aGF0IGNhc2UuXG5cbiAgICAgIGlmIChoYXNPd25Qcm9wKF9pdGVtLCBwYXJ0KSkge1xuICAgICAgICBfaXRlbSA9IF9pdGVtW3BhcnRdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gX2l0ZW07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdyb3VwQnkob2JqLCB2YWwsIHRocm93T25VbmRlZmluZWQpIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICB2YXIgaXRlcmF0b3IgPSBpc0Z1bmN0aW9uKHZhbCkgPyB2YWwgOiBnZXRBdHRyR2V0dGVyKHZhbCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdmFsdWUgPSBvYmpbaV07XG4gICAgdmFyIGtleSA9IGl0ZXJhdG9yKHZhbHVlLCBpKTtcblxuICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCAmJiB0aHJvd09uVW5kZWZpbmVkID09PSB0cnVlKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiZ3JvdXBieTogYXR0cmlidXRlIFxcXCJcIiArIHZhbCArIFwiXFxcIiByZXNvbHZlZCB0byB1bmRlZmluZWRcIik7XG4gICAgfVxuXG4gICAgKHJlc3VsdFtrZXldIHx8IChyZXN1bHRba2V5XSA9IFtdKSkucHVzaCh2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnRzLmdyb3VwQnkgPSBncm91cEJ5O1xuXG5mdW5jdGlvbiB0b0FycmF5KG9iaikge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwob2JqKTtcbn1cblxuZXhwb3J0cy50b0FycmF5ID0gdG9BcnJheTtcblxuZnVuY3Rpb24gd2l0aG91dChhcnJheSkge1xuICB2YXIgcmVzdWx0ID0gW107XG5cbiAgaWYgKCFhcnJheSkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB2YXIgY29udGFpbnMgPSB0b0FycmF5KGFyZ3VtZW50cykuc2xpY2UoMSk7XG4gIHZhciBpbmRleCA9IC0xO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGluZGV4T2YoY29udGFpbnMsIGFycmF5W2luZGV4XSkgPT09IC0xKSB7XG4gICAgICByZXN1bHQucHVzaChhcnJheVtpbmRleF0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydHMud2l0aG91dCA9IHdpdGhvdXQ7XG5cbmZ1bmN0aW9uIHJlcGVhdChjaGFyXywgbikge1xuICB2YXIgc3RyID0gJyc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICBzdHIgKz0gY2hhcl87XG4gIH1cblxuICByZXR1cm4gc3RyO1xufVxuXG5leHBvcnRzLnJlcGVhdCA9IHJlcGVhdDtcblxuZnVuY3Rpb24gZWFjaChvYmosIGZ1bmMsIGNvbnRleHQpIHtcbiAgaWYgKG9iaiA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKEFycmF5UHJvdG8uZm9yRWFjaCAmJiBvYmouZm9yRWFjaCA9PT0gQXJyYXlQcm90by5mb3JFYWNoKSB7XG4gICAgb2JqLmZvckVhY2goZnVuYywgY29udGV4dCk7XG4gIH0gZWxzZSBpZiAob2JqLmxlbmd0aCA9PT0gK29iai5sZW5ndGgpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZ1bmMuY2FsbChjb250ZXh0LCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydHMuZWFjaCA9IGVhY2g7XG5cbmZ1bmN0aW9uIG1hcChvYmosIGZ1bmMpIHtcbiAgdmFyIHJlc3VsdHMgPSBbXTtcblxuICBpZiAob2JqID09IG51bGwpIHtcbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfVxuXG4gIGlmIChBcnJheVByb3RvLm1hcCAmJiBvYmoubWFwID09PSBBcnJheVByb3RvLm1hcCkge1xuICAgIHJldHVybiBvYmoubWFwKGZ1bmMpO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHRzW3Jlc3VsdHMubGVuZ3RoXSA9IGZ1bmMob2JqW2ldLCBpKTtcbiAgfVxuXG4gIGlmIChvYmoubGVuZ3RoID09PSArb2JqLmxlbmd0aCkge1xuICAgIHJlc3VsdHMubGVuZ3RoID0gb2JqLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiByZXN1bHRzO1xufVxuXG5leHBvcnRzLm1hcCA9IG1hcDtcblxuZnVuY3Rpb24gYXN5bmNJdGVyKGFyciwgaXRlciwgY2IpIHtcbiAgdmFyIGkgPSAtMTtcblxuICBmdW5jdGlvbiBuZXh0KCkge1xuICAgIGkrKztcblxuICAgIGlmIChpIDwgYXJyLmxlbmd0aCkge1xuICAgICAgaXRlcihhcnJbaV0sIGksIG5leHQsIGNiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH1cblxuICBuZXh0KCk7XG59XG5cbmV4cG9ydHMuYXN5bmNJdGVyID0gYXN5bmNJdGVyO1xuXG5mdW5jdGlvbiBhc3luY0ZvcihvYmosIGl0ZXIsIGNiKSB7XG4gIHZhciBrZXlzID0ga2V5c18ob2JqIHx8IHt9KTtcbiAgdmFyIGxlbiA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IC0xO1xuXG4gIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgaSsrO1xuICAgIHZhciBrID0ga2V5c1tpXTtcblxuICAgIGlmIChpIDwgbGVuKSB7XG4gICAgICBpdGVyKGssIG9ialtrXSwgaSwgbGVuLCBuZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH1cblxuICBuZXh0KCk7XG59XG5cbmV4cG9ydHMuYXN5bmNGb3IgPSBhc3luY0ZvcjtcblxuZnVuY3Rpb24gaW5kZXhPZihhcnIsIHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCkge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChhcnIgfHwgW10sIHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCk7XG59XG5cbmV4cG9ydHMuaW5kZXhPZiA9IGluZGV4T2Y7XG5cbmZ1bmN0aW9uIGtleXNfKG9iaikge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLXN5bnRheCAqL1xuICB2YXIgYXJyID0gW107XG5cbiAgZm9yICh2YXIgayBpbiBvYmopIHtcbiAgICBpZiAoaGFzT3duUHJvcChvYmosIGspKSB7XG4gICAgICBhcnIucHVzaChrKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXJyO1xufVxuXG5leHBvcnRzLmtleXMgPSBrZXlzXztcblxuZnVuY3Rpb24gX2VudHJpZXMob2JqKSB7XG4gIHJldHVybiBrZXlzXyhvYmopLm1hcChmdW5jdGlvbiAoaykge1xuICAgIHJldHVybiBbaywgb2JqW2tdXTtcbiAgfSk7XG59XG5cbmV4cG9ydHMuX2VudHJpZXMgPSBfZW50cmllcztcblxuZnVuY3Rpb24gX3ZhbHVlcyhvYmopIHtcbiAgcmV0dXJuIGtleXNfKG9iaikubWFwKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIG9ialtrXTtcbiAgfSk7XG59XG5cbmV4cG9ydHMuX3ZhbHVlcyA9IF92YWx1ZXM7XG5cbmZ1bmN0aW9uIGV4dGVuZChvYmoxLCBvYmoyKSB7XG4gIG9iajEgPSBvYmoxIHx8IHt9O1xuICBrZXlzXyhvYmoyKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgb2JqMVtrXSA9IG9iajJba107XG4gIH0pO1xuICByZXR1cm4gb2JqMTtcbn1cblxuZXhwb3J0cy5fYXNzaWduID0gZXhwb3J0cy5leHRlbmQgPSBleHRlbmQ7XG5cbmZ1bmN0aW9uIGluT3BlcmF0b3Ioa2V5LCB2YWwpIHtcbiAgaWYgKGlzQXJyYXkodmFsKSB8fCBpc1N0cmluZyh2YWwpKSB7XG4gICAgcmV0dXJuIHZhbC5pbmRleE9mKGtleSkgIT09IC0xO1xuICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbCkpIHtcbiAgICByZXR1cm4ga2V5IGluIHZhbDtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHVzZSBcImluXCIgb3BlcmF0b3IgdG8gc2VhcmNoIGZvciBcIicgKyBrZXkgKyAnXCIgaW4gdW5leHBlY3RlZCB0eXBlcy4nKTtcbn1cblxuZXhwb3J0cy5pbk9wZXJhdG9yID0gaW5PcGVyYXRvcjtcblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuIC8vIEEgc2ltcGxlIGNsYXNzIHN5c3RlbSwgbW9yZSBkb2N1bWVudGF0aW9uIHRvIGNvbWVcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEV2ZW50RW1pdHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXG52YXIgbGliID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuZnVuY3Rpb24gcGFyZW50V3JhcChwYXJlbnQsIHByb3ApIHtcbiAgaWYgKHR5cGVvZiBwYXJlbnQgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHByb3AgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gcHJvcDtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIC8vIFNhdmUgdGhlIGN1cnJlbnQgcGFyZW50IG1ldGhvZFxuICAgIHZhciB0bXAgPSB0aGlzLnBhcmVudDsgLy8gU2V0IHBhcmVudCB0byB0aGUgcHJldmlvdXMgbWV0aG9kLCBjYWxsLCBhbmQgcmVzdG9yZVxuXG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdmFyIHJlcyA9IHByb3AuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLnBhcmVudCA9IHRtcDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xufVxuXG5mdW5jdGlvbiBleHRlbmRDbGFzcyhjbHMsIG5hbWUsIHByb3BzKSB7XG4gIHByb3BzID0gcHJvcHMgfHwge307XG4gIGxpYi5rZXlzKHByb3BzKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgcHJvcHNba10gPSBwYXJlbnRXcmFwKGNscy5wcm90b3R5cGVba10sIHByb3BzW2tdKTtcbiAgfSk7XG5cbiAgdmFyIHN1YmNsYXNzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfY2xzKSB7XG4gICAgX2luaGVyaXRzTG9vc2Uoc3ViY2xhc3MsIF9jbHMpO1xuXG4gICAgZnVuY3Rpb24gc3ViY2xhc3MoKSB7XG4gICAgICByZXR1cm4gX2Nscy5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKHN1YmNsYXNzLCBbe1xuICAgICAga2V5OiBcInR5cGVuYW1lXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIHN1YmNsYXNzO1xuICB9KGNscyk7XG5cbiAgbGliLl9hc3NpZ24oc3ViY2xhc3MucHJvdG90eXBlLCBwcm9wcyk7XG5cbiAgcmV0dXJuIHN1YmNsYXNzO1xufVxuXG52YXIgT2JqID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gT2JqKCkge1xuICAgIC8vIFVuZm9ydHVuYXRlbHkgbmVjZXNzYXJ5IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICAgIHRoaXMuaW5pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE9iai5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmluaXQgPSBmdW5jdGlvbiBpbml0KCkge307XG5cbiAgT2JqLmV4dGVuZCA9IGZ1bmN0aW9uIGV4dGVuZChuYW1lLCBwcm9wcykge1xuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHByb3BzID0gbmFtZTtcbiAgICAgIG5hbWUgPSAnYW5vbnltb3VzJztcbiAgICB9XG5cbiAgICByZXR1cm4gZXh0ZW5kQ2xhc3ModGhpcywgbmFtZSwgcHJvcHMpO1xuICB9O1xuXG4gIF9jcmVhdGVDbGFzcyhPYmosIFt7XG4gICAga2V5OiBcInR5cGVuYW1lXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBPYmo7XG59KCk7XG5cbnZhciBFbWl0dGVyT2JqID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfRXZlbnRFbWl0dGVyKSB7XG4gIF9pbmhlcml0c0xvb3NlKEVtaXR0ZXJPYmosIF9FdmVudEVtaXR0ZXIpO1xuXG4gIGZ1bmN0aW9uIEVtaXR0ZXJPYmooKSB7XG4gICAgdmFyIF90aGlzMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0V2ZW50RW1pdHRlci5jYWxsKHRoaXMpIHx8IHRoaXM7IC8vIFVuZm9ydHVuYXRlbHkgbmVjZXNzYXJ5IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXG4gICAgKF90aGlzMiA9IF90aGlzKS5pbml0LmFwcGx5KF90aGlzMiwgYXJndW1lbnRzKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gRW1pdHRlck9iai5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMi5pbml0ID0gZnVuY3Rpb24gaW5pdCgpIHt9O1xuXG4gIEVtaXR0ZXJPYmouZXh0ZW5kID0gZnVuY3Rpb24gZXh0ZW5kKG5hbWUsIHByb3BzKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xuICAgICAgcHJvcHMgPSBuYW1lO1xuICAgICAgbmFtZSA9ICdhbm9ueW1vdXMnO1xuICAgIH1cblxuICAgIHJldHVybiBleHRlbmRDbGFzcyh0aGlzLCBuYW1lLCBwcm9wcyk7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKEVtaXR0ZXJPYmosIFt7XG4gICAga2V5OiBcInR5cGVuYW1lXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBFbWl0dGVyT2JqO1xufShFdmVudEVtaXR0ZXIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgT2JqOiBPYmosXG4gIEVtaXR0ZXJPYmo6IEVtaXR0ZXJPYmpcbn07XG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgbGliID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIGFycmF5RnJvbSA9IEFycmF5LmZyb207XG52YXIgc3VwcG9ydHNJdGVyYXRvcnMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5pdGVyYXRvciAmJiB0eXBlb2YgYXJyYXlGcm9tID09PSAnZnVuY3Rpb24nOyAvLyBGcmFtZXMga2VlcCB0cmFjayBvZiBzY29waW5nIGJvdGggYXQgY29tcGlsZS10aW1lIGFuZCBydW4tdGltZSBzb1xuLy8gd2Uga25vdyBob3cgdG8gYWNjZXNzIHZhcmlhYmxlcy4gQmxvY2sgdGFncyBjYW4gaW50cm9kdWNlIHNwZWNpYWxcbi8vIHZhcmlhYmxlcywgZm9yIGV4YW1wbGUuXG5cbnZhciBGcmFtZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEZyYW1lKHBhcmVudCwgaXNvbGF0ZVdyaXRlcykge1xuICAgIHRoaXMudmFyaWFibGVzID0ge307XG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy50b3BMZXZlbCA9IGZhbHNlOyAvLyBpZiB0aGlzIGlzIHRydWUsIHdyaXRlcyAoc2V0KSBzaG91bGQgbmV2ZXIgcHJvcGFnYXRlIHVwd2FyZHMgcGFzdFxuICAgIC8vIHRoaXMgZnJhbWUgdG8gaXRzIHBhcmVudCAodGhvdWdoIHJlYWRzIG1heSkuXG5cbiAgICB0aGlzLmlzb2xhdGVXcml0ZXMgPSBpc29sYXRlV3JpdGVzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEZyYW1lLnByb3RvdHlwZTtcblxuICBfcHJvdG8uc2V0ID0gZnVuY3Rpb24gc2V0KG5hbWUsIHZhbCwgcmVzb2x2ZVVwKSB7XG4gICAgLy8gQWxsb3cgdmFyaWFibGVzIHdpdGggZG90cyBieSBhdXRvbWF0aWNhbGx5IGNyZWF0aW5nIHRoZVxuICAgIC8vIG5lc3RlZCBzdHJ1Y3R1cmVcbiAgICB2YXIgcGFydHMgPSBuYW1lLnNwbGl0KCcuJyk7XG4gICAgdmFyIG9iaiA9IHRoaXMudmFyaWFibGVzO1xuICAgIHZhciBmcmFtZSA9IHRoaXM7XG5cbiAgICBpZiAocmVzb2x2ZVVwKSB7XG4gICAgICBpZiAoZnJhbWUgPSB0aGlzLnJlc29sdmUocGFydHNbMF0sIHRydWUpKSB7XG4gICAgICAgIGZyYW1lLnNldChuYW1lLCB2YWwpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIHZhciBpZCA9IHBhcnRzW2ldO1xuXG4gICAgICBpZiAoIW9ialtpZF0pIHtcbiAgICAgICAgb2JqW2lkXSA9IHt9O1xuICAgICAgfVxuXG4gICAgICBvYmogPSBvYmpbaWRdO1xuICAgIH1cblxuICAgIG9ialtwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXV0gPSB2YWw7XG4gIH07XG5cbiAgX3Byb3RvLmdldCA9IGZ1bmN0aW9uIGdldChuYW1lKSB7XG4gICAgdmFyIHZhbCA9IHRoaXMudmFyaWFibGVzW25hbWVdO1xuXG4gICAgaWYgKHZhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIF9wcm90by5sb29rdXAgPSBmdW5jdGlvbiBsb29rdXAobmFtZSkge1xuICAgIHZhciBwID0gdGhpcy5wYXJlbnQ7XG4gICAgdmFyIHZhbCA9IHRoaXMudmFyaWFibGVzW25hbWVdO1xuXG4gICAgaWYgKHZhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cblxuICAgIHJldHVybiBwICYmIHAubG9va3VwKG5hbWUpO1xuICB9O1xuXG4gIF9wcm90by5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZShuYW1lLCBmb3JXcml0ZSkge1xuICAgIHZhciBwID0gZm9yV3JpdGUgJiYgdGhpcy5pc29sYXRlV3JpdGVzID8gdW5kZWZpbmVkIDogdGhpcy5wYXJlbnQ7XG4gICAgdmFyIHZhbCA9IHRoaXMudmFyaWFibGVzW25hbWVdO1xuXG4gICAgaWYgKHZhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gcCAmJiBwLnJlc29sdmUobmFtZSk7XG4gIH07XG5cbiAgX3Byb3RvLnB1c2ggPSBmdW5jdGlvbiBwdXNoKGlzb2xhdGVXcml0ZXMpIHtcbiAgICByZXR1cm4gbmV3IEZyYW1lKHRoaXMsIGlzb2xhdGVXcml0ZXMpO1xuICB9O1xuXG4gIF9wcm90by5wb3AgPSBmdW5jdGlvbiBwb3AoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50O1xuICB9O1xuXG4gIHJldHVybiBGcmFtZTtcbn0oKTtcblxuZnVuY3Rpb24gbWFrZU1hY3JvKGFyZ05hbWVzLCBrd2FyZ05hbWVzLCBmdW5jKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWFjcm9BcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgbWFjcm9BcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBhcmdDb3VudCA9IG51bUFyZ3MobWFjcm9BcmdzKTtcbiAgICB2YXIgYXJncztcbiAgICB2YXIga3dhcmdzID0gZ2V0S2V5d29yZEFyZ3MobWFjcm9BcmdzKTtcblxuICAgIGlmIChhcmdDb3VudCA+IGFyZ05hbWVzLmxlbmd0aCkge1xuICAgICAgYXJncyA9IG1hY3JvQXJncy5zbGljZSgwLCBhcmdOYW1lcy5sZW5ndGgpOyAvLyBQb3NpdGlvbmFsIGFyZ3VtZW50cyB0aGF0IHNob3VsZCBiZSBwYXNzZWQgaW4gYXNcbiAgICAgIC8vIGtleXdvcmQgYXJndW1lbnRzIChlc3NlbnRpYWxseSBkZWZhdWx0IHZhbHVlcylcblxuICAgICAgbWFjcm9BcmdzLnNsaWNlKGFyZ3MubGVuZ3RoLCBhcmdDb3VudCkuZm9yRWFjaChmdW5jdGlvbiAodmFsLCBpKSB7XG4gICAgICAgIGlmIChpIDwga3dhcmdOYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgICBrd2FyZ3Nba3dhcmdOYW1lc1tpXV0gPSB2YWw7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgYXJncy5wdXNoKGt3YXJncyk7XG4gICAgfSBlbHNlIGlmIChhcmdDb3VudCA8IGFyZ05hbWVzLmxlbmd0aCkge1xuICAgICAgYXJncyA9IG1hY3JvQXJncy5zbGljZSgwLCBhcmdDb3VudCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSBhcmdDb3VudDsgaSA8IGFyZ05hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBhcmcgPSBhcmdOYW1lc1tpXTsgLy8gS2V5d29yZCBhcmd1bWVudHMgdGhhdCBzaG91bGQgYmUgcGFzc2VkIGFzXG4gICAgICAgIC8vIHBvc2l0aW9uYWwgYXJndW1lbnRzLCBpLmUuIHRoZSBjYWxsZXIgZXhwbGljaXRseVxuICAgICAgICAvLyB1c2VkIHRoZSBuYW1lIG9mIGEgcG9zaXRpb25hbCBhcmdcblxuICAgICAgICBhcmdzLnB1c2goa3dhcmdzW2FyZ10pO1xuICAgICAgICBkZWxldGUga3dhcmdzW2FyZ107XG4gICAgICB9XG5cbiAgICAgIGFyZ3MucHVzaChrd2FyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcmdzID0gbWFjcm9BcmdzO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jLmFwcGx5KF90aGlzLCBhcmdzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFrZUtleXdvcmRBcmdzKG9iaikge1xuICBvYmouX19rZXl3b3JkcyA9IHRydWU7XG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIGlzS2V5d29yZEFyZ3Mob2JqKSB7XG4gIHJldHVybiBvYmogJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgJ19fa2V5d29yZHMnKTtcbn1cblxuZnVuY3Rpb24gZ2V0S2V5d29yZEFyZ3MoYXJncykge1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG5cbiAgaWYgKGxlbikge1xuICAgIHZhciBsYXN0QXJnID0gYXJnc1tsZW4gLSAxXTtcblxuICAgIGlmIChpc0tleXdvcmRBcmdzKGxhc3RBcmcpKSB7XG4gICAgICByZXR1cm4gbGFzdEFyZztcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge307XG59XG5cbmZ1bmN0aW9uIG51bUFyZ3MoYXJncykge1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG5cbiAgaWYgKGxlbiA9PT0gMCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgdmFyIGxhc3RBcmcgPSBhcmdzW2xlbiAtIDFdO1xuXG4gIGlmIChpc0tleXdvcmRBcmdzKGxhc3RBcmcpKSB7XG4gICAgcmV0dXJuIGxlbiAtIDE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxlbjtcbiAgfVxufSAvLyBBIFNhZmVTdHJpbmcgb2JqZWN0IGluZGljYXRlcyB0aGF0IHRoZSBzdHJpbmcgc2hvdWxkIG5vdCBiZVxuLy8gYXV0b2VzY2FwZWQuIFRoaXMgaGFwcGVucyBtYWdpY2FsbHkgYmVjYXVzZSBhdXRvZXNjYXBpbmcgb25seVxuLy8gb2NjdXJzIG9uIHByaW1pdGl2ZSBzdHJpbmcgb2JqZWN0cy5cblxuXG5mdW5jdGlvbiBTYWZlU3RyaW5nKHZhbCkge1xuICBpZiAodHlwZW9mIHZhbCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgdGhpcy52YWwgPSB2YWw7XG4gIHRoaXMubGVuZ3RoID0gdmFsLmxlbmd0aDtcbn1cblxuU2FmZVN0cmluZy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN0cmluZy5wcm90b3R5cGUsIHtcbiAgbGVuZ3RoOiB7XG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiAwXG4gIH1cbn0pO1xuXG5TYWZlU3RyaW5nLnByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24gdmFsdWVPZigpIHtcbiAgcmV0dXJuIHRoaXMudmFsO1xufTtcblxuU2FmZVN0cmluZy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHRoaXMudmFsO1xufTtcblxuZnVuY3Rpb24gY29weVNhZmVuZXNzKGRlc3QsIHRhcmdldCkge1xuICBpZiAoZGVzdCBpbnN0YW5jZW9mIFNhZmVTdHJpbmcpIHtcbiAgICByZXR1cm4gbmV3IFNhZmVTdHJpbmcodGFyZ2V0KTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQudG9TdHJpbmcoKTtcbn1cblxuZnVuY3Rpb24gbWFya1NhZmUodmFsKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcblxuICBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbmV3IFNhZmVTdHJpbmcodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHZhbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gd3JhcFNhZmUoYXJncykge1xuICAgICAgdmFyIHJldCA9IHZhbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgICBpZiAodHlwZW9mIHJldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTYWZlU3RyaW5nKHJldCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdXBwcmVzc1ZhbHVlKHZhbCwgYXV0b2VzY2FwZSkge1xuICB2YWwgPSB2YWwgIT09IHVuZGVmaW5lZCAmJiB2YWwgIT09IG51bGwgPyB2YWwgOiAnJztcblxuICBpZiAoYXV0b2VzY2FwZSAmJiAhKHZhbCBpbnN0YW5jZW9mIFNhZmVTdHJpbmcpKSB7XG4gICAgdmFsID0gbGliLmVzY2FwZSh2YWwudG9TdHJpbmcoKSk7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBlbnN1cmVEZWZpbmVkKHZhbCwgbGluZW5vLCBjb2xubykge1xuICBpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IGxpYi5UZW1wbGF0ZUVycm9yKCdhdHRlbXB0ZWQgdG8gb3V0cHV0IG51bGwgb3IgdW5kZWZpbmVkIHZhbHVlJywgbGluZW5vICsgMSwgY29sbm8gKyAxKTtcbiAgfVxuXG4gIHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIG1lbWJlckxvb2t1cChvYmosIHZhbCkge1xuICBpZiAob2JqID09PSB1bmRlZmluZWQgfHwgb2JqID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqW3ZhbF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9ialt2YWxdLmFwcGx5KG9iaiwgYXJncyk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBvYmpbdmFsXTtcbn1cblxuZnVuY3Rpb24gY2FsbFdyYXAob2JqLCBuYW1lLCBjb250ZXh0LCBhcmdzKSB7XG4gIGlmICghb2JqKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gY2FsbCBgJyArIG5hbWUgKyAnYCwgd2hpY2ggaXMgdW5kZWZpbmVkIG9yIGZhbHNleScpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBjYWxsIGAnICsgbmFtZSArICdgLCB3aGljaCBpcyBub3QgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgcmV0dXJuIG9iai5hcHBseShjb250ZXh0LCBhcmdzKTtcbn1cblxuZnVuY3Rpb24gY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIG5hbWUpIHtcbiAgdmFyIHZhbCA9IGZyYW1lLmxvb2t1cChuYW1lKTtcbiAgcmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID8gdmFsIDogY29udGV4dC5sb29rdXAobmFtZSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUVycm9yKGVycm9yLCBsaW5lbm8sIGNvbG5vKSB7XG4gIGlmIChlcnJvci5saW5lbm8pIHtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBsaWIuVGVtcGxhdGVFcnJvcihlcnJvciwgbGluZW5vLCBjb2xubyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXN5bmNFYWNoKGFyciwgZGltZW4sIGl0ZXIsIGNiKSB7XG4gIGlmIChsaWIuaXNBcnJheShhcnIpKSB7XG4gICAgdmFyIGxlbiA9IGFyci5sZW5ndGg7XG4gICAgbGliLmFzeW5jSXRlcihhcnIsIGZ1bmN0aW9uIGl0ZXJDYWxsYmFjayhpdGVtLCBpLCBuZXh0KSB7XG4gICAgICBzd2l0Y2ggKGRpbWVuKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpdGVyKGl0ZW0sIGksIGxlbiwgbmV4dCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGl0ZXIoaXRlbVswXSwgaXRlbVsxXSwgaSwgbGVuLCBuZXh0KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgaXRlcihpdGVtWzBdLCBpdGVtWzFdLCBpdGVtWzJdLCBpLCBsZW4sIG5leHQpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaXRlbS5wdXNoKGksIGxlbiwgbmV4dCk7XG4gICAgICAgICAgaXRlci5hcHBseSh0aGlzLCBpdGVtKTtcbiAgICAgIH1cbiAgICB9LCBjYik7XG4gIH0gZWxzZSB7XG4gICAgbGliLmFzeW5jRm9yKGFyciwgZnVuY3Rpb24gaXRlckNhbGxiYWNrKGtleSwgdmFsLCBpLCBsZW4sIG5leHQpIHtcbiAgICAgIGl0ZXIoa2V5LCB2YWwsIGksIGxlbiwgbmV4dCk7XG4gICAgfSwgY2IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzeW5jQWxsKGFyciwgZGltZW4sIGZ1bmMsIGNiKSB7XG4gIHZhciBmaW5pc2hlZCA9IDA7XG4gIHZhciBsZW47XG4gIHZhciBvdXRwdXRBcnI7XG5cbiAgZnVuY3Rpb24gZG9uZShpLCBvdXRwdXQpIHtcbiAgICBmaW5pc2hlZCsrO1xuICAgIG91dHB1dEFycltpXSA9IG91dHB1dDtcblxuICAgIGlmIChmaW5pc2hlZCA9PT0gbGVuKSB7XG4gICAgICBjYihudWxsLCBvdXRwdXRBcnIuam9pbignJykpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChsaWIuaXNBcnJheShhcnIpKSB7XG4gICAgbGVuID0gYXJyLmxlbmd0aDtcbiAgICBvdXRwdXRBcnIgPSBuZXcgQXJyYXkobGVuKTtcblxuICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgIGNiKG51bGwsICcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBhcnJbaV07XG5cbiAgICAgICAgc3dpdGNoIChkaW1lbikge1xuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGZ1bmMoaXRlbSwgaSwgbGVuLCBkb25lKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgZnVuYyhpdGVtWzBdLCBpdGVtWzFdLCBpLCBsZW4sIGRvbmUpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBmdW5jKGl0ZW1bMF0sIGl0ZW1bMV0sIGl0ZW1bMl0sIGksIGxlbiwgZG9uZSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBpdGVtLnB1c2goaSwgbGVuLCBkb25lKTtcbiAgICAgICAgICAgIGZ1bmMuYXBwbHkodGhpcywgaXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGtleXMgPSBsaWIua2V5cyhhcnIgfHwge30pO1xuICAgIGxlbiA9IGtleXMubGVuZ3RoO1xuICAgIG91dHB1dEFyciA9IG5ldyBBcnJheShsZW4pO1xuXG4gICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgY2IobnVsbCwgJycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwga2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGsgPSBrZXlzW19pXTtcbiAgICAgICAgZnVuYyhrLCBhcnJba10sIF9pLCBsZW4sIGRvbmUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmcm9tSXRlcmF0b3IoYXJyKSB7XG4gIGlmICh0eXBlb2YgYXJyICE9PSAnb2JqZWN0JyB8fCBhcnIgPT09IG51bGwgfHwgbGliLmlzQXJyYXkoYXJyKSkge1xuICAgIHJldHVybiBhcnI7XG4gIH0gZWxzZSBpZiAoc3VwcG9ydHNJdGVyYXRvcnMgJiYgU3ltYm9sLml0ZXJhdG9yIGluIGFycikge1xuICAgIHJldHVybiBhcnJheUZyb20oYXJyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYXJyO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBGcmFtZTogRnJhbWUsXG4gIG1ha2VNYWNybzogbWFrZU1hY3JvLFxuICBtYWtlS2V5d29yZEFyZ3M6IG1ha2VLZXl3b3JkQXJncyxcbiAgbnVtQXJnczogbnVtQXJncyxcbiAgc3VwcHJlc3NWYWx1ZTogc3VwcHJlc3NWYWx1ZSxcbiAgZW5zdXJlRGVmaW5lZDogZW5zdXJlRGVmaW5lZCxcbiAgbWVtYmVyTG9va3VwOiBtZW1iZXJMb29rdXAsXG4gIGNvbnRleHRPckZyYW1lTG9va3VwOiBjb250ZXh0T3JGcmFtZUxvb2t1cCxcbiAgY2FsbFdyYXA6IGNhbGxXcmFwLFxuICBoYW5kbGVFcnJvcjogaGFuZGxlRXJyb3IsXG4gIGlzQXJyYXk6IGxpYi5pc0FycmF5LFxuICBrZXlzOiBsaWIua2V5cyxcbiAgU2FmZVN0cmluZzogU2FmZVN0cmluZyxcbiAgY29weVNhZmVuZXNzOiBjb3B5U2FmZW5lc3MsXG4gIG1hcmtTYWZlOiBtYXJrU2FmZSxcbiAgYXN5bmNFYWNoOiBhc3luY0VhY2gsXG4gIGFzeW5jQWxsOiBhc3luY0FsbCxcbiAgaW5PcGVyYXRvcjogbGliLmluT3BlcmF0b3IsXG4gIGZyb21JdGVyYXRvcjogZnJvbUl0ZXJhdG9yXG59O1xuXG4vKioqLyB9KSxcbi8qIDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIF9yZXF1aXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKSxcbiAgICBPYmogPSBfcmVxdWlyZS5PYmo7XG5cbmZ1bmN0aW9uIHRyYXZlcnNlQW5kQ2hlY2sob2JqLCB0eXBlLCByZXN1bHRzKSB7XG4gIGlmIChvYmogaW5zdGFuY2VvZiB0eXBlKSB7XG4gICAgcmVzdWx0cy5wdXNoKG9iaik7XG4gIH1cblxuICBpZiAob2JqIGluc3RhbmNlb2YgTm9kZSkge1xuICAgIG9iai5maW5kQWxsKHR5cGUsIHJlc3VsdHMpO1xuICB9XG59XG5cbnZhciBOb2RlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfT2JqKSB7XG4gIF9pbmhlcml0c0xvb3NlKE5vZGUsIF9PYmopO1xuXG4gIGZ1bmN0aW9uIE5vZGUoKSB7XG4gICAgcmV0dXJuIF9PYmouYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE5vZGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5pbml0ID0gZnVuY3Rpb24gaW5pdChsaW5lbm8sIGNvbG5vKSB7XG4gICAgdmFyIF9hcmd1bWVudHMgPSBhcmd1bWVudHMsXG4gICAgICAgIF90aGlzID0gdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHRoaXMubGluZW5vID0gbGluZW5vO1xuICAgIHRoaXMuY29sbm8gPSBjb2xubztcbiAgICB0aGlzLmZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCwgaSkge1xuICAgICAgLy8gVGhlIGZpcnN0IHR3byBhcmdzIGFyZSBsaW5lL2NvbCBudW1iZXJzLCBzbyBvZmZzZXQgYnkgMlxuICAgICAgdmFyIHZhbCA9IF9hcmd1bWVudHNbaSArIDJdOyAvLyBGaWVsZHMgc2hvdWxkIG5ldmVyIGJlIHVuZGVmaW5lZCwgYnV0IG51bGwuIEl0IG1ha2VzXG4gICAgICAvLyB0ZXN0aW5nIGVhc2llciB0byBub3JtYWxpemUgdmFsdWVzLlxuXG4gICAgICBpZiAodmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFsID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgX3RoaXNbZmllbGRdID0gdmFsO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5maW5kQWxsID0gZnVuY3Rpb24gZmluZEFsbCh0eXBlLCByZXN1bHRzKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICByZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgTm9kZUxpc3QpIHtcbiAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIHRyYXZlcnNlQW5kQ2hlY2soY2hpbGQsIHR5cGUsIHJlc3VsdHMpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgIHJldHVybiB0cmF2ZXJzZUFuZENoZWNrKF90aGlzMltmaWVsZF0sIHR5cGUsIHJlc3VsdHMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgX3Byb3RvLml0ZXJGaWVsZHMgPSBmdW5jdGlvbiBpdGVyRmllbGRzKGZ1bmMpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHRoaXMuZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICBmdW5jKF90aGlzM1tmaWVsZF0sIGZpZWxkKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTm9kZTtcbn0oT2JqKTsgLy8gQWJzdHJhY3Qgbm9kZXNcblxuXG52YXIgVmFsdWUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Ob2RlKSB7XG4gIF9pbmhlcml0c0xvb3NlKFZhbHVlLCBfTm9kZSk7XG5cbiAgZnVuY3Rpb24gVmFsdWUoKSB7XG4gICAgcmV0dXJuIF9Ob2RlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhWYWx1ZSwgW3tcbiAgICBrZXk6IFwidHlwZW5hbWVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiAnVmFsdWUnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmaWVsZHNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBbJ3ZhbHVlJ107XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFZhbHVlO1xufShOb2RlKTsgLy8gQ29uY3JldGUgbm9kZXNcblxuXG52YXIgTm9kZUxpc3QgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Ob2RlMikge1xuICBfaW5oZXJpdHNMb29zZShOb2RlTGlzdCwgX05vZGUyKTtcblxuICBmdW5jdGlvbiBOb2RlTGlzdCgpIHtcbiAgICByZXR1cm4gX05vZGUyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gTm9kZUxpc3QucHJvdG90eXBlO1xuXG4gIF9wcm90bzIuaW5pdCA9IGZ1bmN0aW9uIGluaXQobGluZW5vLCBjb2xubywgbm9kZXMpIHtcbiAgICBfTm9kZTIucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzLCBsaW5lbm8sIGNvbG5vLCBub2RlcyB8fCBbXSk7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGRDaGlsZCA9IGZ1bmN0aW9uIGFkZENoaWxkKG5vZGUpIHtcbiAgICB0aGlzLmNoaWxkcmVuLnB1c2gobm9kZSk7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKE5vZGVMaXN0LCBbe1xuICAgIGtleTogXCJ0eXBlbmFtZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuICdOb2RlTGlzdCc7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZpZWxkc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIFsnY2hpbGRyZW4nXTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTm9kZUxpc3Q7XG59KE5vZGUpO1xuXG52YXIgUm9vdCA9IE5vZGVMaXN0LmV4dGVuZCgnUm9vdCcpO1xudmFyIExpdGVyYWwgPSBWYWx1ZS5leHRlbmQoJ0xpdGVyYWwnKTtcbnZhciBTeW1ib2wgPSBWYWx1ZS5leHRlbmQoJ1N5bWJvbCcpO1xudmFyIEdyb3VwID0gTm9kZUxpc3QuZXh0ZW5kKCdHcm91cCcpO1xudmFyIEFycmF5Tm9kZSA9IE5vZGVMaXN0LmV4dGVuZCgnQXJyYXknKTtcbnZhciBQYWlyID0gTm9kZS5leHRlbmQoJ1BhaXInLCB7XG4gIGZpZWxkczogWydrZXknLCAndmFsdWUnXVxufSk7XG52YXIgRGljdCA9IE5vZGVMaXN0LmV4dGVuZCgnRGljdCcpO1xudmFyIExvb2t1cFZhbCA9IE5vZGUuZXh0ZW5kKCdMb29rdXBWYWwnLCB7XG4gIGZpZWxkczogWyd0YXJnZXQnLCAndmFsJ11cbn0pO1xudmFyIElmID0gTm9kZS5leHRlbmQoJ0lmJywge1xuICBmaWVsZHM6IFsnY29uZCcsICdib2R5JywgJ2Vsc2VfJ11cbn0pO1xudmFyIElmQXN5bmMgPSBJZi5leHRlbmQoJ0lmQXN5bmMnKTtcbnZhciBJbmxpbmVJZiA9IE5vZGUuZXh0ZW5kKCdJbmxpbmVJZicsIHtcbiAgZmllbGRzOiBbJ2NvbmQnLCAnYm9keScsICdlbHNlXyddXG59KTtcbnZhciBGb3IgPSBOb2RlLmV4dGVuZCgnRm9yJywge1xuICBmaWVsZHM6IFsnYXJyJywgJ25hbWUnLCAnYm9keScsICdlbHNlXyddXG59KTtcbnZhciBBc3luY0VhY2ggPSBGb3IuZXh0ZW5kKCdBc3luY0VhY2gnKTtcbnZhciBBc3luY0FsbCA9IEZvci5leHRlbmQoJ0FzeW5jQWxsJyk7XG52YXIgTWFjcm8gPSBOb2RlLmV4dGVuZCgnTWFjcm8nLCB7XG4gIGZpZWxkczogWyduYW1lJywgJ2FyZ3MnLCAnYm9keSddXG59KTtcbnZhciBDYWxsZXIgPSBNYWNyby5leHRlbmQoJ0NhbGxlcicpO1xudmFyIEltcG9ydCA9IE5vZGUuZXh0ZW5kKCdJbXBvcnQnLCB7XG4gIGZpZWxkczogWyd0ZW1wbGF0ZScsICd0YXJnZXQnLCAnd2l0aENvbnRleHQnXVxufSk7XG5cbnZhciBGcm9tSW1wb3J0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTm9kZTMpIHtcbiAgX2luaGVyaXRzTG9vc2UoRnJvbUltcG9ydCwgX05vZGUzKTtcblxuICBmdW5jdGlvbiBGcm9tSW1wb3J0KCkge1xuICAgIHJldHVybiBfTm9kZTMuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90bzMgPSBGcm9tSW1wb3J0LnByb3RvdHlwZTtcblxuICBfcHJvdG8zLmluaXQgPSBmdW5jdGlvbiBpbml0KGxpbmVubywgY29sbm8sIHRlbXBsYXRlLCBuYW1lcywgd2l0aENvbnRleHQpIHtcbiAgICBfTm9kZTMucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzLCBsaW5lbm8sIGNvbG5vLCB0ZW1wbGF0ZSwgbmFtZXMgfHwgbmV3IE5vZGVMaXN0KCksIHdpdGhDb250ZXh0KTtcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoRnJvbUltcG9ydCwgW3tcbiAgICBrZXk6IFwidHlwZW5hbWVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiAnRnJvbUltcG9ydCc7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZpZWxkc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIFsndGVtcGxhdGUnLCAnbmFtZXMnLCAnd2l0aENvbnRleHQnXTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRnJvbUltcG9ydDtcbn0oTm9kZSk7XG5cbnZhciBGdW5DYWxsID0gTm9kZS5leHRlbmQoJ0Z1bkNhbGwnLCB7XG4gIGZpZWxkczogWyduYW1lJywgJ2FyZ3MnXVxufSk7XG52YXIgRmlsdGVyID0gRnVuQ2FsbC5leHRlbmQoJ0ZpbHRlcicpO1xudmFyIEZpbHRlckFzeW5jID0gRmlsdGVyLmV4dGVuZCgnRmlsdGVyQXN5bmMnLCB7XG4gIGZpZWxkczogWyduYW1lJywgJ2FyZ3MnLCAnc3ltYm9sJ11cbn0pO1xudmFyIEtleXdvcmRBcmdzID0gRGljdC5leHRlbmQoJ0tleXdvcmRBcmdzJyk7XG52YXIgQmxvY2sgPSBOb2RlLmV4dGVuZCgnQmxvY2snLCB7XG4gIGZpZWxkczogWyduYW1lJywgJ2JvZHknXVxufSk7XG52YXIgU3VwZXIgPSBOb2RlLmV4dGVuZCgnU3VwZXInLCB7XG4gIGZpZWxkczogWydibG9ja05hbWUnLCAnc3ltYm9sJ11cbn0pO1xudmFyIFRlbXBsYXRlUmVmID0gTm9kZS5leHRlbmQoJ1RlbXBsYXRlUmVmJywge1xuICBmaWVsZHM6IFsndGVtcGxhdGUnXVxufSk7XG52YXIgRXh0ZW5kcyA9IFRlbXBsYXRlUmVmLmV4dGVuZCgnRXh0ZW5kcycpO1xudmFyIEluY2x1ZGUgPSBOb2RlLmV4dGVuZCgnSW5jbHVkZScsIHtcbiAgZmllbGRzOiBbJ3RlbXBsYXRlJywgJ2lnbm9yZU1pc3NpbmcnXVxufSk7XG52YXIgU2V0ID0gTm9kZS5leHRlbmQoJ1NldCcsIHtcbiAgZmllbGRzOiBbJ3RhcmdldHMnLCAndmFsdWUnXVxufSk7XG52YXIgU3dpdGNoID0gTm9kZS5leHRlbmQoJ1N3aXRjaCcsIHtcbiAgZmllbGRzOiBbJ2V4cHInLCAnY2FzZXMnLCAnZGVmYXVsdCddXG59KTtcbnZhciBDYXNlID0gTm9kZS5leHRlbmQoJ0Nhc2UnLCB7XG4gIGZpZWxkczogWydjb25kJywgJ2JvZHknXVxufSk7XG52YXIgT3V0cHV0ID0gTm9kZUxpc3QuZXh0ZW5kKCdPdXRwdXQnKTtcbnZhciBDYXB0dXJlID0gTm9kZS5leHRlbmQoJ0NhcHR1cmUnLCB7XG4gIGZpZWxkczogWydib2R5J11cbn0pO1xudmFyIFRlbXBsYXRlRGF0YSA9IExpdGVyYWwuZXh0ZW5kKCdUZW1wbGF0ZURhdGEnKTtcbnZhciBVbmFyeU9wID0gTm9kZS5leHRlbmQoJ1VuYXJ5T3AnLCB7XG4gIGZpZWxkczogWyd0YXJnZXQnXVxufSk7XG52YXIgQmluT3AgPSBOb2RlLmV4dGVuZCgnQmluT3AnLCB7XG4gIGZpZWxkczogWydsZWZ0JywgJ3JpZ2h0J11cbn0pO1xudmFyIEluID0gQmluT3AuZXh0ZW5kKCdJbicpO1xudmFyIElzID0gQmluT3AuZXh0ZW5kKCdJcycpO1xudmFyIE9yID0gQmluT3AuZXh0ZW5kKCdPcicpO1xudmFyIEFuZCA9IEJpbk9wLmV4dGVuZCgnQW5kJyk7XG52YXIgTm90ID0gVW5hcnlPcC5leHRlbmQoJ05vdCcpO1xudmFyIEFkZCA9IEJpbk9wLmV4dGVuZCgnQWRkJyk7XG52YXIgQ29uY2F0ID0gQmluT3AuZXh0ZW5kKCdDb25jYXQnKTtcbnZhciBTdWIgPSBCaW5PcC5leHRlbmQoJ1N1YicpO1xudmFyIE11bCA9IEJpbk9wLmV4dGVuZCgnTXVsJyk7XG52YXIgRGl2ID0gQmluT3AuZXh0ZW5kKCdEaXYnKTtcbnZhciBGbG9vckRpdiA9IEJpbk9wLmV4dGVuZCgnRmxvb3JEaXYnKTtcbnZhciBNb2QgPSBCaW5PcC5leHRlbmQoJ01vZCcpO1xudmFyIFBvdyA9IEJpbk9wLmV4dGVuZCgnUG93Jyk7XG52YXIgTmVnID0gVW5hcnlPcC5leHRlbmQoJ05lZycpO1xudmFyIFBvcyA9IFVuYXJ5T3AuZXh0ZW5kKCdQb3MnKTtcbnZhciBDb21wYXJlID0gTm9kZS5leHRlbmQoJ0NvbXBhcmUnLCB7XG4gIGZpZWxkczogWydleHByJywgJ29wcyddXG59KTtcbnZhciBDb21wYXJlT3BlcmFuZCA9IE5vZGUuZXh0ZW5kKCdDb21wYXJlT3BlcmFuZCcsIHtcbiAgZmllbGRzOiBbJ2V4cHInLCAndHlwZSddXG59KTtcbnZhciBDYWxsRXh0ZW5zaW9uID0gTm9kZS5leHRlbmQoJ0NhbGxFeHRlbnNpb24nLCB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQoZXh0LCBwcm9wLCBhcmdzLCBjb250ZW50QXJncykge1xuICAgIHRoaXMucGFyZW50KCk7XG4gICAgdGhpcy5leHROYW1lID0gZXh0Ll9fbmFtZSB8fCBleHQ7XG4gICAgdGhpcy5wcm9wID0gcHJvcDtcbiAgICB0aGlzLmFyZ3MgPSBhcmdzIHx8IG5ldyBOb2RlTGlzdCgpO1xuICAgIHRoaXMuY29udGVudEFyZ3MgPSBjb250ZW50QXJncyB8fCBbXTtcbiAgICB0aGlzLmF1dG9lc2NhcGUgPSBleHQuYXV0b2VzY2FwZTtcbiAgfSxcbiAgZmllbGRzOiBbJ2V4dE5hbWUnLCAncHJvcCcsICdhcmdzJywgJ2NvbnRlbnRBcmdzJ11cbn0pO1xudmFyIENhbGxFeHRlbnNpb25Bc3luYyA9IENhbGxFeHRlbnNpb24uZXh0ZW5kKCdDYWxsRXh0ZW5zaW9uQXN5bmMnKTsgLy8gVGhpcyBpcyBoYWNreSwgYnV0IHRoaXMgaXMganVzdCBhIGRlYnVnZ2luZyBmdW5jdGlvbiBhbnl3YXlcblxuZnVuY3Rpb24gcHJpbnQoc3RyLCBpbmRlbnQsIGlubGluZSkge1xuICB2YXIgbGluZXMgPSBzdHIuc3BsaXQoJ1xcbicpO1xuICBsaW5lcy5mb3JFYWNoKGZ1bmN0aW9uIChsaW5lLCBpKSB7XG4gICAgaWYgKGxpbmUgJiYgKGlubGluZSAmJiBpID4gMCB8fCAhaW5saW5lKSkge1xuICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoJyAnLnJlcGVhdChpbmRlbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgbmwgPSBpID09PSBsaW5lcy5sZW5ndGggLSAxID8gJycgOiAnXFxuJztcbiAgICBwcm9jZXNzLnN0ZG91dC53cml0ZShcIlwiICsgbGluZSArIG5sKTtcbiAgfSk7XG59IC8vIFByaW50IHRoZSBBU1QgaW4gYSBuaWNlbHkgZm9ybWF0dGVkIHRyZWUgZm9ybWF0IGZvciBkZWJ1Z2dpblxuXG5cbmZ1bmN0aW9uIHByaW50Tm9kZXMobm9kZSwgaW5kZW50KSB7XG4gIGluZGVudCA9IGluZGVudCB8fCAwO1xuICBwcmludChub2RlLnR5cGVuYW1lICsgJzogJywgaW5kZW50KTtcblxuICBpZiAobm9kZSBpbnN0YW5jZW9mIE5vZGVMaXN0KSB7XG4gICAgcHJpbnQoJ1xcbicpO1xuICAgIG5vZGUuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAobikge1xuICAgICAgcHJpbnROb2RlcyhuLCBpbmRlbnQgKyAyKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChub2RlIGluc3RhbmNlb2YgQ2FsbEV4dGVuc2lvbikge1xuICAgIHByaW50KG5vZGUuZXh0TmFtZSArIFwiLlwiICsgbm9kZS5wcm9wICsgXCJcXG5cIik7XG5cbiAgICBpZiAobm9kZS5hcmdzKSB7XG4gICAgICBwcmludE5vZGVzKG5vZGUuYXJncywgaW5kZW50ICsgMik7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUuY29udGVudEFyZ3MpIHtcbiAgICAgIG5vZGUuY29udGVudEFyZ3MuZm9yRWFjaChmdW5jdGlvbiAobikge1xuICAgICAgICBwcmludE5vZGVzKG4sIGluZGVudCArIDIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBub2RlcyA9IFtdO1xuICAgIHZhciBwcm9wcyA9IG51bGw7XG4gICAgbm9kZS5pdGVyRmllbGRzKGZ1bmN0aW9uICh2YWwsIGZpZWxkTmFtZSkge1xuICAgICAgaWYgKHZhbCBpbnN0YW5jZW9mIE5vZGUpIHtcbiAgICAgICAgbm9kZXMucHVzaChbZmllbGROYW1lLCB2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgICAgIHByb3BzW2ZpZWxkTmFtZV0gPSB2YWw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAocHJvcHMpIHtcbiAgICAgIHByaW50KEpTT04uc3RyaW5naWZ5KHByb3BzLCBudWxsLCAyKSArICdcXG4nLCBudWxsLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJpbnQoJ1xcbicpO1xuICAgIH1cblxuICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBmaWVsZE5hbWUgPSBfcmVmWzBdLFxuICAgICAgICAgIG4gPSBfcmVmWzFdO1xuICAgICAgcHJpbnQoXCJbXCIgKyBmaWVsZE5hbWUgKyBcIl0gPT5cIiwgaW5kZW50ICsgMik7XG4gICAgICBwcmludE5vZGVzKG4sIGluZGVudCArIDQpO1xuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBOb2RlOiBOb2RlLFxuICBSb290OiBSb290LFxuICBOb2RlTGlzdDogTm9kZUxpc3QsXG4gIFZhbHVlOiBWYWx1ZSxcbiAgTGl0ZXJhbDogTGl0ZXJhbCxcbiAgU3ltYm9sOiBTeW1ib2wsXG4gIEdyb3VwOiBHcm91cCxcbiAgQXJyYXk6IEFycmF5Tm9kZSxcbiAgUGFpcjogUGFpcixcbiAgRGljdDogRGljdCxcbiAgT3V0cHV0OiBPdXRwdXQsXG4gIENhcHR1cmU6IENhcHR1cmUsXG4gIFRlbXBsYXRlRGF0YTogVGVtcGxhdGVEYXRhLFxuICBJZjogSWYsXG4gIElmQXN5bmM6IElmQXN5bmMsXG4gIElubGluZUlmOiBJbmxpbmVJZixcbiAgRm9yOiBGb3IsXG4gIEFzeW5jRWFjaDogQXN5bmNFYWNoLFxuICBBc3luY0FsbDogQXN5bmNBbGwsXG4gIE1hY3JvOiBNYWNybyxcbiAgQ2FsbGVyOiBDYWxsZXIsXG4gIEltcG9ydDogSW1wb3J0LFxuICBGcm9tSW1wb3J0OiBGcm9tSW1wb3J0LFxuICBGdW5DYWxsOiBGdW5DYWxsLFxuICBGaWx0ZXI6IEZpbHRlcixcbiAgRmlsdGVyQXN5bmM6IEZpbHRlckFzeW5jLFxuICBLZXl3b3JkQXJnczogS2V5d29yZEFyZ3MsXG4gIEJsb2NrOiBCbG9jayxcbiAgU3VwZXI6IFN1cGVyLFxuICBFeHRlbmRzOiBFeHRlbmRzLFxuICBJbmNsdWRlOiBJbmNsdWRlLFxuICBTZXQ6IFNldCxcbiAgU3dpdGNoOiBTd2l0Y2gsXG4gIENhc2U6IENhc2UsXG4gIExvb2t1cFZhbDogTG9va3VwVmFsLFxuICBCaW5PcDogQmluT3AsXG4gIEluOiBJbixcbiAgSXM6IElzLFxuICBPcjogT3IsXG4gIEFuZDogQW5kLFxuICBOb3Q6IE5vdCxcbiAgQWRkOiBBZGQsXG4gIENvbmNhdDogQ29uY2F0LFxuICBTdWI6IFN1YixcbiAgTXVsOiBNdWwsXG4gIERpdjogRGl2LFxuICBGbG9vckRpdjogRmxvb3JEaXYsXG4gIE1vZDogTW9kLFxuICBQb3c6IFBvdyxcbiAgTmVnOiBOZWcsXG4gIFBvczogUG9zLFxuICBDb21wYXJlOiBDb21wYXJlLFxuICBDb21wYXJlT3BlcmFuZDogQ29tcGFyZU9wZXJhbmQsXG4gIENhbGxFeHRlbnNpb246IENhbGxFeHRlbnNpb24sXG4gIENhbGxFeHRlbnNpb25Bc3luYzogQ2FsbEV4dGVuc2lvbkFzeW5jLFxuICBwcmludE5vZGVzOiBwcmludE5vZGVzXG59O1xuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXG5cbi8qKiovIH0pLFxuLyogNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIHBhcnNlciA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cbnZhciB0cmFuc2Zvcm1lciA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuXG52YXIgbm9kZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG52YXIgX3JlcXVpcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApLFxuICAgIFRlbXBsYXRlRXJyb3IgPSBfcmVxdWlyZS5UZW1wbGF0ZUVycm9yO1xuXG52YXIgX3JlcXVpcmUyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKSxcbiAgICBGcmFtZSA9IF9yZXF1aXJlMi5GcmFtZTtcblxudmFyIF9yZXF1aXJlMyA9IF9fd2VicGFja19yZXF1aXJlX18oMSksXG4gICAgT2JqID0gX3JlcXVpcmUzLk9iajsgLy8gVGhlc2UgYXJlIGFsbCB0aGUgc2FtZSBmb3Igbm93LCBidXQgc2hvdWxkbid0IGJlIHBhc3NlZCBzdHJhaWdodFxuLy8gdGhyb3VnaFxuXG5cbnZhciBjb21wYXJlT3BzID0ge1xuICAnPT0nOiAnPT0nLFxuICAnPT09JzogJz09PScsXG4gICchPSc6ICchPScsXG4gICchPT0nOiAnIT09JyxcbiAgJzwnOiAnPCcsXG4gICc+JzogJz4nLFxuICAnPD0nOiAnPD0nLFxuICAnPj0nOiAnPj0nXG59O1xuXG52YXIgQ29tcGlsZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9PYmopIHtcbiAgX2luaGVyaXRzTG9vc2UoQ29tcGlsZXIsIF9PYmopO1xuXG4gIGZ1bmN0aW9uIENvbXBpbGVyKCkge1xuICAgIHJldHVybiBfT2JqLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBDb21waWxlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmluaXQgPSBmdW5jdGlvbiBpbml0KHRlbXBsYXRlTmFtZSwgdGhyb3dPblVuZGVmaW5lZCkge1xuICAgIHRoaXMudGVtcGxhdGVOYW1lID0gdGVtcGxhdGVOYW1lO1xuICAgIHRoaXMuY29kZWJ1ZiA9IFtdO1xuICAgIHRoaXMubGFzdElkID0gMDtcbiAgICB0aGlzLmJ1ZmZlciA9IG51bGw7XG4gICAgdGhpcy5idWZmZXJTdGFjayA9IFtdO1xuICAgIHRoaXMuX3Njb3BlQ2xvc2VycyA9ICcnO1xuICAgIHRoaXMuaW5CbG9jayA9IGZhbHNlO1xuICAgIHRoaXMudGhyb3dPblVuZGVmaW5lZCA9IHRocm93T25VbmRlZmluZWQ7XG4gIH07XG5cbiAgX3Byb3RvLmZhaWwgPSBmdW5jdGlvbiBmYWlsKG1zZywgbGluZW5vLCBjb2xubykge1xuICAgIGlmIChsaW5lbm8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgbGluZW5vICs9IDE7XG4gICAgfVxuXG4gICAgaWYgKGNvbG5vICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbG5vICs9IDE7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IFRlbXBsYXRlRXJyb3IobXNnLCBsaW5lbm8sIGNvbG5vKTtcbiAgfTtcblxuICBfcHJvdG8uX3B1c2hCdWZmZXIgPSBmdW5jdGlvbiBfcHVzaEJ1ZmZlcigpIHtcbiAgICB2YXIgaWQgPSB0aGlzLl90bXBpZCgpO1xuXG4gICAgdGhpcy5idWZmZXJTdGFjay5wdXNoKHRoaXMuYnVmZmVyKTtcbiAgICB0aGlzLmJ1ZmZlciA9IGlkO1xuXG4gICAgdGhpcy5fZW1pdChcInZhciBcIiArIHRoaXMuYnVmZmVyICsgXCIgPSBcXFwiXFxcIjtcIik7XG5cbiAgICByZXR1cm4gaWQ7XG4gIH07XG5cbiAgX3Byb3RvLl9wb3BCdWZmZXIgPSBmdW5jdGlvbiBfcG9wQnVmZmVyKCkge1xuICAgIHRoaXMuYnVmZmVyID0gdGhpcy5idWZmZXJTdGFjay5wb3AoKTtcbiAgfTtcblxuICBfcHJvdG8uX2VtaXQgPSBmdW5jdGlvbiBfZW1pdChjb2RlKSB7XG4gICAgdGhpcy5jb2RlYnVmLnB1c2goY29kZSk7XG4gIH07XG5cbiAgX3Byb3RvLl9lbWl0TGluZSA9IGZ1bmN0aW9uIF9lbWl0TGluZShjb2RlKSB7XG4gICAgdGhpcy5fZW1pdChjb2RlICsgJ1xcbicpO1xuICB9O1xuXG4gIF9wcm90by5fZW1pdExpbmVzID0gZnVuY3Rpb24gX2VtaXRMaW5lcygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGxpbmVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgbGluZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgbGluZXMuZm9yRWFjaChmdW5jdGlvbiAobGluZSkge1xuICAgICAgcmV0dXJuIF90aGlzLl9lbWl0TGluZShsaW5lKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uX2VtaXRGdW5jQmVnaW4gPSBmdW5jdGlvbiBfZW1pdEZ1bmNCZWdpbihub2RlLCBuYW1lKSB7XG4gICAgdGhpcy5idWZmZXIgPSAnb3V0cHV0JztcbiAgICB0aGlzLl9zY29wZUNsb3NlcnMgPSAnJztcblxuICAgIHRoaXMuX2VtaXRMaW5lKFwiZnVuY3Rpb24gXCIgKyBuYW1lICsgXCIoZW52LCBjb250ZXh0LCBmcmFtZSwgcnVudGltZSwgY2IpIHtcIik7XG5cbiAgICB0aGlzLl9lbWl0TGluZShcInZhciBsaW5lbm8gPSBcIiArIG5vZGUubGluZW5vICsgXCI7XCIpO1xuXG4gICAgdGhpcy5fZW1pdExpbmUoXCJ2YXIgY29sbm8gPSBcIiArIG5vZGUuY29sbm8gKyBcIjtcIik7XG5cbiAgICB0aGlzLl9lbWl0TGluZShcInZhciBcIiArIHRoaXMuYnVmZmVyICsgXCIgPSBcXFwiXFxcIjtcIik7XG5cbiAgICB0aGlzLl9lbWl0TGluZSgndHJ5IHsnKTtcbiAgfTtcblxuICBfcHJvdG8uX2VtaXRGdW5jRW5kID0gZnVuY3Rpb24gX2VtaXRGdW5jRW5kKG5vUmV0dXJuKSB7XG4gICAgaWYgKCFub1JldHVybikge1xuICAgICAgdGhpcy5fZW1pdExpbmUoJ2NiKG51bGwsICcgKyB0aGlzLmJ1ZmZlciArICcpOycpO1xuICAgIH1cblxuICAgIHRoaXMuX2Nsb3NlU2NvcGVMZXZlbHMoKTtcblxuICAgIHRoaXMuX2VtaXRMaW5lKCd9IGNhdGNoIChlKSB7Jyk7XG5cbiAgICB0aGlzLl9lbWl0TGluZSgnICBjYihydW50aW1lLmhhbmRsZUVycm9yKGUsIGxpbmVubywgY29sbm8pKTsnKTtcblxuICAgIHRoaXMuX2VtaXRMaW5lKCd9Jyk7XG5cbiAgICB0aGlzLl9lbWl0TGluZSgnfScpO1xuXG4gICAgdGhpcy5idWZmZXIgPSBudWxsO1xuICB9O1xuXG4gIF9wcm90by5fYWRkU2NvcGVMZXZlbCA9IGZ1bmN0aW9uIF9hZGRTY29wZUxldmVsKCkge1xuICAgIHRoaXMuX3Njb3BlQ2xvc2VycyArPSAnfSknO1xuICB9O1xuXG4gIF9wcm90by5fY2xvc2VTY29wZUxldmVscyA9IGZ1bmN0aW9uIF9jbG9zZVNjb3BlTGV2ZWxzKCkge1xuICAgIHRoaXMuX2VtaXRMaW5lKHRoaXMuX3Njb3BlQ2xvc2VycyArICc7Jyk7XG5cbiAgICB0aGlzLl9zY29wZUNsb3NlcnMgPSAnJztcbiAgfTtcblxuICBfcHJvdG8uX3dpdGhTY29wZWRTeW50YXggPSBmdW5jdGlvbiBfd2l0aFNjb3BlZFN5bnRheChmdW5jKSB7XG4gICAgdmFyIF9zY29wZUNsb3NlcnMgPSB0aGlzLl9zY29wZUNsb3NlcnM7XG4gICAgdGhpcy5fc2NvcGVDbG9zZXJzID0gJyc7XG4gICAgZnVuYy5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5fY2xvc2VTY29wZUxldmVscygpO1xuXG4gICAgdGhpcy5fc2NvcGVDbG9zZXJzID0gX3Njb3BlQ2xvc2VycztcbiAgfTtcblxuICBfcHJvdG8uX21ha2VDYWxsYmFjayA9IGZ1bmN0aW9uIF9tYWtlQ2FsbGJhY2socmVzKSB7XG4gICAgdmFyIGVyciA9IHRoaXMuX3RtcGlkKCk7XG5cbiAgICByZXR1cm4gJ2Z1bmN0aW9uKCcgKyBlcnIgKyAocmVzID8gJywnICsgcmVzIDogJycpICsgJykge1xcbicgKyAnaWYoJyArIGVyciArICcpIHsgY2IoJyArIGVyciArICcpOyByZXR1cm47IH0nO1xuICB9O1xuXG4gIF9wcm90by5fdG1waWQgPSBmdW5jdGlvbiBfdG1waWQoKSB7XG4gICAgdGhpcy5sYXN0SWQrKztcbiAgICByZXR1cm4gJ3RfJyArIHRoaXMubGFzdElkO1xuICB9O1xuXG4gIF9wcm90by5fdGVtcGxhdGVOYW1lID0gZnVuY3Rpb24gX3RlbXBsYXRlTmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy50ZW1wbGF0ZU5hbWUgPT0gbnVsbCA/ICd1bmRlZmluZWQnIDogSlNPTi5zdHJpbmdpZnkodGhpcy50ZW1wbGF0ZU5hbWUpO1xuICB9O1xuXG4gIF9wcm90by5fY29tcGlsZUNoaWxkcmVuID0gZnVuY3Rpb24gX2NvbXBpbGVDaGlsZHJlbihub2RlLCBmcmFtZSkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgbm9kZS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgX3RoaXMyLmNvbXBpbGUoY2hpbGQsIGZyYW1lKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uX2NvbXBpbGVBZ2dyZWdhdGUgPSBmdW5jdGlvbiBfY29tcGlsZUFnZ3JlZ2F0ZShub2RlLCBmcmFtZSwgc3RhcnRDaGFyLCBlbmRDaGFyKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICBpZiAoc3RhcnRDaGFyKSB7XG4gICAgICB0aGlzLl9lbWl0KHN0YXJ0Q2hhcik7XG4gICAgfVxuXG4gICAgbm9kZS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCwgaSkge1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIF90aGlzMy5fZW1pdCgnLCcpO1xuICAgICAgfVxuXG4gICAgICBfdGhpczMuY29tcGlsZShjaGlsZCwgZnJhbWUpO1xuICAgIH0pO1xuXG4gICAgaWYgKGVuZENoYXIpIHtcbiAgICAgIHRoaXMuX2VtaXQoZW5kQ2hhcik7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fY29tcGlsZUV4cHJlc3Npb24gPSBmdW5jdGlvbiBfY29tcGlsZUV4cHJlc3Npb24obm9kZSwgZnJhbWUpIHtcbiAgICAvLyBUT0RPOiBJJ20gbm90IHJlYWxseSBzdXJlIGlmIHRoaXMgdHlwZSBjaGVjayBpcyB3b3J0aCBpdCBvclxuICAgIC8vIG5vdC5cbiAgICB0aGlzLmFzc2VydFR5cGUobm9kZSwgbm9kZXMuTGl0ZXJhbCwgbm9kZXMuU3ltYm9sLCBub2Rlcy5Hcm91cCwgbm9kZXMuQXJyYXksIG5vZGVzLkRpY3QsIG5vZGVzLkZ1bkNhbGwsIG5vZGVzLkNhbGxlciwgbm9kZXMuRmlsdGVyLCBub2Rlcy5Mb29rdXBWYWwsIG5vZGVzLkNvbXBhcmUsIG5vZGVzLklubGluZUlmLCBub2Rlcy5Jbiwgbm9kZXMuSXMsIG5vZGVzLkFuZCwgbm9kZXMuT3IsIG5vZGVzLk5vdCwgbm9kZXMuQWRkLCBub2Rlcy5Db25jYXQsIG5vZGVzLlN1Yiwgbm9kZXMuTXVsLCBub2Rlcy5EaXYsIG5vZGVzLkZsb29yRGl2LCBub2Rlcy5Nb2QsIG5vZGVzLlBvdywgbm9kZXMuTmVnLCBub2Rlcy5Qb3MsIG5vZGVzLkNvbXBhcmUsIG5vZGVzLk5vZGVMaXN0KTtcbiAgICB0aGlzLmNvbXBpbGUobm9kZSwgZnJhbWUpO1xuICB9O1xuXG4gIF9wcm90by5hc3NlcnRUeXBlID0gZnVuY3Rpb24gYXNzZXJ0VHlwZShub2RlKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCB0eXBlcyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICB0eXBlc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICBpZiAoIXR5cGVzLnNvbWUoZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiBub2RlIGluc3RhbmNlb2YgdDtcbiAgICB9KSkge1xuICAgICAgdGhpcy5mYWlsKFwiYXNzZXJ0VHlwZTogaW52YWxpZCB0eXBlOiBcIiArIG5vZGUudHlwZW5hbWUsIG5vZGUubGluZW5vLCBub2RlLmNvbG5vKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBpbGVDYWxsRXh0ZW5zaW9uID0gZnVuY3Rpb24gY29tcGlsZUNhbGxFeHRlbnNpb24obm9kZSwgZnJhbWUsIGFzeW5jKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICB2YXIgYXJncyA9IG5vZGUuYXJncztcbiAgICB2YXIgY29udGVudEFyZ3MgPSBub2RlLmNvbnRlbnRBcmdzO1xuICAgIHZhciBhdXRvZXNjYXBlID0gdHlwZW9mIG5vZGUuYXV0b2VzY2FwZSA9PT0gJ2Jvb2xlYW4nID8gbm9kZS5hdXRvZXNjYXBlIDogdHJ1ZTtcblxuICAgIGlmICghYXN5bmMpIHtcbiAgICAgIHRoaXMuX2VtaXQodGhpcy5idWZmZXIgKyBcIiArPSBydW50aW1lLnN1cHByZXNzVmFsdWUoXCIpO1xuICAgIH1cblxuICAgIHRoaXMuX2VtaXQoXCJlbnYuZ2V0RXh0ZW5zaW9uKFxcXCJcIiArIG5vZGUuZXh0TmFtZSArIFwiXFxcIilbXFxcIlwiICsgbm9kZS5wcm9wICsgXCJcXFwiXShcIik7XG5cbiAgICB0aGlzLl9lbWl0KCdjb250ZXh0Jyk7XG5cbiAgICBpZiAoYXJncyB8fCBjb250ZW50QXJncykge1xuICAgICAgdGhpcy5fZW1pdCgnLCcpO1xuICAgIH1cblxuICAgIGlmIChhcmdzKSB7XG4gICAgICBpZiAoIShhcmdzIGluc3RhbmNlb2Ygbm9kZXMuTm9kZUxpc3QpKSB7XG4gICAgICAgIHRoaXMuZmFpbCgnY29tcGlsZUNhbGxFeHRlbnNpb246IGFyZ3VtZW50cyBtdXN0IGJlIGEgTm9kZUxpc3QsICcgKyAndXNlIGBwYXJzZXIucGFyc2VTaWduYXR1cmVgJyk7XG4gICAgICB9XG5cbiAgICAgIGFyZ3MuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoYXJnLCBpKSB7XG4gICAgICAgIC8vIFRhZyBhcmd1bWVudHMgYXJlIHBhc3NlZCBub3JtYWxseSB0byB0aGUgY2FsbC4gTm90ZVxuICAgICAgICAvLyB0aGF0IGtleXdvcmQgYXJndW1lbnRzIGFyZSB0dXJuZWQgaW50byBhIHNpbmdsZSBqc1xuICAgICAgICAvLyBvYmplY3QgYXMgdGhlIGxhc3QgYXJndW1lbnQsIGlmIHRoZXkgZXhpc3QuXG4gICAgICAgIF90aGlzNC5fY29tcGlsZUV4cHJlc3Npb24oYXJnLCBmcmFtZSk7XG5cbiAgICAgICAgaWYgKGkgIT09IGFyZ3MuY2hpbGRyZW4ubGVuZ3RoIC0gMSB8fCBjb250ZW50QXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBfdGhpczQuX2VtaXQoJywnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRlbnRBcmdzLmxlbmd0aCkge1xuICAgICAgY29udGVudEFyZ3MuZm9yRWFjaChmdW5jdGlvbiAoYXJnLCBpKSB7XG4gICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgIF90aGlzNC5fZW1pdCgnLCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFyZykge1xuICAgICAgICAgIF90aGlzNC5fZW1pdExpbmUoJ2Z1bmN0aW9uKGNiKSB7Jyk7XG5cbiAgICAgICAgICBfdGhpczQuX2VtaXRMaW5lKCdpZighY2IpIHsgY2IgPSBmdW5jdGlvbihlcnIpIHsgaWYoZXJyKSB7IHRocm93IGVycjsgfX19Jyk7XG5cbiAgICAgICAgICB2YXIgaWQgPSBfdGhpczQuX3B1c2hCdWZmZXIoKTtcblxuICAgICAgICAgIF90aGlzNC5fd2l0aFNjb3BlZFN5bnRheChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczQuY29tcGlsZShhcmcsIGZyYW1lKTtcblxuICAgICAgICAgICAgX3RoaXM0Ll9lbWl0TGluZShcImNiKG51bGwsIFwiICsgaWQgKyBcIik7XCIpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgX3RoaXM0Ll9wb3BCdWZmZXIoKTtcblxuICAgICAgICAgIF90aGlzNC5fZW1pdExpbmUoXCJyZXR1cm4gXCIgKyBpZCArIFwiO1wiKTtcblxuICAgICAgICAgIF90aGlzNC5fZW1pdExpbmUoJ30nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpczQuX2VtaXQoJ251bGwnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGFzeW5jKSB7XG4gICAgICB2YXIgcmVzID0gdGhpcy5fdG1waWQoKTtcblxuICAgICAgdGhpcy5fZW1pdExpbmUoJywgJyArIHRoaXMuX21ha2VDYWxsYmFjayhyZXMpKTtcblxuICAgICAgdGhpcy5fZW1pdExpbmUodGhpcy5idWZmZXIgKyBcIiArPSBydW50aW1lLnN1cHByZXNzVmFsdWUoXCIgKyByZXMgKyBcIiwgXCIgKyBhdXRvZXNjYXBlICsgXCIgJiYgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XCIpO1xuXG4gICAgICB0aGlzLl9hZGRTY29wZUxldmVsKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2VtaXQoJyknKTtcblxuICAgICAgdGhpcy5fZW1pdChcIiwgXCIgKyBhdXRvZXNjYXBlICsgXCIgJiYgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XFxuXCIpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcGlsZUNhbGxFeHRlbnNpb25Bc3luYyA9IGZ1bmN0aW9uIGNvbXBpbGVDYWxsRXh0ZW5zaW9uQXN5bmMobm9kZSwgZnJhbWUpIHtcbiAgICB0aGlzLmNvbXBpbGVDYWxsRXh0ZW5zaW9uKG5vZGUsIGZyYW1lLCB0cnVlKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcGlsZU5vZGVMaXN0ID0gZnVuY3Rpb24gY29tcGlsZU5vZGVMaXN0KG5vZGUsIGZyYW1lKSB7XG4gICAgdGhpcy5fY29tcGlsZUNoaWxkcmVuKG5vZGUsIGZyYW1lKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcGlsZUxpdGVyYWwgPSBmdW5jdGlvbiBjb21waWxlTGl0ZXJhbChub2RlKSB7XG4gICAgaWYgKHR5cGVvZiBub2RlLnZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHZhbCA9IG5vZGUudmFsdWUucmVwbGFjZSgvXFxcXC9nLCAnXFxcXFxcXFwnKTtcbiAgICAgIHZhbCA9IHZhbC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJyk7XG4gICAgICB2YWwgPSB2YWwucmVwbGFjZSgvXFxuL2csICdcXFxcbicpO1xuICAgICAgdmFsID0gdmFsLnJlcGxhY2UoL1xcci9nLCAnXFxcXHInKTtcbiAgICAgIHZhbCA9IHZhbC5yZXBsYWNlKC9cXHQvZywgJ1xcXFx0Jyk7XG4gICAgICB2YWwgPSB2YWwucmVwbGFjZSgvXFx1MjAyOC9nLCBcIlxcXFx1MjAyOFwiKTtcblxuICAgICAgdGhpcy5fZW1pdChcIlxcXCJcIiArIHZhbCArIFwiXFxcIlwiKTtcbiAgICB9IGVsc2UgaWYgKG5vZGUudmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuX2VtaXQoJ251bGwnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZW1pdChub2RlLnZhbHVlLnRvU3RyaW5nKCkpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcGlsZVN5bWJvbCA9IGZ1bmN0aW9uIGNvbXBpbGVTeW1ib2wobm9kZSwgZnJhbWUpIHtcbiAgICB2YXIgbmFtZSA9IG5vZGUudmFsdWU7XG4gICAgdmFyIHYgPSBmcmFtZS5sb29rdXAobmFtZSk7XG5cbiAgICBpZiAodikge1xuICAgICAgdGhpcy5fZW1pdCh2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZW1pdCgncnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cCgnICsgJ2NvbnRleHQsIGZyYW1lLCBcIicgKyBuYW1lICsgJ1wiKScpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcGlsZUdyb3VwID0gZnVuY3Rpb24gY29tcGlsZUdyb3VwKG5vZGUsIGZyYW1lKSB7XG4gICAgdGhpcy5fY29tcGlsZUFnZ3JlZ2F0ZShub2RlLCBmcmFtZSwgJygnLCAnKScpO1xuICB9O1xuXG4gIF9wcm90by5jb21waWxlQXJyYXkgPSBmdW5jdGlvbiBjb21waWxlQXJyYXkobm9kZSwgZnJhbWUpIHtcbiAgICB0aGlzLl9jb21waWxlQWdncmVnYXRlKG5vZGUsIGZyYW1lLCAnWycsICddJyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBpbGVEaWN0ID0gZnVuY3Rpb24gY29tcGlsZURpY3Qobm9kZSwgZnJhbWUpIHtcbiAgICB0aGlzLl9jb21waWxlQWdncmVnYXRlKG5vZGUsIGZyYW1lLCAneycsICd9Jyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBpbGVQYWlyID0gZnVuY3Rpb24gY29tcGlsZVBhaXIobm9kZSwgZnJhbWUpIHtcbiAgICB2YXIga2V5ID0gbm9kZS5rZXk7XG4gICAgdmFyIHZhbCA9IG5vZGUudmFsdWU7XG5cbiAgICBpZiAoa2V5IGluc3RhbmNlb2Ygbm9kZXMuU3ltYm9sKSB7XG4gICAgICBrZXkgPSBuZXcgbm9kZXMuTGl0ZXJhbChrZXkubGluZW5vLCBrZXkuY29sbm8sIGtleS52YWx1ZSk7XG4gICAgfSBlbHNlIGlmICghKGtleSBpbnN0YW5jZW9mIG5vZGVzLkxpdGVyYWwgJiYgdHlwZW9mIGtleS52YWx1ZSA9PT0gJ3N0cmluZycpKSB7XG4gICAgICB0aGlzLmZhaWwoJ2NvbXBpbGVQYWlyOiBEaWN0IGtleXMgbXVzdCBiZSBzdHJpbmdzIG9yIG5hbWVzJywga2V5LmxpbmVubywga2V5LmNvbG5vKTtcbiAgICB9XG5cbiAgICB0aGlzLmNvbXBpbGUoa2V5LCBmcmFtZSk7XG5cbiAgICB0aGlzLl9lbWl0KCc6ICcpO1xuXG4gICAgdGhpcy5fY29tcGlsZUV4cHJlc3Npb24odmFsLCBmcmFtZSk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBpbGVJbmxpbmVJZiA9IGZ1bmN0aW9uIGNvbXBpbGVJbmxpbmVJZihub2RlLCBmcmFtZSkge1xuICAgIHRoaXMuX2VtaXQoJygnKTtcblxuICAgIHRoaXMuY29tcGlsZShub2RlLmNvbmQsIGZyYW1lKTtcblxuICAgIHRoaXMuX2VtaXQoJz8nKTtcblxuICAgIHRoaXMuY29tcGlsZShub2RlLmJvZHksIGZyYW1lKTtcblxuICAgIHRoaXMuX2VtaXQoJzonKTtcblxuICAgIGlmIChub2RlLmVsc2VfICE9PSBudWxsKSB7XG4gICAgICB0aGlzLmNvbXBpbGUobm9kZS5lbHNlXywgZnJhbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9lbWl0KCdcIlwiJyk7XG4gICAgfVxuXG4gICAgdGhpcy5fZW1pdCgnKScpO1xuICB9O1xuXG4gIF9wcm90by5jb21waWxlSW4gPSBmdW5jdGlvbiBjb21waWxlSW4obm9kZSwgZnJhbWUpIHtcbiAgICB0aGlzLl9lbWl0KCdydW50aW1lLmluT3BlcmF0b3IoJyk7XG5cbiAgICB0aGlzLmNvbXBpbGUobm9kZS5sZWZ0LCBmcmFtZSk7XG5cbiAgICB0aGlzLl9lbWl0KCcsJyk7XG5cbiAgICB0aGlzLmNvbXBpbGUobm9kZS5yaWdodCwgZnJhbWUpO1xuXG4gICAgdGhpcy5fZW1pdCgnKScpO1xuICB9O1xuXG4gIF9wcm90by5jb21waWxlSXMgPSBmdW5jdGlvbiBjb21waWxlSXMobm9kZSwgZnJhbWUpIHtcbiAgICAvLyBmaXJzdCwgd2UgbmVlZCB0byB0cnkgdG8gZ2V0IHRoZSBuYW1lIG9mIHRoZSB0ZXN0IGZ1bmN0aW9uLCBpZiBpdCdzIGFcbiAgICAvLyBjYWxsYWJsZSAoaS5lLiwgaGFzIGFyZ3MpIGFuZCBub3QgYSBzeW1ib2wuXG4gICAgdmFyIHJpZ2h0ID0gbm9kZS5yaWdodC5uYW1lID8gbm9kZS5yaWdodC5uYW1lLnZhbHVlIC8vIG90aGVyd2lzZSBnbyB3aXRoIHRoZSBzeW1ib2wgdmFsdWVcbiAgICA6IG5vZGUucmlnaHQudmFsdWU7XG5cbiAgICB0aGlzLl9lbWl0KCdlbnYuZ2V0VGVzdChcIicgKyByaWdodCArICdcIikuY2FsbChjb250ZXh0LCAnKTtcblxuICAgIHRoaXMuY29tcGlsZShub2RlLmxlZnQsIGZyYW1lKTsgLy8gY29tcGlsZSB0aGUgYXJndW1lbnRzIGZvciB0aGUgY2FsbGFibGUgaWYgdGhleSBleGlzdFxuXG4gICAgaWYgKG5vZGUucmlnaHQuYXJncykge1xuICAgICAgdGhpcy5fZW1pdCgnLCcpO1xuXG4gICAgICB0aGlzLmNvbXBpbGUobm9kZS5yaWdodC5hcmdzLCBmcmFtZSk7XG4gICAgfVxuXG4gICAgdGhpcy5fZW1pdCgnKSA9PT0gdHJ1ZScpO1xuICB9O1xuXG4gIF9wcm90by5fYmluT3BFbWl0dGVyID0gZnVuY3Rpb24gX2Jpbk9wRW1pdHRlcihub2RlLCBmcmFtZSwgc3RyKSB7XG4gICAgdGhpcy5jb21waWxlKG5vZGUubGVmdCwgZnJhbWUpO1xuXG4gICAgdGhpcy5fZW1pdChzdHIpO1xuXG4gICAgdGhpcy5jb21waWxlKG5vZGUucmlnaHQsIGZyYW1lKTtcbiAgfSAvLyBlbnN1cmUgY29uY2F0ZW5hdGlvbiBpbnN0ZWFkIG9mIGFkZGl0aW9uXG4gIC8vIGJ5IGFkZGluZyBlbXB0eSBzdHJpbmcgaW4gYmV0d2VlblxuICA7XG5cbiAgX3Byb3RvLmNvbXBpbGVPciA9IGZ1bmN0aW9uIGNvbXBpbGVPcihub2RlLCBmcmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9iaW5PcEVtaXR0ZXIobm9kZSwgZnJhbWUsICcgfHwgJyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBpbGVBbmQgPSBmdW5jdGlvbiBjb21waWxlQW5kKG5vZGUsIGZyYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Jpbk9wRW1pdHRlcihub2RlLCBmcmFtZSwgJyAmJiAnKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcGlsZUFkZCA9IGZ1bmN0aW9uIGNvbXBpbGVBZGQobm9kZSwgZnJhbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fYmluT3BFbWl0dGVyKG5vZGUsIGZyYW1lLCAnICsgJyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBpbGVDb25jYXQgPSBmdW5jdGlvbiBjb21waWxlQ29uY2F0KG5vZGUsIGZyYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Jpbk9wRW1pdHRlcihub2RlLCBmcmFtZSwgJyArIFwiXCIgKyAnKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcGlsZVN1YiA9IGZ1bmN0aW9uIGNvbXBpbGVTdWIobm9kZSwgZnJhbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fYmluT3BFbWl0dGVyKG5vZGUsIGZyYW1lLCAnIC0gJyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBpbGVNdWwgPSBmdW5jdGlvbiBjb21waWxlTXVsKG5vZGUsIGZyYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Jpbk9wRW1pdHRlcihub2RlLCBmcmFtZSwgJyAqICcpO1xuICB9O1xuXG4gIF9wcm90by5jb21waWxlRGl2ID0gZnVuY3Rpb24gY29tcGlsZURpdihub2RlLCBmcmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9iaW5PcEVtaXR0ZXIobm9kZSwgZnJhbWUsICcgLyAnKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcGlsZU1vZCA9IGZ1bmN0aW9uIGNvbXBpbGVNb2Qobm9kZSwgZnJhbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fYmluT3BFbWl0dGVyKG5vZGUsIGZyYW1lLCAnICUgJyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBpbGVOb3QgPSBmdW5jdGlvbiBjb21waWxlTm90KG5vZGUsIGZyYW1lKSB7XG4gICAgdGhpcy5fZW1pdCgnIScpO1xuXG4gICAgdGhpcy5jb21waWxlKG5vZGUudGFyZ2V0LCBmcmFtZSk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBpbGVGbG9vckRpdiA9IGZ1bmN0aW9uIGNvbXBpbGVGbG9vckRpdihub2RlLCBmcmFtZSkge1xuICAgIHRoaXMuX2VtaXQoJ01hdGguZmxvb3IoJyk7XG5cbiAgICB0aGlzLmNvbXBpbGUobm9kZS5sZWZ0LCBmcmFtZSk7XG5cbiAgICB0aGlzLl9lbWl0KCcgLyAnKTtcblxuICAgIHRoaXMuY29tcGlsZShub2RlLnJpZ2h0LCBmcmFtZSk7XG5cbiAgICB0aGlzLl9lbWl0KCcpJyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBpbGVQb3cgPSBmdW5jdGlvbiBjb21waWxlUG93KG5vZGUsIGZyYW1lKSB7XG4gICAgdGhpcy5fZW1pdCgnTWF0aC5wb3coJyk7XG5cbiAgICB0aGlzLmNvbXBpbGUobm9kZS5sZWZ0LCBmcmFtZSk7XG5cbiAgICB0aGlzLl9lbWl0KCcsICcpO1xuXG4gICAgdGhpcy5jb21waWxlKG5vZGUucmlnaHQsIGZyYW1lKTtcblxuICAgIHRoaXMuX2VtaXQoJyknKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcGlsZU5lZyA9IGZ1bmN0aW9uIGNvbXBpbGVOZWcobm9kZSwgZnJhbWUpIHtcbiAgICB0aGlzLl9lbWl0KCctJyk7XG5cbiAgICB0aGlzLmNvbXBpbGUobm9kZS50YXJnZXQsIGZyYW1lKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcGlsZVBvcyA9IGZ1bmN0aW9uIGNvbXBpbGVQb3Mobm9kZSwgZnJhbWUpIHtcbiAgICB0aGlzLl9lbWl0KCcrJyk7XG5cbiAgICB0aGlzLmNvbXBpbGUobm9kZS50YXJnZXQsIGZyYW1lKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcGlsZUNvbXBhcmUgPSBmdW5jdGlvbiBjb21waWxlQ29tcGFyZShub2RlLCBmcmFtZSkge1xuICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgdGhpcy5jb21waWxlKG5vZGUuZXhwciwgZnJhbWUpO1xuICAgIG5vZGUub3BzLmZvckVhY2goZnVuY3Rpb24gKG9wKSB7XG4gICAgICBfdGhpczUuX2VtaXQoXCIgXCIgKyBjb21wYXJlT3BzW29wLnR5cGVdICsgXCIgXCIpO1xuXG4gICAgICBfdGhpczUuY29tcGlsZShvcC5leHByLCBmcmFtZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBpbGVMb29rdXBWYWwgPSBmdW5jdGlvbiBjb21waWxlTG9va3VwVmFsKG5vZGUsIGZyYW1lKSB7XG4gICAgdGhpcy5fZW1pdCgncnVudGltZS5tZW1iZXJMb29rdXAoKCcpO1xuXG4gICAgdGhpcy5fY29tcGlsZUV4cHJlc3Npb24obm9kZS50YXJnZXQsIGZyYW1lKTtcblxuICAgIHRoaXMuX2VtaXQoJyksJyk7XG5cbiAgICB0aGlzLl9jb21waWxlRXhwcmVzc2lvbihub2RlLnZhbCwgZnJhbWUpO1xuXG4gICAgdGhpcy5fZW1pdCgnKScpO1xuICB9O1xuXG4gIF9wcm90by5fZ2V0Tm9kZU5hbWUgPSBmdW5jdGlvbiBfZ2V0Tm9kZU5hbWUobm9kZSkge1xuICAgIHN3aXRjaCAobm9kZS50eXBlbmFtZSkge1xuICAgICAgY2FzZSAnU3ltYm9sJzpcbiAgICAgICAgcmV0dXJuIG5vZGUudmFsdWU7XG5cbiAgICAgIGNhc2UgJ0Z1bkNhbGwnOlxuICAgICAgICByZXR1cm4gJ3RoZSByZXR1cm4gdmFsdWUgb2YgKCcgKyB0aGlzLl9nZXROb2RlTmFtZShub2RlLm5hbWUpICsgJyknO1xuXG4gICAgICBjYXNlICdMb29rdXBWYWwnOlxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Tm9kZU5hbWUobm9kZS50YXJnZXQpICsgJ1tcIicgKyB0aGlzLl9nZXROb2RlTmFtZShub2RlLnZhbCkgKyAnXCJdJztcblxuICAgICAgY2FzZSAnTGl0ZXJhbCc6XG4gICAgICAgIHJldHVybiBub2RlLnZhbHVlLnRvU3RyaW5nKCk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnLS1leHByZXNzaW9uLS0nO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcGlsZUZ1bkNhbGwgPSBmdW5jdGlvbiBjb21waWxlRnVuQ2FsbChub2RlLCBmcmFtZSkge1xuICAgIC8vIEtlZXAgdHJhY2sgb2YgbGluZS9jb2wgaW5mbyBhdCBydW50aW1lIGJ5IHNldHRpbmdzXG4gICAgLy8gdmFyaWFibGVzIHdpdGhpbiBhbiBleHByZXNzaW9uLiBBbiBleHByZXNzaW9uIGluIGphdmFzY3JpcHRcbiAgICAvLyBsaWtlICh4LCB5LCB6KSByZXR1cm5zIHRoZSBsYXN0IHZhbHVlLCBhbmQgeCBhbmQgeSBjYW4gYmVcbiAgICAvLyBhbnl0aGluZ1xuICAgIHRoaXMuX2VtaXQoJyhsaW5lbm8gPSAnICsgbm9kZS5saW5lbm8gKyAnLCBjb2xubyA9ICcgKyBub2RlLmNvbG5vICsgJywgJyk7XG5cbiAgICB0aGlzLl9lbWl0KCdydW50aW1lLmNhbGxXcmFwKCcpOyAvLyBDb21waWxlIGl0IGFzIG5vcm1hbC5cblxuXG4gICAgdGhpcy5fY29tcGlsZUV4cHJlc3Npb24obm9kZS5uYW1lLCBmcmFtZSk7IC8vIE91dHB1dCB0aGUgbmFtZSBvZiB3aGF0IHdlJ3JlIGNhbGxpbmcgc28gd2UgY2FuIGdldCBmcmllbmRseSBlcnJvcnNcbiAgICAvLyBpZiB0aGUgbG9va3VwIGZhaWxzLlxuXG5cbiAgICB0aGlzLl9lbWl0KCcsIFwiJyArIHRoaXMuX2dldE5vZGVOYW1lKG5vZGUubmFtZSkucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpICsgJ1wiLCBjb250ZXh0LCAnKTtcblxuICAgIHRoaXMuX2NvbXBpbGVBZ2dyZWdhdGUobm9kZS5hcmdzLCBmcmFtZSwgJ1snLCAnXSknKTtcblxuICAgIHRoaXMuX2VtaXQoJyknKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcGlsZUZpbHRlciA9IGZ1bmN0aW9uIGNvbXBpbGVGaWx0ZXIobm9kZSwgZnJhbWUpIHtcbiAgICB2YXIgbmFtZSA9IG5vZGUubmFtZTtcbiAgICB0aGlzLmFzc2VydFR5cGUobmFtZSwgbm9kZXMuU3ltYm9sKTtcblxuICAgIHRoaXMuX2VtaXQoJ2Vudi5nZXRGaWx0ZXIoXCInICsgbmFtZS52YWx1ZSArICdcIikuY2FsbChjb250ZXh0LCAnKTtcblxuICAgIHRoaXMuX2NvbXBpbGVBZ2dyZWdhdGUobm9kZS5hcmdzLCBmcmFtZSk7XG5cbiAgICB0aGlzLl9lbWl0KCcpJyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBpbGVGaWx0ZXJBc3luYyA9IGZ1bmN0aW9uIGNvbXBpbGVGaWx0ZXJBc3luYyhub2RlLCBmcmFtZSkge1xuICAgIHZhciBuYW1lID0gbm9kZS5uYW1lO1xuICAgIHZhciBzeW1ib2wgPSBub2RlLnN5bWJvbC52YWx1ZTtcbiAgICB0aGlzLmFzc2VydFR5cGUobmFtZSwgbm9kZXMuU3ltYm9sKTtcbiAgICBmcmFtZS5zZXQoc3ltYm9sLCBzeW1ib2wpO1xuXG4gICAgdGhpcy5fZW1pdCgnZW52LmdldEZpbHRlcihcIicgKyBuYW1lLnZhbHVlICsgJ1wiKS5jYWxsKGNvbnRleHQsICcpO1xuXG4gICAgdGhpcy5fY29tcGlsZUFnZ3JlZ2F0ZShub2RlLmFyZ3MsIGZyYW1lKTtcblxuICAgIHRoaXMuX2VtaXRMaW5lKCcsICcgKyB0aGlzLl9tYWtlQ2FsbGJhY2soc3ltYm9sKSk7XG5cbiAgICB0aGlzLl9hZGRTY29wZUxldmVsKCk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBpbGVLZXl3b3JkQXJncyA9IGZ1bmN0aW9uIGNvbXBpbGVLZXl3b3JkQXJncyhub2RlLCBmcmFtZSkge1xuICAgIHRoaXMuX2VtaXQoJ3J1bnRpbWUubWFrZUtleXdvcmRBcmdzKCcpO1xuXG4gICAgdGhpcy5jb21waWxlRGljdChub2RlLCBmcmFtZSk7XG5cbiAgICB0aGlzLl9lbWl0KCcpJyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBpbGVTZXQgPSBmdW5jdGlvbiBjb21waWxlU2V0KG5vZGUsIGZyYW1lKSB7XG4gICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICB2YXIgaWRzID0gW107IC8vIExvb2t1cCB0aGUgdmFyaWFibGUgbmFtZXMgZm9yIGVhY2ggaWRlbnRpZmllciBhbmQgY3JlYXRlXG4gICAgLy8gbmV3IG9uZXMgaWYgbmVjZXNzYXJ5XG5cbiAgICBub2RlLnRhcmdldHMuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICB2YXIgbmFtZSA9IHRhcmdldC52YWx1ZTtcbiAgICAgIHZhciBpZCA9IGZyYW1lLmxvb2t1cChuYW1lKTtcblxuICAgICAgaWYgKGlkID09PSBudWxsIHx8IGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWQgPSBfdGhpczYuX3RtcGlkKCk7IC8vIE5vdGU6IFRoaXMgcmVsaWVzIG9uIGpzIGFsbG93aW5nIHNjb3BlIGFjcm9zc1xuICAgICAgICAvLyBibG9ja3MsIGluIGNhc2UgdGhpcyBpcyBjcmVhdGVkIGluc2lkZSBhbiBgaWZgXG5cbiAgICAgICAgX3RoaXM2Ll9lbWl0TGluZSgndmFyICcgKyBpZCArICc7Jyk7XG4gICAgICB9XG5cbiAgICAgIGlkcy5wdXNoKGlkKTtcbiAgICB9KTtcblxuICAgIGlmIChub2RlLnZhbHVlKSB7XG4gICAgICB0aGlzLl9lbWl0KGlkcy5qb2luKCcgPSAnKSArICcgPSAnKTtcblxuICAgICAgdGhpcy5fY29tcGlsZUV4cHJlc3Npb24obm9kZS52YWx1ZSwgZnJhbWUpO1xuXG4gICAgICB0aGlzLl9lbWl0TGluZSgnOycpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9lbWl0KGlkcy5qb2luKCcgPSAnKSArICcgPSAnKTtcblxuICAgICAgdGhpcy5jb21waWxlKG5vZGUuYm9keSwgZnJhbWUpO1xuXG4gICAgICB0aGlzLl9lbWl0TGluZSgnOycpO1xuICAgIH1cblxuICAgIG5vZGUudGFyZ2V0cy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQsIGkpIHtcbiAgICAgIHZhciBpZCA9IGlkc1tpXTtcbiAgICAgIHZhciBuYW1lID0gdGFyZ2V0LnZhbHVlOyAvLyBXZSBhcmUgcnVubmluZyB0aGlzIGZvciBldmVyeSB2YXIsIGJ1dCBpdCdzIHZlcnlcbiAgICAgIC8vIHVuY29tbW9uIHRvIGFzc2lnbiB0byBtdWx0aXBsZSB2YXJzIGFueXdheVxuXG4gICAgICBfdGhpczYuX2VtaXRMaW5lKFwiZnJhbWUuc2V0KFxcXCJcIiArIG5hbWUgKyBcIlxcXCIsIFwiICsgaWQgKyBcIiwgdHJ1ZSk7XCIpO1xuXG4gICAgICBfdGhpczYuX2VtaXRMaW5lKCdpZihmcmFtZS50b3BMZXZlbCkgeycpO1xuXG4gICAgICBfdGhpczYuX2VtaXRMaW5lKFwiY29udGV4dC5zZXRWYXJpYWJsZShcXFwiXCIgKyBuYW1lICsgXCJcXFwiLCBcIiArIGlkICsgXCIpO1wiKTtcblxuICAgICAgX3RoaXM2Ll9lbWl0TGluZSgnfScpO1xuXG4gICAgICBpZiAobmFtZS5jaGFyQXQoMCkgIT09ICdfJykge1xuICAgICAgICBfdGhpczYuX2VtaXRMaW5lKCdpZihmcmFtZS50b3BMZXZlbCkgeycpO1xuXG4gICAgICAgIF90aGlzNi5fZW1pdExpbmUoXCJjb250ZXh0LmFkZEV4cG9ydChcXFwiXCIgKyBuYW1lICsgXCJcXFwiLCBcIiArIGlkICsgXCIpO1wiKTtcblxuICAgICAgICBfdGhpczYuX2VtaXRMaW5lKCd9Jyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBpbGVTd2l0Y2ggPSBmdW5jdGlvbiBjb21waWxlU3dpdGNoKG5vZGUsIGZyYW1lKSB7XG4gICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICB0aGlzLl9lbWl0KCdzd2l0Y2ggKCcpO1xuXG4gICAgdGhpcy5jb21waWxlKG5vZGUuZXhwciwgZnJhbWUpO1xuXG4gICAgdGhpcy5fZW1pdCgnKSB7Jyk7XG5cbiAgICBub2RlLmNhc2VzLmZvckVhY2goZnVuY3Rpb24gKGMsIGkpIHtcbiAgICAgIF90aGlzNy5fZW1pdCgnY2FzZSAnKTtcblxuICAgICAgX3RoaXM3LmNvbXBpbGUoYy5jb25kLCBmcmFtZSk7XG5cbiAgICAgIF90aGlzNy5fZW1pdCgnOiAnKTtcblxuICAgICAgX3RoaXM3LmNvbXBpbGUoYy5ib2R5LCBmcmFtZSk7IC8vIHByZXNlcnZlIGZhbGwtdGhyb3VnaHNcblxuXG4gICAgICBpZiAoYy5ib2R5LmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICBfdGhpczcuX2VtaXRMaW5lKCdicmVhazsnKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChub2RlLmRlZmF1bHQpIHtcbiAgICAgIHRoaXMuX2VtaXQoJ2RlZmF1bHQ6Jyk7XG5cbiAgICAgIHRoaXMuY29tcGlsZShub2RlLmRlZmF1bHQsIGZyYW1lKTtcbiAgICB9XG5cbiAgICB0aGlzLl9lbWl0KCd9Jyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBpbGVJZiA9IGZ1bmN0aW9uIGNvbXBpbGVJZihub2RlLCBmcmFtZSwgYXN5bmMpIHtcbiAgICB2YXIgX3RoaXM4ID0gdGhpcztcblxuICAgIHRoaXMuX2VtaXQoJ2lmKCcpO1xuXG4gICAgdGhpcy5fY29tcGlsZUV4cHJlc3Npb24obm9kZS5jb25kLCBmcmFtZSk7XG5cbiAgICB0aGlzLl9lbWl0TGluZSgnKSB7Jyk7XG5cbiAgICB0aGlzLl93aXRoU2NvcGVkU3ludGF4KGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzOC5jb21waWxlKG5vZGUuYm9keSwgZnJhbWUpO1xuXG4gICAgICBpZiAoYXN5bmMpIHtcbiAgICAgICAgX3RoaXM4Ll9lbWl0KCdjYigpJyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAobm9kZS5lbHNlXykge1xuICAgICAgdGhpcy5fZW1pdExpbmUoJ31cXG5lbHNlIHsnKTtcblxuICAgICAgdGhpcy5fd2l0aFNjb3BlZFN5bnRheChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzOC5jb21waWxlKG5vZGUuZWxzZV8sIGZyYW1lKTtcblxuICAgICAgICBpZiAoYXN5bmMpIHtcbiAgICAgICAgICBfdGhpczguX2VtaXQoJ2NiKCknKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChhc3luYykge1xuICAgICAgdGhpcy5fZW1pdExpbmUoJ31cXG5lbHNlIHsnKTtcblxuICAgICAgdGhpcy5fZW1pdCgnY2IoKScpO1xuICAgIH1cblxuICAgIHRoaXMuX2VtaXRMaW5lKCd9Jyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBpbGVJZkFzeW5jID0gZnVuY3Rpb24gY29tcGlsZUlmQXN5bmMobm9kZSwgZnJhbWUpIHtcbiAgICB0aGlzLl9lbWl0KCcoZnVuY3Rpb24oY2IpIHsnKTtcblxuICAgIHRoaXMuY29tcGlsZUlmKG5vZGUsIGZyYW1lLCB0cnVlKTtcblxuICAgIHRoaXMuX2VtaXQoJ30pKCcgKyB0aGlzLl9tYWtlQ2FsbGJhY2soKSk7XG5cbiAgICB0aGlzLl9hZGRTY29wZUxldmVsKCk7XG4gIH07XG5cbiAgX3Byb3RvLl9lbWl0TG9vcEJpbmRpbmdzID0gZnVuY3Rpb24gX2VtaXRMb29wQmluZGluZ3Mobm9kZSwgYXJyLCBpLCBsZW4pIHtcbiAgICB2YXIgX3RoaXM5ID0gdGhpcztcblxuICAgIHZhciBiaW5kaW5ncyA9IFt7XG4gICAgICBuYW1lOiAnaW5kZXgnLFxuICAgICAgdmFsOiBpICsgXCIgKyAxXCJcbiAgICB9LCB7XG4gICAgICBuYW1lOiAnaW5kZXgwJyxcbiAgICAgIHZhbDogaVxuICAgIH0sIHtcbiAgICAgIG5hbWU6ICdyZXZpbmRleCcsXG4gICAgICB2YWw6IGxlbiArIFwiIC0gXCIgKyBpXG4gICAgfSwge1xuICAgICAgbmFtZTogJ3JldmluZGV4MCcsXG4gICAgICB2YWw6IGxlbiArIFwiIC0gXCIgKyBpICsgXCIgLSAxXCJcbiAgICB9LCB7XG4gICAgICBuYW1lOiAnZmlyc3QnLFxuICAgICAgdmFsOiBpICsgXCIgPT09IDBcIlxuICAgIH0sIHtcbiAgICAgIG5hbWU6ICdsYXN0JyxcbiAgICAgIHZhbDogaSArIFwiID09PSBcIiArIGxlbiArIFwiIC0gMVwiXG4gICAgfSwge1xuICAgICAgbmFtZTogJ2xlbmd0aCcsXG4gICAgICB2YWw6IGxlblxuICAgIH1dO1xuICAgIGJpbmRpbmdzLmZvckVhY2goZnVuY3Rpb24gKGIpIHtcbiAgICAgIF90aGlzOS5fZW1pdExpbmUoXCJmcmFtZS5zZXQoXFxcImxvb3AuXCIgKyBiLm5hbWUgKyBcIlxcXCIsIFwiICsgYi52YWwgKyBcIik7XCIpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jb21waWxlRm9yID0gZnVuY3Rpb24gY29tcGlsZUZvcihub2RlLCBmcmFtZSkge1xuICAgIHZhciBfdGhpczEwID0gdGhpcztcblxuICAgIC8vIFNvbWUgb2YgdGhpcyBjb2RlIGlzIHVnbHksIGJ1dCBpdCBrZWVwcyB0aGUgZ2VuZXJhdGVkIGNvZGVcbiAgICAvLyBhcyBmYXN0IGFzIHBvc3NpYmxlLiBGb3JBc3luYyBhbHNvIHNoYXJlcyBzb21lIG9mIHRoaXMsIGJ1dFxuICAgIC8vIG5vdCBtdWNoLlxuICAgIHZhciBpID0gdGhpcy5fdG1waWQoKTtcblxuICAgIHZhciBsZW4gPSB0aGlzLl90bXBpZCgpO1xuXG4gICAgdmFyIGFyciA9IHRoaXMuX3RtcGlkKCk7XG5cbiAgICBmcmFtZSA9IGZyYW1lLnB1c2goKTtcblxuICAgIHRoaXMuX2VtaXRMaW5lKCdmcmFtZSA9IGZyYW1lLnB1c2goKTsnKTtcblxuICAgIHRoaXMuX2VtaXQoXCJ2YXIgXCIgKyBhcnIgKyBcIiA9IFwiKTtcblxuICAgIHRoaXMuX2NvbXBpbGVFeHByZXNzaW9uKG5vZGUuYXJyLCBmcmFtZSk7XG5cbiAgICB0aGlzLl9lbWl0TGluZSgnOycpO1xuXG4gICAgdGhpcy5fZW1pdChcImlmKFwiICsgYXJyICsgXCIpIHtcIik7XG5cbiAgICB0aGlzLl9lbWl0TGluZShhcnIgKyAnID0gcnVudGltZS5mcm9tSXRlcmF0b3IoJyArIGFyciArICcpOycpOyAvLyBJZiBtdWx0aXBsZSBuYW1lcyBhcmUgcGFzc2VkLCB3ZSBuZWVkIHRvIGJpbmQgdGhlbVxuICAgIC8vIGFwcHJvcHJpYXRlbHlcblxuXG4gICAgaWYgKG5vZGUubmFtZSBpbnN0YW5jZW9mIG5vZGVzLkFycmF5KSB7XG4gICAgICB0aGlzLl9lbWl0TGluZShcInZhciBcIiArIGkgKyBcIjtcIik7IC8vIFRoZSBvYmplY3QgY291bGQgYmUgYW4gYXJyb3kgb3Igb2JqZWN0LiBOb3RlIHRoYXQgdGhlXG4gICAgICAvLyBib2R5IG9mIHRoZSBsb29wIGlzIGR1cGxpY2F0ZWQgZm9yIGVhY2ggY29uZGl0aW9uLCBidXRcbiAgICAgIC8vIHdlIGFyZSBvcHRpbWl6aW5nIGZvciBzcGVlZCBvdmVyIHNpemUuXG5cblxuICAgICAgdGhpcy5fZW1pdExpbmUoXCJpZihydW50aW1lLmlzQXJyYXkoXCIgKyBhcnIgKyBcIikpIHtcIik7XG5cbiAgICAgIHRoaXMuX2VtaXRMaW5lKFwidmFyIFwiICsgbGVuICsgXCIgPSBcIiArIGFyciArIFwiLmxlbmd0aDtcIik7XG5cbiAgICAgIHRoaXMuX2VtaXRMaW5lKFwiZm9yKFwiICsgaSArIFwiPTA7IFwiICsgaSArIFwiIDwgXCIgKyBhcnIgKyBcIi5sZW5ndGg7IFwiICsgaSArIFwiKyspIHtcIik7IC8vIEJpbmQgZWFjaCBkZWNsYXJlZCB2YXJcblxuXG4gICAgICBub2RlLm5hbWUuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQsIHUpIHtcbiAgICAgICAgdmFyIHRpZCA9IF90aGlzMTAuX3RtcGlkKCk7XG5cbiAgICAgICAgX3RoaXMxMC5fZW1pdExpbmUoXCJ2YXIgXCIgKyB0aWQgKyBcIiA9IFwiICsgYXJyICsgXCJbXCIgKyBpICsgXCJdW1wiICsgdSArIFwiXTtcIik7XG5cbiAgICAgICAgX3RoaXMxMC5fZW1pdExpbmUoXCJmcmFtZS5zZXQoXFxcIlwiICsgY2hpbGQgKyBcIlxcXCIsIFwiICsgYXJyICsgXCJbXCIgKyBpICsgXCJdW1wiICsgdSArIFwiXSk7XCIpO1xuXG4gICAgICAgIGZyYW1lLnNldChub2RlLm5hbWUuY2hpbGRyZW5bdV0udmFsdWUsIHRpZCk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5fZW1pdExvb3BCaW5kaW5ncyhub2RlLCBhcnIsIGksIGxlbik7XG5cbiAgICAgIHRoaXMuX3dpdGhTY29wZWRTeW50YXgoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczEwLmNvbXBpbGUobm9kZS5ib2R5LCBmcmFtZSk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5fZW1pdExpbmUoJ30nKTtcblxuICAgICAgdGhpcy5fZW1pdExpbmUoJ30gZWxzZSB7Jyk7IC8vIEl0ZXJhdGUgb3ZlciB0aGUga2V5L3ZhbHVlcyBvZiBhbiBvYmplY3RcblxuXG4gICAgICB2YXIgX25vZGUkbmFtZSRjaGlsZHJlbiA9IG5vZGUubmFtZS5jaGlsZHJlbixcbiAgICAgICAgICBrZXkgPSBfbm9kZSRuYW1lJGNoaWxkcmVuWzBdLFxuICAgICAgICAgIHZhbCA9IF9ub2RlJG5hbWUkY2hpbGRyZW5bMV07XG5cbiAgICAgIHZhciBrID0gdGhpcy5fdG1waWQoKTtcblxuICAgICAgdmFyIHYgPSB0aGlzLl90bXBpZCgpO1xuXG4gICAgICBmcmFtZS5zZXQoa2V5LnZhbHVlLCBrKTtcbiAgICAgIGZyYW1lLnNldCh2YWwudmFsdWUsIHYpO1xuXG4gICAgICB0aGlzLl9lbWl0TGluZShpICsgXCIgPSAtMTtcIik7XG5cbiAgICAgIHRoaXMuX2VtaXRMaW5lKFwidmFyIFwiICsgbGVuICsgXCIgPSBydW50aW1lLmtleXMoXCIgKyBhcnIgKyBcIikubGVuZ3RoO1wiKTtcblxuICAgICAgdGhpcy5fZW1pdExpbmUoXCJmb3IodmFyIFwiICsgayArIFwiIGluIFwiICsgYXJyICsgXCIpIHtcIik7XG5cbiAgICAgIHRoaXMuX2VtaXRMaW5lKGkgKyBcIisrO1wiKTtcblxuICAgICAgdGhpcy5fZW1pdExpbmUoXCJ2YXIgXCIgKyB2ICsgXCIgPSBcIiArIGFyciArIFwiW1wiICsgayArIFwiXTtcIik7XG5cbiAgICAgIHRoaXMuX2VtaXRMaW5lKFwiZnJhbWUuc2V0KFxcXCJcIiArIGtleS52YWx1ZSArIFwiXFxcIiwgXCIgKyBrICsgXCIpO1wiKTtcblxuICAgICAgdGhpcy5fZW1pdExpbmUoXCJmcmFtZS5zZXQoXFxcIlwiICsgdmFsLnZhbHVlICsgXCJcXFwiLCBcIiArIHYgKyBcIik7XCIpO1xuXG4gICAgICB0aGlzLl9lbWl0TG9vcEJpbmRpbmdzKG5vZGUsIGFyciwgaSwgbGVuKTtcblxuICAgICAgdGhpcy5fd2l0aFNjb3BlZFN5bnRheChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMTAuY29tcGlsZShub2RlLmJvZHksIGZyYW1lKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl9lbWl0TGluZSgnfScpO1xuXG4gICAgICB0aGlzLl9lbWl0TGluZSgnfScpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBHZW5lcmF0ZSBhIHR5cGljYWwgYXJyYXkgaXRlcmF0aW9uXG4gICAgICB2YXIgX3YgPSB0aGlzLl90bXBpZCgpO1xuXG4gICAgICBmcmFtZS5zZXQobm9kZS5uYW1lLnZhbHVlLCBfdik7XG5cbiAgICAgIHRoaXMuX2VtaXRMaW5lKFwidmFyIFwiICsgbGVuICsgXCIgPSBcIiArIGFyciArIFwiLmxlbmd0aDtcIik7XG5cbiAgICAgIHRoaXMuX2VtaXRMaW5lKFwiZm9yKHZhciBcIiArIGkgKyBcIj0wOyBcIiArIGkgKyBcIiA8IFwiICsgYXJyICsgXCIubGVuZ3RoOyBcIiArIGkgKyBcIisrKSB7XCIpO1xuXG4gICAgICB0aGlzLl9lbWl0TGluZShcInZhciBcIiArIF92ICsgXCIgPSBcIiArIGFyciArIFwiW1wiICsgaSArIFwiXTtcIik7XG5cbiAgICAgIHRoaXMuX2VtaXRMaW5lKFwiZnJhbWUuc2V0KFxcXCJcIiArIG5vZGUubmFtZS52YWx1ZSArIFwiXFxcIiwgXCIgKyBfdiArIFwiKTtcIik7XG5cbiAgICAgIHRoaXMuX2VtaXRMb29wQmluZGluZ3Mobm9kZSwgYXJyLCBpLCBsZW4pO1xuXG4gICAgICB0aGlzLl93aXRoU2NvcGVkU3ludGF4KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMxMC5jb21waWxlKG5vZGUuYm9keSwgZnJhbWUpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX2VtaXRMaW5lKCd9Jyk7XG4gICAgfVxuXG4gICAgdGhpcy5fZW1pdExpbmUoJ30nKTtcblxuICAgIGlmIChub2RlLmVsc2VfKSB7XG4gICAgICB0aGlzLl9lbWl0TGluZSgnaWYgKCEnICsgbGVuICsgJykgeycpO1xuXG4gICAgICB0aGlzLmNvbXBpbGUobm9kZS5lbHNlXywgZnJhbWUpO1xuXG4gICAgICB0aGlzLl9lbWl0TGluZSgnfScpO1xuICAgIH1cblxuICAgIHRoaXMuX2VtaXRMaW5lKCdmcmFtZSA9IGZyYW1lLnBvcCgpOycpO1xuICB9O1xuXG4gIF9wcm90by5fY29tcGlsZUFzeW5jTG9vcCA9IGZ1bmN0aW9uIF9jb21waWxlQXN5bmNMb29wKG5vZGUsIGZyYW1lLCBwYXJhbGxlbCkge1xuICAgIHZhciBfdGhpczExID0gdGhpcztcblxuICAgIC8vIFRoaXMgc2hhcmVzIHNvbWUgY29kZSB3aXRoIHRoZSBGb3IgdGFnLCBidXQgbm90IGVub3VnaCB0b1xuICAgIC8vIHdvcnJ5IGFib3V0LiBUaGlzIGl0ZXJhdGVzIGFjcm9zcyBhbiBvYmplY3QgYXN5bmNocm9ub3VzbHksXG4gICAgLy8gYnV0IG5vdCBpbiBwYXJhbGxlbC5cbiAgICB2YXIgaSA9IHRoaXMuX3RtcGlkKCk7XG5cbiAgICB2YXIgbGVuID0gdGhpcy5fdG1waWQoKTtcblxuICAgIHZhciBhcnIgPSB0aGlzLl90bXBpZCgpO1xuXG4gICAgdmFyIGFzeW5jTWV0aG9kID0gcGFyYWxsZWwgPyAnYXN5bmNBbGwnIDogJ2FzeW5jRWFjaCc7XG4gICAgZnJhbWUgPSBmcmFtZS5wdXNoKCk7XG5cbiAgICB0aGlzLl9lbWl0TGluZSgnZnJhbWUgPSBmcmFtZS5wdXNoKCk7Jyk7XG5cbiAgICB0aGlzLl9lbWl0KCd2YXIgJyArIGFyciArICcgPSBydW50aW1lLmZyb21JdGVyYXRvcignKTtcblxuICAgIHRoaXMuX2NvbXBpbGVFeHByZXNzaW9uKG5vZGUuYXJyLCBmcmFtZSk7XG5cbiAgICB0aGlzLl9lbWl0TGluZSgnKTsnKTtcblxuICAgIGlmIChub2RlLm5hbWUgaW5zdGFuY2VvZiBub2Rlcy5BcnJheSkge1xuICAgICAgdmFyIGFycmF5TGVuID0gbm9kZS5uYW1lLmNoaWxkcmVuLmxlbmd0aDtcblxuICAgICAgdGhpcy5fZW1pdChcInJ1bnRpbWUuXCIgKyBhc3luY01ldGhvZCArIFwiKFwiICsgYXJyICsgXCIsIFwiICsgYXJyYXlMZW4gKyBcIiwgZnVuY3Rpb24oXCIpO1xuXG4gICAgICBub2RlLm5hbWUuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBfdGhpczExLl9lbWl0KG5hbWUudmFsdWUgKyBcIixcIik7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5fZW1pdChpICsgJywnICsgbGVuICsgJyxuZXh0KSB7Jyk7XG5cbiAgICAgIG5vZGUubmFtZS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHZhciBpZCA9IG5hbWUudmFsdWU7XG4gICAgICAgIGZyYW1lLnNldChpZCwgaWQpO1xuXG4gICAgICAgIF90aGlzMTEuX2VtaXRMaW5lKFwiZnJhbWUuc2V0KFxcXCJcIiArIGlkICsgXCJcXFwiLCBcIiArIGlkICsgXCIpO1wiKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaWQgPSBub2RlLm5hbWUudmFsdWU7XG5cbiAgICAgIHRoaXMuX2VtaXRMaW5lKFwicnVudGltZS5cIiArIGFzeW5jTWV0aG9kICsgXCIoXCIgKyBhcnIgKyBcIiwgMSwgZnVuY3Rpb24oXCIgKyBpZCArIFwiLCBcIiArIGkgKyBcIiwgXCIgKyBsZW4gKyBcIixuZXh0KSB7XCIpO1xuXG4gICAgICB0aGlzLl9lbWl0TGluZSgnZnJhbWUuc2V0KFwiJyArIGlkICsgJ1wiLCAnICsgaWQgKyAnKTsnKTtcblxuICAgICAgZnJhbWUuc2V0KGlkLCBpZCk7XG4gICAgfVxuXG4gICAgdGhpcy5fZW1pdExvb3BCaW5kaW5ncyhub2RlLCBhcnIsIGksIGxlbik7XG5cbiAgICB0aGlzLl93aXRoU2NvcGVkU3ludGF4KGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBidWY7XG5cbiAgICAgIGlmIChwYXJhbGxlbCkge1xuICAgICAgICBidWYgPSBfdGhpczExLl9wdXNoQnVmZmVyKCk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzMTEuY29tcGlsZShub2RlLmJvZHksIGZyYW1lKTtcblxuICAgICAgX3RoaXMxMS5fZW1pdExpbmUoJ25leHQoJyArIGkgKyAoYnVmID8gJywnICsgYnVmIDogJycpICsgJyk7Jyk7XG5cbiAgICAgIGlmIChwYXJhbGxlbCkge1xuICAgICAgICBfdGhpczExLl9wb3BCdWZmZXIoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciBvdXRwdXQgPSB0aGlzLl90bXBpZCgpO1xuXG4gICAgdGhpcy5fZW1pdExpbmUoJ30sICcgKyB0aGlzLl9tYWtlQ2FsbGJhY2sob3V0cHV0KSk7XG5cbiAgICB0aGlzLl9hZGRTY29wZUxldmVsKCk7XG5cbiAgICBpZiAocGFyYWxsZWwpIHtcbiAgICAgIHRoaXMuX2VtaXRMaW5lKHRoaXMuYnVmZmVyICsgJyArPSAnICsgb3V0cHV0ICsgJzsnKTtcbiAgICB9XG5cbiAgICBpZiAobm9kZS5lbHNlXykge1xuICAgICAgdGhpcy5fZW1pdExpbmUoJ2lmICghJyArIGFyciArICcubGVuZ3RoKSB7Jyk7XG5cbiAgICAgIHRoaXMuY29tcGlsZShub2RlLmVsc2VfLCBmcmFtZSk7XG5cbiAgICAgIHRoaXMuX2VtaXRMaW5lKCd9Jyk7XG4gICAgfVxuXG4gICAgdGhpcy5fZW1pdExpbmUoJ2ZyYW1lID0gZnJhbWUucG9wKCk7Jyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBpbGVBc3luY0VhY2ggPSBmdW5jdGlvbiBjb21waWxlQXN5bmNFYWNoKG5vZGUsIGZyYW1lKSB7XG4gICAgdGhpcy5fY29tcGlsZUFzeW5jTG9vcChub2RlLCBmcmFtZSk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBpbGVBc3luY0FsbCA9IGZ1bmN0aW9uIGNvbXBpbGVBc3luY0FsbChub2RlLCBmcmFtZSkge1xuICAgIHRoaXMuX2NvbXBpbGVBc3luY0xvb3Aobm9kZSwgZnJhbWUsIHRydWUpO1xuICB9O1xuXG4gIF9wcm90by5fY29tcGlsZU1hY3JvID0gZnVuY3Rpb24gX2NvbXBpbGVNYWNybyhub2RlLCBmcmFtZSkge1xuICAgIHZhciBfdGhpczEyID0gdGhpcztcblxuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGt3YXJncyA9IG51bGw7XG5cbiAgICB2YXIgZnVuY0lkID0gJ21hY3JvXycgKyB0aGlzLl90bXBpZCgpO1xuXG4gICAgdmFyIGtlZXBGcmFtZSA9IGZyYW1lICE9PSB1bmRlZmluZWQ7IC8vIFR5cGUgY2hlY2sgdGhlIGRlZmluaXRpb24gb2YgdGhlIGFyZ3NcblxuICAgIG5vZGUuYXJncy5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChhcmcsIGkpIHtcbiAgICAgIGlmIChpID09PSBub2RlLmFyZ3MuY2hpbGRyZW4ubGVuZ3RoIC0gMSAmJiBhcmcgaW5zdGFuY2VvZiBub2Rlcy5EaWN0KSB7XG4gICAgICAgIGt3YXJncyA9IGFyZztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzMTIuYXNzZXJ0VHlwZShhcmcsIG5vZGVzLlN5bWJvbCk7XG5cbiAgICAgICAgYXJncy5wdXNoKGFyZyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdmFyIHJlYWxOYW1lcyA9IFtdLmNvbmNhdChhcmdzLm1hcChmdW5jdGlvbiAobikge1xuICAgICAgcmV0dXJuIFwibF9cIiArIG4udmFsdWU7XG4gICAgfSksIFsna3dhcmdzJ10pOyAvLyBRdW90ZWQgYXJndW1lbnQgbmFtZXNcblxuICAgIHZhciBhcmdOYW1lcyA9IGFyZ3MubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgICByZXR1cm4gXCJcXFwiXCIgKyBuLnZhbHVlICsgXCJcXFwiXCI7XG4gICAgfSk7XG4gICAgdmFyIGt3YXJnTmFtZXMgPSAoa3dhcmdzICYmIGt3YXJncy5jaGlsZHJlbiB8fCBbXSkubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgICByZXR1cm4gXCJcXFwiXCIgKyBuLmtleS52YWx1ZSArIFwiXFxcIlwiO1xuICAgIH0pOyAvLyBXZSBwYXNzIGEgZnVuY3Rpb24gdG8gbWFrZU1hY3JvIHdoaWNoIGRlc3RydWN0dXJlcyB0aGVcbiAgICAvLyBhcmd1bWVudHMgc28gc3VwcG9ydCBzZXR0aW5nIHBvc2l0aW9uYWwgYXJncyB3aXRoIGtleXdvcmRzXG4gICAgLy8gYXJncyBhbmQgcGFzc2luZyBrZXl3b3JkIGFyZ3MgYXMgcG9zaXRpb25hbCBhcmdzXG4gICAgLy8gKGVzc2VudGlhbGx5IGRlZmF1bHQgdmFsdWVzKS4gU2VlIHJ1bnRpbWUuanMuXG5cbiAgICB2YXIgY3VyckZyYW1lO1xuXG4gICAgaWYgKGtlZXBGcmFtZSkge1xuICAgICAgY3VyckZyYW1lID0gZnJhbWUucHVzaCh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VyckZyYW1lID0gbmV3IEZyYW1lKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fZW1pdExpbmVzKFwidmFyIFwiICsgZnVuY0lkICsgXCIgPSBydW50aW1lLm1ha2VNYWNybyhcIiwgXCJbXCIgKyBhcmdOYW1lcy5qb2luKCcsICcpICsgXCJdLCBcIiwgXCJbXCIgKyBrd2FyZ05hbWVzLmpvaW4oJywgJykgKyBcIl0sIFwiLCBcImZ1bmN0aW9uIChcIiArIHJlYWxOYW1lcy5qb2luKCcsICcpICsgXCIpIHtcIiwgJ3ZhciBjYWxsZXJGcmFtZSA9IGZyYW1lOycsICdmcmFtZSA9ICcgKyAoa2VlcEZyYW1lID8gJ2ZyYW1lLnB1c2godHJ1ZSk7JyA6ICduZXcgcnVudGltZS5GcmFtZSgpOycpLCAna3dhcmdzID0ga3dhcmdzIHx8IHt9OycsICdpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGt3YXJncywgXCJjYWxsZXJcIikpIHsnLCAnZnJhbWUuc2V0KFwiY2FsbGVyXCIsIGt3YXJncy5jYWxsZXIpOyB9Jyk7IC8vIEV4cG9zZSB0aGUgYXJndW1lbnRzIHRvIHRoZSB0ZW1wbGF0ZS4gRG9uJ3QgbmVlZCB0byB1c2VcbiAgICAvLyByYW5kb20gbmFtZXMgYmVjYXVzZSB0aGUgZnVuY3Rpb25cbiAgICAvLyB3aWxsIGNyZWF0ZSBhIG5ldyBydW4tdGltZSBzY29wZSBmb3IgdXNcblxuXG4gICAgYXJncy5mb3JFYWNoKGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIF90aGlzMTIuX2VtaXRMaW5lKFwiZnJhbWUuc2V0KFxcXCJcIiArIGFyZy52YWx1ZSArIFwiXFxcIiwgbF9cIiArIGFyZy52YWx1ZSArIFwiKTtcIik7XG5cbiAgICAgIGN1cnJGcmFtZS5zZXQoYXJnLnZhbHVlLCBcImxfXCIgKyBhcmcudmFsdWUpO1xuICAgIH0pOyAvLyBFeHBvc2UgdGhlIGtleXdvcmQgYXJndW1lbnRzXG5cbiAgICBpZiAoa3dhcmdzKSB7XG4gICAgICBrd2FyZ3MuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAocGFpcikge1xuICAgICAgICB2YXIgbmFtZSA9IHBhaXIua2V5LnZhbHVlO1xuXG4gICAgICAgIF90aGlzMTIuX2VtaXQoXCJmcmFtZS5zZXQoXFxcIlwiICsgbmFtZSArIFwiXFxcIiwgXCIpO1xuXG4gICAgICAgIF90aGlzMTIuX2VtaXQoXCJPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoa3dhcmdzLCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiKVwiKTtcblxuICAgICAgICBfdGhpczEyLl9lbWl0KFwiID8ga3dhcmdzW1xcXCJcIiArIG5hbWUgKyBcIlxcXCJdIDogXCIpO1xuXG4gICAgICAgIF90aGlzMTIuX2NvbXBpbGVFeHByZXNzaW9uKHBhaXIudmFsdWUsIGN1cnJGcmFtZSk7XG5cbiAgICAgICAgX3RoaXMxMi5fZW1pdCgnKTsnKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBidWZmZXJJZCA9IHRoaXMuX3B1c2hCdWZmZXIoKTtcblxuICAgIHRoaXMuX3dpdGhTY29wZWRTeW50YXgoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMxMi5jb21waWxlKG5vZGUuYm9keSwgY3VyckZyYW1lKTtcbiAgICB9KTtcblxuICAgIHRoaXMuX2VtaXRMaW5lKCdmcmFtZSA9ICcgKyAoa2VlcEZyYW1lID8gJ2ZyYW1lLnBvcCgpOycgOiAnY2FsbGVyRnJhbWU7JykpO1xuXG4gICAgdGhpcy5fZW1pdExpbmUoXCJyZXR1cm4gbmV3IHJ1bnRpbWUuU2FmZVN0cmluZyhcIiArIGJ1ZmZlcklkICsgXCIpO1wiKTtcblxuICAgIHRoaXMuX2VtaXRMaW5lKCd9KTsnKTtcblxuICAgIHRoaXMuX3BvcEJ1ZmZlcigpO1xuXG4gICAgcmV0dXJuIGZ1bmNJZDtcbiAgfTtcblxuICBfcHJvdG8uY29tcGlsZU1hY3JvID0gZnVuY3Rpb24gY29tcGlsZU1hY3JvKG5vZGUsIGZyYW1lKSB7XG4gICAgdmFyIGZ1bmNJZCA9IHRoaXMuX2NvbXBpbGVNYWNybyhub2RlKTsgLy8gRXhwb3NlIHRoZSBtYWNybyB0byB0aGUgdGVtcGxhdGVzXG5cblxuICAgIHZhciBuYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuICAgIGZyYW1lLnNldChuYW1lLCBmdW5jSWQpO1xuXG4gICAgaWYgKGZyYW1lLnBhcmVudCkge1xuICAgICAgdGhpcy5fZW1pdExpbmUoXCJmcmFtZS5zZXQoXFxcIlwiICsgbmFtZSArIFwiXFxcIiwgXCIgKyBmdW5jSWQgKyBcIik7XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobm9kZS5uYW1lLnZhbHVlLmNoYXJBdCgwKSAhPT0gJ18nKSB7XG4gICAgICAgIHRoaXMuX2VtaXRMaW5lKFwiY29udGV4dC5hZGRFeHBvcnQoXFxcIlwiICsgbmFtZSArIFwiXFxcIik7XCIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9lbWl0TGluZShcImNvbnRleHQuc2V0VmFyaWFibGUoXFxcIlwiICsgbmFtZSArIFwiXFxcIiwgXCIgKyBmdW5jSWQgKyBcIik7XCIpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcGlsZUNhbGxlciA9IGZ1bmN0aW9uIGNvbXBpbGVDYWxsZXIobm9kZSwgZnJhbWUpIHtcbiAgICAvLyBiYXNpY2FsbHkgYW4gYW5vbnltb3VzIFwibWFjcm8gZXhwcmVzc2lvblwiXG4gICAgdGhpcy5fZW1pdCgnKGZ1bmN0aW9uICgpeycpO1xuXG4gICAgdmFyIGZ1bmNJZCA9IHRoaXMuX2NvbXBpbGVNYWNybyhub2RlLCBmcmFtZSk7XG5cbiAgICB0aGlzLl9lbWl0KFwicmV0dXJuIFwiICsgZnVuY0lkICsgXCI7fSkoKVwiKTtcbiAgfTtcblxuICBfcHJvdG8uX2NvbXBpbGVHZXRUZW1wbGF0ZSA9IGZ1bmN0aW9uIF9jb21waWxlR2V0VGVtcGxhdGUobm9kZSwgZnJhbWUsIGVhZ2VyQ29tcGlsZSwgaWdub3JlTWlzc2luZykge1xuICAgIHZhciBwYXJlbnRUZW1wbGF0ZUlkID0gdGhpcy5fdG1waWQoKTtcblxuICAgIHZhciBwYXJlbnROYW1lID0gdGhpcy5fdGVtcGxhdGVOYW1lKCk7XG5cbiAgICB2YXIgY2IgPSB0aGlzLl9tYWtlQ2FsbGJhY2socGFyZW50VGVtcGxhdGVJZCk7XG5cbiAgICB2YXIgZWFnZXJDb21waWxlQXJnID0gZWFnZXJDb21waWxlID8gJ3RydWUnIDogJ2ZhbHNlJztcbiAgICB2YXIgaWdub3JlTWlzc2luZ0FyZyA9IGlnbm9yZU1pc3NpbmcgPyAndHJ1ZScgOiAnZmFsc2UnO1xuXG4gICAgdGhpcy5fZW1pdCgnZW52LmdldFRlbXBsYXRlKCcpO1xuXG4gICAgdGhpcy5fY29tcGlsZUV4cHJlc3Npb24obm9kZS50ZW1wbGF0ZSwgZnJhbWUpO1xuXG4gICAgdGhpcy5fZW1pdExpbmUoXCIsIFwiICsgZWFnZXJDb21waWxlQXJnICsgXCIsIFwiICsgcGFyZW50TmFtZSArIFwiLCBcIiArIGlnbm9yZU1pc3NpbmdBcmcgKyBcIiwgXCIgKyBjYik7XG5cbiAgICByZXR1cm4gcGFyZW50VGVtcGxhdGVJZDtcbiAgfTtcblxuICBfcHJvdG8uY29tcGlsZUltcG9ydCA9IGZ1bmN0aW9uIGNvbXBpbGVJbXBvcnQobm9kZSwgZnJhbWUpIHtcbiAgICB2YXIgdGFyZ2V0ID0gbm9kZS50YXJnZXQudmFsdWU7XG5cbiAgICB2YXIgaWQgPSB0aGlzLl9jb21waWxlR2V0VGVtcGxhdGUobm9kZSwgZnJhbWUsIGZhbHNlLCBmYWxzZSk7XG5cbiAgICB0aGlzLl9hZGRTY29wZUxldmVsKCk7XG5cbiAgICB0aGlzLl9lbWl0TGluZShpZCArICcuZ2V0RXhwb3J0ZWQoJyArIChub2RlLndpdGhDb250ZXh0ID8gJ2NvbnRleHQuZ2V0VmFyaWFibGVzKCksIGZyYW1lLCAnIDogJycpICsgdGhpcy5fbWFrZUNhbGxiYWNrKGlkKSk7XG5cbiAgICB0aGlzLl9hZGRTY29wZUxldmVsKCk7XG5cbiAgICBmcmFtZS5zZXQodGFyZ2V0LCBpZCk7XG5cbiAgICBpZiAoZnJhbWUucGFyZW50KSB7XG4gICAgICB0aGlzLl9lbWl0TGluZShcImZyYW1lLnNldChcXFwiXCIgKyB0YXJnZXQgKyBcIlxcXCIsIFwiICsgaWQgKyBcIik7XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9lbWl0TGluZShcImNvbnRleHQuc2V0VmFyaWFibGUoXFxcIlwiICsgdGFyZ2V0ICsgXCJcXFwiLCBcIiArIGlkICsgXCIpO1wiKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBpbGVGcm9tSW1wb3J0ID0gZnVuY3Rpb24gY29tcGlsZUZyb21JbXBvcnQobm9kZSwgZnJhbWUpIHtcbiAgICB2YXIgX3RoaXMxMyA9IHRoaXM7XG5cbiAgICB2YXIgaW1wb3J0ZWRJZCA9IHRoaXMuX2NvbXBpbGVHZXRUZW1wbGF0ZShub2RlLCBmcmFtZSwgZmFsc2UsIGZhbHNlKTtcblxuICAgIHRoaXMuX2FkZFNjb3BlTGV2ZWwoKTtcblxuICAgIHRoaXMuX2VtaXRMaW5lKGltcG9ydGVkSWQgKyAnLmdldEV4cG9ydGVkKCcgKyAobm9kZS53aXRoQ29udGV4dCA/ICdjb250ZXh0LmdldFZhcmlhYmxlcygpLCBmcmFtZSwgJyA6ICcnKSArIHRoaXMuX21ha2VDYWxsYmFjayhpbXBvcnRlZElkKSk7XG5cbiAgICB0aGlzLl9hZGRTY29wZUxldmVsKCk7XG5cbiAgICBub2RlLm5hbWVzLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKG5hbWVOb2RlKSB7XG4gICAgICB2YXIgbmFtZTtcbiAgICAgIHZhciBhbGlhcztcblxuICAgICAgdmFyIGlkID0gX3RoaXMxMy5fdG1waWQoKTtcblxuICAgICAgaWYgKG5hbWVOb2RlIGluc3RhbmNlb2Ygbm9kZXMuUGFpcikge1xuICAgICAgICBuYW1lID0gbmFtZU5vZGUua2V5LnZhbHVlO1xuICAgICAgICBhbGlhcyA9IG5hbWVOb2RlLnZhbHVlLnZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmFtZSA9IG5hbWVOb2RlLnZhbHVlO1xuICAgICAgICBhbGlhcyA9IG5hbWU7XG4gICAgICB9XG5cbiAgICAgIF90aGlzMTMuX2VtaXRMaW5lKFwiaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFwiICsgaW1wb3J0ZWRJZCArIFwiLCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiKSkge1wiKTtcblxuICAgICAgX3RoaXMxMy5fZW1pdExpbmUoXCJ2YXIgXCIgKyBpZCArIFwiID0gXCIgKyBpbXBvcnRlZElkICsgXCIuXCIgKyBuYW1lICsgXCI7XCIpO1xuXG4gICAgICBfdGhpczEzLl9lbWl0TGluZSgnfSBlbHNlIHsnKTtcblxuICAgICAgX3RoaXMxMy5fZW1pdExpbmUoXCJjYihuZXcgRXJyb3IoXFxcImNhbm5vdCBpbXBvcnQgJ1wiICsgbmFtZSArIFwiJ1xcXCIpKTsgcmV0dXJuO1wiKTtcblxuICAgICAgX3RoaXMxMy5fZW1pdExpbmUoJ30nKTtcblxuICAgICAgZnJhbWUuc2V0KGFsaWFzLCBpZCk7XG5cbiAgICAgIGlmIChmcmFtZS5wYXJlbnQpIHtcbiAgICAgICAgX3RoaXMxMy5fZW1pdExpbmUoXCJmcmFtZS5zZXQoXFxcIlwiICsgYWxpYXMgKyBcIlxcXCIsIFwiICsgaWQgKyBcIik7XCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMxMy5fZW1pdExpbmUoXCJjb250ZXh0LnNldFZhcmlhYmxlKFxcXCJcIiArIGFsaWFzICsgXCJcXFwiLCBcIiArIGlkICsgXCIpO1wiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY29tcGlsZUJsb2NrID0gZnVuY3Rpb24gY29tcGlsZUJsb2NrKG5vZGUpIHtcbiAgICB2YXIgaWQgPSB0aGlzLl90bXBpZCgpOyAvLyBJZiB3ZSBhcmUgZXhlY3V0aW5nIG91dHNpZGUgYSBibG9jayAoY3JlYXRpbmcgYSB0b3AtbGV2ZWxcbiAgICAvLyBibG9jayksIHdlIHJlYWxseSBkb24ndCB3YW50IHRvIGV4ZWN1dGUgaXRzIGNvZGUgYmVjYXVzZSBpdFxuICAgIC8vIHdpbGwgZXhlY3V0ZSB0d2ljZTogb25jZSB3aGVuIHRoZSBjaGlsZCB0ZW1wbGF0ZSBydW5zIGFuZFxuICAgIC8vIGFnYWluIHdoZW4gdGhlIHBhcmVudCB0ZW1wbGF0ZSBydW5zLiBOb3RlIHRoYXQgYmxvY2tzXG4gICAgLy8gd2l0aGluIGJsb2NrcyB3aWxsICphbHdheXMqIGV4ZWN1dGUgaW1tZWRpYXRlbHkgKmFuZCpcbiAgICAvLyB3aGVyZXZlciBlbHNlIHRoZXkgYXJlIGludm9rZWQgKGxpa2UgdXNlZCBpbiBhIHBhcmVudFxuICAgIC8vIHRlbXBsYXRlKS4gVGhpcyBtYXkgaGF2ZSBiZWhhdmlvcmFsIGRpZmZlcmVuY2VzIGZyb20gamluamFcbiAgICAvLyBiZWNhdXNlIGJsb2NrcyBjYW4gaGF2ZSBzaWRlIGVmZmVjdHMsIGJ1dCBpdCBzZWVtcyBsaWtlIGFcbiAgICAvLyB3YXN0ZSBvZiBwZXJmb3JtYW5jZSB0byBhbHdheXMgZXhlY3V0ZSBodWdlIHRvcC1sZXZlbFxuICAgIC8vIGJsb2NrcyB0d2ljZVxuXG5cbiAgICBpZiAoIXRoaXMuaW5CbG9jaykge1xuICAgICAgdGhpcy5fZW1pdCgnKHBhcmVudFRlbXBsYXRlID8gZnVuY3Rpb24oZSwgYywgZiwgciwgY2IpIHsgY2IoXCJcIik7IH0gOiAnKTtcbiAgICB9XG5cbiAgICB0aGlzLl9lbWl0KFwiY29udGV4dC5nZXRCbG9jayhcXFwiXCIgKyBub2RlLm5hbWUudmFsdWUgKyBcIlxcXCIpXCIpO1xuXG4gICAgaWYgKCF0aGlzLmluQmxvY2spIHtcbiAgICAgIHRoaXMuX2VtaXQoJyknKTtcbiAgICB9XG5cbiAgICB0aGlzLl9lbWl0TGluZSgnKGVudiwgY29udGV4dCwgZnJhbWUsIHJ1bnRpbWUsICcgKyB0aGlzLl9tYWtlQ2FsbGJhY2soaWQpKTtcblxuICAgIHRoaXMuX2VtaXRMaW5lKHRoaXMuYnVmZmVyICsgXCIgKz0gXCIgKyBpZCArIFwiO1wiKTtcblxuICAgIHRoaXMuX2FkZFNjb3BlTGV2ZWwoKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcGlsZVN1cGVyID0gZnVuY3Rpb24gY29tcGlsZVN1cGVyKG5vZGUsIGZyYW1lKSB7XG4gICAgdmFyIG5hbWUgPSBub2RlLmJsb2NrTmFtZS52YWx1ZTtcbiAgICB2YXIgaWQgPSBub2RlLnN5bWJvbC52YWx1ZTtcblxuICAgIHZhciBjYiA9IHRoaXMuX21ha2VDYWxsYmFjayhpZCk7XG5cbiAgICB0aGlzLl9lbWl0TGluZShcImNvbnRleHQuZ2V0U3VwZXIoZW52LCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLCBiX1wiICsgbmFtZSArIFwiLCBmcmFtZSwgcnVudGltZSwgXCIgKyBjYik7XG5cbiAgICB0aGlzLl9lbWl0TGluZShpZCArIFwiID0gcnVudGltZS5tYXJrU2FmZShcIiArIGlkICsgXCIpO1wiKTtcblxuICAgIHRoaXMuX2FkZFNjb3BlTGV2ZWwoKTtcblxuICAgIGZyYW1lLnNldChpZCwgaWQpO1xuICB9O1xuXG4gIF9wcm90by5jb21waWxlRXh0ZW5kcyA9IGZ1bmN0aW9uIGNvbXBpbGVFeHRlbmRzKG5vZGUsIGZyYW1lKSB7XG4gICAgdmFyIGsgPSB0aGlzLl90bXBpZCgpO1xuXG4gICAgdmFyIHBhcmVudFRlbXBsYXRlSWQgPSB0aGlzLl9jb21waWxlR2V0VGVtcGxhdGUobm9kZSwgZnJhbWUsIHRydWUsIGZhbHNlKTsgLy8gZXh0ZW5kcyBpcyBhIGR5bmFtaWMgdGFnIGFuZCBjYW4gb2NjdXIgd2l0aGluIGEgYmxvY2sgbGlrZVxuICAgIC8vIGBpZmAsIHNvIGlmIHRoaXMgaGFwcGVucyB3ZSBuZWVkIHRvIGNhcHR1cmUgdGhlIHBhcmVudFxuICAgIC8vIHRlbXBsYXRlIGluIHRoZSB0b3AtbGV2ZWwgc2NvcGVcblxuXG4gICAgdGhpcy5fZW1pdExpbmUoXCJwYXJlbnRUZW1wbGF0ZSA9IFwiICsgcGFyZW50VGVtcGxhdGVJZCk7XG5cbiAgICB0aGlzLl9lbWl0TGluZShcImZvcih2YXIgXCIgKyBrICsgXCIgaW4gcGFyZW50VGVtcGxhdGUuYmxvY2tzKSB7XCIpO1xuXG4gICAgdGhpcy5fZW1pdExpbmUoXCJjb250ZXh0LmFkZEJsb2NrKFwiICsgayArIFwiLCBwYXJlbnRUZW1wbGF0ZS5ibG9ja3NbXCIgKyBrICsgXCJdKTtcIik7XG5cbiAgICB0aGlzLl9lbWl0TGluZSgnfScpO1xuXG4gICAgdGhpcy5fYWRkU2NvcGVMZXZlbCgpO1xuICB9O1xuXG4gIF9wcm90by5jb21waWxlSW5jbHVkZSA9IGZ1bmN0aW9uIGNvbXBpbGVJbmNsdWRlKG5vZGUsIGZyYW1lKSB7XG4gICAgdGhpcy5fZW1pdExpbmUoJ3ZhciB0YXNrcyA9IFtdOycpO1xuXG4gICAgdGhpcy5fZW1pdExpbmUoJ3Rhc2tzLnB1c2goJyk7XG5cbiAgICB0aGlzLl9lbWl0TGluZSgnZnVuY3Rpb24oY2FsbGJhY2spIHsnKTtcblxuICAgIHZhciBpZCA9IHRoaXMuX2NvbXBpbGVHZXRUZW1wbGF0ZShub2RlLCBmcmFtZSwgZmFsc2UsIG5vZGUuaWdub3JlTWlzc2luZyk7XG5cbiAgICB0aGlzLl9lbWl0TGluZShcImNhbGxiYWNrKG51bGwsXCIgKyBpZCArIFwiKTt9KTtcIik7XG5cbiAgICB0aGlzLl9lbWl0TGluZSgnfSk7Jyk7XG5cbiAgICB2YXIgaWQyID0gdGhpcy5fdG1waWQoKTtcblxuICAgIHRoaXMuX2VtaXRMaW5lKCd0YXNrcy5wdXNoKCcpO1xuXG4gICAgdGhpcy5fZW1pdExpbmUoJ2Z1bmN0aW9uKHRlbXBsYXRlLCBjYWxsYmFjayl7Jyk7XG5cbiAgICB0aGlzLl9lbWl0TGluZSgndGVtcGxhdGUucmVuZGVyKGNvbnRleHQuZ2V0VmFyaWFibGVzKCksIGZyYW1lLCAnICsgdGhpcy5fbWFrZUNhbGxiYWNrKGlkMikpO1xuXG4gICAgdGhpcy5fZW1pdExpbmUoJ2NhbGxiYWNrKG51bGwsJyArIGlkMiArICcpO30pOycpO1xuXG4gICAgdGhpcy5fZW1pdExpbmUoJ30pOycpO1xuXG4gICAgdGhpcy5fZW1pdExpbmUoJ3Rhc2tzLnB1c2goJyk7XG5cbiAgICB0aGlzLl9lbWl0TGluZSgnZnVuY3Rpb24ocmVzdWx0LCBjYWxsYmFjayl7Jyk7XG5cbiAgICB0aGlzLl9lbWl0TGluZSh0aGlzLmJ1ZmZlciArIFwiICs9IHJlc3VsdDtcIik7XG5cbiAgICB0aGlzLl9lbWl0TGluZSgnY2FsbGJhY2sobnVsbCk7Jyk7XG5cbiAgICB0aGlzLl9lbWl0TGluZSgnfSk7Jyk7XG5cbiAgICB0aGlzLl9lbWl0TGluZSgnZW52LndhdGVyZmFsbCh0YXNrcywgZnVuY3Rpb24oKXsnKTtcblxuICAgIHRoaXMuX2FkZFNjb3BlTGV2ZWwoKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcGlsZVRlbXBsYXRlRGF0YSA9IGZ1bmN0aW9uIGNvbXBpbGVUZW1wbGF0ZURhdGEobm9kZSwgZnJhbWUpIHtcbiAgICB0aGlzLmNvbXBpbGVMaXRlcmFsKG5vZGUsIGZyYW1lKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcGlsZUNhcHR1cmUgPSBmdW5jdGlvbiBjb21waWxlQ2FwdHVyZShub2RlLCBmcmFtZSkge1xuICAgIHZhciBfdGhpczE0ID0gdGhpcztcblxuICAgIC8vIHdlIG5lZWQgdG8gdGVtcG9yYXJpbHkgb3ZlcnJpZGUgdGhlIGN1cnJlbnQgYnVmZmVyIGlkIGFzICdvdXRwdXQnXG4gICAgLy8gc28gdGhlIHNldCBibG9jayB3cml0ZXMgdG8gdGhlIGNhcHR1cmUgb3V0cHV0IGluc3RlYWQgb2YgdGhlIGJ1ZmZlclxuICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICB0aGlzLmJ1ZmZlciA9ICdvdXRwdXQnO1xuXG4gICAgdGhpcy5fZW1pdExpbmUoJyhmdW5jdGlvbigpIHsnKTtcblxuICAgIHRoaXMuX2VtaXRMaW5lKCd2YXIgb3V0cHV0ID0gXCJcIjsnKTtcblxuICAgIHRoaXMuX3dpdGhTY29wZWRTeW50YXgoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMxNC5jb21waWxlKG5vZGUuYm9keSwgZnJhbWUpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fZW1pdExpbmUoJ3JldHVybiBvdXRwdXQ7Jyk7XG5cbiAgICB0aGlzLl9lbWl0TGluZSgnfSkoKScpOyAvLyBhbmQgb2YgY291cnNlLCByZXZlcnQgYmFjayB0byB0aGUgb2xkIGJ1ZmZlciBpZFxuXG5cbiAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgfTtcblxuICBfcHJvdG8uY29tcGlsZU91dHB1dCA9IGZ1bmN0aW9uIGNvbXBpbGVPdXRwdXQobm9kZSwgZnJhbWUpIHtcbiAgICB2YXIgX3RoaXMxNSA9IHRoaXM7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAvLyBUZW1wbGF0ZURhdGEgaXMgYSBzcGVjaWFsIGNhc2UgYmVjYXVzZSBpdCBpcyBuZXZlclxuICAgICAgLy8gYXV0b2VzY2FwZWQsIHNvIHNpbXBseSBvdXRwdXQgaXQgZm9yIG9wdGltaXphdGlvblxuICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2Ygbm9kZXMuVGVtcGxhdGVEYXRhKSB7XG4gICAgICAgIGlmIChjaGlsZC52YWx1ZSkge1xuICAgICAgICAgIF90aGlzMTUuX2VtaXQoX3RoaXMxNS5idWZmZXIgKyBcIiArPSBcIik7XG5cbiAgICAgICAgICBfdGhpczE1LmNvbXBpbGVMaXRlcmFsKGNoaWxkLCBmcmFtZSk7XG5cbiAgICAgICAgICBfdGhpczE1Ll9lbWl0TGluZSgnOycpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpczE1Ll9lbWl0KF90aGlzMTUuYnVmZmVyICsgXCIgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKFwiKTtcblxuICAgICAgICBpZiAoX3RoaXMxNS50aHJvd09uVW5kZWZpbmVkKSB7XG4gICAgICAgICAgX3RoaXMxNS5fZW1pdCgncnVudGltZS5lbnN1cmVEZWZpbmVkKCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMxNS5jb21waWxlKGNoaWxkLCBmcmFtZSk7XG5cbiAgICAgICAgaWYgKF90aGlzMTUudGhyb3dPblVuZGVmaW5lZCkge1xuICAgICAgICAgIF90aGlzMTUuX2VtaXQoXCIsXCIgKyBub2RlLmxpbmVubyArIFwiLFwiICsgbm9kZS5jb2xubyArIFwiKVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMTUuX2VtaXQoJywgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XFxuJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBpbGVSb290ID0gZnVuY3Rpb24gY29tcGlsZVJvb3Qobm9kZSwgZnJhbWUpIHtcbiAgICB2YXIgX3RoaXMxNiA9IHRoaXM7XG5cbiAgICBpZiAoZnJhbWUpIHtcbiAgICAgIHRoaXMuZmFpbCgnY29tcGlsZVJvb3Q6IHJvb3Qgbm9kZSBjYW5cXCd0IGhhdmUgZnJhbWUnKTtcbiAgICB9XG5cbiAgICBmcmFtZSA9IG5ldyBGcmFtZSgpO1xuXG4gICAgdGhpcy5fZW1pdEZ1bmNCZWdpbihub2RlLCAncm9vdCcpO1xuXG4gICAgdGhpcy5fZW1pdExpbmUoJ3ZhciBwYXJlbnRUZW1wbGF0ZSA9IG51bGw7Jyk7XG5cbiAgICB0aGlzLl9jb21waWxlQ2hpbGRyZW4obm9kZSwgZnJhbWUpO1xuXG4gICAgdGhpcy5fZW1pdExpbmUoJ2lmKHBhcmVudFRlbXBsYXRlKSB7Jyk7XG5cbiAgICB0aGlzLl9lbWl0TGluZSgncGFyZW50VGVtcGxhdGUucm9vdFJlbmRlckZ1bmMoZW52LCBjb250ZXh0LCBmcmFtZSwgcnVudGltZSwgY2IpOycpO1xuXG4gICAgdGhpcy5fZW1pdExpbmUoJ30gZWxzZSB7Jyk7XG5cbiAgICB0aGlzLl9lbWl0TGluZShcImNiKG51bGwsIFwiICsgdGhpcy5idWZmZXIgKyBcIik7XCIpO1xuXG4gICAgdGhpcy5fZW1pdExpbmUoJ30nKTtcblxuICAgIHRoaXMuX2VtaXRGdW5jRW5kKHRydWUpO1xuXG4gICAgdGhpcy5pbkJsb2NrID0gdHJ1ZTtcbiAgICB2YXIgYmxvY2tOYW1lcyA9IFtdO1xuICAgIHZhciBibG9ja3MgPSBub2RlLmZpbmRBbGwobm9kZXMuQmxvY2spO1xuICAgIGJsb2Nrcy5mb3JFYWNoKGZ1bmN0aW9uIChibG9jaywgaSkge1xuICAgICAgdmFyIG5hbWUgPSBibG9jay5uYW1lLnZhbHVlO1xuXG4gICAgICBpZiAoYmxvY2tOYW1lcy5pbmRleE9mKG5hbWUpICE9PSAtMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCbG9jayBcXFwiXCIgKyBuYW1lICsgXCJcXFwiIGRlZmluZWQgbW9yZSB0aGFuIG9uY2UuXCIpO1xuICAgICAgfVxuXG4gICAgICBibG9ja05hbWVzLnB1c2gobmFtZSk7XG5cbiAgICAgIF90aGlzMTYuX2VtaXRGdW5jQmVnaW4oYmxvY2ssIFwiYl9cIiArIG5hbWUpO1xuXG4gICAgICB2YXIgdG1wRnJhbWUgPSBuZXcgRnJhbWUoKTtcblxuICAgICAgX3RoaXMxNi5fZW1pdExpbmUoJ3ZhciBmcmFtZSA9IGZyYW1lLnB1c2godHJ1ZSk7Jyk7XG5cbiAgICAgIF90aGlzMTYuY29tcGlsZShibG9jay5ib2R5LCB0bXBGcmFtZSk7XG5cbiAgICAgIF90aGlzMTYuX2VtaXRGdW5jRW5kKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9lbWl0TGluZSgncmV0dXJuIHsnKTtcblxuICAgIGJsb2Nrcy5mb3JFYWNoKGZ1bmN0aW9uIChibG9jaywgaSkge1xuICAgICAgdmFyIGJsb2NrTmFtZSA9IFwiYl9cIiArIGJsb2NrLm5hbWUudmFsdWU7XG5cbiAgICAgIF90aGlzMTYuX2VtaXRMaW5lKGJsb2NrTmFtZSArIFwiOiBcIiArIGJsb2NrTmFtZSArIFwiLFwiKTtcbiAgICB9KTtcblxuICAgIHRoaXMuX2VtaXRMaW5lKCdyb290OiByb290XFxufTsnKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcGlsZSA9IGZ1bmN0aW9uIGNvbXBpbGUobm9kZSwgZnJhbWUpIHtcbiAgICB2YXIgX2NvbXBpbGUgPSB0aGlzWydjb21waWxlJyArIG5vZGUudHlwZW5hbWVdO1xuXG4gICAgaWYgKF9jb21waWxlKSB7XG4gICAgICBfY29tcGlsZS5jYWxsKHRoaXMsIG5vZGUsIGZyYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5mYWlsKFwiY29tcGlsZTogQ2Fubm90IGNvbXBpbGUgbm9kZTogXCIgKyBub2RlLnR5cGVuYW1lLCBub2RlLmxpbmVubywgbm9kZS5jb2xubyk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5nZXRDb2RlID0gZnVuY3Rpb24gZ2V0Q29kZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb2RlYnVmLmpvaW4oJycpO1xuICB9O1xuXG4gIHJldHVybiBDb21waWxlcjtcbn0oT2JqKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNvbXBpbGU6IGZ1bmN0aW9uIGNvbXBpbGUoc3JjLCBhc3luY0ZpbHRlcnMsIGV4dGVuc2lvbnMsIG5hbWUsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgdmFyIGMgPSBuZXcgQ29tcGlsZXIobmFtZSwgb3B0cy50aHJvd09uVW5kZWZpbmVkKTsgLy8gUnVuIHRoZSBleHRlbnNpb24gcHJlcHJvY2Vzc29ycyBhZ2FpbnN0IHRoZSBzb3VyY2UuXG5cbiAgICB2YXIgcHJlcHJvY2Vzc29ycyA9IChleHRlbnNpb25zIHx8IFtdKS5tYXAoZnVuY3Rpb24gKGV4dCkge1xuICAgICAgcmV0dXJuIGV4dC5wcmVwcm9jZXNzO1xuICAgIH0pLmZpbHRlcihmdW5jdGlvbiAoZikge1xuICAgICAgcmV0dXJuICEhZjtcbiAgICB9KTtcbiAgICB2YXIgcHJvY2Vzc2VkU3JjID0gcHJlcHJvY2Vzc29ycy5yZWR1Y2UoZnVuY3Rpb24gKHMsIHByb2Nlc3Nvcikge1xuICAgICAgcmV0dXJuIHByb2Nlc3NvcihzKTtcbiAgICB9LCBzcmMpO1xuICAgIGMuY29tcGlsZSh0cmFuc2Zvcm1lci50cmFuc2Zvcm0ocGFyc2VyLnBhcnNlKHByb2Nlc3NlZFNyYywgZXh0ZW5zaW9ucywgb3B0cyksIGFzeW5jRmlsdGVycywgbmFtZSkpO1xuICAgIHJldHVybiBjLmdldENvZGUoKTtcbiAgfSxcbiAgQ29tcGlsZXI6IENvbXBpbGVyXG59O1xuXG4vKioqLyB9KSxcbi8qIDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBwYXRoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxudmFyIF9yZXF1aXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKSxcbiAgICBFbWl0dGVyT2JqID0gX3JlcXVpcmUuRW1pdHRlck9iajtcblxubW9kdWxlLmV4cG9ydHMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9FbWl0dGVyT2JqKSB7XG4gIF9pbmhlcml0c0xvb3NlKExvYWRlciwgX0VtaXR0ZXJPYmopO1xuXG4gIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICByZXR1cm4gX0VtaXR0ZXJPYmouYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IExvYWRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKGZyb20sIHRvKSB7XG4gICAgcmV0dXJuIHBhdGgucmVzb2x2ZShwYXRoLmRpcm5hbWUoZnJvbSksIHRvKTtcbiAgfTtcblxuICBfcHJvdG8uaXNSZWxhdGl2ZSA9IGZ1bmN0aW9uIGlzUmVsYXRpdmUoZmlsZW5hbWUpIHtcbiAgICByZXR1cm4gZmlsZW5hbWUuaW5kZXhPZignLi8nKSA9PT0gMCB8fCBmaWxlbmFtZS5pbmRleE9mKCcuLi8nKSA9PT0gMDtcbiAgfTtcblxuICByZXR1cm4gTG9hZGVyO1xufShFbWl0dGVyT2JqKTtcblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgYXNhcCA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXG52YXIgX3dhdGVyZmFsbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xuXG52YXIgbGliID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIGNvbXBpbGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxudmFyIGZpbHRlcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcblxudmFyIF9yZXF1aXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCksXG4gICAgRmlsZVN5c3RlbUxvYWRlciA9IF9yZXF1aXJlLkZpbGVTeXN0ZW1Mb2FkZXIsXG4gICAgV2ViTG9hZGVyID0gX3JlcXVpcmUuV2ViTG9hZGVyLFxuICAgIFByZWNvbXBpbGVkTG9hZGVyID0gX3JlcXVpcmUuUHJlY29tcGlsZWRMb2FkZXI7XG5cbnZhciB0ZXN0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMjApO1xuXG52YXIgZ2xvYmFscyA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXG52YXIgX3JlcXVpcmUyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKSxcbiAgICBPYmogPSBfcmVxdWlyZTIuT2JqLFxuICAgIEVtaXR0ZXJPYmogPSBfcmVxdWlyZTIuRW1pdHRlck9iajtcblxudmFyIGdsb2JhbFJ1bnRpbWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgaGFuZGxlRXJyb3IgPSBnbG9iYWxSdW50aW1lLmhhbmRsZUVycm9yLFxuICAgIEZyYW1lID0gZ2xvYmFsUnVudGltZS5GcmFtZTtcblxudmFyIGV4cHJlc3NBcHAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKTsgLy8gSWYgdGhlIHVzZXIgaXMgdXNpbmcgdGhlIGFzeW5jIEFQSSwgKmFsd2F5cyogY2FsbCBpdFxuLy8gYXN5bmNocm9ub3VzbHkgZXZlbiBpZiB0aGUgdGVtcGxhdGUgd2FzIHN5bmNocm9ub3VzLlxuXG5cbmZ1bmN0aW9uIGNhbGxiYWNrQXNhcChjYiwgZXJyLCByZXMpIHtcbiAgYXNhcChmdW5jdGlvbiAoKSB7XG4gICAgY2IoZXJyLCByZXMpO1xuICB9KTtcbn1cbi8qKlxuICogQSBuby1vcCB0ZW1wbGF0ZSwgZm9yIHVzZSB3aXRoIHslIGluY2x1ZGUgaWdub3JlIG1pc3NpbmcgJX1cbiAqL1xuXG5cbnZhciBub29wVG1wbFNyYyA9IHtcbiAgdHlwZTogJ2NvZGUnLFxuICBvYmo6IHtcbiAgICByb290OiBmdW5jdGlvbiByb290KGVudiwgY29udGV4dCwgZnJhbWUsIHJ1bnRpbWUsIGNiKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYihudWxsLCAnJyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNiKGhhbmRsZUVycm9yKGUsIG51bGwsIG51bGwpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbnZhciBFbnZpcm9ubWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0VtaXR0ZXJPYmopIHtcbiAgX2luaGVyaXRzTG9vc2UoRW52aXJvbm1lbnQsIF9FbWl0dGVyT2JqKTtcblxuICBmdW5jdGlvbiBFbnZpcm9ubWVudCgpIHtcbiAgICByZXR1cm4gX0VtaXR0ZXJPYmouYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEVudmlyb25tZW50LnByb3RvdHlwZTtcblxuICBfcHJvdG8uaW5pdCA9IGZ1bmN0aW9uIGluaXQobG9hZGVycywgb3B0cykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAvLyBUaGUgZGV2IGZsYWcgZGV0ZXJtaW5lcyB0aGUgdHJhY2UgdGhhdCdsbCBiZSBzaG93biBvbiBlcnJvcnMuXG4gICAgLy8gSWYgc2V0IHRvIHRydWUsIHJldHVybnMgdGhlIGZ1bGwgdHJhY2UgZnJvbSB0aGUgZXJyb3IgcG9pbnQsXG4gICAgLy8gb3RoZXJ3aXNlIHdpbGwgcmV0dXJuIHRyYWNlIHN0YXJ0aW5nIGZyb20gVGVtcGxhdGUucmVuZGVyXG4gICAgLy8gKHRoZSBmdWxsIHRyYWNlIGZyb20gd2l0aGluIG51bmp1Y2tzIG1heSBjb25mdXNlIGRldmVsb3BlcnMgdXNpbmdcbiAgICAvLyAgdGhlIGxpYnJhcnkpXG4gICAgLy8gZGVmYXVsdHMgdG8gZmFsc2VcbiAgICBvcHRzID0gdGhpcy5vcHRzID0gb3B0cyB8fCB7fTtcbiAgICB0aGlzLm9wdHMuZGV2ID0gISFvcHRzLmRldjsgLy8gVGhlIGF1dG9lc2NhcGUgZmxhZyBzZXRzIGdsb2JhbCBhdXRvZXNjYXBpbmcuIElmIHRydWUsXG4gICAgLy8gZXZlcnkgc3RyaW5nIHZhcmlhYmxlIHdpbGwgYmUgZXNjYXBlZCBieSBkZWZhdWx0LlxuICAgIC8vIElmIGZhbHNlLCBzdHJpbmdzIGNhbiBiZSBtYW51YWxseSBlc2NhcGVkIHVzaW5nIHRoZSBgZXNjYXBlYCBmaWx0ZXIuXG4gICAgLy8gZGVmYXVsdHMgdG8gdHJ1ZVxuXG4gICAgdGhpcy5vcHRzLmF1dG9lc2NhcGUgPSBvcHRzLmF1dG9lc2NhcGUgIT0gbnVsbCA/IG9wdHMuYXV0b2VzY2FwZSA6IHRydWU7IC8vIElmIHRydWUsIHRoaXMgd2lsbCBtYWtlIHRoZSBzeXN0ZW0gdGhyb3cgZXJyb3JzIGlmIHRyeWluZ1xuICAgIC8vIHRvIG91dHB1dCBhIG51bGwgb3IgdW5kZWZpbmVkIHZhbHVlXG5cbiAgICB0aGlzLm9wdHMudGhyb3dPblVuZGVmaW5lZCA9ICEhb3B0cy50aHJvd09uVW5kZWZpbmVkO1xuICAgIHRoaXMub3B0cy50cmltQmxvY2tzID0gISFvcHRzLnRyaW1CbG9ja3M7XG4gICAgdGhpcy5vcHRzLmxzdHJpcEJsb2NrcyA9ICEhb3B0cy5sc3RyaXBCbG9ja3M7XG4gICAgdGhpcy5sb2FkZXJzID0gW107XG5cbiAgICBpZiAoIWxvYWRlcnMpIHtcbiAgICAgIC8vIFRoZSBmaWxlc3lzdGVtIGxvYWRlciBpcyBvbmx5IGF2YWlsYWJsZSBzZXJ2ZXItc2lkZVxuICAgICAgaWYgKEZpbGVTeXN0ZW1Mb2FkZXIpIHtcbiAgICAgICAgdGhpcy5sb2FkZXJzID0gW25ldyBGaWxlU3lzdGVtTG9hZGVyKCd2aWV3cycpXTtcbiAgICAgIH0gZWxzZSBpZiAoV2ViTG9hZGVyKSB7XG4gICAgICAgIHRoaXMubG9hZGVycyA9IFtuZXcgV2ViTG9hZGVyKCcvdmlld3MnKV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9hZGVycyA9IGxpYi5pc0FycmF5KGxvYWRlcnMpID8gbG9hZGVycyA6IFtsb2FkZXJzXTtcbiAgICB9IC8vIEl0J3MgZWFzeSB0byB1c2UgcHJlY29tcGlsZWQgdGVtcGxhdGVzOiBqdXN0IGluY2x1ZGUgdGhlbVxuICAgIC8vIGJlZm9yZSB5b3UgY29uZmlndXJlIG51bmp1Y2tzIGFuZCB0aGlzIHdpbGwgYXV0b21hdGljYWxseVxuICAgIC8vIHBpY2sgaXQgdXAgYW5kIHVzZSBpdFxuXG5cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lm51bmp1Y2tzUHJlY29tcGlsZWQpIHtcbiAgICAgIHRoaXMubG9hZGVycy51bnNoaWZ0KG5ldyBQcmVjb21waWxlZExvYWRlcih3aW5kb3cubnVuanVja3NQcmVjb21waWxlZCkpO1xuICAgIH1cblxuICAgIHRoaXMuX2luaXRMb2FkZXJzKCk7XG5cbiAgICB0aGlzLmdsb2JhbHMgPSBnbG9iYWxzKCk7XG4gICAgdGhpcy5maWx0ZXJzID0ge307XG4gICAgdGhpcy50ZXN0cyA9IHt9O1xuICAgIHRoaXMuYXN5bmNGaWx0ZXJzID0gW107XG4gICAgdGhpcy5leHRlbnNpb25zID0ge307XG4gICAgdGhpcy5leHRlbnNpb25zTGlzdCA9IFtdO1xuXG4gICAgbGliLl9lbnRyaWVzKGZpbHRlcnMpLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBuYW1lID0gX3JlZlswXSxcbiAgICAgICAgICBmaWx0ZXIgPSBfcmVmWzFdO1xuICAgICAgcmV0dXJuIF90aGlzLmFkZEZpbHRlcihuYW1lLCBmaWx0ZXIpO1xuICAgIH0pO1xuXG4gICAgbGliLl9lbnRyaWVzKHRlc3RzKS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgdmFyIG5hbWUgPSBfcmVmMlswXSxcbiAgICAgICAgICB0ZXN0ID0gX3JlZjJbMV07XG4gICAgICByZXR1cm4gX3RoaXMuYWRkVGVzdChuYW1lLCB0ZXN0KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uX2luaXRMb2FkZXJzID0gZnVuY3Rpb24gX2luaXRMb2FkZXJzKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdGhpcy5sb2FkZXJzLmZvckVhY2goZnVuY3Rpb24gKGxvYWRlcikge1xuICAgICAgLy8gQ2FjaGluZyBhbmQgY2FjaGUgYnVzdGluZ1xuICAgICAgbG9hZGVyLmNhY2hlID0ge307XG5cbiAgICAgIGlmICh0eXBlb2YgbG9hZGVyLm9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGxvYWRlci5vbigndXBkYXRlJywgZnVuY3Rpb24gKG5hbWUsIGZ1bGxuYW1lKSB7XG4gICAgICAgICAgbG9hZGVyLmNhY2hlW25hbWVdID0gbnVsbDtcblxuICAgICAgICAgIF90aGlzMi5lbWl0KCd1cGRhdGUnLCBuYW1lLCBmdWxsbmFtZSwgbG9hZGVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxvYWRlci5vbignbG9hZCcsIGZ1bmN0aW9uIChuYW1lLCBzb3VyY2UpIHtcbiAgICAgICAgICBfdGhpczIuZW1pdCgnbG9hZCcsIG5hbWUsIHNvdXJjZSwgbG9hZGVyKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmludmFsaWRhdGVDYWNoZSA9IGZ1bmN0aW9uIGludmFsaWRhdGVDYWNoZSgpIHtcbiAgICB0aGlzLmxvYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAobG9hZGVyKSB7XG4gICAgICBsb2FkZXIuY2FjaGUgPSB7fTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uYWRkRXh0ZW5zaW9uID0gZnVuY3Rpb24gYWRkRXh0ZW5zaW9uKG5hbWUsIGV4dGVuc2lvbikge1xuICAgIGV4dGVuc2lvbi5fX25hbWUgPSBuYW1lO1xuICAgIHRoaXMuZXh0ZW5zaW9uc1tuYW1lXSA9IGV4dGVuc2lvbjtcbiAgICB0aGlzLmV4dGVuc2lvbnNMaXN0LnB1c2goZXh0ZW5zaW9uKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8ucmVtb3ZlRXh0ZW5zaW9uID0gZnVuY3Rpb24gcmVtb3ZlRXh0ZW5zaW9uKG5hbWUpIHtcbiAgICB2YXIgZXh0ZW5zaW9uID0gdGhpcy5nZXRFeHRlbnNpb24obmFtZSk7XG5cbiAgICBpZiAoIWV4dGVuc2lvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZXh0ZW5zaW9uc0xpc3QgPSBsaWIud2l0aG91dCh0aGlzLmV4dGVuc2lvbnNMaXN0LCBleHRlbnNpb24pO1xuICAgIGRlbGV0ZSB0aGlzLmV4dGVuc2lvbnNbbmFtZV07XG4gIH07XG5cbiAgX3Byb3RvLmdldEV4dGVuc2lvbiA9IGZ1bmN0aW9uIGdldEV4dGVuc2lvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuZXh0ZW5zaW9uc1tuYW1lXTtcbiAgfTtcblxuICBfcHJvdG8uaGFzRXh0ZW5zaW9uID0gZnVuY3Rpb24gaGFzRXh0ZW5zaW9uKG5hbWUpIHtcbiAgICByZXR1cm4gISF0aGlzLmV4dGVuc2lvbnNbbmFtZV07XG4gIH07XG5cbiAgX3Byb3RvLmFkZEdsb2JhbCA9IGZ1bmN0aW9uIGFkZEdsb2JhbChuYW1lLCB2YWx1ZSkge1xuICAgIHRoaXMuZ2xvYmFsc1tuYW1lXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5nZXRHbG9iYWwgPSBmdW5jdGlvbiBnZXRHbG9iYWwobmFtZSkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5nbG9iYWxzW25hbWVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdnbG9iYWwgbm90IGZvdW5kOiAnICsgbmFtZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZ2xvYmFsc1tuYW1lXTtcbiAgfTtcblxuICBfcHJvdG8uYWRkRmlsdGVyID0gZnVuY3Rpb24gYWRkRmlsdGVyKG5hbWUsIGZ1bmMsIGFzeW5jKSB7XG4gICAgdmFyIHdyYXBwZWQgPSBmdW5jO1xuXG4gICAgaWYgKGFzeW5jKSB7XG4gICAgICB0aGlzLmFzeW5jRmlsdGVycy5wdXNoKG5hbWUpO1xuICAgIH1cblxuICAgIHRoaXMuZmlsdGVyc1tuYW1lXSA9IHdyYXBwZWQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmdldEZpbHRlciA9IGZ1bmN0aW9uIGdldEZpbHRlcihuYW1lKSB7XG4gICAgaWYgKCF0aGlzLmZpbHRlcnNbbmFtZV0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZmlsdGVyIG5vdCBmb3VuZDogJyArIG5hbWUpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmZpbHRlcnNbbmFtZV07XG4gIH07XG5cbiAgX3Byb3RvLmFkZFRlc3QgPSBmdW5jdGlvbiBhZGRUZXN0KG5hbWUsIGZ1bmMpIHtcbiAgICB0aGlzLnRlc3RzW25hbWVdID0gZnVuYztcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uZ2V0VGVzdCA9IGZ1bmN0aW9uIGdldFRlc3QobmFtZSkge1xuICAgIGlmICghdGhpcy50ZXN0c1tuYW1lXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd0ZXN0IG5vdCBmb3VuZDogJyArIG5hbWUpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRlc3RzW25hbWVdO1xuICB9O1xuXG4gIF9wcm90by5yZXNvbHZlVGVtcGxhdGUgPSBmdW5jdGlvbiByZXNvbHZlVGVtcGxhdGUobG9hZGVyLCBwYXJlbnROYW1lLCBmaWxlbmFtZSkge1xuICAgIHZhciBpc1JlbGF0aXZlID0gbG9hZGVyLmlzUmVsYXRpdmUgJiYgcGFyZW50TmFtZSA/IGxvYWRlci5pc1JlbGF0aXZlKGZpbGVuYW1lKSA6IGZhbHNlO1xuICAgIHJldHVybiBpc1JlbGF0aXZlICYmIGxvYWRlci5yZXNvbHZlID8gbG9hZGVyLnJlc29sdmUocGFyZW50TmFtZSwgZmlsZW5hbWUpIDogZmlsZW5hbWU7XG4gIH07XG5cbiAgX3Byb3RvLmdldFRlbXBsYXRlID0gZnVuY3Rpb24gZ2V0VGVtcGxhdGUobmFtZSwgZWFnZXJDb21waWxlLCBwYXJlbnROYW1lLCBpZ25vcmVNaXNzaW5nLCBjYikge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHZhciB0bXBsID0gbnVsbDtcblxuICAgIGlmIChuYW1lICYmIG5hbWUucmF3KSB7XG4gICAgICAvLyB0aGlzIGZpeGVzIGF1dG9lc2NhcGUgZm9yIHRlbXBsYXRlcyByZWZlcmVuY2VkIGluIHN5bWJvbHNcbiAgICAgIG5hbWUgPSBuYW1lLnJhdztcbiAgICB9XG5cbiAgICBpZiAobGliLmlzRnVuY3Rpb24ocGFyZW50TmFtZSkpIHtcbiAgICAgIGNiID0gcGFyZW50TmFtZTtcbiAgICAgIHBhcmVudE5hbWUgPSBudWxsO1xuICAgICAgZWFnZXJDb21waWxlID0gZWFnZXJDb21waWxlIHx8IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChsaWIuaXNGdW5jdGlvbihlYWdlckNvbXBpbGUpKSB7XG4gICAgICBjYiA9IGVhZ2VyQ29tcGlsZTtcbiAgICAgIGVhZ2VyQ29tcGlsZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChuYW1lIGluc3RhbmNlb2YgVGVtcGxhdGUpIHtcbiAgICAgIHRtcGwgPSBuYW1lO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RlbXBsYXRlIG5hbWVzIG11c3QgYmUgYSBzdHJpbmc6ICcgKyBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxvYWRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGxvYWRlciA9IHRoaXMubG9hZGVyc1tpXTtcbiAgICAgICAgdG1wbCA9IGxvYWRlci5jYWNoZVt0aGlzLnJlc29sdmVUZW1wbGF0ZShsb2FkZXIsIHBhcmVudE5hbWUsIG5hbWUpXTtcblxuICAgICAgICBpZiAodG1wbCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRtcGwpIHtcbiAgICAgIGlmIChlYWdlckNvbXBpbGUpIHtcbiAgICAgICAgdG1wbC5jb21waWxlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYikge1xuICAgICAgICBjYihudWxsLCB0bXBsKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0bXBsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzeW5jUmVzdWx0O1xuXG4gICAgdmFyIGNyZWF0ZVRlbXBsYXRlID0gZnVuY3Rpb24gY3JlYXRlVGVtcGxhdGUoZXJyLCBpbmZvKSB7XG4gICAgICBpZiAoIWluZm8gJiYgIWVyciAmJiAhaWdub3JlTWlzc2luZykge1xuICAgICAgICBlcnIgPSBuZXcgRXJyb3IoJ3RlbXBsYXRlIG5vdCBmb3VuZDogJyArIG5hbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGlmIChjYikge1xuICAgICAgICAgIGNiKGVycik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgbmV3VG1wbDtcblxuICAgICAgaWYgKCFpbmZvKSB7XG4gICAgICAgIG5ld1RtcGwgPSBuZXcgVGVtcGxhdGUobm9vcFRtcGxTcmMsIF90aGlzMywgJycsIGVhZ2VyQ29tcGlsZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdUbXBsID0gbmV3IFRlbXBsYXRlKGluZm8uc3JjLCBfdGhpczMsIGluZm8ucGF0aCwgZWFnZXJDb21waWxlKTtcblxuICAgICAgICBpZiAoIWluZm8ubm9DYWNoZSkge1xuICAgICAgICAgIGluZm8ubG9hZGVyLmNhY2hlW25hbWVdID0gbmV3VG1wbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY2IpIHtcbiAgICAgICAgY2IobnVsbCwgbmV3VG1wbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzeW5jUmVzdWx0ID0gbmV3VG1wbDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbGliLmFzeW5jSXRlcih0aGlzLmxvYWRlcnMsIGZ1bmN0aW9uIChsb2FkZXIsIGksIG5leHQsIGRvbmUpIHtcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShlcnIsIHNyYykge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgZG9uZShlcnIpO1xuICAgICAgICB9IGVsc2UgaWYgKHNyYykge1xuICAgICAgICAgIHNyYy5sb2FkZXIgPSBsb2FkZXI7XG4gICAgICAgICAgZG9uZShudWxsLCBzcmMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBSZXNvbHZlIG5hbWUgcmVsYXRpdmUgdG8gcGFyZW50TmFtZVxuXG5cbiAgICAgIG5hbWUgPSB0aGF0LnJlc29sdmVUZW1wbGF0ZShsb2FkZXIsIHBhcmVudE5hbWUsIG5hbWUpO1xuXG4gICAgICBpZiAobG9hZGVyLmFzeW5jKSB7XG4gICAgICAgIGxvYWRlci5nZXRTb3VyY2UobmFtZSwgaGFuZGxlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhbmRsZShudWxsLCBsb2FkZXIuZ2V0U291cmNlKG5hbWUpKTtcbiAgICAgIH1cbiAgICB9LCBjcmVhdGVUZW1wbGF0ZSk7XG4gICAgcmV0dXJuIHN5bmNSZXN1bHQ7XG4gIH07XG5cbiAgX3Byb3RvLmV4cHJlc3MgPSBmdW5jdGlvbiBleHByZXNzKGFwcCkge1xuICAgIHJldHVybiBleHByZXNzQXBwKHRoaXMsIGFwcCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcihuYW1lLCBjdHgsIGNiKSB7XG4gICAgaWYgKGxpYi5pc0Z1bmN0aW9uKGN0eCkpIHtcbiAgICAgIGNiID0gY3R4O1xuICAgICAgY3R4ID0gbnVsbDtcbiAgICB9IC8vIFdlIHN1cHBvcnQgYSBzeW5jaHJvbm91cyBBUEkgdG8gbWFrZSBpdCBlYXNpZXIgdG8gbWlncmF0ZVxuICAgIC8vIGV4aXN0aW5nIGNvZGUgdG8gYXN5bmMuIFRoaXMgd29ya3MgYmVjYXVzZSBpZiB5b3UgZG9uJ3QgZG9cbiAgICAvLyBhbnl0aGluZyBhc3luYyB3b3JrLCB0aGUgd2hvbGUgdGhpbmcgaXMgYWN0dWFsbHkgcnVuXG4gICAgLy8gc3luY2hyb25vdXNseS5cblxuXG4gICAgdmFyIHN5bmNSZXN1bHQgPSBudWxsO1xuICAgIHRoaXMuZ2V0VGVtcGxhdGUobmFtZSwgZnVuY3Rpb24gKGVyciwgdG1wbCkge1xuICAgICAgaWYgKGVyciAmJiBjYikge1xuICAgICAgICBjYWxsYmFja0FzYXAoY2IsIGVycik7XG4gICAgICB9IGVsc2UgaWYgKGVycikge1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzeW5jUmVzdWx0ID0gdG1wbC5yZW5kZXIoY3R4LCBjYik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHN5bmNSZXN1bHQ7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlclN0cmluZyA9IGZ1bmN0aW9uIHJlbmRlclN0cmluZyhzcmMsIGN0eCwgb3B0cywgY2IpIHtcbiAgICBpZiAobGliLmlzRnVuY3Rpb24ob3B0cykpIHtcbiAgICAgIGNiID0gb3B0cztcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG5cbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICB2YXIgdG1wbCA9IG5ldyBUZW1wbGF0ZShzcmMsIHRoaXMsIG9wdHMucGF0aCk7XG4gICAgcmV0dXJuIHRtcGwucmVuZGVyKGN0eCwgY2IpO1xuICB9O1xuXG4gIF9wcm90by53YXRlcmZhbGwgPSBmdW5jdGlvbiB3YXRlcmZhbGwodGFza3MsIGNhbGxiYWNrLCBmb3JjZUFzeW5jKSB7XG4gICAgcmV0dXJuIF93YXRlcmZhbGwodGFza3MsIGNhbGxiYWNrLCBmb3JjZUFzeW5jKTtcbiAgfTtcblxuICByZXR1cm4gRW52aXJvbm1lbnQ7XG59KEVtaXR0ZXJPYmopO1xuXG52YXIgQ29udGV4dCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX09iaikge1xuICBfaW5oZXJpdHNMb29zZShDb250ZXh0LCBfT2JqKTtcblxuICBmdW5jdGlvbiBDb250ZXh0KCkge1xuICAgIHJldHVybiBfT2JqLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gQ29udGV4dC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMi5pbml0ID0gZnVuY3Rpb24gaW5pdChjdHgsIGJsb2NrcywgZW52KSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAvLyBIYXMgdG8gYmUgdGllZCB0byBhbiBlbnZpcm9ubWVudCBzbyB3ZSBjYW4gdGFwIGludG8gaXRzIGdsb2JhbHMuXG4gICAgdGhpcy5lbnYgPSBlbnYgfHwgbmV3IEVudmlyb25tZW50KCk7IC8vIE1ha2UgYSBkdXBsaWNhdGUgb2YgY3R4XG5cbiAgICB0aGlzLmN0eCA9IGxpYi5leHRlbmQoe30sIGN0eCk7XG4gICAgdGhpcy5ibG9ja3MgPSB7fTtcbiAgICB0aGlzLmV4cG9ydGVkID0gW107XG4gICAgbGliLmtleXMoYmxvY2tzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICBfdGhpczQuYWRkQmxvY2sobmFtZSwgYmxvY2tzW25hbWVdKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8yLmxvb2t1cCA9IGZ1bmN0aW9uIGxvb2t1cChuYW1lKSB7XG4gICAgLy8gVGhpcyBpcyBvbmUgb2YgdGhlIG1vc3QgY2FsbGVkIGZ1bmN0aW9ucywgc28gb3B0aW1pemUgZm9yXG4gICAgLy8gdGhlIHR5cGljYWwgY2FzZSB3aGVyZSB0aGUgbmFtZSBpc24ndCBpbiB0aGUgZ2xvYmFsc1xuICAgIGlmIChuYW1lIGluIHRoaXMuZW52Lmdsb2JhbHMgJiYgIShuYW1lIGluIHRoaXMuY3R4KSkge1xuICAgICAgcmV0dXJuIHRoaXMuZW52Lmdsb2JhbHNbbmFtZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmN0eFtuYW1lXTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvMi5zZXRWYXJpYWJsZSA9IGZ1bmN0aW9uIHNldFZhcmlhYmxlKG5hbWUsIHZhbCkge1xuICAgIHRoaXMuY3R4W25hbWVdID0gdmFsO1xuICB9O1xuXG4gIF9wcm90bzIuZ2V0VmFyaWFibGVzID0gZnVuY3Rpb24gZ2V0VmFyaWFibGVzKCkge1xuICAgIHJldHVybiB0aGlzLmN0eDtcbiAgfTtcblxuICBfcHJvdG8yLmFkZEJsb2NrID0gZnVuY3Rpb24gYWRkQmxvY2sobmFtZSwgYmxvY2spIHtcbiAgICB0aGlzLmJsb2Nrc1tuYW1lXSA9IHRoaXMuYmxvY2tzW25hbWVdIHx8IFtdO1xuICAgIHRoaXMuYmxvY2tzW25hbWVdLnB1c2goYmxvY2spO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuZ2V0QmxvY2sgPSBmdW5jdGlvbiBnZXRCbG9jayhuYW1lKSB7XG4gICAgaWYgKCF0aGlzLmJsb2Nrc1tuYW1lXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGJsb2NrIFwiJyArIG5hbWUgKyAnXCInKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5ibG9ja3NbbmFtZV1bMF07XG4gIH07XG5cbiAgX3Byb3RvMi5nZXRTdXBlciA9IGZ1bmN0aW9uIGdldFN1cGVyKGVudiwgbmFtZSwgYmxvY2ssIGZyYW1lLCBydW50aW1lLCBjYikge1xuICAgIHZhciBpZHggPSBsaWIuaW5kZXhPZih0aGlzLmJsb2Nrc1tuYW1lXSB8fCBbXSwgYmxvY2spO1xuICAgIHZhciBibGsgPSB0aGlzLmJsb2Nrc1tuYW1lXVtpZHggKyAxXTtcbiAgICB2YXIgY29udGV4dCA9IHRoaXM7XG5cbiAgICBpZiAoaWR4ID09PSAtMSB8fCAhYmxrKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vIHN1cGVyIGJsb2NrIGF2YWlsYWJsZSBmb3IgXCInICsgbmFtZSArICdcIicpO1xuICAgIH1cblxuICAgIGJsayhlbnYsIGNvbnRleHQsIGZyYW1lLCBydW50aW1lLCBjYik7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGRFeHBvcnQgPSBmdW5jdGlvbiBhZGRFeHBvcnQobmFtZSkge1xuICAgIHRoaXMuZXhwb3J0ZWQucHVzaChuYW1lKTtcbiAgfTtcblxuICBfcHJvdG8yLmdldEV4cG9ydGVkID0gZnVuY3Rpb24gZ2V0RXhwb3J0ZWQoKSB7XG4gICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICB2YXIgZXhwb3J0ZWQgPSB7fTtcbiAgICB0aGlzLmV4cG9ydGVkLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIGV4cG9ydGVkW25hbWVdID0gX3RoaXM1LmN0eFtuYW1lXTtcbiAgICB9KTtcbiAgICByZXR1cm4gZXhwb3J0ZWQ7XG4gIH07XG5cbiAgcmV0dXJuIENvbnRleHQ7XG59KE9iaik7XG5cbnZhciBUZW1wbGF0ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX09iajIpIHtcbiAgX2luaGVyaXRzTG9vc2UoVGVtcGxhdGUsIF9PYmoyKTtcblxuICBmdW5jdGlvbiBUZW1wbGF0ZSgpIHtcbiAgICByZXR1cm4gX09iajIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90bzMgPSBUZW1wbGF0ZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMy5pbml0ID0gZnVuY3Rpb24gaW5pdChzcmMsIGVudiwgcGF0aCwgZWFnZXJDb21waWxlKSB7XG4gICAgdGhpcy5lbnYgPSBlbnYgfHwgbmV3IEVudmlyb25tZW50KCk7XG5cbiAgICBpZiAobGliLmlzT2JqZWN0KHNyYykpIHtcbiAgICAgIHN3aXRjaCAoc3JjLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnY29kZSc6XG4gICAgICAgICAgdGhpcy50bXBsUHJvcHMgPSBzcmMub2JqO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgdGhpcy50bXBsU3RyID0gc3JjLm9iajtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgdGVtcGxhdGUgb2JqZWN0IHR5cGUgXCIgKyBzcmMudHlwZSArIFwiOyBleHBlY3RlZCAnY29kZScsIG9yICdzdHJpbmcnXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobGliLmlzU3RyaW5nKHNyYykpIHtcbiAgICAgIHRoaXMudG1wbFN0ciA9IHNyYztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdzcmMgbXVzdCBiZSBhIHN0cmluZyBvciBhbiBvYmplY3QgZGVzY3JpYmluZyB0aGUgc291cmNlJyk7XG4gICAgfVxuXG4gICAgdGhpcy5wYXRoID0gcGF0aDtcblxuICAgIGlmIChlYWdlckNvbXBpbGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuX2NvbXBpbGUoKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB0aHJvdyBsaWIuX3ByZXR0aWZ5RXJyb3IodGhpcy5wYXRoLCB0aGlzLmVudi5vcHRzLmRldiwgZXJyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb21waWxlZCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcihjdHgsIHBhcmVudEZyYW1lLCBjYikge1xuICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgaWYgKHR5cGVvZiBjdHggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNiID0gY3R4O1xuICAgICAgY3R4ID0ge307XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcGFyZW50RnJhbWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNiID0gcGFyZW50RnJhbWU7XG4gICAgICBwYXJlbnRGcmFtZSA9IG51bGw7XG4gICAgfSAvLyBJZiB0aGVyZSBpcyBhIHBhcmVudCBmcmFtZSwgd2UgYXJlIGJlaW5nIGNhbGxlZCBmcm9tIGludGVybmFsXG4gICAgLy8gY29kZSBvZiBhbm90aGVyIHRlbXBsYXRlLCBhbmQgdGhlIGludGVybmFsIHN5c3RlbVxuICAgIC8vIGRlcGVuZHMgb24gdGhlIHN5bmMvYXN5bmMgbmF0dXJlIG9mIHRoZSBwYXJlbnQgdGVtcGxhdGVcbiAgICAvLyB0byBiZSBpbmhlcml0ZWQsIHNvIGZvcmNlIGFuIGFzeW5jIGNhbGxiYWNrXG5cblxuICAgIHZhciBmb3JjZUFzeW5jID0gIXBhcmVudEZyYW1lOyAvLyBDYXRjaCBjb21waWxlIGVycm9ycyBmb3IgYXN5bmMgcmVuZGVyaW5nXG5cbiAgICB0cnkge1xuICAgICAgdGhpcy5jb21waWxlKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdmFyIGVyciA9IGxpYi5fcHJldHRpZnlFcnJvcih0aGlzLnBhdGgsIHRoaXMuZW52Lm9wdHMuZGV2LCBlKTtcblxuICAgICAgaWYgKGNiKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFja0FzYXAoY2IsIGVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dChjdHggfHwge30sIHRoaXMuYmxvY2tzLCB0aGlzLmVudik7XG4gICAgdmFyIGZyYW1lID0gcGFyZW50RnJhbWUgPyBwYXJlbnRGcmFtZS5wdXNoKHRydWUpIDogbmV3IEZyYW1lKCk7XG4gICAgZnJhbWUudG9wTGV2ZWwgPSB0cnVlO1xuICAgIHZhciBzeW5jUmVzdWx0ID0gbnVsbDtcbiAgICB2YXIgZGlkRXJyb3IgPSBmYWxzZTtcbiAgICB0aGlzLnJvb3RSZW5kZXJGdW5jKHRoaXMuZW52LCBjb250ZXh0LCBmcmFtZSwgZ2xvYmFsUnVudGltZSwgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICAvLyBUT0RPOiB0aGlzIGlzIGFjdHVhbGx5IGEgYnVnIGluIHRoZSBjb21waWxlZCB0ZW1wbGF0ZSAoYmVjYXVzZSB3YXRlcmZhbGxcbiAgICAgIC8vIHRhc2tzIGFyZSBib3RoIG5vdCBwYXNzaW5nIGVycm9ycyB1cCB0aGUgY2hhaW4gb2YgY2FsbGJhY2tzIEFORCBhcmUgbm90XG4gICAgICAvLyBjYXVzaW5nIGEgcmV0dXJuIGZyb20gdGhlIHRvcC1tb3N0IHJlbmRlciBmdW5jdGlvbikuIEJ1dCBmaXhpbmcgdGhhdFxuICAgICAgLy8gd2lsbCByZXF1aXJlIGEgbW9yZSBzdWJzdGFudGlhbCBjaGFuZ2UgdG8gdGhlIGNvbXBpbGVyLlxuICAgICAgaWYgKGRpZEVycm9yICYmIGNiICYmIHR5cGVvZiByZXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIC8vIHByZXZlbnQgbXVsdGlwbGUgY2FsbHMgdG8gY2JcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGVyciA9IGxpYi5fcHJldHRpZnlFcnJvcihfdGhpczYucGF0aCwgX3RoaXM2LmVudi5vcHRzLmRldiwgZXJyKTtcbiAgICAgICAgZGlkRXJyb3IgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2IpIHtcbiAgICAgICAgaWYgKGZvcmNlQXN5bmMpIHtcbiAgICAgICAgICBjYWxsYmFja0FzYXAoY2IsIGVyciwgcmVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYihlcnIsIHJlcyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cblxuICAgICAgICBzeW5jUmVzdWx0ID0gcmVzO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzeW5jUmVzdWx0O1xuICB9O1xuXG4gIF9wcm90bzMuZ2V0RXhwb3J0ZWQgPSBmdW5jdGlvbiBnZXRFeHBvcnRlZChjdHgsIHBhcmVudEZyYW1lLCBjYikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgICBpZiAodHlwZW9mIGN0eCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2IgPSBjdHg7XG4gICAgICBjdHggPSB7fTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHBhcmVudEZyYW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYiA9IHBhcmVudEZyYW1lO1xuICAgICAgcGFyZW50RnJhbWUgPSBudWxsO1xuICAgIH0gLy8gQ2F0Y2ggY29tcGlsZSBlcnJvcnMgZm9yIGFzeW5jIHJlbmRlcmluZ1xuXG5cbiAgICB0cnkge1xuICAgICAgdGhpcy5jb21waWxlKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGNiKSB7XG4gICAgICAgIHJldHVybiBjYihlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGZyYW1lID0gcGFyZW50RnJhbWUgPyBwYXJlbnRGcmFtZS5wdXNoKCkgOiBuZXcgRnJhbWUoKTtcbiAgICBmcmFtZS50b3BMZXZlbCA9IHRydWU7IC8vIFJ1biB0aGUgcm9vdFJlbmRlckZ1bmMgdG8gcG9wdWxhdGUgdGhlIGNvbnRleHQgd2l0aCBleHBvcnRlZCB2YXJzXG5cbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KGN0eCB8fCB7fSwgdGhpcy5ibG9ja3MsIHRoaXMuZW52KTtcbiAgICB0aGlzLnJvb3RSZW5kZXJGdW5jKHRoaXMuZW52LCBjb250ZXh0LCBmcmFtZSwgZ2xvYmFsUnVudGltZSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBjYihlcnIsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2IobnVsbCwgY29udGV4dC5nZXRFeHBvcnRlZCgpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8zLmNvbXBpbGUgPSBmdW5jdGlvbiBjb21waWxlKCkge1xuICAgIGlmICghdGhpcy5jb21waWxlZCkge1xuICAgICAgdGhpcy5fY29tcGlsZSgpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8zLl9jb21waWxlID0gZnVuY3Rpb24gX2NvbXBpbGUoKSB7XG4gICAgdmFyIHByb3BzO1xuXG4gICAgaWYgKHRoaXMudG1wbFByb3BzKSB7XG4gICAgICBwcm9wcyA9IHRoaXMudG1wbFByb3BzO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc291cmNlID0gY29tcGlsZXIuY29tcGlsZSh0aGlzLnRtcGxTdHIsIHRoaXMuZW52LmFzeW5jRmlsdGVycywgdGhpcy5lbnYuZXh0ZW5zaW9uc0xpc3QsIHRoaXMucGF0aCwgdGhpcy5lbnYub3B0cyk7XG4gICAgICB2YXIgZnVuYyA9IG5ldyBGdW5jdGlvbihzb3VyY2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy1mdW5jXG5cbiAgICAgIHByb3BzID0gZnVuYygpO1xuICAgIH1cblxuICAgIHRoaXMuYmxvY2tzID0gdGhpcy5fZ2V0QmxvY2tzKHByb3BzKTtcbiAgICB0aGlzLnJvb3RSZW5kZXJGdW5jID0gcHJvcHMucm9vdDtcbiAgICB0aGlzLmNvbXBpbGVkID0gdHJ1ZTtcbiAgfTtcblxuICBfcHJvdG8zLl9nZXRCbG9ja3MgPSBmdW5jdGlvbiBfZ2V0QmxvY2tzKHByb3BzKSB7XG4gICAgdmFyIGJsb2NrcyA9IHt9O1xuICAgIGxpYi5rZXlzKHByb3BzKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICBpZiAoay5zbGljZSgwLCAyKSA9PT0gJ2JfJykge1xuICAgICAgICBibG9ja3Nbay5zbGljZSgyKV0gPSBwcm9wc1trXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gYmxvY2tzO1xuICB9O1xuXG4gIHJldHVybiBUZW1wbGF0ZTtcbn0oT2JqKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEVudmlyb25tZW50OiBFbnZpcm9ubWVudCxcbiAgVGVtcGxhdGU6IFRlbXBsYXRlXG59O1xuXG4vKioqLyB9KSxcbi8qIDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBsZXhlciA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cbnZhciBub2RlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBPYmogPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpLk9iajtcblxudmFyIGxpYiA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBQYXJzZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9PYmopIHtcbiAgX2luaGVyaXRzTG9vc2UoUGFyc2VyLCBfT2JqKTtcblxuICBmdW5jdGlvbiBQYXJzZXIoKSB7XG4gICAgcmV0dXJuIF9PYmouYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFBhcnNlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmluaXQgPSBmdW5jdGlvbiBpbml0KHRva2Vucykge1xuICAgIHRoaXMudG9rZW5zID0gdG9rZW5zO1xuICAgIHRoaXMucGVla2VkID0gbnVsbDtcbiAgICB0aGlzLmJyZWFrT25CbG9ja3MgPSBudWxsO1xuICAgIHRoaXMuZHJvcExlYWRpbmdXaGl0ZXNwYWNlID0gZmFsc2U7XG4gICAgdGhpcy5leHRlbnNpb25zID0gW107XG4gIH07XG5cbiAgX3Byb3RvLm5leHRUb2tlbiA9IGZ1bmN0aW9uIG5leHRUb2tlbih3aXRoV2hpdGVzcGFjZSkge1xuICAgIHZhciB0b2s7XG5cbiAgICBpZiAodGhpcy5wZWVrZWQpIHtcbiAgICAgIGlmICghd2l0aFdoaXRlc3BhY2UgJiYgdGhpcy5wZWVrZWQudHlwZSA9PT0gbGV4ZXIuVE9LRU5fV0hJVEVTUEFDRSkge1xuICAgICAgICB0aGlzLnBlZWtlZCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b2sgPSB0aGlzLnBlZWtlZDtcbiAgICAgICAgdGhpcy5wZWVrZWQgPSBudWxsO1xuICAgICAgICByZXR1cm4gdG9rO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRvayA9IHRoaXMudG9rZW5zLm5leHRUb2tlbigpO1xuXG4gICAgaWYgKCF3aXRoV2hpdGVzcGFjZSkge1xuICAgICAgd2hpbGUgKHRvayAmJiB0b2sudHlwZSA9PT0gbGV4ZXIuVE9LRU5fV0hJVEVTUEFDRSkge1xuICAgICAgICB0b2sgPSB0aGlzLnRva2Vucy5uZXh0VG9rZW4oKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdG9rO1xuICB9O1xuXG4gIF9wcm90by5wZWVrVG9rZW4gPSBmdW5jdGlvbiBwZWVrVG9rZW4oKSB7XG4gICAgdGhpcy5wZWVrZWQgPSB0aGlzLnBlZWtlZCB8fCB0aGlzLm5leHRUb2tlbigpO1xuICAgIHJldHVybiB0aGlzLnBlZWtlZDtcbiAgfTtcblxuICBfcHJvdG8ucHVzaFRva2VuID0gZnVuY3Rpb24gcHVzaFRva2VuKHRvaykge1xuICAgIGlmICh0aGlzLnBlZWtlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdwdXNoVG9rZW46IGNhbiBvbmx5IHB1c2ggb25lIHRva2VuIG9uIGJldHdlZW4gcmVhZHMnKTtcbiAgICB9XG5cbiAgICB0aGlzLnBlZWtlZCA9IHRvaztcbiAgfTtcblxuICBfcHJvdG8uZXJyb3IgPSBmdW5jdGlvbiBlcnJvcihtc2csIGxpbmVubywgY29sbm8pIHtcbiAgICBpZiAobGluZW5vID09PSB1bmRlZmluZWQgfHwgY29sbm8gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIHRvayA9IHRoaXMucGVla1Rva2VuKCkgfHwge307XG4gICAgICBsaW5lbm8gPSB0b2subGluZW5vO1xuICAgICAgY29sbm8gPSB0b2suY29sbm87XG4gICAgfVxuXG4gICAgaWYgKGxpbmVubyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBsaW5lbm8gKz0gMTtcbiAgICB9XG5cbiAgICBpZiAoY29sbm8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29sbm8gKz0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IGxpYi5UZW1wbGF0ZUVycm9yKG1zZywgbGluZW5vLCBjb2xubyk7XG4gIH07XG5cbiAgX3Byb3RvLmZhaWwgPSBmdW5jdGlvbiBmYWlsKG1zZywgbGluZW5vLCBjb2xubykge1xuICAgIHRocm93IHRoaXMuZXJyb3IobXNnLCBsaW5lbm8sIGNvbG5vKTtcbiAgfTtcblxuICBfcHJvdG8uc2tpcCA9IGZ1bmN0aW9uIHNraXAodHlwZSkge1xuICAgIHZhciB0b2sgPSB0aGlzLm5leHRUb2tlbigpO1xuXG4gICAgaWYgKCF0b2sgfHwgdG9rLnR5cGUgIT09IHR5cGUpIHtcbiAgICAgIHRoaXMucHVzaFRva2VuKHRvayk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgX3Byb3RvLmV4cGVjdCA9IGZ1bmN0aW9uIGV4cGVjdCh0eXBlKSB7XG4gICAgdmFyIHRvayA9IHRoaXMubmV4dFRva2VuKCk7XG5cbiAgICBpZiAodG9rLnR5cGUgIT09IHR5cGUpIHtcbiAgICAgIHRoaXMuZmFpbCgnZXhwZWN0ZWQgJyArIHR5cGUgKyAnLCBnb3QgJyArIHRvay50eXBlLCB0b2subGluZW5vLCB0b2suY29sbm8pO1xuICAgIH1cblxuICAgIHJldHVybiB0b2s7XG4gIH07XG5cbiAgX3Byb3RvLnNraXBWYWx1ZSA9IGZ1bmN0aW9uIHNraXBWYWx1ZSh0eXBlLCB2YWwpIHtcbiAgICB2YXIgdG9rID0gdGhpcy5uZXh0VG9rZW4oKTtcblxuICAgIGlmICghdG9rIHx8IHRvay50eXBlICE9PSB0eXBlIHx8IHRvay52YWx1ZSAhPT0gdmFsKSB7XG4gICAgICB0aGlzLnB1c2hUb2tlbih0b2spO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIF9wcm90by5za2lwU3ltYm9sID0gZnVuY3Rpb24gc2tpcFN5bWJvbCh2YWwpIHtcbiAgICByZXR1cm4gdGhpcy5za2lwVmFsdWUobGV4ZXIuVE9LRU5fU1lNQk9MLCB2YWwpO1xuICB9O1xuXG4gIF9wcm90by5hZHZhbmNlQWZ0ZXJCbG9ja0VuZCA9IGZ1bmN0aW9uIGFkdmFuY2VBZnRlckJsb2NrRW5kKG5hbWUpIHtcbiAgICB2YXIgdG9rO1xuXG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICB0b2sgPSB0aGlzLnBlZWtUb2tlbigpO1xuXG4gICAgICBpZiAoIXRvaykge1xuICAgICAgICB0aGlzLmZhaWwoJ3VuZXhwZWN0ZWQgZW5kIG9mIGZpbGUnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRvay50eXBlICE9PSBsZXhlci5UT0tFTl9TWU1CT0wpIHtcbiAgICAgICAgdGhpcy5mYWlsKCdhZHZhbmNlQWZ0ZXJCbG9ja0VuZDogZXhwZWN0ZWQgc3ltYm9sIHRva2VuIG9yICcgKyAnZXhwbGljaXQgbmFtZSB0byBiZSBwYXNzZWQnKTtcbiAgICAgIH1cblxuICAgICAgbmFtZSA9IHRoaXMubmV4dFRva2VuKCkudmFsdWU7XG4gICAgfVxuXG4gICAgdG9rID0gdGhpcy5uZXh0VG9rZW4oKTtcblxuICAgIGlmICh0b2sgJiYgdG9rLnR5cGUgPT09IGxleGVyLlRPS0VOX0JMT0NLX0VORCkge1xuICAgICAgaWYgKHRvay52YWx1ZS5jaGFyQXQoMCkgPT09ICctJykge1xuICAgICAgICB0aGlzLmRyb3BMZWFkaW5nV2hpdGVzcGFjZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZmFpbCgnZXhwZWN0ZWQgYmxvY2sgZW5kIGluICcgKyBuYW1lICsgJyBzdGF0ZW1lbnQnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdG9rO1xuICB9O1xuXG4gIF9wcm90by5hZHZhbmNlQWZ0ZXJWYXJpYWJsZUVuZCA9IGZ1bmN0aW9uIGFkdmFuY2VBZnRlclZhcmlhYmxlRW5kKCkge1xuICAgIHZhciB0b2sgPSB0aGlzLm5leHRUb2tlbigpO1xuXG4gICAgaWYgKHRvayAmJiB0b2sudHlwZSA9PT0gbGV4ZXIuVE9LRU5fVkFSSUFCTEVfRU5EKSB7XG4gICAgICB0aGlzLmRyb3BMZWFkaW5nV2hpdGVzcGFjZSA9IHRvay52YWx1ZS5jaGFyQXQodG9rLnZhbHVlLmxlbmd0aCAtIHRoaXMudG9rZW5zLnRhZ3MuVkFSSUFCTEVfRU5ELmxlbmd0aCAtIDEpID09PSAnLSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHVzaFRva2VuKHRvayk7XG4gICAgICB0aGlzLmZhaWwoJ2V4cGVjdGVkIHZhcmlhYmxlIGVuZCcpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucGFyc2VGb3IgPSBmdW5jdGlvbiBwYXJzZUZvcigpIHtcbiAgICB2YXIgZm9yVG9rID0gdGhpcy5wZWVrVG9rZW4oKTtcbiAgICB2YXIgbm9kZTtcbiAgICB2YXIgZW5kQmxvY2s7XG5cbiAgICBpZiAodGhpcy5za2lwU3ltYm9sKCdmb3InKSkge1xuICAgICAgbm9kZSA9IG5ldyBub2Rlcy5Gb3IoZm9yVG9rLmxpbmVubywgZm9yVG9rLmNvbG5vKTtcbiAgICAgIGVuZEJsb2NrID0gJ2VuZGZvcic7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNraXBTeW1ib2woJ2FzeW5jRWFjaCcpKSB7XG4gICAgICBub2RlID0gbmV3IG5vZGVzLkFzeW5jRWFjaChmb3JUb2subGluZW5vLCBmb3JUb2suY29sbm8pO1xuICAgICAgZW5kQmxvY2sgPSAnZW5kZWFjaCc7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNraXBTeW1ib2woJ2FzeW5jQWxsJykpIHtcbiAgICAgIG5vZGUgPSBuZXcgbm9kZXMuQXN5bmNBbGwoZm9yVG9rLmxpbmVubywgZm9yVG9rLmNvbG5vKTtcbiAgICAgIGVuZEJsb2NrID0gJ2VuZGFsbCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZmFpbCgncGFyc2VGb3I6IGV4cGVjdGVkIGZvcntBc3luY30nLCBmb3JUb2subGluZW5vLCBmb3JUb2suY29sbm8pO1xuICAgIH1cblxuICAgIG5vZGUubmFtZSA9IHRoaXMucGFyc2VQcmltYXJ5KCk7XG5cbiAgICBpZiAoIShub2RlLm5hbWUgaW5zdGFuY2VvZiBub2Rlcy5TeW1ib2wpKSB7XG4gICAgICB0aGlzLmZhaWwoJ3BhcnNlRm9yOiB2YXJpYWJsZSBuYW1lIGV4cGVjdGVkIGZvciBsb29wJyk7XG4gICAgfVxuXG4gICAgdmFyIHR5cGUgPSB0aGlzLnBlZWtUb2tlbigpLnR5cGU7XG5cbiAgICBpZiAodHlwZSA9PT0gbGV4ZXIuVE9LRU5fQ09NTUEpIHtcbiAgICAgIC8vIGtleS92YWx1ZSBpdGVyYXRpb25cbiAgICAgIHZhciBrZXkgPSBub2RlLm5hbWU7XG4gICAgICBub2RlLm5hbWUgPSBuZXcgbm9kZXMuQXJyYXkoa2V5LmxpbmVubywga2V5LmNvbG5vKTtcbiAgICAgIG5vZGUubmFtZS5hZGRDaGlsZChrZXkpO1xuXG4gICAgICB3aGlsZSAodGhpcy5za2lwKGxleGVyLlRPS0VOX0NPTU1BKSkge1xuICAgICAgICB2YXIgcHJpbSA9IHRoaXMucGFyc2VQcmltYXJ5KCk7XG4gICAgICAgIG5vZGUubmFtZS5hZGRDaGlsZChwcmltKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuc2tpcFN5bWJvbCgnaW4nKSkge1xuICAgICAgdGhpcy5mYWlsKCdwYXJzZUZvcjogZXhwZWN0ZWQgXCJpblwiIGtleXdvcmQgZm9yIGxvb3AnLCBmb3JUb2subGluZW5vLCBmb3JUb2suY29sbm8pO1xuICAgIH1cblxuICAgIG5vZGUuYXJyID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgICB0aGlzLmFkdmFuY2VBZnRlckJsb2NrRW5kKGZvclRvay52YWx1ZSk7XG4gICAgbm9kZS5ib2R5ID0gdGhpcy5wYXJzZVVudGlsQmxvY2tzKGVuZEJsb2NrLCAnZWxzZScpO1xuXG4gICAgaWYgKHRoaXMuc2tpcFN5bWJvbCgnZWxzZScpKSB7XG4gICAgICB0aGlzLmFkdmFuY2VBZnRlckJsb2NrRW5kKCdlbHNlJyk7XG4gICAgICBub2RlLmVsc2VfID0gdGhpcy5wYXJzZVVudGlsQmxvY2tzKGVuZEJsb2NrKTtcbiAgICB9XG5cbiAgICB0aGlzLmFkdmFuY2VBZnRlckJsb2NrRW5kKCk7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG5cbiAgX3Byb3RvLnBhcnNlTWFjcm8gPSBmdW5jdGlvbiBwYXJzZU1hY3JvKCkge1xuICAgIHZhciBtYWNyb1RvayA9IHRoaXMucGVla1Rva2VuKCk7XG5cbiAgICBpZiAoIXRoaXMuc2tpcFN5bWJvbCgnbWFjcm8nKSkge1xuICAgICAgdGhpcy5mYWlsKCdleHBlY3RlZCBtYWNybycpO1xuICAgIH1cblxuICAgIHZhciBuYW1lID0gdGhpcy5wYXJzZVByaW1hcnkodHJ1ZSk7XG4gICAgdmFyIGFyZ3MgPSB0aGlzLnBhcnNlU2lnbmF0dXJlKCk7XG4gICAgdmFyIG5vZGUgPSBuZXcgbm9kZXMuTWFjcm8obWFjcm9Ub2subGluZW5vLCBtYWNyb1Rvay5jb2xubywgbmFtZSwgYXJncyk7XG4gICAgdGhpcy5hZHZhbmNlQWZ0ZXJCbG9ja0VuZChtYWNyb1Rvay52YWx1ZSk7XG4gICAgbm9kZS5ib2R5ID0gdGhpcy5wYXJzZVVudGlsQmxvY2tzKCdlbmRtYWNybycpO1xuICAgIHRoaXMuYWR2YW5jZUFmdGVyQmxvY2tFbmQoKTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICBfcHJvdG8ucGFyc2VDYWxsID0gZnVuY3Rpb24gcGFyc2VDYWxsKCkge1xuICAgIC8vIGEgY2FsbCBibG9jayBpcyBwYXJzZWQgYXMgYSBub3JtYWwgRnVuQ2FsbCwgYnV0IHdpdGggYW4gYWRkZWRcbiAgICAvLyAnY2FsbGVyJyBrd2FyZyB3aGljaCBpcyBhIENhbGxlciBub2RlLlxuICAgIHZhciBjYWxsVG9rID0gdGhpcy5wZWVrVG9rZW4oKTtcblxuICAgIGlmICghdGhpcy5za2lwU3ltYm9sKCdjYWxsJykpIHtcbiAgICAgIHRoaXMuZmFpbCgnZXhwZWN0ZWQgY2FsbCcpO1xuICAgIH1cblxuICAgIHZhciBjYWxsZXJBcmdzID0gdGhpcy5wYXJzZVNpZ25hdHVyZSh0cnVlKSB8fCBuZXcgbm9kZXMuTm9kZUxpc3QoKTtcbiAgICB2YXIgbWFjcm9DYWxsID0gdGhpcy5wYXJzZVByaW1hcnkoKTtcbiAgICB0aGlzLmFkdmFuY2VBZnRlckJsb2NrRW5kKGNhbGxUb2sudmFsdWUpO1xuICAgIHZhciBib2R5ID0gdGhpcy5wYXJzZVVudGlsQmxvY2tzKCdlbmRjYWxsJyk7XG4gICAgdGhpcy5hZHZhbmNlQWZ0ZXJCbG9ja0VuZCgpO1xuICAgIHZhciBjYWxsZXJOYW1lID0gbmV3IG5vZGVzLlN5bWJvbChjYWxsVG9rLmxpbmVubywgY2FsbFRvay5jb2xubywgJ2NhbGxlcicpO1xuICAgIHZhciBjYWxsZXJOb2RlID0gbmV3IG5vZGVzLkNhbGxlcihjYWxsVG9rLmxpbmVubywgY2FsbFRvay5jb2xubywgY2FsbGVyTmFtZSwgY2FsbGVyQXJncywgYm9keSk7IC8vIGFkZCB0aGUgYWRkaXRpb25hbCBjYWxsZXIga3dhcmcsIGFkZGluZyBrd2FyZ3MgaWYgbmVjZXNzYXJ5XG5cbiAgICB2YXIgYXJncyA9IG1hY3JvQ2FsbC5hcmdzLmNoaWxkcmVuO1xuXG4gICAgaWYgKCEoYXJnc1thcmdzLmxlbmd0aCAtIDFdIGluc3RhbmNlb2Ygbm9kZXMuS2V5d29yZEFyZ3MpKSB7XG4gICAgICBhcmdzLnB1c2gobmV3IG5vZGVzLktleXdvcmRBcmdzKCkpO1xuICAgIH1cblxuICAgIHZhciBrd2FyZ3MgPSBhcmdzW2FyZ3MubGVuZ3RoIC0gMV07XG4gICAga3dhcmdzLmFkZENoaWxkKG5ldyBub2Rlcy5QYWlyKGNhbGxUb2subGluZW5vLCBjYWxsVG9rLmNvbG5vLCBjYWxsZXJOYW1lLCBjYWxsZXJOb2RlKSk7XG4gICAgcmV0dXJuIG5ldyBub2Rlcy5PdXRwdXQoY2FsbFRvay5saW5lbm8sIGNhbGxUb2suY29sbm8sIFttYWNyb0NhbGxdKTtcbiAgfTtcblxuICBfcHJvdG8ucGFyc2VXaXRoQ29udGV4dCA9IGZ1bmN0aW9uIHBhcnNlV2l0aENvbnRleHQoKSB7XG4gICAgdmFyIHRvayA9IHRoaXMucGVla1Rva2VuKCk7XG4gICAgdmFyIHdpdGhDb250ZXh0ID0gbnVsbDtcblxuICAgIGlmICh0aGlzLnNraXBTeW1ib2woJ3dpdGgnKSkge1xuICAgICAgd2l0aENvbnRleHQgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAodGhpcy5za2lwU3ltYm9sKCd3aXRob3V0JykpIHtcbiAgICAgIHdpdGhDb250ZXh0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHdpdGhDb250ZXh0ICE9PSBudWxsKSB7XG4gICAgICBpZiAoIXRoaXMuc2tpcFN5bWJvbCgnY29udGV4dCcpKSB7XG4gICAgICAgIHRoaXMuZmFpbCgncGFyc2VGcm9tOiBleHBlY3RlZCBjb250ZXh0IGFmdGVyIHdpdGgvd2l0aG91dCcsIHRvay5saW5lbm8sIHRvay5jb2xubyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHdpdGhDb250ZXh0O1xuICB9O1xuXG4gIF9wcm90by5wYXJzZUltcG9ydCA9IGZ1bmN0aW9uIHBhcnNlSW1wb3J0KCkge1xuICAgIHZhciBpbXBvcnRUb2sgPSB0aGlzLnBlZWtUb2tlbigpO1xuXG4gICAgaWYgKCF0aGlzLnNraXBTeW1ib2woJ2ltcG9ydCcpKSB7XG4gICAgICB0aGlzLmZhaWwoJ3BhcnNlSW1wb3J0OiBleHBlY3RlZCBpbXBvcnQnLCBpbXBvcnRUb2subGluZW5vLCBpbXBvcnRUb2suY29sbm8pO1xuICAgIH1cblxuICAgIHZhciB0ZW1wbGF0ZSA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG5cbiAgICBpZiAoIXRoaXMuc2tpcFN5bWJvbCgnYXMnKSkge1xuICAgICAgdGhpcy5mYWlsKCdwYXJzZUltcG9ydDogZXhwZWN0ZWQgXCJhc1wiIGtleXdvcmQnLCBpbXBvcnRUb2subGluZW5vLCBpbXBvcnRUb2suY29sbm8pO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXQgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xuICAgIHZhciB3aXRoQ29udGV4dCA9IHRoaXMucGFyc2VXaXRoQ29udGV4dCgpO1xuICAgIHZhciBub2RlID0gbmV3IG5vZGVzLkltcG9ydChpbXBvcnRUb2subGluZW5vLCBpbXBvcnRUb2suY29sbm8sIHRlbXBsYXRlLCB0YXJnZXQsIHdpdGhDb250ZXh0KTtcbiAgICB0aGlzLmFkdmFuY2VBZnRlckJsb2NrRW5kKGltcG9ydFRvay52YWx1ZSk7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG5cbiAgX3Byb3RvLnBhcnNlRnJvbSA9IGZ1bmN0aW9uIHBhcnNlRnJvbSgpIHtcbiAgICB2YXIgZnJvbVRvayA9IHRoaXMucGVla1Rva2VuKCk7XG5cbiAgICBpZiAoIXRoaXMuc2tpcFN5bWJvbCgnZnJvbScpKSB7XG4gICAgICB0aGlzLmZhaWwoJ3BhcnNlRnJvbTogZXhwZWN0ZWQgZnJvbScpO1xuICAgIH1cblxuICAgIHZhciB0ZW1wbGF0ZSA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG5cbiAgICBpZiAoIXRoaXMuc2tpcFN5bWJvbCgnaW1wb3J0JykpIHtcbiAgICAgIHRoaXMuZmFpbCgncGFyc2VGcm9tOiBleHBlY3RlZCBpbXBvcnQnLCBmcm9tVG9rLmxpbmVubywgZnJvbVRvay5jb2xubyk7XG4gICAgfVxuXG4gICAgdmFyIG5hbWVzID0gbmV3IG5vZGVzLk5vZGVMaXN0KCk7XG4gICAgdmFyIHdpdGhDb250ZXh0O1xuXG4gICAgd2hpbGUgKDEpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG4gICAgICB2YXIgbmV4dFRvayA9IHRoaXMucGVla1Rva2VuKCk7XG5cbiAgICAgIGlmIChuZXh0VG9rLnR5cGUgPT09IGxleGVyLlRPS0VOX0JMT0NLX0VORCkge1xuICAgICAgICBpZiAoIW5hbWVzLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuZmFpbCgncGFyc2VGcm9tOiBFeHBlY3RlZCBhdCBsZWFzdCBvbmUgaW1wb3J0IG5hbWUnLCBmcm9tVG9rLmxpbmVubywgZnJvbVRvay5jb2xubyk7XG4gICAgICAgIH0gLy8gU2luY2Ugd2UgYXJlIG1hbnVhbGx5IGFkdmFuY2luZyBwYXN0IHRoZSBibG9jayBlbmQsXG4gICAgICAgIC8vIG5lZWQgdG8ga2VlcCB0cmFjayBvZiB3aGl0ZXNwYWNlIGNvbnRyb2wgKG5vcm1hbGx5XG4gICAgICAgIC8vIHRoaXMgaXMgZG9uZSBpbiBgYWR2YW5jZUFmdGVyQmxvY2tFbmRgXG5cblxuICAgICAgICBpZiAobmV4dFRvay52YWx1ZS5jaGFyQXQoMCkgPT09ICctJykge1xuICAgICAgICAgIHRoaXMuZHJvcExlYWRpbmdXaGl0ZXNwYWNlID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAobmFtZXMuY2hpbGRyZW4ubGVuZ3RoID4gMCAmJiAhdGhpcy5za2lwKGxleGVyLlRPS0VOX0NPTU1BKSkge1xuICAgICAgICB0aGlzLmZhaWwoJ3BhcnNlRnJvbTogZXhwZWN0ZWQgY29tbWEnLCBmcm9tVG9rLmxpbmVubywgZnJvbVRvay5jb2xubyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBuYW1lID0gdGhpcy5wYXJzZVByaW1hcnkoKTtcblxuICAgICAgaWYgKG5hbWUudmFsdWUuY2hhckF0KDApID09PSAnXycpIHtcbiAgICAgICAgdGhpcy5mYWlsKCdwYXJzZUZyb206IG5hbWVzIHN0YXJ0aW5nIHdpdGggYW4gdW5kZXJzY29yZSBjYW5ub3QgYmUgaW1wb3J0ZWQnLCBuYW1lLmxpbmVubywgbmFtZS5jb2xubyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNraXBTeW1ib2woJ2FzJykpIHtcbiAgICAgICAgdmFyIGFsaWFzID0gdGhpcy5wYXJzZVByaW1hcnkoKTtcbiAgICAgICAgbmFtZXMuYWRkQ2hpbGQobmV3IG5vZGVzLlBhaXIobmFtZS5saW5lbm8sIG5hbWUuY29sbm8sIG5hbWUsIGFsaWFzKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuYW1lcy5hZGRDaGlsZChuYW1lKTtcbiAgICAgIH1cblxuICAgICAgd2l0aENvbnRleHQgPSB0aGlzLnBhcnNlV2l0aENvbnRleHQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IG5vZGVzLkZyb21JbXBvcnQoZnJvbVRvay5saW5lbm8sIGZyb21Ub2suY29sbm8sIHRlbXBsYXRlLCBuYW1lcywgd2l0aENvbnRleHQpO1xuICB9O1xuXG4gIF9wcm90by5wYXJzZUJsb2NrID0gZnVuY3Rpb24gcGFyc2VCbG9jaygpIHtcbiAgICB2YXIgdGFnID0gdGhpcy5wZWVrVG9rZW4oKTtcblxuICAgIGlmICghdGhpcy5za2lwU3ltYm9sKCdibG9jaycpKSB7XG4gICAgICB0aGlzLmZhaWwoJ3BhcnNlQmxvY2s6IGV4cGVjdGVkIGJsb2NrJywgdGFnLmxpbmVubywgdGFnLmNvbG5vKTtcbiAgICB9XG5cbiAgICB2YXIgbm9kZSA9IG5ldyBub2Rlcy5CbG9jayh0YWcubGluZW5vLCB0YWcuY29sbm8pO1xuICAgIG5vZGUubmFtZSA9IHRoaXMucGFyc2VQcmltYXJ5KCk7XG5cbiAgICBpZiAoIShub2RlLm5hbWUgaW5zdGFuY2VvZiBub2Rlcy5TeW1ib2wpKSB7XG4gICAgICB0aGlzLmZhaWwoJ3BhcnNlQmxvY2s6IHZhcmlhYmxlIG5hbWUgZXhwZWN0ZWQnLCB0YWcubGluZW5vLCB0YWcuY29sbm8pO1xuICAgIH1cblxuICAgIHRoaXMuYWR2YW5jZUFmdGVyQmxvY2tFbmQodGFnLnZhbHVlKTtcbiAgICBub2RlLmJvZHkgPSB0aGlzLnBhcnNlVW50aWxCbG9ja3MoJ2VuZGJsb2NrJyk7XG4gICAgdGhpcy5za2lwU3ltYm9sKCdlbmRibG9jaycpO1xuICAgIHRoaXMuc2tpcFN5bWJvbChub2RlLm5hbWUudmFsdWUpO1xuICAgIHZhciB0b2sgPSB0aGlzLnBlZWtUb2tlbigpO1xuXG4gICAgaWYgKCF0b2spIHtcbiAgICAgIHRoaXMuZmFpbCgncGFyc2VCbG9jazogZXhwZWN0ZWQgZW5kYmxvY2ssIGdvdCBlbmQgb2YgZmlsZScpO1xuICAgIH1cblxuICAgIHRoaXMuYWR2YW5jZUFmdGVyQmxvY2tFbmQodG9rLnZhbHVlKTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICBfcHJvdG8ucGFyc2VFeHRlbmRzID0gZnVuY3Rpb24gcGFyc2VFeHRlbmRzKCkge1xuICAgIHZhciB0YWdOYW1lID0gJ2V4dGVuZHMnO1xuICAgIHZhciB0YWcgPSB0aGlzLnBlZWtUb2tlbigpO1xuXG4gICAgaWYgKCF0aGlzLnNraXBTeW1ib2wodGFnTmFtZSkpIHtcbiAgICAgIHRoaXMuZmFpbCgncGFyc2VUZW1wbGF0ZVJlZjogZXhwZWN0ZWQgJyArIHRhZ05hbWUpO1xuICAgIH1cblxuICAgIHZhciBub2RlID0gbmV3IG5vZGVzLkV4dGVuZHModGFnLmxpbmVubywgdGFnLmNvbG5vKTtcbiAgICBub2RlLnRlbXBsYXRlID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgICB0aGlzLmFkdmFuY2VBZnRlckJsb2NrRW5kKHRhZy52YWx1ZSk7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG5cbiAgX3Byb3RvLnBhcnNlSW5jbHVkZSA9IGZ1bmN0aW9uIHBhcnNlSW5jbHVkZSgpIHtcbiAgICB2YXIgdGFnTmFtZSA9ICdpbmNsdWRlJztcbiAgICB2YXIgdGFnID0gdGhpcy5wZWVrVG9rZW4oKTtcblxuICAgIGlmICghdGhpcy5za2lwU3ltYm9sKHRhZ05hbWUpKSB7XG4gICAgICB0aGlzLmZhaWwoJ3BhcnNlSW5jbHVkZTogZXhwZWN0ZWQgJyArIHRhZ05hbWUpO1xuICAgIH1cblxuICAgIHZhciBub2RlID0gbmV3IG5vZGVzLkluY2x1ZGUodGFnLmxpbmVubywgdGFnLmNvbG5vKTtcbiAgICBub2RlLnRlbXBsYXRlID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcblxuICAgIGlmICh0aGlzLnNraXBTeW1ib2woJ2lnbm9yZScpICYmIHRoaXMuc2tpcFN5bWJvbCgnbWlzc2luZycpKSB7XG4gICAgICBub2RlLmlnbm9yZU1pc3NpbmcgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuYWR2YW5jZUFmdGVyQmxvY2tFbmQodGFnLnZhbHVlKTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICBfcHJvdG8ucGFyc2VJZiA9IGZ1bmN0aW9uIHBhcnNlSWYoKSB7XG4gICAgdmFyIHRhZyA9IHRoaXMucGVla1Rva2VuKCk7XG4gICAgdmFyIG5vZGU7XG5cbiAgICBpZiAodGhpcy5za2lwU3ltYm9sKCdpZicpIHx8IHRoaXMuc2tpcFN5bWJvbCgnZWxpZicpIHx8IHRoaXMuc2tpcFN5bWJvbCgnZWxzZWlmJykpIHtcbiAgICAgIG5vZGUgPSBuZXcgbm9kZXMuSWYodGFnLmxpbmVubywgdGFnLmNvbG5vKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc2tpcFN5bWJvbCgnaWZBc3luYycpKSB7XG4gICAgICBub2RlID0gbmV3IG5vZGVzLklmQXN5bmModGFnLmxpbmVubywgdGFnLmNvbG5vKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5mYWlsKCdwYXJzZUlmOiBleHBlY3RlZCBpZiwgZWxpZiwgb3IgZWxzZWlmJywgdGFnLmxpbmVubywgdGFnLmNvbG5vKTtcbiAgICB9XG5cbiAgICBub2RlLmNvbmQgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xuICAgIHRoaXMuYWR2YW5jZUFmdGVyQmxvY2tFbmQodGFnLnZhbHVlKTtcbiAgICBub2RlLmJvZHkgPSB0aGlzLnBhcnNlVW50aWxCbG9ja3MoJ2VsaWYnLCAnZWxzZWlmJywgJ2Vsc2UnLCAnZW5kaWYnKTtcbiAgICB2YXIgdG9rID0gdGhpcy5wZWVrVG9rZW4oKTtcblxuICAgIHN3aXRjaCAodG9rICYmIHRvay52YWx1ZSkge1xuICAgICAgY2FzZSAnZWxzZWlmJzpcbiAgICAgIGNhc2UgJ2VsaWYnOlxuICAgICAgICBub2RlLmVsc2VfID0gdGhpcy5wYXJzZUlmKCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdlbHNlJzpcbiAgICAgICAgdGhpcy5hZHZhbmNlQWZ0ZXJCbG9ja0VuZCgpO1xuICAgICAgICBub2RlLmVsc2VfID0gdGhpcy5wYXJzZVVudGlsQmxvY2tzKCdlbmRpZicpO1xuICAgICAgICB0aGlzLmFkdmFuY2VBZnRlckJsb2NrRW5kKCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdlbmRpZic6XG4gICAgICAgIG5vZGUuZWxzZV8gPSBudWxsO1xuICAgICAgICB0aGlzLmFkdmFuY2VBZnRlckJsb2NrRW5kKCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLmZhaWwoJ3BhcnNlSWY6IGV4cGVjdGVkIGVsaWYsIGVsc2UsIG9yIGVuZGlmLCBnb3QgZW5kIG9mIGZpbGUnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICBfcHJvdG8ucGFyc2VTZXQgPSBmdW5jdGlvbiBwYXJzZVNldCgpIHtcbiAgICB2YXIgdGFnID0gdGhpcy5wZWVrVG9rZW4oKTtcblxuICAgIGlmICghdGhpcy5za2lwU3ltYm9sKCdzZXQnKSkge1xuICAgICAgdGhpcy5mYWlsKCdwYXJzZVNldDogZXhwZWN0ZWQgc2V0JywgdGFnLmxpbmVubywgdGFnLmNvbG5vKTtcbiAgICB9XG5cbiAgICB2YXIgbm9kZSA9IG5ldyBub2Rlcy5TZXQodGFnLmxpbmVubywgdGFnLmNvbG5vLCBbXSk7XG4gICAgdmFyIHRhcmdldDtcblxuICAgIHdoaWxlICh0YXJnZXQgPSB0aGlzLnBhcnNlUHJpbWFyeSgpKSB7XG4gICAgICBub2RlLnRhcmdldHMucHVzaCh0YXJnZXQpO1xuXG4gICAgICBpZiAoIXRoaXMuc2tpcChsZXhlci5UT0tFTl9DT01NQSkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnNraXBWYWx1ZShsZXhlci5UT0tFTl9PUEVSQVRPUiwgJz0nKSkge1xuICAgICAgaWYgKCF0aGlzLnNraXAobGV4ZXIuVE9LRU5fQkxPQ0tfRU5EKSkge1xuICAgICAgICB0aGlzLmZhaWwoJ3BhcnNlU2V0OiBleHBlY3RlZCA9IG9yIGJsb2NrIGVuZCBpbiBzZXQgdGFnJywgdGFnLmxpbmVubywgdGFnLmNvbG5vKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuYm9keSA9IG5ldyBub2Rlcy5DYXB0dXJlKHRhZy5saW5lbm8sIHRhZy5jb2xubywgdGhpcy5wYXJzZVVudGlsQmxvY2tzKCdlbmRzZXQnKSk7XG4gICAgICAgIG5vZGUudmFsdWUgPSBudWxsO1xuICAgICAgICB0aGlzLmFkdmFuY2VBZnRlckJsb2NrRW5kKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUudmFsdWUgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xuICAgICAgdGhpcy5hZHZhbmNlQWZ0ZXJCbG9ja0VuZCh0YWcudmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIF9wcm90by5wYXJzZVN3aXRjaCA9IGZ1bmN0aW9uIHBhcnNlU3dpdGNoKCkge1xuICAgIC8qXG4gICAgICogU3RvcmUgdGhlIHRhZyBuYW1lcyBpbiB2YXJpYWJsZXMgaW4gY2FzZSBzb21lb25lIGV2ZXIgd2FudHMgdG9cbiAgICAgKiBjdXN0b21pemUgdGhpcy5cbiAgICAgKi9cbiAgICB2YXIgc3dpdGNoU3RhcnQgPSAnc3dpdGNoJztcbiAgICB2YXIgc3dpdGNoRW5kID0gJ2VuZHN3aXRjaCc7XG4gICAgdmFyIGNhc2VTdGFydCA9ICdjYXNlJztcbiAgICB2YXIgY2FzZURlZmF1bHQgPSAnZGVmYXVsdCc7IC8vIEdldCB0aGUgc3dpdGNoIHRhZy5cblxuICAgIHZhciB0YWcgPSB0aGlzLnBlZWtUb2tlbigpOyAvLyBmYWlsIGVhcmx5IGlmIHdlIGdldCBzb21lIHVuZXhwZWN0ZWQgdGFnLlxuXG4gICAgaWYgKCF0aGlzLnNraXBTeW1ib2woc3dpdGNoU3RhcnQpICYmICF0aGlzLnNraXBTeW1ib2woY2FzZVN0YXJ0KSAmJiAhdGhpcy5za2lwU3ltYm9sKGNhc2VEZWZhdWx0KSkge1xuICAgICAgdGhpcy5mYWlsKCdwYXJzZVN3aXRjaDogZXhwZWN0ZWQgXCJzd2l0Y2gsXCIgXCJjYXNlXCIgb3IgXCJkZWZhdWx0XCInLCB0YWcubGluZW5vLCB0YWcuY29sbm8pO1xuICAgIH0gLy8gcGFyc2UgdGhlIHN3aXRjaCBleHByZXNzaW9uXG5cblxuICAgIHZhciBleHByID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTsgLy8gYWR2YW5jZSB1bnRpbCBhIHN0YXJ0IG9mIGEgY2FzZSwgYSBkZWZhdWx0IGNhc2Ugb3IgYW4gZW5kc3dpdGNoLlxuXG4gICAgdGhpcy5hZHZhbmNlQWZ0ZXJCbG9ja0VuZChzd2l0Y2hTdGFydCk7XG4gICAgdGhpcy5wYXJzZVVudGlsQmxvY2tzKGNhc2VTdGFydCwgY2FzZURlZmF1bHQsIHN3aXRjaEVuZCk7IC8vIHRoaXMgaXMgdGhlIGZpcnN0IGNhc2UuIGl0IGNvdWxkIGFsc28gYmUgYW4gZW5kc3dpdGNoLCB3ZSdsbCBjaGVjay5cblxuICAgIHZhciB0b2sgPSB0aGlzLnBlZWtUb2tlbigpOyAvLyBjcmVhdGUgbmV3IHZhcmlhYmxlcyBmb3Igb3VyIGNhc2VzIGFuZCBkZWZhdWx0IGNhc2UuXG5cbiAgICB2YXIgY2FzZXMgPSBbXTtcbiAgICB2YXIgZGVmYXVsdENhc2U7IC8vIHdoaWxlIHdlJ3JlIGRlYWxpbmcgd2l0aCBuZXcgY2FzZXMgbm9kZXMuLi5cblxuICAgIGRvIHtcbiAgICAgIC8vIHNraXAgdGhlIHN0YXJ0IHN5bWJvbCBhbmQgZ2V0IHRoZSBjYXNlIGV4cHJlc3Npb25cbiAgICAgIHRoaXMuc2tpcFN5bWJvbChjYXNlU3RhcnQpO1xuICAgICAgdmFyIGNvbmQgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xuICAgICAgdGhpcy5hZHZhbmNlQWZ0ZXJCbG9ja0VuZChzd2l0Y2hTdGFydCk7IC8vIGdldCB0aGUgYm9keSBvZiB0aGUgY2FzZSBub2RlIGFuZCBhZGQgaXQgdG8gdGhlIGFycmF5IG9mIGNhc2VzLlxuXG4gICAgICB2YXIgYm9keSA9IHRoaXMucGFyc2VVbnRpbEJsb2NrcyhjYXNlU3RhcnQsIGNhc2VEZWZhdWx0LCBzd2l0Y2hFbmQpO1xuICAgICAgY2FzZXMucHVzaChuZXcgbm9kZXMuQ2FzZSh0b2subGluZSwgdG9rLmNvbCwgY29uZCwgYm9keSkpOyAvLyBnZXQgb3VyIG5leHQgY2FzZVxuXG4gICAgICB0b2sgPSB0aGlzLnBlZWtUb2tlbigpO1xuICAgIH0gd2hpbGUgKHRvayAmJiB0b2sudmFsdWUgPT09IGNhc2VTdGFydCk7IC8vIHdlIGVpdGhlciBoYXZlIGEgZGVmYXVsdCBjYXNlIG9yIGEgc3dpdGNoIGVuZC5cblxuXG4gICAgc3dpdGNoICh0b2sudmFsdWUpIHtcbiAgICAgIGNhc2UgY2FzZURlZmF1bHQ6XG4gICAgICAgIHRoaXMuYWR2YW5jZUFmdGVyQmxvY2tFbmQoKTtcbiAgICAgICAgZGVmYXVsdENhc2UgPSB0aGlzLnBhcnNlVW50aWxCbG9ja3Moc3dpdGNoRW5kKTtcbiAgICAgICAgdGhpcy5hZHZhbmNlQWZ0ZXJCbG9ja0VuZCgpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBzd2l0Y2hFbmQ6XG4gICAgICAgIHRoaXMuYWR2YW5jZUFmdGVyQmxvY2tFbmQoKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIG90aGVyd2lzZSBiYWlsIGJlY2F1c2UgRU9GXG4gICAgICAgIHRoaXMuZmFpbCgncGFyc2VTd2l0Y2g6IGV4cGVjdGVkIFwiY2FzZSxcIiBcImRlZmF1bHRcIiBvciBcImVuZHN3aXRjaCxcIiBnb3QgRU9GLicpO1xuICAgIH0gLy8gYW5kIHJldHVybiB0aGUgc3dpdGNoIG5vZGUuXG5cblxuICAgIHJldHVybiBuZXcgbm9kZXMuU3dpdGNoKHRhZy5saW5lbm8sIHRhZy5jb2xubywgZXhwciwgY2FzZXMsIGRlZmF1bHRDYXNlKTtcbiAgfTtcblxuICBfcHJvdG8ucGFyc2VTdGF0ZW1lbnQgPSBmdW5jdGlvbiBwYXJzZVN0YXRlbWVudCgpIHtcbiAgICB2YXIgdG9rID0gdGhpcy5wZWVrVG9rZW4oKTtcbiAgICB2YXIgbm9kZTtcblxuICAgIGlmICh0b2sudHlwZSAhPT0gbGV4ZXIuVE9LRU5fU1lNQk9MKSB7XG4gICAgICB0aGlzLmZhaWwoJ3RhZyBuYW1lIGV4cGVjdGVkJywgdG9rLmxpbmVubywgdG9rLmNvbG5vKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5icmVha09uQmxvY2tzICYmIGxpYi5pbmRleE9mKHRoaXMuYnJlYWtPbkJsb2NrcywgdG9rLnZhbHVlKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rLnZhbHVlKSB7XG4gICAgICBjYXNlICdyYXcnOlxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVJhdygpO1xuXG4gICAgICBjYXNlICd2ZXJiYXRpbSc6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlUmF3KCd2ZXJiYXRpbScpO1xuXG4gICAgICBjYXNlICdpZic6XG4gICAgICBjYXNlICdpZkFzeW5jJzpcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VJZigpO1xuXG4gICAgICBjYXNlICdmb3InOlxuICAgICAgY2FzZSAnYXN5bmNFYWNoJzpcbiAgICAgIGNhc2UgJ2FzeW5jQWxsJzpcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VGb3IoKTtcblxuICAgICAgY2FzZSAnYmxvY2snOlxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUJsb2NrKCk7XG5cbiAgICAgIGNhc2UgJ2V4dGVuZHMnOlxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUV4dGVuZHMoKTtcblxuICAgICAgY2FzZSAnaW5jbHVkZSc6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlSW5jbHVkZSgpO1xuXG4gICAgICBjYXNlICdzZXQnOlxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVNldCgpO1xuXG4gICAgICBjYXNlICdtYWNybyc6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlTWFjcm8oKTtcblxuICAgICAgY2FzZSAnY2FsbCc6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlQ2FsbCgpO1xuXG4gICAgICBjYXNlICdpbXBvcnQnOlxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUltcG9ydCgpO1xuXG4gICAgICBjYXNlICdmcm9tJzpcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VGcm9tKCk7XG5cbiAgICAgIGNhc2UgJ2ZpbHRlcic6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlRmlsdGVyU3RhdGVtZW50KCk7XG5cbiAgICAgIGNhc2UgJ3N3aXRjaCc6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlU3dpdGNoKCk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmICh0aGlzLmV4dGVuc2lvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmV4dGVuc2lvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBleHQgPSB0aGlzLmV4dGVuc2lvbnNbaV07XG5cbiAgICAgICAgICAgIGlmIChsaWIuaW5kZXhPZihleHQudGFncyB8fCBbXSwgdG9rLnZhbHVlKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGV4dC5wYXJzZSh0aGlzLCBub2RlcywgbGV4ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZmFpbCgndW5rbm93biBibG9jayB0YWc6ICcgKyB0b2sudmFsdWUsIHRvay5saW5lbm8sIHRvay5jb2xubyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG5cbiAgX3Byb3RvLnBhcnNlUmF3ID0gZnVuY3Rpb24gcGFyc2VSYXcodGFnTmFtZSkge1xuICAgIHRhZ05hbWUgPSB0YWdOYW1lIHx8ICdyYXcnO1xuICAgIHZhciBlbmRUYWdOYW1lID0gJ2VuZCcgKyB0YWdOYW1lOyAvLyBMb29rIGZvciB1cGNvbWluZyByYXcgYmxvY2tzIChpZ25vcmUgYWxsIG90aGVyIGtpbmRzIG9mIGJsb2NrcylcblxuICAgIHZhciByYXdCbG9ja1JlZ2V4ID0gbmV3IFJlZ0V4cCgnKFtcXFxcc1xcXFxTXSo/KXslXFxcXHMqKCcgKyB0YWdOYW1lICsgJ3wnICsgZW5kVGFnTmFtZSArICcpXFxcXHMqKD89JX0pJX0nKTtcbiAgICB2YXIgcmF3TGV2ZWwgPSAxO1xuICAgIHZhciBzdHIgPSAnJztcbiAgICB2YXIgbWF0Y2hlcyA9IG51bGw7IC8vIFNraXAgb3BlbmluZyByYXcgdG9rZW5cbiAgICAvLyBLZWVwIHRoaXMgdG9rZW4gdG8gdHJhY2sgbGluZSBhbmQgY29sdW1uIG51bWJlcnNcblxuICAgIHZhciBiZWd1biA9IHRoaXMuYWR2YW5jZUFmdGVyQmxvY2tFbmQoKTsgLy8gRXhpdCB3aGVuIHRoZXJlJ3Mgbm90aGluZyB0byBtYXRjaFxuICAgIC8vIG9yIHdoZW4gd2UndmUgZm91bmQgdGhlIG1hdGNoaW5nIFwiZW5kcmF3XCIgYmxvY2tcblxuICAgIHdoaWxlICgobWF0Y2hlcyA9IHRoaXMudG9rZW5zLl9leHRyYWN0UmVnZXgocmF3QmxvY2tSZWdleCkpICYmIHJhd0xldmVsID4gMCkge1xuICAgICAgdmFyIGFsbCA9IG1hdGNoZXNbMF07XG4gICAgICB2YXIgcHJlID0gbWF0Y2hlc1sxXTtcbiAgICAgIHZhciBibG9ja05hbWUgPSBtYXRjaGVzWzJdOyAvLyBBZGp1c3QgcmF3bGV2ZWxcblxuICAgICAgaWYgKGJsb2NrTmFtZSA9PT0gdGFnTmFtZSkge1xuICAgICAgICByYXdMZXZlbCArPSAxO1xuICAgICAgfSBlbHNlIGlmIChibG9ja05hbWUgPT09IGVuZFRhZ05hbWUpIHtcbiAgICAgICAgcmF3TGV2ZWwgLT0gMTtcbiAgICAgIH0gLy8gQWRkIHRvIHN0clxuXG5cbiAgICAgIGlmIChyYXdMZXZlbCA9PT0gMCkge1xuICAgICAgICAvLyBXZSB3YW50IHRvIGV4Y2x1ZGUgdGhlIGxhc3QgXCJlbmRyYXdcIlxuICAgICAgICBzdHIgKz0gcHJlOyAvLyBNb3ZlIHRva2VuaXplciB0byBiZWdpbm5pbmcgb2YgZW5kcmF3IGJsb2NrXG5cbiAgICAgICAgdGhpcy50b2tlbnMuYmFja04oYWxsLmxlbmd0aCAtIHByZS5sZW5ndGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyICs9IGFsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IG5vZGVzLk91dHB1dChiZWd1bi5saW5lbm8sIGJlZ3VuLmNvbG5vLCBbbmV3IG5vZGVzLlRlbXBsYXRlRGF0YShiZWd1bi5saW5lbm8sIGJlZ3VuLmNvbG5vLCBzdHIpXSk7XG4gIH07XG5cbiAgX3Byb3RvLnBhcnNlUG9zdGZpeCA9IGZ1bmN0aW9uIHBhcnNlUG9zdGZpeChub2RlKSB7XG4gICAgdmFyIGxvb2t1cDtcbiAgICB2YXIgdG9rID0gdGhpcy5wZWVrVG9rZW4oKTtcblxuICAgIHdoaWxlICh0b2spIHtcbiAgICAgIGlmICh0b2sudHlwZSA9PT0gbGV4ZXIuVE9LRU5fTEVGVF9QQVJFTikge1xuICAgICAgICAvLyBGdW5jdGlvbiBjYWxsXG4gICAgICAgIG5vZGUgPSBuZXcgbm9kZXMuRnVuQ2FsbCh0b2subGluZW5vLCB0b2suY29sbm8sIG5vZGUsIHRoaXMucGFyc2VTaWduYXR1cmUoKSk7XG4gICAgICB9IGVsc2UgaWYgKHRvay50eXBlID09PSBsZXhlci5UT0tFTl9MRUZUX0JSQUNLRVQpIHtcbiAgICAgICAgLy8gUmVmZXJlbmNlXG4gICAgICAgIGxvb2t1cCA9IHRoaXMucGFyc2VBZ2dyZWdhdGUoKTtcblxuICAgICAgICBpZiAobG9va3VwLmNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICB0aGlzLmZhaWwoJ2ludmFsaWQgaW5kZXgnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGUgPSBuZXcgbm9kZXMuTG9va3VwVmFsKHRvay5saW5lbm8sIHRvay5jb2xubywgbm9kZSwgbG9va3VwLmNoaWxkcmVuWzBdKTtcbiAgICAgIH0gZWxzZSBpZiAodG9rLnR5cGUgPT09IGxleGVyLlRPS0VOX09QRVJBVE9SICYmIHRvay52YWx1ZSA9PT0gJy4nKSB7XG4gICAgICAgIC8vIFJlZmVyZW5jZVxuICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuICAgICAgICB2YXIgdmFsID0gdGhpcy5uZXh0VG9rZW4oKTtcblxuICAgICAgICBpZiAodmFsLnR5cGUgIT09IGxleGVyLlRPS0VOX1NZTUJPTCkge1xuICAgICAgICAgIHRoaXMuZmFpbCgnZXhwZWN0ZWQgbmFtZSBhcyBsb29rdXAgdmFsdWUsIGdvdCAnICsgdmFsLnZhbHVlLCB2YWwubGluZW5vLCB2YWwuY29sbm8pO1xuICAgICAgICB9IC8vIE1ha2UgYSBsaXRlcmFsIHN0cmluZyBiZWNhdXNlIGl0J3Mgbm90IGEgdmFyaWFibGVcbiAgICAgICAgLy8gcmVmZXJlbmNlXG5cblxuICAgICAgICBsb29rdXAgPSBuZXcgbm9kZXMuTGl0ZXJhbCh2YWwubGluZW5vLCB2YWwuY29sbm8sIHZhbC52YWx1ZSk7XG4gICAgICAgIG5vZGUgPSBuZXcgbm9kZXMuTG9va3VwVmFsKHRvay5saW5lbm8sIHRvay5jb2xubywgbm9kZSwgbG9va3VwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB0b2sgPSB0aGlzLnBlZWtUb2tlbigpO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIF9wcm90by5wYXJzZUV4cHJlc3Npb24gPSBmdW5jdGlvbiBwYXJzZUV4cHJlc3Npb24oKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLnBhcnNlSW5saW5lSWYoKTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICBfcHJvdG8ucGFyc2VJbmxpbmVJZiA9IGZ1bmN0aW9uIHBhcnNlSW5saW5lSWYoKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLnBhcnNlT3IoKTtcblxuICAgIGlmICh0aGlzLnNraXBTeW1ib2woJ2lmJykpIHtcbiAgICAgIHZhciBjb25kTm9kZSA9IHRoaXMucGFyc2VPcigpO1xuICAgICAgdmFyIGJvZHlOb2RlID0gbm9kZTtcbiAgICAgIG5vZGUgPSBuZXcgbm9kZXMuSW5saW5lSWYobm9kZS5saW5lbm8sIG5vZGUuY29sbm8pO1xuICAgICAgbm9kZS5ib2R5ID0gYm9keU5vZGU7XG4gICAgICBub2RlLmNvbmQgPSBjb25kTm9kZTtcblxuICAgICAgaWYgKHRoaXMuc2tpcFN5bWJvbCgnZWxzZScpKSB7XG4gICAgICAgIG5vZGUuZWxzZV8gPSB0aGlzLnBhcnNlT3IoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuZWxzZV8gPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIF9wcm90by5wYXJzZU9yID0gZnVuY3Rpb24gcGFyc2VPcigpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMucGFyc2VBbmQoKTtcblxuICAgIHdoaWxlICh0aGlzLnNraXBTeW1ib2woJ29yJykpIHtcbiAgICAgIHZhciBub2RlMiA9IHRoaXMucGFyc2VBbmQoKTtcbiAgICAgIG5vZGUgPSBuZXcgbm9kZXMuT3Iobm9kZS5saW5lbm8sIG5vZGUuY29sbm8sIG5vZGUsIG5vZGUyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICBfcHJvdG8ucGFyc2VBbmQgPSBmdW5jdGlvbiBwYXJzZUFuZCgpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMucGFyc2VOb3QoKTtcblxuICAgIHdoaWxlICh0aGlzLnNraXBTeW1ib2woJ2FuZCcpKSB7XG4gICAgICB2YXIgbm9kZTIgPSB0aGlzLnBhcnNlTm90KCk7XG4gICAgICBub2RlID0gbmV3IG5vZGVzLkFuZChub2RlLmxpbmVubywgbm9kZS5jb2xubywgbm9kZSwgbm9kZTIpO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIF9wcm90by5wYXJzZU5vdCA9IGZ1bmN0aW9uIHBhcnNlTm90KCkge1xuICAgIHZhciB0b2sgPSB0aGlzLnBlZWtUb2tlbigpO1xuXG4gICAgaWYgKHRoaXMuc2tpcFN5bWJvbCgnbm90JykpIHtcbiAgICAgIHJldHVybiBuZXcgbm9kZXMuTm90KHRvay5saW5lbm8sIHRvay5jb2xubywgdGhpcy5wYXJzZU5vdCgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5wYXJzZUluKCk7XG4gIH07XG5cbiAgX3Byb3RvLnBhcnNlSW4gPSBmdW5jdGlvbiBwYXJzZUluKCkge1xuICAgIHZhciBub2RlID0gdGhpcy5wYXJzZUlzKCk7XG5cbiAgICB3aGlsZSAoMSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cbiAgICAgIC8vIGNoZWNrIGlmIHRoZSBuZXh0IHRva2VuIGlzICdub3QnXG4gICAgICB2YXIgdG9rID0gdGhpcy5uZXh0VG9rZW4oKTtcblxuICAgICAgaWYgKCF0b2spIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHZhciBpbnZlcnQgPSB0b2sudHlwZSA9PT0gbGV4ZXIuVE9LRU5fU1lNQk9MICYmIHRvay52YWx1ZSA9PT0gJ25vdCc7IC8vIGlmIGl0IHdhc24ndCAnbm90JywgcHV0IGl0IGJhY2tcblxuICAgICAgaWYgKCFpbnZlcnQpIHtcbiAgICAgICAgdGhpcy5wdXNoVG9rZW4odG9rKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuc2tpcFN5bWJvbCgnaW4nKSkge1xuICAgICAgICB2YXIgbm9kZTIgPSB0aGlzLnBhcnNlSXMoKTtcbiAgICAgICAgbm9kZSA9IG5ldyBub2Rlcy5Jbihub2RlLmxpbmVubywgbm9kZS5jb2xubywgbm9kZSwgbm9kZTIpO1xuXG4gICAgICAgIGlmIChpbnZlcnQpIHtcbiAgICAgICAgICBub2RlID0gbmV3IG5vZGVzLk5vdChub2RlLmxpbmVubywgbm9kZS5jb2xubywgbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGlmIHdlJ2QgZm91bmQgYSAnbm90JyBidXQgdGhpcyB3YXNuJ3QgYW4gJ2luJywgcHV0IGJhY2sgdGhlICdub3QnXG4gICAgICAgIGlmIChpbnZlcnQpIHtcbiAgICAgICAgICB0aGlzLnB1c2hUb2tlbih0b2spO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH0gLy8gSSBwdXQgdGhpcyByaWdodCBhZnRlciBcImluXCIgaW4gdGhlIG9wZXJhdG9yIHByZWNlZGVuY2Ugc3RhY2suIFRoYXQgY2FuXG4gIC8vIG9idmlvdXNseSBiZSBjaGFuZ2VkIHRvIGJlIGNsb3NlciB0byBKaW5qYS5cbiAgO1xuXG4gIF9wcm90by5wYXJzZUlzID0gZnVuY3Rpb24gcGFyc2VJcygpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMucGFyc2VDb21wYXJlKCk7IC8vIGxvb2sgZm9yIGFuIGlzXG5cbiAgICBpZiAodGhpcy5za2lwU3ltYm9sKCdpcycpKSB7XG4gICAgICAvLyBsb29rIGZvciBhIG5vdFxuICAgICAgdmFyIG5vdCA9IHRoaXMuc2tpcFN5bWJvbCgnbm90Jyk7IC8vIGdldCB0aGUgbmV4dCBub2RlXG5cbiAgICAgIHZhciBub2RlMiA9IHRoaXMucGFyc2VDb21wYXJlKCk7IC8vIGNyZWF0ZSBhbiBJcyBub2RlIHVzaW5nIHRoZSBuZXh0IG5vZGUgYW5kIHRoZSBpbmZvIGZyb20gb3VyIElzIG5vZGUuXG5cbiAgICAgIG5vZGUgPSBuZXcgbm9kZXMuSXMobm9kZS5saW5lbm8sIG5vZGUuY29sbm8sIG5vZGUsIG5vZGUyKTsgLy8gaWYgd2UgaGF2ZSBhIE5vdCwgY3JlYXRlIGEgTm90IG5vZGUgZnJvbSBvdXIgSXMgbm9kZS5cblxuICAgICAgaWYgKG5vdCkge1xuICAgICAgICBub2RlID0gbmV3IG5vZGVzLk5vdChub2RlLmxpbmVubywgbm9kZS5jb2xubywgbm9kZSk7XG4gICAgICB9XG4gICAgfSAvLyByZXR1cm4gdGhlIG5vZGUuXG5cblxuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIF9wcm90by5wYXJzZUNvbXBhcmUgPSBmdW5jdGlvbiBwYXJzZUNvbXBhcmUoKSB7XG4gICAgdmFyIGNvbXBhcmVPcHMgPSBbJz09JywgJz09PScsICchPScsICchPT0nLCAnPCcsICc+JywgJzw9JywgJz49J107XG4gICAgdmFyIGV4cHIgPSB0aGlzLnBhcnNlQ29uY2F0KCk7XG4gICAgdmFyIG9wcyA9IFtdO1xuXG4gICAgd2hpbGUgKDEpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG4gICAgICB2YXIgdG9rID0gdGhpcy5uZXh0VG9rZW4oKTtcblxuICAgICAgaWYgKCF0b2spIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGVsc2UgaWYgKGNvbXBhcmVPcHMuaW5kZXhPZih0b2sudmFsdWUpICE9PSAtMSkge1xuICAgICAgICBvcHMucHVzaChuZXcgbm9kZXMuQ29tcGFyZU9wZXJhbmQodG9rLmxpbmVubywgdG9rLmNvbG5vLCB0aGlzLnBhcnNlQ29uY2F0KCksIHRvay52YWx1ZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wdXNoVG9rZW4odG9rKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBuZXcgbm9kZXMuQ29tcGFyZShvcHNbMF0ubGluZW5vLCBvcHNbMF0uY29sbm8sIGV4cHIsIG9wcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBleHByO1xuICAgIH1cbiAgfSAvLyBmaW5kcyB0aGUgJ34nIGZvciBzdHJpbmcgY29uY2F0ZW5hdGlvblxuICA7XG5cbiAgX3Byb3RvLnBhcnNlQ29uY2F0ID0gZnVuY3Rpb24gcGFyc2VDb25jYXQoKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLnBhcnNlQWRkKCk7XG5cbiAgICB3aGlsZSAodGhpcy5za2lwVmFsdWUobGV4ZXIuVE9LRU5fVElMREUsICd+JykpIHtcbiAgICAgIHZhciBub2RlMiA9IHRoaXMucGFyc2VBZGQoKTtcbiAgICAgIG5vZGUgPSBuZXcgbm9kZXMuQ29uY2F0KG5vZGUubGluZW5vLCBub2RlLmNvbG5vLCBub2RlLCBub2RlMik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG5cbiAgX3Byb3RvLnBhcnNlQWRkID0gZnVuY3Rpb24gcGFyc2VBZGQoKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLnBhcnNlU3ViKCk7XG5cbiAgICB3aGlsZSAodGhpcy5za2lwVmFsdWUobGV4ZXIuVE9LRU5fT1BFUkFUT1IsICcrJykpIHtcbiAgICAgIHZhciBub2RlMiA9IHRoaXMucGFyc2VTdWIoKTtcbiAgICAgIG5vZGUgPSBuZXcgbm9kZXMuQWRkKG5vZGUubGluZW5vLCBub2RlLmNvbG5vLCBub2RlLCBub2RlMik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG5cbiAgX3Byb3RvLnBhcnNlU3ViID0gZnVuY3Rpb24gcGFyc2VTdWIoKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLnBhcnNlTXVsKCk7XG5cbiAgICB3aGlsZSAodGhpcy5za2lwVmFsdWUobGV4ZXIuVE9LRU5fT1BFUkFUT1IsICctJykpIHtcbiAgICAgIHZhciBub2RlMiA9IHRoaXMucGFyc2VNdWwoKTtcbiAgICAgIG5vZGUgPSBuZXcgbm9kZXMuU3ViKG5vZGUubGluZW5vLCBub2RlLmNvbG5vLCBub2RlLCBub2RlMik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG5cbiAgX3Byb3RvLnBhcnNlTXVsID0gZnVuY3Rpb24gcGFyc2VNdWwoKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLnBhcnNlRGl2KCk7XG5cbiAgICB3aGlsZSAodGhpcy5za2lwVmFsdWUobGV4ZXIuVE9LRU5fT1BFUkFUT1IsICcqJykpIHtcbiAgICAgIHZhciBub2RlMiA9IHRoaXMucGFyc2VEaXYoKTtcbiAgICAgIG5vZGUgPSBuZXcgbm9kZXMuTXVsKG5vZGUubGluZW5vLCBub2RlLmNvbG5vLCBub2RlLCBub2RlMik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG5cbiAgX3Byb3RvLnBhcnNlRGl2ID0gZnVuY3Rpb24gcGFyc2VEaXYoKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLnBhcnNlRmxvb3JEaXYoKTtcblxuICAgIHdoaWxlICh0aGlzLnNraXBWYWx1ZShsZXhlci5UT0tFTl9PUEVSQVRPUiwgJy8nKSkge1xuICAgICAgdmFyIG5vZGUyID0gdGhpcy5wYXJzZUZsb29yRGl2KCk7XG4gICAgICBub2RlID0gbmV3IG5vZGVzLkRpdihub2RlLmxpbmVubywgbm9kZS5jb2xubywgbm9kZSwgbm9kZTIpO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIF9wcm90by5wYXJzZUZsb29yRGl2ID0gZnVuY3Rpb24gcGFyc2VGbG9vckRpdigpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMucGFyc2VNb2QoKTtcblxuICAgIHdoaWxlICh0aGlzLnNraXBWYWx1ZShsZXhlci5UT0tFTl9PUEVSQVRPUiwgJy8vJykpIHtcbiAgICAgIHZhciBub2RlMiA9IHRoaXMucGFyc2VNb2QoKTtcbiAgICAgIG5vZGUgPSBuZXcgbm9kZXMuRmxvb3JEaXYobm9kZS5saW5lbm8sIG5vZGUuY29sbm8sIG5vZGUsIG5vZGUyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICBfcHJvdG8ucGFyc2VNb2QgPSBmdW5jdGlvbiBwYXJzZU1vZCgpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMucGFyc2VQb3coKTtcblxuICAgIHdoaWxlICh0aGlzLnNraXBWYWx1ZShsZXhlci5UT0tFTl9PUEVSQVRPUiwgJyUnKSkge1xuICAgICAgdmFyIG5vZGUyID0gdGhpcy5wYXJzZVBvdygpO1xuICAgICAgbm9kZSA9IG5ldyBub2Rlcy5Nb2Qobm9kZS5saW5lbm8sIG5vZGUuY29sbm8sIG5vZGUsIG5vZGUyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICBfcHJvdG8ucGFyc2VQb3cgPSBmdW5jdGlvbiBwYXJzZVBvdygpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMucGFyc2VVbmFyeSgpO1xuXG4gICAgd2hpbGUgKHRoaXMuc2tpcFZhbHVlKGxleGVyLlRPS0VOX09QRVJBVE9SLCAnKionKSkge1xuICAgICAgdmFyIG5vZGUyID0gdGhpcy5wYXJzZVVuYXJ5KCk7XG4gICAgICBub2RlID0gbmV3IG5vZGVzLlBvdyhub2RlLmxpbmVubywgbm9kZS5jb2xubywgbm9kZSwgbm9kZTIpO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIF9wcm90by5wYXJzZVVuYXJ5ID0gZnVuY3Rpb24gcGFyc2VVbmFyeShub0ZpbHRlcnMpIHtcbiAgICB2YXIgdG9rID0gdGhpcy5wZWVrVG9rZW4oKTtcbiAgICB2YXIgbm9kZTtcblxuICAgIGlmICh0aGlzLnNraXBWYWx1ZShsZXhlci5UT0tFTl9PUEVSQVRPUiwgJy0nKSkge1xuICAgICAgbm9kZSA9IG5ldyBub2Rlcy5OZWcodG9rLmxpbmVubywgdG9rLmNvbG5vLCB0aGlzLnBhcnNlVW5hcnkodHJ1ZSkpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5za2lwVmFsdWUobGV4ZXIuVE9LRU5fT1BFUkFUT1IsICcrJykpIHtcbiAgICAgIG5vZGUgPSBuZXcgbm9kZXMuUG9zKHRvay5saW5lbm8sIHRvay5jb2xubywgdGhpcy5wYXJzZVVuYXJ5KHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZSA9IHRoaXMucGFyc2VQcmltYXJ5KCk7XG4gICAgfVxuXG4gICAgaWYgKCFub0ZpbHRlcnMpIHtcbiAgICAgIG5vZGUgPSB0aGlzLnBhcnNlRmlsdGVyKG5vZGUpO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIF9wcm90by5wYXJzZVByaW1hcnkgPSBmdW5jdGlvbiBwYXJzZVByaW1hcnkobm9Qb3N0Zml4KSB7XG4gICAgdmFyIHRvayA9IHRoaXMubmV4dFRva2VuKCk7XG4gICAgdmFyIHZhbDtcbiAgICB2YXIgbm9kZSA9IG51bGw7XG5cbiAgICBpZiAoIXRvaykge1xuICAgICAgdGhpcy5mYWlsKCdleHBlY3RlZCBleHByZXNzaW9uLCBnb3QgZW5kIG9mIGZpbGUnKTtcbiAgICB9IGVsc2UgaWYgKHRvay50eXBlID09PSBsZXhlci5UT0tFTl9TVFJJTkcpIHtcbiAgICAgIHZhbCA9IHRvay52YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHRvay50eXBlID09PSBsZXhlci5UT0tFTl9JTlQpIHtcbiAgICAgIHZhbCA9IHBhcnNlSW50KHRvay52YWx1ZSwgMTApO1xuICAgIH0gZWxzZSBpZiAodG9rLnR5cGUgPT09IGxleGVyLlRPS0VOX0ZMT0FUKSB7XG4gICAgICB2YWwgPSBwYXJzZUZsb2F0KHRvay52YWx1ZSk7XG4gICAgfSBlbHNlIGlmICh0b2sudHlwZSA9PT0gbGV4ZXIuVE9LRU5fQk9PTEVBTikge1xuICAgICAgaWYgKHRvay52YWx1ZSA9PT0gJ3RydWUnKSB7XG4gICAgICAgIHZhbCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHRvay52YWx1ZSA9PT0gJ2ZhbHNlJykge1xuICAgICAgICB2YWwgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZmFpbCgnaW52YWxpZCBib29sZWFuOiAnICsgdG9rLnZhbHVlLCB0b2subGluZW5vLCB0b2suY29sbm8pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodG9rLnR5cGUgPT09IGxleGVyLlRPS0VOX05PTkUpIHtcbiAgICAgIHZhbCA9IG51bGw7XG4gICAgfSBlbHNlIGlmICh0b2sudHlwZSA9PT0gbGV4ZXIuVE9LRU5fUkVHRVgpIHtcbiAgICAgIHZhbCA9IG5ldyBSZWdFeHAodG9rLnZhbHVlLmJvZHksIHRvay52YWx1ZS5mbGFncyk7XG4gICAgfVxuXG4gICAgaWYgKHZhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBub2RlID0gbmV3IG5vZGVzLkxpdGVyYWwodG9rLmxpbmVubywgdG9rLmNvbG5vLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAodG9rLnR5cGUgPT09IGxleGVyLlRPS0VOX1NZTUJPTCkge1xuICAgICAgbm9kZSA9IG5ldyBub2Rlcy5TeW1ib2wodG9rLmxpbmVubywgdG9rLmNvbG5vLCB0b2sudmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTZWUgaWYgaXQncyBhbiBhZ2dyZWdhdGUgdHlwZSwgd2UgbmVlZCB0byBwdXNoIHRoZVxuICAgICAgLy8gY3VycmVudCBkZWxpbWl0ZXIgdG9rZW4gYmFjayBvblxuICAgICAgdGhpcy5wdXNoVG9rZW4odG9rKTtcbiAgICAgIG5vZGUgPSB0aGlzLnBhcnNlQWdncmVnYXRlKCk7XG4gICAgfVxuXG4gICAgaWYgKCFub1Bvc3RmaXgpIHtcbiAgICAgIG5vZGUgPSB0aGlzLnBhcnNlUG9zdGZpeChub2RlKTtcbiAgICB9XG5cbiAgICBpZiAobm9kZSkge1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IHRoaXMuZXJyb3IoXCJ1bmV4cGVjdGVkIHRva2VuOiBcIiArIHRvay52YWx1ZSwgdG9rLmxpbmVubywgdG9rLmNvbG5vKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnBhcnNlRmlsdGVyTmFtZSA9IGZ1bmN0aW9uIHBhcnNlRmlsdGVyTmFtZSgpIHtcbiAgICB2YXIgdG9rID0gdGhpcy5leHBlY3QobGV4ZXIuVE9LRU5fU1lNQk9MKTtcbiAgICB2YXIgbmFtZSA9IHRvay52YWx1ZTtcblxuICAgIHdoaWxlICh0aGlzLnNraXBWYWx1ZShsZXhlci5UT0tFTl9PUEVSQVRPUiwgJy4nKSkge1xuICAgICAgbmFtZSArPSAnLicgKyB0aGlzLmV4cGVjdChsZXhlci5UT0tFTl9TWU1CT0wpLnZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgbm9kZXMuU3ltYm9sKHRvay5saW5lbm8sIHRvay5jb2xubywgbmFtZSk7XG4gIH07XG5cbiAgX3Byb3RvLnBhcnNlRmlsdGVyQXJncyA9IGZ1bmN0aW9uIHBhcnNlRmlsdGVyQXJncyhub2RlKSB7XG4gICAgaWYgKHRoaXMucGVla1Rva2VuKCkudHlwZSA9PT0gbGV4ZXIuVE9LRU5fTEVGVF9QQVJFTikge1xuICAgICAgLy8gR2V0IGEgRnVuQ2FsbCBub2RlIGFuZCBhZGQgdGhlIHBhcmFtZXRlcnMgdG8gdGhlXG4gICAgICAvLyBmaWx0ZXJcbiAgICAgIHZhciBjYWxsID0gdGhpcy5wYXJzZVBvc3RmaXgobm9kZSk7XG4gICAgICByZXR1cm4gY2FsbC5hcmdzLmNoaWxkcmVuO1xuICAgIH1cblxuICAgIHJldHVybiBbXTtcbiAgfTtcblxuICBfcHJvdG8ucGFyc2VGaWx0ZXIgPSBmdW5jdGlvbiBwYXJzZUZpbHRlcihub2RlKSB7XG4gICAgd2hpbGUgKHRoaXMuc2tpcChsZXhlci5UT0tFTl9QSVBFKSkge1xuICAgICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlRmlsdGVyTmFtZSgpO1xuICAgICAgbm9kZSA9IG5ldyBub2Rlcy5GaWx0ZXIobmFtZS5saW5lbm8sIG5hbWUuY29sbm8sIG5hbWUsIG5ldyBub2Rlcy5Ob2RlTGlzdChuYW1lLmxpbmVubywgbmFtZS5jb2xubywgW25vZGVdLmNvbmNhdCh0aGlzLnBhcnNlRmlsdGVyQXJncyhub2RlKSkpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICBfcHJvdG8ucGFyc2VGaWx0ZXJTdGF0ZW1lbnQgPSBmdW5jdGlvbiBwYXJzZUZpbHRlclN0YXRlbWVudCgpIHtcbiAgICB2YXIgZmlsdGVyVG9rID0gdGhpcy5wZWVrVG9rZW4oKTtcblxuICAgIGlmICghdGhpcy5za2lwU3ltYm9sKCdmaWx0ZXInKSkge1xuICAgICAgdGhpcy5mYWlsKCdwYXJzZUZpbHRlclN0YXRlbWVudDogZXhwZWN0ZWQgZmlsdGVyJyk7XG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlRmlsdGVyTmFtZSgpO1xuICAgIHZhciBhcmdzID0gdGhpcy5wYXJzZUZpbHRlckFyZ3MobmFtZSk7XG4gICAgdGhpcy5hZHZhbmNlQWZ0ZXJCbG9ja0VuZChmaWx0ZXJUb2sudmFsdWUpO1xuICAgIHZhciBib2R5ID0gbmV3IG5vZGVzLkNhcHR1cmUobmFtZS5saW5lbm8sIG5hbWUuY29sbm8sIHRoaXMucGFyc2VVbnRpbEJsb2NrcygnZW5kZmlsdGVyJykpO1xuICAgIHRoaXMuYWR2YW5jZUFmdGVyQmxvY2tFbmQoKTtcbiAgICB2YXIgbm9kZSA9IG5ldyBub2Rlcy5GaWx0ZXIobmFtZS5saW5lbm8sIG5hbWUuY29sbm8sIG5hbWUsIG5ldyBub2Rlcy5Ob2RlTGlzdChuYW1lLmxpbmVubywgbmFtZS5jb2xubywgW2JvZHldLmNvbmNhdChhcmdzKSkpO1xuICAgIHJldHVybiBuZXcgbm9kZXMuT3V0cHV0KG5hbWUubGluZW5vLCBuYW1lLmNvbG5vLCBbbm9kZV0pO1xuICB9O1xuXG4gIF9wcm90by5wYXJzZUFnZ3JlZ2F0ZSA9IGZ1bmN0aW9uIHBhcnNlQWdncmVnYXRlKCkge1xuICAgIHZhciB0b2sgPSB0aGlzLm5leHRUb2tlbigpO1xuICAgIHZhciBub2RlO1xuXG4gICAgc3dpdGNoICh0b2sudHlwZSkge1xuICAgICAgY2FzZSBsZXhlci5UT0tFTl9MRUZUX1BBUkVOOlxuICAgICAgICBub2RlID0gbmV3IG5vZGVzLkdyb3VwKHRvay5saW5lbm8sIHRvay5jb2xubyk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIGxleGVyLlRPS0VOX0xFRlRfQlJBQ0tFVDpcbiAgICAgICAgbm9kZSA9IG5ldyBub2Rlcy5BcnJheSh0b2subGluZW5vLCB0b2suY29sbm8pO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBsZXhlci5UT0tFTl9MRUZUX0NVUkxZOlxuICAgICAgICBub2RlID0gbmV3IG5vZGVzLkRpY3QodG9rLmxpbmVubywgdG9rLmNvbG5vKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHdoaWxlICgxKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuICAgICAgdmFyIHR5cGUgPSB0aGlzLnBlZWtUb2tlbigpLnR5cGU7XG5cbiAgICAgIGlmICh0eXBlID09PSBsZXhlci5UT0tFTl9SSUdIVF9QQVJFTiB8fCB0eXBlID09PSBsZXhlci5UT0tFTl9SSUdIVF9CUkFDS0VUIHx8IHR5cGUgPT09IGxleGVyLlRPS0VOX1JJR0hUX0NVUkxZKSB7XG4gICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAobm9kZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmICghdGhpcy5za2lwKGxleGVyLlRPS0VOX0NPTU1BKSkge1xuICAgICAgICAgIHRoaXMuZmFpbCgncGFyc2VBZ2dyZWdhdGU6IGV4cGVjdGVkIGNvbW1hIGFmdGVyIGV4cHJlc3Npb24nLCB0b2subGluZW5vLCB0b2suY29sbm8pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChub2RlIGluc3RhbmNlb2Ygbm9kZXMuRGljdCkge1xuICAgICAgICAvLyBUT0RPOiBjaGVjayBmb3IgZXJyb3JzXG4gICAgICAgIHZhciBrZXkgPSB0aGlzLnBhcnNlUHJpbWFyeSgpOyAvLyBXZSBleHBlY3QgYSBrZXkvdmFsdWUgcGFpciBmb3IgZGljdHMsIHNlcGFyYXRlZCBieSBhXG4gICAgICAgIC8vIGNvbG9uXG5cbiAgICAgICAgaWYgKCF0aGlzLnNraXAobGV4ZXIuVE9LRU5fQ09MT04pKSB7XG4gICAgICAgICAgdGhpcy5mYWlsKCdwYXJzZUFnZ3JlZ2F0ZTogZXhwZWN0ZWQgY29sb24gYWZ0ZXIgZGljdCBrZXknLCB0b2subGluZW5vLCB0b2suY29sbm8pO1xuICAgICAgICB9IC8vIFRPRE86IGNoZWNrIGZvciBlcnJvcnNcblxuXG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICAgIG5vZGUuYWRkQ2hpbGQobmV3IG5vZGVzLlBhaXIoa2V5LmxpbmVubywga2V5LmNvbG5vLCBrZXksIHZhbHVlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUT0RPOiBjaGVjayBmb3IgZXJyb3JzXG4gICAgICAgIHZhciBleHByID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgICAgbm9kZS5hZGRDaGlsZChleHByKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICBfcHJvdG8ucGFyc2VTaWduYXR1cmUgPSBmdW5jdGlvbiBwYXJzZVNpZ25hdHVyZSh0b2xlcmFudCwgbm9QYXJlbnMpIHtcbiAgICB2YXIgdG9rID0gdGhpcy5wZWVrVG9rZW4oKTtcblxuICAgIGlmICghbm9QYXJlbnMgJiYgdG9rLnR5cGUgIT09IGxleGVyLlRPS0VOX0xFRlRfUEFSRU4pIHtcbiAgICAgIGlmICh0b2xlcmFudCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZmFpbCgnZXhwZWN0ZWQgYXJndW1lbnRzJywgdG9rLmxpbmVubywgdG9rLmNvbG5vKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodG9rLnR5cGUgPT09IGxleGVyLlRPS0VOX0xFRlRfUEFSRU4pIHtcbiAgICAgIHRvayA9IHRoaXMubmV4dFRva2VuKCk7XG4gICAgfVxuXG4gICAgdmFyIGFyZ3MgPSBuZXcgbm9kZXMuTm9kZUxpc3QodG9rLmxpbmVubywgdG9rLmNvbG5vKTtcbiAgICB2YXIga3dhcmdzID0gbmV3IG5vZGVzLktleXdvcmRBcmdzKHRvay5saW5lbm8sIHRvay5jb2xubyk7XG4gICAgdmFyIGNoZWNrQ29tbWEgPSBmYWxzZTtcblxuICAgIHdoaWxlICgxKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuICAgICAgdG9rID0gdGhpcy5wZWVrVG9rZW4oKTtcblxuICAgICAgaWYgKCFub1BhcmVucyAmJiB0b2sudHlwZSA9PT0gbGV4ZXIuVE9LRU5fUklHSFRfUEFSRU4pIHtcbiAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGVsc2UgaWYgKG5vUGFyZW5zICYmIHRvay50eXBlID09PSBsZXhlci5UT0tFTl9CTE9DS19FTkQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGVja0NvbW1hICYmICF0aGlzLnNraXAobGV4ZXIuVE9LRU5fQ09NTUEpKSB7XG4gICAgICAgIHRoaXMuZmFpbCgncGFyc2VTaWduYXR1cmU6IGV4cGVjdGVkIGNvbW1hIGFmdGVyIGV4cHJlc3Npb24nLCB0b2subGluZW5vLCB0b2suY29sbm8pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGFyZyA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuc2tpcFZhbHVlKGxleGVyLlRPS0VOX09QRVJBVE9SLCAnPScpKSB7XG4gICAgICAgICAga3dhcmdzLmFkZENoaWxkKG5ldyBub2Rlcy5QYWlyKGFyZy5saW5lbm8sIGFyZy5jb2xubywgYXJnLCB0aGlzLnBhcnNlRXhwcmVzc2lvbigpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXJncy5hZGRDaGlsZChhcmcpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNoZWNrQ29tbWEgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChrd2FyZ3MuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICBhcmdzLmFkZENoaWxkKGt3YXJncyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFyZ3M7XG4gIH07XG5cbiAgX3Byb3RvLnBhcnNlVW50aWxCbG9ja3MgPSBmdW5jdGlvbiBwYXJzZVVudGlsQmxvY2tzKCkge1xuICAgIHZhciBwcmV2ID0gdGhpcy5icmVha09uQmxvY2tzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGJsb2NrTmFtZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBibG9ja05hbWVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHRoaXMuYnJlYWtPbkJsb2NrcyA9IGJsb2NrTmFtZXM7XG4gICAgdmFyIHJldCA9IHRoaXMucGFyc2UoKTtcbiAgICB0aGlzLmJyZWFrT25CbG9ja3MgPSBwcmV2O1xuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgX3Byb3RvLnBhcnNlTm9kZXMgPSBmdW5jdGlvbiBwYXJzZU5vZGVzKCkge1xuICAgIHZhciB0b2s7XG4gICAgdmFyIGJ1ZiA9IFtdO1xuXG4gICAgd2hpbGUgKHRvayA9IHRoaXMubmV4dFRva2VuKCkpIHtcbiAgICAgIGlmICh0b2sudHlwZSA9PT0gbGV4ZXIuVE9LRU5fREFUQSkge1xuICAgICAgICB2YXIgZGF0YSA9IHRvay52YWx1ZTtcbiAgICAgICAgdmFyIG5leHRUb2tlbiA9IHRoaXMucGVla1Rva2VuKCk7XG4gICAgICAgIHZhciBuZXh0VmFsID0gbmV4dFRva2VuICYmIG5leHRUb2tlbi52YWx1ZTsgLy8gSWYgdGhlIGxhc3QgdG9rZW4gaGFzIFwiLVwiIHdlIG5lZWQgdG8gdHJpbSB0aGVcbiAgICAgICAgLy8gbGVhZGluZyB3aGl0ZXNwYWNlIG9mIHRoZSBkYXRhLiBUaGlzIGlzIG1hcmtlZCB3aXRoXG4gICAgICAgIC8vIHRoZSBgZHJvcExlYWRpbmdXaGl0ZXNwYWNlYCB2YXJpYWJsZS5cblxuICAgICAgICBpZiAodGhpcy5kcm9wTGVhZGluZ1doaXRlc3BhY2UpIHtcbiAgICAgICAgICAvLyBUT0RPOiB0aGlzIGNvdWxkIGJlIG9wdGltaXplZCAoZG9uJ3QgdXNlIHJlZ2V4KVxuICAgICAgICAgIGRhdGEgPSBkYXRhLnJlcGxhY2UoL15cXHMqLywgJycpO1xuICAgICAgICAgIHRoaXMuZHJvcExlYWRpbmdXaGl0ZXNwYWNlID0gZmFsc2U7XG4gICAgICAgIH0gLy8gU2FtZSBmb3IgdGhlIHN1Y2NlZWRpbmcgYmxvY2sgc3RhcnQgdG9rZW5cblxuXG4gICAgICAgIGlmIChuZXh0VG9rZW4gJiYgKG5leHRUb2tlbi50eXBlID09PSBsZXhlci5UT0tFTl9CTE9DS19TVEFSVCAmJiBuZXh0VmFsLmNoYXJBdChuZXh0VmFsLmxlbmd0aCAtIDEpID09PSAnLScgfHwgbmV4dFRva2VuLnR5cGUgPT09IGxleGVyLlRPS0VOX1ZBUklBQkxFX1NUQVJUICYmIG5leHRWYWwuY2hhckF0KHRoaXMudG9rZW5zLnRhZ3MuVkFSSUFCTEVfU1RBUlQubGVuZ3RoKSA9PT0gJy0nIHx8IG5leHRUb2tlbi50eXBlID09PSBsZXhlci5UT0tFTl9DT01NRU5UICYmIG5leHRWYWwuY2hhckF0KHRoaXMudG9rZW5zLnRhZ3MuQ09NTUVOVF9TVEFSVC5sZW5ndGgpID09PSAnLScpKSB7XG4gICAgICAgICAgLy8gVE9ETzogdGhpcyBjb3VsZCBiZSBvcHRpbWl6ZWQgKGRvbid0IHVzZSByZWdleClcbiAgICAgICAgICBkYXRhID0gZGF0YS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJ1Zi5wdXNoKG5ldyBub2Rlcy5PdXRwdXQodG9rLmxpbmVubywgdG9rLmNvbG5vLCBbbmV3IG5vZGVzLlRlbXBsYXRlRGF0YSh0b2subGluZW5vLCB0b2suY29sbm8sIGRhdGEpXSkpO1xuICAgICAgfSBlbHNlIGlmICh0b2sudHlwZSA9PT0gbGV4ZXIuVE9LRU5fQkxPQ0tfU1RBUlQpIHtcbiAgICAgICAgdGhpcy5kcm9wTGVhZGluZ1doaXRlc3BhY2UgPSBmYWxzZTtcbiAgICAgICAgdmFyIG4gPSB0aGlzLnBhcnNlU3RhdGVtZW50KCk7XG5cbiAgICAgICAgaWYgKCFuKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBidWYucHVzaChuKTtcbiAgICAgIH0gZWxzZSBpZiAodG9rLnR5cGUgPT09IGxleGVyLlRPS0VOX1ZBUklBQkxFX1NUQVJUKSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgICAgdGhpcy5kcm9wTGVhZGluZ1doaXRlc3BhY2UgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hZHZhbmNlQWZ0ZXJWYXJpYWJsZUVuZCgpO1xuICAgICAgICBidWYucHVzaChuZXcgbm9kZXMuT3V0cHV0KHRvay5saW5lbm8sIHRvay5jb2xubywgW2VdKSk7XG4gICAgICB9IGVsc2UgaWYgKHRvay50eXBlID09PSBsZXhlci5UT0tFTl9DT01NRU5UKSB7XG4gICAgICAgIHRoaXMuZHJvcExlYWRpbmdXaGl0ZXNwYWNlID0gdG9rLnZhbHVlLmNoYXJBdCh0b2sudmFsdWUubGVuZ3RoIC0gdGhpcy50b2tlbnMudGFncy5DT01NRU5UX0VORC5sZW5ndGggLSAxKSA9PT0gJy0nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWdub3JlIGNvbW1lbnRzLCBvdGhlcndpc2UgdGhpcyBzaG91bGQgYmUgYW4gZXJyb3JcbiAgICAgICAgdGhpcy5mYWlsKCdVbmV4cGVjdGVkIHRva2VuIGF0IHRvcC1sZXZlbDogJyArIHRvay50eXBlLCB0b2subGluZW5vLCB0b2suY29sbm8pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBidWY7XG4gIH07XG5cbiAgX3Byb3RvLnBhcnNlID0gZnVuY3Rpb24gcGFyc2UoKSB7XG4gICAgcmV0dXJuIG5ldyBub2Rlcy5Ob2RlTGlzdCgwLCAwLCB0aGlzLnBhcnNlTm9kZXMoKSk7XG4gIH07XG5cbiAgX3Byb3RvLnBhcnNlQXNSb290ID0gZnVuY3Rpb24gcGFyc2VBc1Jvb3QoKSB7XG4gICAgcmV0dXJuIG5ldyBub2Rlcy5Sb290KDAsIDAsIHRoaXMucGFyc2VOb2RlcygpKTtcbiAgfTtcblxuICByZXR1cm4gUGFyc2VyO1xufShPYmopOyAvLyB2YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbi8vIHZhciBsID0gbGV4ZXIubGV4KCd7JS0gaWYgeCAtJX1cXG4gaGVsbG8geyUgZW5kaWYgJX0nKTtcbi8vIHZhciB0O1xuLy8gd2hpbGUoKHQgPSBsLm5leHRUb2tlbigpKSkge1xuLy8gICAgIGNvbnNvbGUubG9nKHV0aWwuaW5zcGVjdCh0KSk7XG4vLyB9XG4vLyB2YXIgcCA9IG5ldyBQYXJzZXIobGV4ZXIubGV4KCdoZWxsbyB7JSBmaWx0ZXIgdGl0bGUgJX0nICtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0hlbGxvIG1hZGFtIGhvdyBhcmUgeW91JyArXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd7JSBlbmRmaWx0ZXIgJX0nKSk7XG4vLyB2YXIgbiA9IHAucGFyc2VBc1Jvb3QoKTtcbi8vIG5vZGVzLnByaW50Tm9kZXMobik7XG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBhcnNlOiBmdW5jdGlvbiBwYXJzZShzcmMsIGV4dGVuc2lvbnMsIG9wdHMpIHtcbiAgICB2YXIgcCA9IG5ldyBQYXJzZXIobGV4ZXIubGV4KHNyYywgb3B0cykpO1xuXG4gICAgaWYgKGV4dGVuc2lvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcC5leHRlbnNpb25zID0gZXh0ZW5zaW9ucztcbiAgICB9XG5cbiAgICByZXR1cm4gcC5wYXJzZUFzUm9vdCgpO1xuICB9LFxuICBQYXJzZXI6IFBhcnNlclxufTtcblxuLyoqKi8gfSksXG4vKiA5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBsaWIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgd2hpdGVzcGFjZUNoYXJzID0gXCIgXFxuXFx0XFxyXFx4QTBcIjtcbnZhciBkZWxpbUNoYXJzID0gJygpW117fSUqLSt+LyMsOnwuPD49ISc7XG52YXIgaW50Q2hhcnMgPSAnMDEyMzQ1Njc4OSc7XG52YXIgQkxPQ0tfU1RBUlQgPSAneyUnO1xudmFyIEJMT0NLX0VORCA9ICclfSc7XG52YXIgVkFSSUFCTEVfU1RBUlQgPSAne3snO1xudmFyIFZBUklBQkxFX0VORCA9ICd9fSc7XG52YXIgQ09NTUVOVF9TVEFSVCA9ICd7Iyc7XG52YXIgQ09NTUVOVF9FTkQgPSAnI30nO1xudmFyIFRPS0VOX1NUUklORyA9ICdzdHJpbmcnO1xudmFyIFRPS0VOX1dISVRFU1BBQ0UgPSAnd2hpdGVzcGFjZSc7XG52YXIgVE9LRU5fREFUQSA9ICdkYXRhJztcbnZhciBUT0tFTl9CTE9DS19TVEFSVCA9ICdibG9jay1zdGFydCc7XG52YXIgVE9LRU5fQkxPQ0tfRU5EID0gJ2Jsb2NrLWVuZCc7XG52YXIgVE9LRU5fVkFSSUFCTEVfU1RBUlQgPSAndmFyaWFibGUtc3RhcnQnO1xudmFyIFRPS0VOX1ZBUklBQkxFX0VORCA9ICd2YXJpYWJsZS1lbmQnO1xudmFyIFRPS0VOX0NPTU1FTlQgPSAnY29tbWVudCc7XG52YXIgVE9LRU5fTEVGVF9QQVJFTiA9ICdsZWZ0LXBhcmVuJztcbnZhciBUT0tFTl9SSUdIVF9QQVJFTiA9ICdyaWdodC1wYXJlbic7XG52YXIgVE9LRU5fTEVGVF9CUkFDS0VUID0gJ2xlZnQtYnJhY2tldCc7XG52YXIgVE9LRU5fUklHSFRfQlJBQ0tFVCA9ICdyaWdodC1icmFja2V0JztcbnZhciBUT0tFTl9MRUZUX0NVUkxZID0gJ2xlZnQtY3VybHknO1xudmFyIFRPS0VOX1JJR0hUX0NVUkxZID0gJ3JpZ2h0LWN1cmx5JztcbnZhciBUT0tFTl9PUEVSQVRPUiA9ICdvcGVyYXRvcic7XG52YXIgVE9LRU5fQ09NTUEgPSAnY29tbWEnO1xudmFyIFRPS0VOX0NPTE9OID0gJ2NvbG9uJztcbnZhciBUT0tFTl9USUxERSA9ICd0aWxkZSc7XG52YXIgVE9LRU5fUElQRSA9ICdwaXBlJztcbnZhciBUT0tFTl9JTlQgPSAnaW50JztcbnZhciBUT0tFTl9GTE9BVCA9ICdmbG9hdCc7XG52YXIgVE9LRU5fQk9PTEVBTiA9ICdib29sZWFuJztcbnZhciBUT0tFTl9OT05FID0gJ25vbmUnO1xudmFyIFRPS0VOX1NZTUJPTCA9ICdzeW1ib2wnO1xudmFyIFRPS0VOX1NQRUNJQUwgPSAnc3BlY2lhbCc7XG52YXIgVE9LRU5fUkVHRVggPSAncmVnZXgnO1xuXG5mdW5jdGlvbiB0b2tlbih0eXBlLCB2YWx1ZSwgbGluZW5vLCBjb2xubykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGxpbmVubzogbGluZW5vLFxuICAgIGNvbG5vOiBjb2xub1xuICB9O1xufVxuXG52YXIgVG9rZW5pemVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVG9rZW5pemVyKHN0ciwgb3B0cykge1xuICAgIHRoaXMuc3RyID0gc3RyO1xuICAgIHRoaXMuaW5kZXggPSAwO1xuICAgIHRoaXMubGVuID0gc3RyLmxlbmd0aDtcbiAgICB0aGlzLmxpbmVubyA9IDA7XG4gICAgdGhpcy5jb2xubyA9IDA7XG4gICAgdGhpcy5pbl9jb2RlID0gZmFsc2U7XG4gICAgb3B0cyA9IG9wdHMgfHwge307XG4gICAgdmFyIHRhZ3MgPSBvcHRzLnRhZ3MgfHwge307XG4gICAgdGhpcy50YWdzID0ge1xuICAgICAgQkxPQ0tfU1RBUlQ6IHRhZ3MuYmxvY2tTdGFydCB8fCBCTE9DS19TVEFSVCxcbiAgICAgIEJMT0NLX0VORDogdGFncy5ibG9ja0VuZCB8fCBCTE9DS19FTkQsXG4gICAgICBWQVJJQUJMRV9TVEFSVDogdGFncy52YXJpYWJsZVN0YXJ0IHx8IFZBUklBQkxFX1NUQVJULFxuICAgICAgVkFSSUFCTEVfRU5EOiB0YWdzLnZhcmlhYmxlRW5kIHx8IFZBUklBQkxFX0VORCxcbiAgICAgIENPTU1FTlRfU1RBUlQ6IHRhZ3MuY29tbWVudFN0YXJ0IHx8IENPTU1FTlRfU1RBUlQsXG4gICAgICBDT01NRU5UX0VORDogdGFncy5jb21tZW50RW5kIHx8IENPTU1FTlRfRU5EXG4gICAgfTtcbiAgICB0aGlzLnRyaW1CbG9ja3MgPSAhIW9wdHMudHJpbUJsb2NrcztcbiAgICB0aGlzLmxzdHJpcEJsb2NrcyA9ICEhb3B0cy5sc3RyaXBCbG9ja3M7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVG9rZW5pemVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ubmV4dFRva2VuID0gZnVuY3Rpb24gbmV4dFRva2VuKCkge1xuICAgIHZhciBsaW5lbm8gPSB0aGlzLmxpbmVubztcbiAgICB2YXIgY29sbm8gPSB0aGlzLmNvbG5vO1xuICAgIHZhciB0b2s7XG5cbiAgICBpZiAodGhpcy5pbl9jb2RlKSB7XG4gICAgICAvLyBPdGhlcndpc2UsIGlmIHdlIGFyZSBpbiBhIGJsb2NrIHBhcnNlIGl0IGFzIGNvZGVcbiAgICAgIHZhciBjdXIgPSB0aGlzLmN1cnJlbnQoKTtcblxuICAgICAgaWYgKHRoaXMuaXNGaW5pc2hlZCgpKSB7XG4gICAgICAgIC8vIFdlIGhhdmUgbm90aGluZyBlbHNlIHRvIHBhcnNlXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSBlbHNlIGlmIChjdXIgPT09ICdcIicgfHwgY3VyID09PSAnXFwnJykge1xuICAgICAgICAvLyBXZSd2ZSBoaXQgYSBzdHJpbmdcbiAgICAgICAgcmV0dXJuIHRva2VuKFRPS0VOX1NUUklORywgdGhpcy5fcGFyc2VTdHJpbmcoY3VyKSwgbGluZW5vLCBjb2xubyk7XG4gICAgICB9IGVsc2UgaWYgKHRvayA9IHRoaXMuX2V4dHJhY3Qod2hpdGVzcGFjZUNoYXJzKSkge1xuICAgICAgICAvLyBXZSBoaXQgc29tZSB3aGl0ZXNwYWNlXG4gICAgICAgIHJldHVybiB0b2tlbihUT0tFTl9XSElURVNQQUNFLCB0b2ssIGxpbmVubywgY29sbm8pO1xuICAgICAgfSBlbHNlIGlmICgodG9rID0gdGhpcy5fZXh0cmFjdFN0cmluZyh0aGlzLnRhZ3MuQkxPQ0tfRU5EKSkgfHwgKHRvayA9IHRoaXMuX2V4dHJhY3RTdHJpbmcoJy0nICsgdGhpcy50YWdzLkJMT0NLX0VORCkpKSB7XG4gICAgICAgIC8vIFNwZWNpYWwgY2hlY2sgZm9yIHRoZSBibG9jayBlbmQgdGFnXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEl0IGlzIGEgcmVxdWlyZW1lbnQgdGhhdCBzdGFydCBhbmQgZW5kIHRhZ3MgYXJlIGNvbXBvc2VkIG9mXG4gICAgICAgIC8vIGRlbGltaXRlciBjaGFyYWN0ZXJzICgle31bXSBldGMpLCBhbmQgb3VyIGNvZGUgYWx3YXlzXG4gICAgICAgIC8vIGJyZWFrcyBvbiBkZWxpbWl0ZXJzIHNvIHdlIGNhbiBhc3N1bWUgdGhlIHRva2VuIHBhcnNpbmdcbiAgICAgICAgLy8gZG9lc24ndCBjb25zdW1lIHRoZXNlIGVsc2V3aGVyZVxuICAgICAgICB0aGlzLmluX2NvZGUgPSBmYWxzZTtcblxuICAgICAgICBpZiAodGhpcy50cmltQmxvY2tzKSB7XG4gICAgICAgICAgY3VyID0gdGhpcy5jdXJyZW50KCk7XG5cbiAgICAgICAgICBpZiAoY3VyID09PSAnXFxuJykge1xuICAgICAgICAgICAgLy8gU2tpcCBuZXdsaW5lXG4gICAgICAgICAgICB0aGlzLmZvcndhcmQoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGN1ciA9PT0gJ1xccicpIHtcbiAgICAgICAgICAgIC8vIFNraXAgQ1JMRiBuZXdsaW5lXG4gICAgICAgICAgICB0aGlzLmZvcndhcmQoKTtcbiAgICAgICAgICAgIGN1ciA9IHRoaXMuY3VycmVudCgpO1xuXG4gICAgICAgICAgICBpZiAoY3VyID09PSAnXFxuJykge1xuICAgICAgICAgICAgICB0aGlzLmZvcndhcmQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIFdhcyBub3QgYSBDUkxGLCBzbyBnbyBiYWNrXG4gICAgICAgICAgICAgIHRoaXMuYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0b2tlbihUT0tFTl9CTE9DS19FTkQsIHRvaywgbGluZW5vLCBjb2xubyk7XG4gICAgICB9IGVsc2UgaWYgKCh0b2sgPSB0aGlzLl9leHRyYWN0U3RyaW5nKHRoaXMudGFncy5WQVJJQUJMRV9FTkQpKSB8fCAodG9rID0gdGhpcy5fZXh0cmFjdFN0cmluZygnLScgKyB0aGlzLnRhZ3MuVkFSSUFCTEVfRU5EKSkpIHtcbiAgICAgICAgLy8gU3BlY2lhbCBjaGVjayBmb3IgdmFyaWFibGUgZW5kIHRhZyAoc2VlIGFib3ZlKVxuICAgICAgICB0aGlzLmluX2NvZGUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRva2VuKFRPS0VOX1ZBUklBQkxFX0VORCwgdG9rLCBsaW5lbm8sIGNvbG5vKTtcbiAgICAgIH0gZWxzZSBpZiAoY3VyID09PSAncicgJiYgdGhpcy5zdHIuY2hhckF0KHRoaXMuaW5kZXggKyAxKSA9PT0gJy8nKSB7XG4gICAgICAgIC8vIFNraXAgcGFzdCAnci8nLlxuICAgICAgICB0aGlzLmZvcndhcmROKDIpOyAvLyBFeHRyYWN0IHVudGlsIHRoZSBlbmQgb2YgdGhlIHJlZ2V4IC0tIC8gZW5kcyBpdCwgXFwvIGRvZXMgbm90LlxuXG4gICAgICAgIHZhciByZWdleEJvZHkgPSAnJztcblxuICAgICAgICB3aGlsZSAoIXRoaXMuaXNGaW5pc2hlZCgpKSB7XG4gICAgICAgICAgaWYgKHRoaXMuY3VycmVudCgpID09PSAnLycgJiYgdGhpcy5wcmV2aW91cygpICE9PSAnXFxcXCcpIHtcbiAgICAgICAgICAgIHRoaXMuZm9yd2FyZCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlZ2V4Qm9keSArPSB0aGlzLmN1cnJlbnQoKTtcbiAgICAgICAgICAgIHRoaXMuZm9yd2FyZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBDaGVjayBmb3IgZmxhZ3MuXG4gICAgICAgIC8vIFRoZSBwb3NzaWJsZSBmbGFncyBhcmUgYWNjb3JkaW5nIHRvIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1JlZ0V4cClcblxuXG4gICAgICAgIHZhciBQT1NTSUJMRV9GTEFHUyA9IFsnZycsICdpJywgJ20nLCAneSddO1xuICAgICAgICB2YXIgcmVnZXhGbGFncyA9ICcnO1xuXG4gICAgICAgIHdoaWxlICghdGhpcy5pc0ZpbmlzaGVkKCkpIHtcbiAgICAgICAgICB2YXIgaXNDdXJyZW50QUZsYWcgPSBQT1NTSUJMRV9GTEFHUy5pbmRleE9mKHRoaXMuY3VycmVudCgpKSAhPT0gLTE7XG5cbiAgICAgICAgICBpZiAoaXNDdXJyZW50QUZsYWcpIHtcbiAgICAgICAgICAgIHJlZ2V4RmxhZ3MgKz0gdGhpcy5jdXJyZW50KCk7XG4gICAgICAgICAgICB0aGlzLmZvcndhcmQoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRva2VuKFRPS0VOX1JFR0VYLCB7XG4gICAgICAgICAgYm9keTogcmVnZXhCb2R5LFxuICAgICAgICAgIGZsYWdzOiByZWdleEZsYWdzXG4gICAgICAgIH0sIGxpbmVubywgY29sbm8pO1xuICAgICAgfSBlbHNlIGlmIChkZWxpbUNoYXJzLmluZGV4T2YoY3VyKSAhPT0gLTEpIHtcbiAgICAgICAgLy8gV2UndmUgaGl0IGEgZGVsaW1pdGVyIChhIHNwZWNpYWwgY2hhciBsaWtlIGEgYnJhY2tldClcbiAgICAgICAgdGhpcy5mb3J3YXJkKCk7XG4gICAgICAgIHZhciBjb21wbGV4T3BzID0gWyc9PScsICc9PT0nLCAnIT0nLCAnIT09JywgJzw9JywgJz49JywgJy8vJywgJyoqJ107XG4gICAgICAgIHZhciBjdXJDb21wbGV4ID0gY3VyICsgdGhpcy5jdXJyZW50KCk7XG4gICAgICAgIHZhciB0eXBlO1xuXG4gICAgICAgIGlmIChsaWIuaW5kZXhPZihjb21wbGV4T3BzLCBjdXJDb21wbGV4KSAhPT0gLTEpIHtcbiAgICAgICAgICB0aGlzLmZvcndhcmQoKTtcbiAgICAgICAgICBjdXIgPSBjdXJDb21wbGV4OyAvLyBTZWUgaWYgdGhpcyBpcyBhIHN0cmljdCBlcXVhbGl0eS9pbmVxdWFsaXR5IGNvbXBhcmF0b3JcblxuICAgICAgICAgIGlmIChsaWIuaW5kZXhPZihjb21wbGV4T3BzLCBjdXJDb21wbGV4ICsgdGhpcy5jdXJyZW50KCkpICE9PSAtMSkge1xuICAgICAgICAgICAgY3VyID0gY3VyQ29tcGxleCArIHRoaXMuY3VycmVudCgpO1xuICAgICAgICAgICAgdGhpcy5mb3J3YXJkKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChjdXIpIHtcbiAgICAgICAgICBjYXNlICcoJzpcbiAgICAgICAgICAgIHR5cGUgPSBUT0tFTl9MRUZUX1BBUkVOO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICcpJzpcbiAgICAgICAgICAgIHR5cGUgPSBUT0tFTl9SSUdIVF9QQVJFTjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnWyc6XG4gICAgICAgICAgICB0eXBlID0gVE9LRU5fTEVGVF9CUkFDS0VUO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICddJzpcbiAgICAgICAgICAgIHR5cGUgPSBUT0tFTl9SSUdIVF9CUkFDS0VUO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICd7JzpcbiAgICAgICAgICAgIHR5cGUgPSBUT0tFTl9MRUZUX0NVUkxZO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICd9JzpcbiAgICAgICAgICAgIHR5cGUgPSBUT0tFTl9SSUdIVF9DVVJMWTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnLCc6XG4gICAgICAgICAgICB0eXBlID0gVE9LRU5fQ09NTUE7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJzonOlxuICAgICAgICAgICAgdHlwZSA9IFRPS0VOX0NPTE9OO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICd+JzpcbiAgICAgICAgICAgIHR5cGUgPSBUT0tFTl9USUxERTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnfCc6XG4gICAgICAgICAgICB0eXBlID0gVE9LRU5fUElQRTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHR5cGUgPSBUT0tFTl9PUEVSQVRPUjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0b2tlbih0eXBlLCBjdXIsIGxpbmVubywgY29sbm8pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gV2UgYXJlIG5vdCBhdCB3aGl0ZXNwYWNlIG9yIGEgZGVsaW1pdGVyLCBzbyBleHRyYWN0IHRoZVxuICAgICAgICAvLyB0ZXh0IGFuZCBwYXJzZSBpdFxuICAgICAgICB0b2sgPSB0aGlzLl9leHRyYWN0VW50aWwod2hpdGVzcGFjZUNoYXJzICsgZGVsaW1DaGFycyk7XG5cbiAgICAgICAgaWYgKHRvay5tYXRjaCgvXlstK10/WzAtOV0rJC8pKSB7XG4gICAgICAgICAgaWYgKHRoaXMuY3VycmVudCgpID09PSAnLicpIHtcbiAgICAgICAgICAgIHRoaXMuZm9yd2FyZCgpO1xuXG4gICAgICAgICAgICB2YXIgZGVjID0gdGhpcy5fZXh0cmFjdChpbnRDaGFycyk7XG5cbiAgICAgICAgICAgIHJldHVybiB0b2tlbihUT0tFTl9GTE9BVCwgdG9rICsgJy4nICsgZGVjLCBsaW5lbm8sIGNvbG5vKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRva2VuKFRPS0VOX0lOVCwgdG9rLCBsaW5lbm8sIGNvbG5vKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodG9rLm1hdGNoKC9eKHRydWV8ZmFsc2UpJC8pKSB7XG4gICAgICAgICAgcmV0dXJuIHRva2VuKFRPS0VOX0JPT0xFQU4sIHRvaywgbGluZW5vLCBjb2xubyk7XG4gICAgICAgIH0gZWxzZSBpZiAodG9rID09PSAnbm9uZScpIHtcbiAgICAgICAgICByZXR1cm4gdG9rZW4oVE9LRU5fTk9ORSwgdG9rLCBsaW5lbm8sIGNvbG5vKTtcbiAgICAgICAgICAvKlxuICAgICAgICAgICAqIEFkZGVkIHRvIG1ha2UgdGhlIHRlc3QgYG51bGwgaXMgbnVsbGAgZXZhbHVhdGUgdHJ1dGhpbHkuXG4gICAgICAgICAgICogT3RoZXJ3aXNlLCBOdW5qdWNrcyB3aWxsIGxvb2sgdXAgbnVsbCBpbiB0aGUgY29udGV4dCBhbmRcbiAgICAgICAgICAgKiByZXR1cm4gYHVuZGVmaW5lZGAsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnQuIFRoaXMgKm1heSogaGF2ZVxuICAgICAgICAgICAqIGNvbnNlcXVlbmNlcyBpcyBzb21lb25lIGlzIHVzaW5nIG51bGwgaW4gdGhlaXIgdGVtcGxhdGVzIGFzIGFcbiAgICAgICAgICAgKiB2YXJpYWJsZS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgfSBlbHNlIGlmICh0b2sgPT09ICdudWxsJykge1xuICAgICAgICAgIHJldHVybiB0b2tlbihUT0tFTl9OT05FLCB0b2ssIGxpbmVubywgY29sbm8pO1xuICAgICAgICB9IGVsc2UgaWYgKHRvaykge1xuICAgICAgICAgIHJldHVybiB0b2tlbihUT0tFTl9TWU1CT0wsIHRvaywgbGluZW5vLCBjb2xubyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIHZhbHVlIHdoaWxlIHBhcnNpbmc6ICcgKyB0b2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFBhcnNlIG91dCB0aGUgdGVtcGxhdGUgdGV4dCwgYnJlYWtpbmcgb24gdGFnXG4gICAgICAvLyBkZWxpbWl0ZXJzIGJlY2F1c2Ugd2UgbmVlZCB0byBsb29rIGZvciBibG9jay92YXJpYWJsZSBzdGFydFxuICAgICAgLy8gdGFncyAoZG9uJ3QgdXNlIHRoZSBmdWxsIGRlbGltQ2hhcnMgZm9yIG9wdGltaXphdGlvbilcbiAgICAgIHZhciBiZWdpbkNoYXJzID0gdGhpcy50YWdzLkJMT0NLX1NUQVJULmNoYXJBdCgwKSArIHRoaXMudGFncy5WQVJJQUJMRV9TVEFSVC5jaGFyQXQoMCkgKyB0aGlzLnRhZ3MuQ09NTUVOVF9TVEFSVC5jaGFyQXQoMCkgKyB0aGlzLnRhZ3MuQ09NTUVOVF9FTkQuY2hhckF0KDApO1xuXG4gICAgICBpZiAodGhpcy5pc0ZpbmlzaGVkKCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IGVsc2UgaWYgKCh0b2sgPSB0aGlzLl9leHRyYWN0U3RyaW5nKHRoaXMudGFncy5CTE9DS19TVEFSVCArICctJykpIHx8ICh0b2sgPSB0aGlzLl9leHRyYWN0U3RyaW5nKHRoaXMudGFncy5CTE9DS19TVEFSVCkpKSB7XG4gICAgICAgIHRoaXMuaW5fY29kZSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0b2tlbihUT0tFTl9CTE9DS19TVEFSVCwgdG9rLCBsaW5lbm8sIGNvbG5vKTtcbiAgICAgIH0gZWxzZSBpZiAoKHRvayA9IHRoaXMuX2V4dHJhY3RTdHJpbmcodGhpcy50YWdzLlZBUklBQkxFX1NUQVJUICsgJy0nKSkgfHwgKHRvayA9IHRoaXMuX2V4dHJhY3RTdHJpbmcodGhpcy50YWdzLlZBUklBQkxFX1NUQVJUKSkpIHtcbiAgICAgICAgdGhpcy5pbl9jb2RlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRva2VuKFRPS0VOX1ZBUklBQkxFX1NUQVJULCB0b2ssIGxpbmVubywgY29sbm8pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9rID0gJyc7XG4gICAgICAgIHZhciBkYXRhO1xuICAgICAgICB2YXIgaW5Db21tZW50ID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHRoaXMuX21hdGNoZXModGhpcy50YWdzLkNPTU1FTlRfU1RBUlQpKSB7XG4gICAgICAgICAgaW5Db21tZW50ID0gdHJ1ZTtcbiAgICAgICAgICB0b2sgPSB0aGlzLl9leHRyYWN0U3RyaW5nKHRoaXMudGFncy5DT01NRU5UX1NUQVJUKTtcbiAgICAgICAgfSAvLyBDb250aW51YWxseSBjb25zdW1lIHRleHQsIGJyZWFraW5nIG9uIHRoZSB0YWcgZGVsaW1pdGVyXG4gICAgICAgIC8vIGNoYXJhY3RlcnMgYW5kIGNoZWNraW5nIHRvIHNlZSBpZiBpdCdzIGEgc3RhcnQgdGFnLlxuICAgICAgICAvL1xuICAgICAgICAvLyBXZSBjb3VsZCBoaXQgdGhlIGVuZCBvZiB0aGUgdGVtcGxhdGUgaW4gdGhlIG1pZGRsZSBvZlxuICAgICAgICAvLyBvdXIgbG9vcGluZywgc28gY2hlY2sgZm9yIHRoZSBudWxsIHJldHVybiB2YWx1ZSBmcm9tXG4gICAgICAgIC8vIF9leHRyYWN0VW50aWxcblxuXG4gICAgICAgIHdoaWxlICgoZGF0YSA9IHRoaXMuX2V4dHJhY3RVbnRpbChiZWdpbkNoYXJzKSkgIT09IG51bGwpIHtcbiAgICAgICAgICB0b2sgKz0gZGF0YTtcblxuICAgICAgICAgIGlmICgodGhpcy5fbWF0Y2hlcyh0aGlzLnRhZ3MuQkxPQ0tfU1RBUlQpIHx8IHRoaXMuX21hdGNoZXModGhpcy50YWdzLlZBUklBQkxFX1NUQVJUKSB8fCB0aGlzLl9tYXRjaGVzKHRoaXMudGFncy5DT01NRU5UX1NUQVJUKSkgJiYgIWluQ29tbWVudCkge1xuICAgICAgICAgICAgaWYgKHRoaXMubHN0cmlwQmxvY2tzICYmIHRoaXMuX21hdGNoZXModGhpcy50YWdzLkJMT0NLX1NUQVJUKSAmJiB0aGlzLmNvbG5vID4gMCAmJiB0aGlzLmNvbG5vIDw9IHRvay5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgdmFyIGxhc3RMaW5lID0gdG9rLnNsaWNlKC10aGlzLmNvbG5vKTtcblxuICAgICAgICAgICAgICBpZiAoL15cXHMrJC8udGVzdChsYXN0TGluZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgYmxvY2sgbGVhZGluZyB3aGl0ZXNwYWNlIGZyb20gYmVnaW5uaW5nIG9mIHRoZSBzdHJpbmdcbiAgICAgICAgICAgICAgICB0b2sgPSB0b2suc2xpY2UoMCwgLXRoaXMuY29sbm8pO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0b2subGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAvLyBBbGwgZGF0YSByZW1vdmVkLCBjb2xsYXBzZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSBub2Rlc1xuICAgICAgICAgICAgICAgICAgLy8gYnkgcmV0dXJuaW5nIG5leHQgdG9rZW4gKGJsb2NrIHN0YXJ0KVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmV4dFRva2VuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IC8vIElmIGl0IGlzIGEgc3RhcnQgdGFnLCBzdG9wIGxvb3BpbmdcblxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX21hdGNoZXModGhpcy50YWdzLkNPTU1FTlRfRU5EKSkge1xuICAgICAgICAgICAgaWYgKCFpbkNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmV4cGVjdGVkIGVuZCBvZiBjb21tZW50Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRvayArPSB0aGlzLl9leHRyYWN0U3RyaW5nKHRoaXMudGFncy5DT01NRU5UX0VORCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSXQgZG9lcyBub3QgbWF0Y2ggYW55IHRhZywgc28gYWRkIHRoZSBjaGFyYWN0ZXIgYW5kXG4gICAgICAgICAgICAvLyBjYXJyeSBvblxuICAgICAgICAgICAgdG9rICs9IHRoaXMuY3VycmVudCgpO1xuICAgICAgICAgICAgdGhpcy5mb3J3YXJkKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRhdGEgPT09IG51bGwgJiYgaW5Db21tZW50KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdleHBlY3RlZCBlbmQgb2YgY29tbWVudCwgZ290IGVuZCBvZiBmaWxlJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdG9rZW4oaW5Db21tZW50ID8gVE9LRU5fQ09NTUVOVCA6IFRPS0VOX0RBVEEsIHRvaywgbGluZW5vLCBjb2xubyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fcGFyc2VTdHJpbmcgPSBmdW5jdGlvbiBfcGFyc2VTdHJpbmcoZGVsaW1pdGVyKSB7XG4gICAgdGhpcy5mb3J3YXJkKCk7XG4gICAgdmFyIHN0ciA9ICcnO1xuXG4gICAgd2hpbGUgKCF0aGlzLmlzRmluaXNoZWQoKSAmJiB0aGlzLmN1cnJlbnQoKSAhPT0gZGVsaW1pdGVyKSB7XG4gICAgICB2YXIgY3VyID0gdGhpcy5jdXJyZW50KCk7XG5cbiAgICAgIGlmIChjdXIgPT09ICdcXFxcJykge1xuICAgICAgICB0aGlzLmZvcndhcmQoKTtcblxuICAgICAgICBzd2l0Y2ggKHRoaXMuY3VycmVudCgpKSB7XG4gICAgICAgICAgY2FzZSAnbic6XG4gICAgICAgICAgICBzdHIgKz0gJ1xcbic7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ3QnOlxuICAgICAgICAgICAgc3RyICs9ICdcXHQnO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdyJzpcbiAgICAgICAgICAgIHN0ciArPSAnXFxyJztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHN0ciArPSB0aGlzLmN1cnJlbnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZm9yd2FyZCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyICs9IGN1cjtcbiAgICAgICAgdGhpcy5mb3J3YXJkKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5mb3J3YXJkKCk7XG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcblxuICBfcHJvdG8uX21hdGNoZXMgPSBmdW5jdGlvbiBfbWF0Y2hlcyhzdHIpIHtcbiAgICBpZiAodGhpcy5pbmRleCArIHN0ci5sZW5ndGggPiB0aGlzLmxlbikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIG0gPSB0aGlzLnN0ci5zbGljZSh0aGlzLmluZGV4LCB0aGlzLmluZGV4ICsgc3RyLmxlbmd0aCk7XG4gICAgcmV0dXJuIG0gPT09IHN0cjtcbiAgfTtcblxuICBfcHJvdG8uX2V4dHJhY3RTdHJpbmcgPSBmdW5jdGlvbiBfZXh0cmFjdFN0cmluZyhzdHIpIHtcbiAgICBpZiAodGhpcy5fbWF0Y2hlcyhzdHIpKSB7XG4gICAgICB0aGlzLmZvcndhcmROKHN0ci5sZW5ndGgpO1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBfcHJvdG8uX2V4dHJhY3RVbnRpbCA9IGZ1bmN0aW9uIF9leHRyYWN0VW50aWwoY2hhclN0cmluZykge1xuICAgIC8vIEV4dHJhY3QgYWxsIG5vbi1tYXRjaGluZyBjaGFycywgd2l0aCB0aGUgZGVmYXVsdCBtYXRjaGluZyBzZXRcbiAgICAvLyB0byBldmVyeXRoaW5nXG4gICAgcmV0dXJuIHRoaXMuX2V4dHJhY3RNYXRjaGluZyh0cnVlLCBjaGFyU3RyaW5nIHx8ICcnKTtcbiAgfTtcblxuICBfcHJvdG8uX2V4dHJhY3QgPSBmdW5jdGlvbiBfZXh0cmFjdChjaGFyU3RyaW5nKSB7XG4gICAgLy8gRXh0cmFjdCBhbGwgbWF0Y2hpbmcgY2hhcnMgKG5vIGRlZmF1bHQsIHNvIGNoYXJTdHJpbmcgbXVzdCBiZVxuICAgIC8vIGV4cGxpY2l0KVxuICAgIHJldHVybiB0aGlzLl9leHRyYWN0TWF0Y2hpbmcoZmFsc2UsIGNoYXJTdHJpbmcpO1xuICB9O1xuXG4gIF9wcm90by5fZXh0cmFjdE1hdGNoaW5nID0gZnVuY3Rpb24gX2V4dHJhY3RNYXRjaGluZyhicmVha09uTWF0Y2gsIGNoYXJTdHJpbmcpIHtcbiAgICAvLyBQdWxsIG91dCBjaGFyYWN0ZXJzIHVudGlsIGEgYnJlYWtpbmcgY2hhciBpcyBoaXQuXG4gICAgLy8gSWYgYnJlYWtPbk1hdGNoIGlzIGZhbHNlLCBhIG5vbi1tYXRjaGluZyBjaGFyIHN0b3BzIGl0LlxuICAgIC8vIElmIGJyZWFrT25NYXRjaCBpcyB0cnVlLCBhIG1hdGNoaW5nIGNoYXIgc3RvcHMgaXQuXG4gICAgaWYgKHRoaXMuaXNGaW5pc2hlZCgpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgZmlyc3QgPSBjaGFyU3RyaW5nLmluZGV4T2YodGhpcy5jdXJyZW50KCkpOyAvLyBPbmx5IHByb2NlZWQgaWYgdGhlIGZpcnN0IGNoYXJhY3RlciBkb2Vzbid0IG1lZXQgb3VyIGNvbmRpdGlvblxuXG4gICAgaWYgKGJyZWFrT25NYXRjaCAmJiBmaXJzdCA9PT0gLTEgfHwgIWJyZWFrT25NYXRjaCAmJiBmaXJzdCAhPT0gLTEpIHtcbiAgICAgIHZhciB0ID0gdGhpcy5jdXJyZW50KCk7XG4gICAgICB0aGlzLmZvcndhcmQoKTsgLy8gQW5kIHB1bGwgb3V0IGFsbCB0aGUgY2hhcnMgb25lIGF0IGEgdGltZSB1bnRpbCB3ZSBoaXQgYVxuICAgICAgLy8gYnJlYWtpbmcgY2hhclxuXG4gICAgICB2YXIgaWR4ID0gY2hhclN0cmluZy5pbmRleE9mKHRoaXMuY3VycmVudCgpKTtcblxuICAgICAgd2hpbGUgKChicmVha09uTWF0Y2ggJiYgaWR4ID09PSAtMSB8fCAhYnJlYWtPbk1hdGNoICYmIGlkeCAhPT0gLTEpICYmICF0aGlzLmlzRmluaXNoZWQoKSkge1xuICAgICAgICB0ICs9IHRoaXMuY3VycmVudCgpO1xuICAgICAgICB0aGlzLmZvcndhcmQoKTtcbiAgICAgICAgaWR4ID0gY2hhclN0cmluZy5pbmRleE9mKHRoaXMuY3VycmVudCgpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuICcnO1xuICB9O1xuXG4gIF9wcm90by5fZXh0cmFjdFJlZ2V4ID0gZnVuY3Rpb24gX2V4dHJhY3RSZWdleChyZWdleCkge1xuICAgIHZhciBtYXRjaGVzID0gdGhpcy5jdXJyZW50U3RyKCkubWF0Y2gocmVnZXgpO1xuXG4gICAgaWYgKCFtYXRjaGVzKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IC8vIE1vdmUgZm9yd2FyZCB3aGF0ZXZlciB3YXMgbWF0Y2hlZFxuXG5cbiAgICB0aGlzLmZvcndhcmROKG1hdGNoZXNbMF0ubGVuZ3RoKTtcbiAgICByZXR1cm4gbWF0Y2hlcztcbiAgfTtcblxuICBfcHJvdG8uaXNGaW5pc2hlZCA9IGZ1bmN0aW9uIGlzRmluaXNoZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5kZXggPj0gdGhpcy5sZW47XG4gIH07XG5cbiAgX3Byb3RvLmZvcndhcmROID0gZnVuY3Rpb24gZm9yd2FyZE4obikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICB0aGlzLmZvcndhcmQoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmZvcndhcmQgPSBmdW5jdGlvbiBmb3J3YXJkKCkge1xuICAgIHRoaXMuaW5kZXgrKztcblxuICAgIGlmICh0aGlzLnByZXZpb3VzKCkgPT09ICdcXG4nKSB7XG4gICAgICB0aGlzLmxpbmVubysrO1xuICAgICAgdGhpcy5jb2xubyA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29sbm8rKztcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmJhY2tOID0gZnVuY3Rpb24gYmFja04obikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICB0aGlzLmJhY2soKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmJhY2sgPSBmdW5jdGlvbiBiYWNrKCkge1xuICAgIHRoaXMuaW5kZXgtLTtcblxuICAgIGlmICh0aGlzLmN1cnJlbnQoKSA9PT0gJ1xcbicpIHtcbiAgICAgIHRoaXMubGluZW5vLS07XG4gICAgICB2YXIgaWR4ID0gdGhpcy5zcmMubGFzdEluZGV4T2YoJ1xcbicsIHRoaXMuaW5kZXggLSAxKTtcblxuICAgICAgaWYgKGlkeCA9PT0gLTEpIHtcbiAgICAgICAgdGhpcy5jb2xubyA9IHRoaXMuaW5kZXg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvbG5vID0gdGhpcy5pbmRleCAtIGlkeDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb2xuby0tO1xuICAgIH1cbiAgfSAvLyBjdXJyZW50IHJldHVybnMgY3VycmVudCBjaGFyYWN0ZXJcbiAgO1xuXG4gIF9wcm90by5jdXJyZW50ID0gZnVuY3Rpb24gY3VycmVudCgpIHtcbiAgICBpZiAoIXRoaXMuaXNGaW5pc2hlZCgpKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdHIuY2hhckF0KHRoaXMuaW5kZXgpO1xuICAgIH1cblxuICAgIHJldHVybiAnJztcbiAgfSAvLyBjdXJyZW50U3RyIHJldHVybnMgd2hhdCdzIGxlZnQgb2YgdGhlIHVucGFyc2VkIHN0cmluZ1xuICA7XG5cbiAgX3Byb3RvLmN1cnJlbnRTdHIgPSBmdW5jdGlvbiBjdXJyZW50U3RyKCkge1xuICAgIGlmICghdGhpcy5pc0ZpbmlzaGVkKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0ci5zdWJzdHIodGhpcy5pbmRleCk7XG4gICAgfVxuXG4gICAgcmV0dXJuICcnO1xuICB9O1xuXG4gIF9wcm90by5wcmV2aW91cyA9IGZ1bmN0aW9uIHByZXZpb3VzKCkge1xuICAgIHJldHVybiB0aGlzLnN0ci5jaGFyQXQodGhpcy5pbmRleCAtIDEpO1xuICB9O1xuXG4gIHJldHVybiBUb2tlbml6ZXI7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBsZXg6IGZ1bmN0aW9uIGxleChzcmMsIG9wdHMpIHtcbiAgICByZXR1cm4gbmV3IFRva2VuaXplcihzcmMsIG9wdHMpO1xuICB9LFxuICBUT0tFTl9TVFJJTkc6IFRPS0VOX1NUUklORyxcbiAgVE9LRU5fV0hJVEVTUEFDRTogVE9LRU5fV0hJVEVTUEFDRSxcbiAgVE9LRU5fREFUQTogVE9LRU5fREFUQSxcbiAgVE9LRU5fQkxPQ0tfU1RBUlQ6IFRPS0VOX0JMT0NLX1NUQVJULFxuICBUT0tFTl9CTE9DS19FTkQ6IFRPS0VOX0JMT0NLX0VORCxcbiAgVE9LRU5fVkFSSUFCTEVfU1RBUlQ6IFRPS0VOX1ZBUklBQkxFX1NUQVJULFxuICBUT0tFTl9WQVJJQUJMRV9FTkQ6IFRPS0VOX1ZBUklBQkxFX0VORCxcbiAgVE9LRU5fQ09NTUVOVDogVE9LRU5fQ09NTUVOVCxcbiAgVE9LRU5fTEVGVF9QQVJFTjogVE9LRU5fTEVGVF9QQVJFTixcbiAgVE9LRU5fUklHSFRfUEFSRU46IFRPS0VOX1JJR0hUX1BBUkVOLFxuICBUT0tFTl9MRUZUX0JSQUNLRVQ6IFRPS0VOX0xFRlRfQlJBQ0tFVCxcbiAgVE9LRU5fUklHSFRfQlJBQ0tFVDogVE9LRU5fUklHSFRfQlJBQ0tFVCxcbiAgVE9LRU5fTEVGVF9DVVJMWTogVE9LRU5fTEVGVF9DVVJMWSxcbiAgVE9LRU5fUklHSFRfQ1VSTFk6IFRPS0VOX1JJR0hUX0NVUkxZLFxuICBUT0tFTl9PUEVSQVRPUjogVE9LRU5fT1BFUkFUT1IsXG4gIFRPS0VOX0NPTU1BOiBUT0tFTl9DT01NQSxcbiAgVE9LRU5fQ09MT046IFRPS0VOX0NPTE9OLFxuICBUT0tFTl9USUxERTogVE9LRU5fVElMREUsXG4gIFRPS0VOX1BJUEU6IFRPS0VOX1BJUEUsXG4gIFRPS0VOX0lOVDogVE9LRU5fSU5ULFxuICBUT0tFTl9GTE9BVDogVE9LRU5fRkxPQVQsXG4gIFRPS0VOX0JPT0xFQU46IFRPS0VOX0JPT0xFQU4sXG4gIFRPS0VOX05PTkU6IFRPS0VOX05PTkUsXG4gIFRPS0VOX1NZTUJPTDogVE9LRU5fU1lNQk9MLFxuICBUT0tFTl9TUEVDSUFMOiBUT0tFTl9TUEVDSUFMLFxuICBUT0tFTl9SRUdFWDogVE9LRU5fUkVHRVhcbn07XG5cbi8qKiovIH0pLFxuLyogMTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBMb2FkZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXG52YXIgX3JlcXVpcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KSxcbiAgICBQcmVjb21waWxlZExvYWRlciA9IF9yZXF1aXJlLlByZWNvbXBpbGVkTG9hZGVyO1xuXG52YXIgV2ViTG9hZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTG9hZGVyKSB7XG4gIF9pbmhlcml0c0xvb3NlKFdlYkxvYWRlciwgX0xvYWRlcik7XG5cbiAgZnVuY3Rpb24gV2ViTG9hZGVyKGJhc2VVUkwsIG9wdHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9Mb2FkZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIF90aGlzLmJhc2VVUkwgPSBiYXNlVVJMIHx8ICcuJztcbiAgICBvcHRzID0gb3B0cyB8fCB7fTsgLy8gQnkgZGVmYXVsdCwgdGhlIGNhY2hlIGlzIHR1cm5lZCBvZmYgYmVjYXVzZSB0aGVyZSdzIG5vIHdheVxuICAgIC8vIHRvIFwid2F0Y2hcIiB0ZW1wbGF0ZXMgb3ZlciBIVFRQLCBzbyB0aGV5IGFyZSByZS1kb3dubG9hZGVkXG4gICAgLy8gYW5kIGNvbXBpbGVkIGVhY2ggdGltZS4gKFJlbWVtYmVyLCBQUkVDT01QSUxFIFlPVVJcbiAgICAvLyBURU1QTEFURVMgaW4gcHJvZHVjdGlvbiEpXG5cbiAgICBfdGhpcy51c2VDYWNoZSA9ICEhb3B0cy51c2VDYWNoZTsgLy8gV2UgZGVmYXVsdCBgYXN5bmNgIHRvIGZhbHNlIHNvIHRoYXQgdGhlIHNpbXBsZSBzeW5jaHJvbm91c1xuICAgIC8vIEFQSSBjYW4gYmUgdXNlZCB3aGVuIHlvdSBhcmVuJ3QgZG9pbmcgYW55dGhpbmcgYXN5bmMgaW5cbiAgICAvLyB5b3VyIHRlbXBsYXRlcyAod2hpY2ggaXMgbW9zdCBvZiB0aGUgdGltZSkuIFRoaXMgcGVyZm9ybXMgYVxuICAgIC8vIHN5bmMgYWpheCByZXF1ZXN0LCBidXQgdGhhdCdzIG9rIGJlY2F1c2UgaXQgc2hvdWxkICpvbmx5KlxuICAgIC8vIGhhcHBlbiBpbiBkZXZlbG9wbWVudC4gUFJFQ09NUElMRSBZT1VSIFRFTVBMQVRFUy5cblxuICAgIF90aGlzLmFzeW5jID0gISFvcHRzLmFzeW5jO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBXZWJMb2FkZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZShmcm9tLCB0bykge1xuICAgIHRocm93IG5ldyBFcnJvcigncmVsYXRpdmUgdGVtcGxhdGVzIG5vdCBzdXBwb3J0IGluIHRoZSBicm93c2VyIHlldCcpO1xuICB9O1xuXG4gIF9wcm90by5nZXRTb3VyY2UgPSBmdW5jdGlvbiBnZXRTb3VyY2UobmFtZSwgY2IpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciB1c2VDYWNoZSA9IHRoaXMudXNlQ2FjaGU7XG4gICAgdmFyIHJlc3VsdDtcbiAgICB0aGlzLmZldGNoKHRoaXMuYmFzZVVSTCArICcvJyArIG5hbWUsIGZ1bmN0aW9uIChlcnIsIHNyYykge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICBjYihlcnIuY29udGVudCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXJyLnN0YXR1cyA9PT0gNDA0KSB7XG4gICAgICAgICAgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBlcnIuY29udGVudDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgIHNyYzogc3JjLFxuICAgICAgICAgIHBhdGg6IG5hbWUsXG4gICAgICAgICAgbm9DYWNoZTogIXVzZUNhY2hlXG4gICAgICAgIH07XG5cbiAgICAgICAgX3RoaXMyLmVtaXQoJ2xvYWQnLCBuYW1lLCByZXN1bHQpO1xuXG4gICAgICAgIGlmIChjYikge1xuICAgICAgICAgIGNiKG51bGwsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTsgLy8gaWYgdGhpcyBXZWJMb2FkZXIgaXNuJ3QgcnVubmluZyBhc3luY2hyb25vdXNseSwgdGhlXG4gICAgLy8gZmV0Y2ggYWJvdmUgd291bGQgYWN0dWFsbHkgcnVuIHN5bmMgYW5kIHdlJ2xsIGhhdmUgYVxuICAgIC8vIHJlc3VsdCBoZXJlXG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIF9wcm90by5mZXRjaCA9IGZ1bmN0aW9uIGZldGNoKHVybCwgY2IpIHtcbiAgICAvLyBPbmx5IGluIHRoZSBicm93c2VyIHBsZWFzZVxuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdXZWJMb2FkZXIgY2FuIG9ubHkgYnkgdXNlZCBpbiBhIGJyb3dzZXInKTtcbiAgICB9XG5cbiAgICB2YXIgYWpheCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHZhciBsb2FkaW5nID0gdHJ1ZTtcblxuICAgIGFqYXgub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGFqYXgucmVhZHlTdGF0ZSA9PT0gNCAmJiBsb2FkaW5nKSB7XG4gICAgICAgIGxvYWRpbmcgPSBmYWxzZTtcblxuICAgICAgICBpZiAoYWpheC5zdGF0dXMgPT09IDAgfHwgYWpheC5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgIGNiKG51bGwsIGFqYXgucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYih7XG4gICAgICAgICAgICBzdGF0dXM6IGFqYXguc3RhdHVzLFxuICAgICAgICAgICAgY29udGVudDogYWpheC5yZXNwb25zZVRleHRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArICdzPScgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBhamF4Lm9wZW4oJ0dFVCcsIHVybCwgdGhpcy5hc3luYyk7XG4gICAgYWpheC5zZW5kKCk7XG4gIH07XG5cbiAgcmV0dXJuIFdlYkxvYWRlcjtcbn0oTG9hZGVyKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFdlYkxvYWRlcjogV2ViTG9hZGVyLFxuICBQcmVjb21waWxlZExvYWRlcjogUHJlY29tcGlsZWRMb2FkZXJcbn07XG5cbi8qKiovIH0pLFxuLyogMTEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGxpYiA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVxdWlyZSA9IF9fd2VicGFja19yZXF1aXJlX18oNyksXG4gICAgRW52aXJvbm1lbnQgPSBfcmVxdWlyZS5FbnZpcm9ubWVudCxcbiAgICBUZW1wbGF0ZSA9IF9yZXF1aXJlLlRlbXBsYXRlO1xuXG52YXIgTG9hZGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxudmFyIGxvYWRlcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblxudmFyIHByZWNvbXBpbGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKTtcblxudmFyIGNvbXBpbGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxudmFyIHBhcnNlciA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cbnZhciBsZXhlciA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cbnZhciBydW50aW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxudmFyIG5vZGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIGluc3RhbGxKaW5qYUNvbXBhdCA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpOyAvLyBBIHNpbmdsZSBpbnN0YW5jZSBvZiBhbiBlbnZpcm9ubWVudCwgc2luY2UgdGhpcyBpcyBzbyBjb21tb25seSB1c2VkXG5cblxudmFyIGU7XG5cbmZ1bmN0aW9uIGNvbmZpZ3VyZSh0ZW1wbGF0ZXNQYXRoLCBvcHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gIGlmIChsaWIuaXNPYmplY3QodGVtcGxhdGVzUGF0aCkpIHtcbiAgICBvcHRzID0gdGVtcGxhdGVzUGF0aDtcbiAgICB0ZW1wbGF0ZXNQYXRoID0gbnVsbDtcbiAgfVxuXG4gIHZhciBUZW1wbGF0ZUxvYWRlcjtcblxuICBpZiAobG9hZGVycy5GaWxlU3lzdGVtTG9hZGVyKSB7XG4gICAgVGVtcGxhdGVMb2FkZXIgPSBuZXcgbG9hZGVycy5GaWxlU3lzdGVtTG9hZGVyKHRlbXBsYXRlc1BhdGgsIHtcbiAgICAgIHdhdGNoOiBvcHRzLndhdGNoLFxuICAgICAgbm9DYWNoZTogb3B0cy5ub0NhY2hlXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAobG9hZGVycy5XZWJMb2FkZXIpIHtcbiAgICBUZW1wbGF0ZUxvYWRlciA9IG5ldyBsb2FkZXJzLldlYkxvYWRlcih0ZW1wbGF0ZXNQYXRoLCB7XG4gICAgICB1c2VDYWNoZTogb3B0cy53ZWIgJiYgb3B0cy53ZWIudXNlQ2FjaGUsXG4gICAgICBhc3luYzogb3B0cy53ZWIgJiYgb3B0cy53ZWIuYXN5bmNcbiAgICB9KTtcbiAgfVxuXG4gIGUgPSBuZXcgRW52aXJvbm1lbnQoVGVtcGxhdGVMb2FkZXIsIG9wdHMpO1xuXG4gIGlmIChvcHRzICYmIG9wdHMuZXhwcmVzcykge1xuICAgIGUuZXhwcmVzcyhvcHRzLmV4cHJlc3MpO1xuICB9XG5cbiAgcmV0dXJuIGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBFbnZpcm9ubWVudDogRW52aXJvbm1lbnQsXG4gIFRlbXBsYXRlOiBUZW1wbGF0ZSxcbiAgTG9hZGVyOiBMb2FkZXIsXG4gIEZpbGVTeXN0ZW1Mb2FkZXI6IGxvYWRlcnMuRmlsZVN5c3RlbUxvYWRlcixcbiAgTm9kZVJlc29sdmVMb2FkZXI6IGxvYWRlcnMuTm9kZVJlc29sdmVMb2FkZXIsXG4gIFByZWNvbXBpbGVkTG9hZGVyOiBsb2FkZXJzLlByZWNvbXBpbGVkTG9hZGVyLFxuICBXZWJMb2FkZXI6IGxvYWRlcnMuV2ViTG9hZGVyLFxuICBjb21waWxlcjogY29tcGlsZXIsXG4gIHBhcnNlcjogcGFyc2VyLFxuICBsZXhlcjogbGV4ZXIsXG4gIHJ1bnRpbWU6IHJ1bnRpbWUsXG4gIGxpYjogbGliLFxuICBub2Rlczogbm9kZXMsXG4gIGluc3RhbGxKaW5qYUNvbXBhdDogaW5zdGFsbEppbmphQ29tcGF0LFxuICBjb25maWd1cmU6IGNvbmZpZ3VyZSxcbiAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIGUgPSB1bmRlZmluZWQ7XG4gIH0sXG4gIGNvbXBpbGU6IGZ1bmN0aW9uIGNvbXBpbGUoc3JjLCBlbnYsIHBhdGgsIGVhZ2VyQ29tcGlsZSkge1xuICAgIGlmICghZSkge1xuICAgICAgY29uZmlndXJlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUZW1wbGF0ZShzcmMsIGVudiwgcGF0aCwgZWFnZXJDb21waWxlKTtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIobmFtZSwgY3R4LCBjYikge1xuICAgIGlmICghZSkge1xuICAgICAgY29uZmlndXJlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGUucmVuZGVyKG5hbWUsIGN0eCwgY2IpO1xuICB9LFxuICByZW5kZXJTdHJpbmc6IGZ1bmN0aW9uIHJlbmRlclN0cmluZyhzcmMsIGN0eCwgY2IpIHtcbiAgICBpZiAoIWUpIHtcbiAgICAgIGNvbmZpZ3VyZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBlLnJlbmRlclN0cmluZyhzcmMsIGN0eCwgY2IpO1xuICB9LFxuICBwcmVjb21waWxlOiBwcmVjb21waWxlID8gcHJlY29tcGlsZS5wcmVjb21waWxlIDogdW5kZWZpbmVkLFxuICBwcmVjb21waWxlU3RyaW5nOiBwcmVjb21waWxlID8gcHJlY29tcGlsZS5wcmVjb21waWxlU3RyaW5nIDogdW5kZWZpbmVkXG59O1xuXG4vKioqLyB9KSxcbi8qIDEyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8vIHJhd0FzYXAgcHJvdmlkZXMgZXZlcnl0aGluZyB3ZSBuZWVkIGV4Y2VwdCBleGNlcHRpb24gbWFuYWdlbWVudC5cbnZhciByYXdBc2FwID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG4vLyBSYXdUYXNrcyBhcmUgcmVjeWNsZWQgdG8gcmVkdWNlIEdDIGNodXJuLlxudmFyIGZyZWVUYXNrcyA9IFtdO1xuLy8gV2UgcXVldWUgZXJyb3JzIHRvIGVuc3VyZSB0aGV5IGFyZSB0aHJvd24gaW4gcmlnaHQgb3JkZXIgKEZJRk8pLlxuLy8gQXJyYXktYXMtcXVldWUgaXMgZ29vZCBlbm91Z2ggaGVyZSwgc2luY2Ugd2UgYXJlIGp1c3QgZGVhbGluZyB3aXRoIGV4Y2VwdGlvbnMuXG52YXIgcGVuZGluZ0Vycm9ycyA9IFtdO1xudmFyIHJlcXVlc3RFcnJvclRocm93ID0gcmF3QXNhcC5tYWtlUmVxdWVzdENhbGxGcm9tVGltZXIodGhyb3dGaXJzdEVycm9yKTtcblxuZnVuY3Rpb24gdGhyb3dGaXJzdEVycm9yKCkge1xuICAgIGlmIChwZW5kaW5nRXJyb3JzLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBwZW5kaW5nRXJyb3JzLnNoaWZ0KCk7XG4gICAgfVxufVxuXG4vKipcbiAqIENhbGxzIGEgdGFzayBhcyBzb29uIGFzIHBvc3NpYmxlIGFmdGVyIHJldHVybmluZywgaW4gaXRzIG93biBldmVudCwgd2l0aCBwcmlvcml0eVxuICogb3ZlciBvdGhlciBldmVudHMgbGlrZSBhbmltYXRpb24sIHJlZmxvdywgYW5kIHJlcGFpbnQuIEFuIGVycm9yIHRocm93biBmcm9tIGFuXG4gKiBldmVudCB3aWxsIG5vdCBpbnRlcnJ1cHQsIG5vciBldmVuIHN1YnN0YW50aWFsbHkgc2xvdyBkb3duIHRoZSBwcm9jZXNzaW5nIG9mXG4gKiBvdGhlciBldmVudHMsIGJ1dCB3aWxsIGJlIHJhdGhlciBwb3N0cG9uZWQgdG8gYSBsb3dlciBwcmlvcml0eSBldmVudC5cbiAqIEBwYXJhbSB7e2NhbGx9fSB0YXNrIEEgY2FsbGFibGUgb2JqZWN0LCB0eXBpY2FsbHkgYSBmdW5jdGlvbiB0aGF0IHRha2VzIG5vXG4gKiBhcmd1bWVudHMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gYXNhcDtcbmZ1bmN0aW9uIGFzYXAodGFzaykge1xuICAgIHZhciByYXdUYXNrO1xuICAgIGlmIChmcmVlVGFza3MubGVuZ3RoKSB7XG4gICAgICAgIHJhd1Rhc2sgPSBmcmVlVGFza3MucG9wKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmF3VGFzayA9IG5ldyBSYXdUYXNrKCk7XG4gICAgfVxuICAgIHJhd1Rhc2sudGFzayA9IHRhc2s7XG4gICAgcmF3QXNhcChyYXdUYXNrKTtcbn1cblxuLy8gV2Ugd3JhcCB0YXNrcyB3aXRoIHJlY3ljbGFibGUgdGFzayBvYmplY3RzLiAgQSB0YXNrIG9iamVjdCBpbXBsZW1lbnRzXG4vLyBgY2FsbGAsIGp1c3QgbGlrZSBhIGZ1bmN0aW9uLlxuZnVuY3Rpb24gUmF3VGFzaygpIHtcbiAgICB0aGlzLnRhc2sgPSBudWxsO1xufVxuXG4vLyBUaGUgc29sZSBwdXJwb3NlIG9mIHdyYXBwaW5nIHRoZSB0YXNrIGlzIHRvIGNhdGNoIHRoZSBleGNlcHRpb24gYW5kIHJlY3ljbGVcbi8vIHRoZSB0YXNrIG9iamVjdCBhZnRlciBpdHMgc2luZ2xlIHVzZS5cblJhd1Rhc2sucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgdGhpcy50YXNrLmNhbGwoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoYXNhcC5vbmVycm9yKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGhvb2sgZXhpc3RzIHB1cmVseSBmb3IgdGVzdGluZyBwdXJwb3Nlcy5cbiAgICAgICAgICAgIC8vIEl0cyBuYW1lIHdpbGwgYmUgcGVyaW9kaWNhbGx5IHJhbmRvbWl6ZWQgdG8gYnJlYWsgYW55IGNvZGUgdGhhdFxuICAgICAgICAgICAgLy8gZGVwZW5kcyBvbiBpdHMgZXhpc3RlbmNlLlxuICAgICAgICAgICAgYXNhcC5vbmVycm9yKGVycm9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEluIGEgd2ViIGJyb3dzZXIsIGV4Y2VwdGlvbnMgYXJlIG5vdCBmYXRhbC4gSG93ZXZlciwgdG8gYXZvaWRcbiAgICAgICAgICAgIC8vIHNsb3dpbmcgZG93biB0aGUgcXVldWUgb2YgcGVuZGluZyB0YXNrcywgd2UgcmV0aHJvdyB0aGUgZXJyb3IgaW4gYVxuICAgICAgICAgICAgLy8gbG93ZXIgcHJpb3JpdHkgdHVybi5cbiAgICAgICAgICAgIHBlbmRpbmdFcnJvcnMucHVzaChlcnJvcik7XG4gICAgICAgICAgICByZXF1ZXN0RXJyb3JUaHJvdygpO1xuICAgICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhpcy50YXNrID0gbnVsbDtcbiAgICAgICAgZnJlZVRhc2tzW2ZyZWVUYXNrcy5sZW5ndGhdID0gdGhpcztcbiAgICB9XG59O1xuXG5cbi8qKiovIH0pLFxuLyogMTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbi8vIFVzZSB0aGUgZmFzdGVzdCBtZWFucyBwb3NzaWJsZSB0byBleGVjdXRlIGEgdGFzayBpbiBpdHMgb3duIHR1cm4sIHdpdGhcbi8vIHByaW9yaXR5IG92ZXIgb3RoZXIgZXZlbnRzIGluY2x1ZGluZyBJTywgYW5pbWF0aW9uLCByZWZsb3csIGFuZCByZWRyYXdcbi8vIGV2ZW50cyBpbiBicm93c2Vycy5cbi8vXG4vLyBBbiBleGNlcHRpb24gdGhyb3duIGJ5IGEgdGFzayB3aWxsIHBlcm1hbmVudGx5IGludGVycnVwdCB0aGUgcHJvY2Vzc2luZyBvZlxuLy8gc3Vic2VxdWVudCB0YXNrcy4gVGhlIGhpZ2hlciBsZXZlbCBgYXNhcGAgZnVuY3Rpb24gZW5zdXJlcyB0aGF0IGlmIGFuXG4vLyBleGNlcHRpb24gaXMgdGhyb3duIGJ5IGEgdGFzaywgdGhhdCB0aGUgdGFzayBxdWV1ZSB3aWxsIGNvbnRpbnVlIGZsdXNoaW5nIGFzXG4vLyBzb29uIGFzIHBvc3NpYmxlLCBidXQgaWYgeW91IHVzZSBgcmF3QXNhcGAgZGlyZWN0bHksIHlvdSBhcmUgcmVzcG9uc2libGUgdG9cbi8vIGVpdGhlciBlbnN1cmUgdGhhdCBubyBleGNlcHRpb25zIGFyZSB0aHJvd24gZnJvbSB5b3VyIHRhc2ssIG9yIHRvIG1hbnVhbGx5XG4vLyBjYWxsIGByYXdBc2FwLnJlcXVlc3RGbHVzaGAgaWYgYW4gZXhjZXB0aW9uIGlzIHRocm93bi5cbm1vZHVsZS5leHBvcnRzID0gcmF3QXNhcDtcbmZ1bmN0aW9uIHJhd0FzYXAodGFzaykge1xuICAgIGlmICghcXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHJlcXVlc3RGbHVzaCgpO1xuICAgICAgICBmbHVzaGluZyA9IHRydWU7XG4gICAgfVxuICAgIC8vIEVxdWl2YWxlbnQgdG8gcHVzaCwgYnV0IGF2b2lkcyBhIGZ1bmN0aW9uIGNhbGwuXG4gICAgcXVldWVbcXVldWUubGVuZ3RoXSA9IHRhc2s7XG59XG5cbnZhciBxdWV1ZSA9IFtdO1xuLy8gT25jZSBhIGZsdXNoIGhhcyBiZWVuIHJlcXVlc3RlZCwgbm8gZnVydGhlciBjYWxscyB0byBgcmVxdWVzdEZsdXNoYCBhcmVcbi8vIG5lY2Vzc2FyeSB1bnRpbCB0aGUgbmV4dCBgZmx1c2hgIGNvbXBsZXRlcy5cbnZhciBmbHVzaGluZyA9IGZhbHNlO1xuLy8gYHJlcXVlc3RGbHVzaGAgaXMgYW4gaW1wbGVtZW50YXRpb24tc3BlY2lmaWMgbWV0aG9kIHRoYXQgYXR0ZW1wdHMgdG8ga2lja1xuLy8gb2ZmIGEgYGZsdXNoYCBldmVudCBhcyBxdWlja2x5IGFzIHBvc3NpYmxlLiBgZmx1c2hgIHdpbGwgYXR0ZW1wdCB0byBleGhhdXN0XG4vLyB0aGUgZXZlbnQgcXVldWUgYmVmb3JlIHlpZWxkaW5nIHRvIHRoZSBicm93c2VyJ3Mgb3duIGV2ZW50IGxvb3AuXG52YXIgcmVxdWVzdEZsdXNoO1xuLy8gVGhlIHBvc2l0aW9uIG9mIHRoZSBuZXh0IHRhc2sgdG8gZXhlY3V0ZSBpbiB0aGUgdGFzayBxdWV1ZS4gVGhpcyBpc1xuLy8gcHJlc2VydmVkIGJldHdlZW4gY2FsbHMgdG8gYGZsdXNoYCBzbyB0aGF0IGl0IGNhbiBiZSByZXN1bWVkIGlmXG4vLyBhIHRhc2sgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbnZhciBpbmRleCA9IDA7XG4vLyBJZiBhIHRhc2sgc2NoZWR1bGVzIGFkZGl0aW9uYWwgdGFza3MgcmVjdXJzaXZlbHksIHRoZSB0YXNrIHF1ZXVlIGNhbiBncm93XG4vLyB1bmJvdW5kZWQuIFRvIHByZXZlbnQgbWVtb3J5IGV4aGF1c3Rpb24sIHRoZSB0YXNrIHF1ZXVlIHdpbGwgcGVyaW9kaWNhbGx5XG4vLyB0cnVuY2F0ZSBhbHJlYWR5LWNvbXBsZXRlZCB0YXNrcy5cbnZhciBjYXBhY2l0eSA9IDEwMjQ7XG5cbi8vIFRoZSBmbHVzaCBmdW5jdGlvbiBwcm9jZXNzZXMgYWxsIHRhc2tzIHRoYXQgaGF2ZSBiZWVuIHNjaGVkdWxlZCB3aXRoXG4vLyBgcmF3QXNhcGAgdW5sZXNzIGFuZCB1bnRpbCBvbmUgb2YgdGhvc2UgdGFza3MgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbi8vIElmIGEgdGFzayB0aHJvd3MgYW4gZXhjZXB0aW9uLCBgZmx1c2hgIGVuc3VyZXMgdGhhdCBpdHMgc3RhdGUgd2lsbCByZW1haW5cbi8vIGNvbnNpc3RlbnQgYW5kIHdpbGwgcmVzdW1lIHdoZXJlIGl0IGxlZnQgb2ZmIHdoZW4gY2FsbGVkIGFnYWluLlxuLy8gSG93ZXZlciwgYGZsdXNoYCBkb2VzIG5vdCBtYWtlIGFueSBhcnJhbmdlbWVudHMgdG8gYmUgY2FsbGVkIGFnYWluIGlmIGFuXG4vLyBleGNlcHRpb24gaXMgdGhyb3duLlxuZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgd2hpbGUgKGluZGV4IDwgcXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHZhciBjdXJyZW50SW5kZXggPSBpbmRleDtcbiAgICAgICAgLy8gQWR2YW5jZSB0aGUgaW5kZXggYmVmb3JlIGNhbGxpbmcgdGhlIHRhc2suIFRoaXMgZW5zdXJlcyB0aGF0IHdlIHdpbGxcbiAgICAgICAgLy8gYmVnaW4gZmx1c2hpbmcgb24gdGhlIG5leHQgdGFzayB0aGUgdGFzayB0aHJvd3MgYW4gZXJyb3IuXG4gICAgICAgIGluZGV4ID0gaW5kZXggKyAxO1xuICAgICAgICBxdWV1ZVtjdXJyZW50SW5kZXhdLmNhbGwoKTtcbiAgICAgICAgLy8gUHJldmVudCBsZWFraW5nIG1lbW9yeSBmb3IgbG9uZyBjaGFpbnMgb2YgcmVjdXJzaXZlIGNhbGxzIHRvIGBhc2FwYC5cbiAgICAgICAgLy8gSWYgd2UgY2FsbCBgYXNhcGAgd2l0aGluIHRhc2tzIHNjaGVkdWxlZCBieSBgYXNhcGAsIHRoZSBxdWV1ZSB3aWxsXG4gICAgICAgIC8vIGdyb3csIGJ1dCB0byBhdm9pZCBhbiBPKG4pIHdhbGsgZm9yIGV2ZXJ5IHRhc2sgd2UgZXhlY3V0ZSwgd2UgZG9uJ3RcbiAgICAgICAgLy8gc2hpZnQgdGFza3Mgb2ZmIHRoZSBxdWV1ZSBhZnRlciB0aGV5IGhhdmUgYmVlbiBleGVjdXRlZC5cbiAgICAgICAgLy8gSW5zdGVhZCwgd2UgcGVyaW9kaWNhbGx5IHNoaWZ0IDEwMjQgdGFza3Mgb2ZmIHRoZSBxdWV1ZS5cbiAgICAgICAgaWYgKGluZGV4ID4gY2FwYWNpdHkpIHtcbiAgICAgICAgICAgIC8vIE1hbnVhbGx5IHNoaWZ0IGFsbCB2YWx1ZXMgc3RhcnRpbmcgYXQgdGhlIGluZGV4IGJhY2sgdG8gdGhlXG4gICAgICAgICAgICAvLyBiZWdpbm5pbmcgb2YgdGhlIHF1ZXVlLlxuICAgICAgICAgICAgZm9yICh2YXIgc2NhbiA9IDAsIG5ld0xlbmd0aCA9IHF1ZXVlLmxlbmd0aCAtIGluZGV4OyBzY2FuIDwgbmV3TGVuZ3RoOyBzY2FuKyspIHtcbiAgICAgICAgICAgICAgICBxdWV1ZVtzY2FuXSA9IHF1ZXVlW3NjYW4gKyBpbmRleF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBxdWV1ZS5sZW5ndGggLT0gaW5kZXg7XG4gICAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUubGVuZ3RoID0gMDtcbiAgICBpbmRleCA9IDA7XG4gICAgZmx1c2hpbmcgPSBmYWxzZTtcbn1cblxuLy8gYHJlcXVlc3RGbHVzaGAgaXMgaW1wbGVtZW50ZWQgdXNpbmcgYSBzdHJhdGVneSBiYXNlZCBvbiBkYXRhIGNvbGxlY3RlZCBmcm9tXG4vLyBldmVyeSBhdmFpbGFibGUgU2F1Y2VMYWJzIFNlbGVuaXVtIHdlYiBkcml2ZXIgd29ya2VyIGF0IHRpbWUgb2Ygd3JpdGluZy5cbi8vIGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL3NwcmVhZHNoZWV0cy9kLzFtRy01VVlHdXA1cXhHZEVNV2toUDZCV0N6MDUzTlViMkUxUW9VVFUxNnVBL2VkaXQjZ2lkPTc4MzcyNDU5M1xuXG4vLyBTYWZhcmkgNiBhbmQgNi4xIGZvciBkZXNrdG9wLCBpUGFkLCBhbmQgaVBob25lIGFyZSB0aGUgb25seSBicm93c2VycyB0aGF0XG4vLyBoYXZlIFdlYktpdE11dGF0aW9uT2JzZXJ2ZXIgYnV0IG5vdCB1bi1wcmVmaXhlZCBNdXRhdGlvbk9ic2VydmVyLlxuLy8gTXVzdCB1c2UgYGdsb2JhbGAgb3IgYHNlbGZgIGluc3RlYWQgb2YgYHdpbmRvd2AgdG8gd29yayBpbiBib3RoIGZyYW1lcyBhbmQgd2ViXG4vLyB3b3JrZXJzLiBgZ2xvYmFsYCBpcyBhIHByb3Zpc2lvbiBvZiBCcm93c2VyaWZ5LCBNciwgTXJzLCBvciBNb3AuXG5cbi8qIGdsb2JhbHMgc2VsZiAqL1xudmFyIHNjb3BlID0gdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHNlbGY7XG52YXIgQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIgPSBzY29wZS5NdXRhdGlvbk9ic2VydmVyIHx8IHNjb3BlLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG5cbi8vIE11dGF0aW9uT2JzZXJ2ZXJzIGFyZSBkZXNpcmFibGUgYmVjYXVzZSB0aGV5IGhhdmUgaGlnaCBwcmlvcml0eSBhbmQgd29ya1xuLy8gcmVsaWFibHkgZXZlcnl3aGVyZSB0aGV5IGFyZSBpbXBsZW1lbnRlZC5cbi8vIFRoZXkgYXJlIGltcGxlbWVudGVkIGluIGFsbCBtb2Rlcm4gYnJvd3NlcnMuXG4vL1xuLy8gLSBBbmRyb2lkIDQtNC4zXG4vLyAtIENocm9tZSAyNi0zNFxuLy8gLSBGaXJlZm94IDE0LTI5XG4vLyAtIEludGVybmV0IEV4cGxvcmVyIDExXG4vLyAtIGlQYWQgU2FmYXJpIDYtNy4xXG4vLyAtIGlQaG9uZSBTYWZhcmkgNy03LjFcbi8vIC0gU2FmYXJpIDYtN1xuaWYgKHR5cGVvZiBCcm93c2VyTXV0YXRpb25PYnNlcnZlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmVxdWVzdEZsdXNoID0gbWFrZVJlcXVlc3RDYWxsRnJvbU11dGF0aW9uT2JzZXJ2ZXIoZmx1c2gpO1xuXG4vLyBNZXNzYWdlQ2hhbm5lbHMgYXJlIGRlc2lyYWJsZSBiZWNhdXNlIHRoZXkgZ2l2ZSBkaXJlY3QgYWNjZXNzIHRvIHRoZSBIVE1MXG4vLyB0YXNrIHF1ZXVlLCBhcmUgaW1wbGVtZW50ZWQgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTAsIFNhZmFyaSA1LjAtMSwgYW5kIE9wZXJhXG4vLyAxMS0xMiwgYW5kIGluIHdlYiB3b3JrZXJzIGluIG1hbnkgZW5naW5lcy5cbi8vIEFsdGhvdWdoIG1lc3NhZ2UgY2hhbm5lbHMgeWllbGQgdG8gYW55IHF1ZXVlZCByZW5kZXJpbmcgYW5kIElPIHRhc2tzLCB0aGV5XG4vLyB3b3VsZCBiZSBiZXR0ZXIgdGhhbiBpbXBvc2luZyB0aGUgNG1zIGRlbGF5IG9mIHRpbWVycy5cbi8vIEhvd2V2ZXIsIHRoZXkgZG8gbm90IHdvcmsgcmVsaWFibHkgaW4gSW50ZXJuZXQgRXhwbG9yZXIgb3IgU2FmYXJpLlxuXG4vLyBJbnRlcm5ldCBFeHBsb3JlciAxMCBpcyB0aGUgb25seSBicm93c2VyIHRoYXQgaGFzIHNldEltbWVkaWF0ZSBidXQgZG9lc1xuLy8gbm90IGhhdmUgTXV0YXRpb25PYnNlcnZlcnMuXG4vLyBBbHRob3VnaCBzZXRJbW1lZGlhdGUgeWllbGRzIHRvIHRoZSBicm93c2VyJ3MgcmVuZGVyZXIsIGl0IHdvdWxkIGJlXG4vLyBwcmVmZXJyYWJsZSB0byBmYWxsaW5nIGJhY2sgdG8gc2V0VGltZW91dCBzaW5jZSBpdCBkb2VzIG5vdCBoYXZlXG4vLyB0aGUgbWluaW11bSA0bXMgcGVuYWx0eS5cbi8vIFVuZm9ydHVuYXRlbHkgdGhlcmUgYXBwZWFycyB0byBiZSBhIGJ1ZyBpbiBJbnRlcm5ldCBFeHBsb3JlciAxMCBNb2JpbGUgKGFuZFxuLy8gRGVza3RvcCB0byBhIGxlc3NlciBleHRlbnQpIHRoYXQgcmVuZGVycyBib3RoIHNldEltbWVkaWF0ZSBhbmRcbi8vIE1lc3NhZ2VDaGFubmVsIHVzZWxlc3MgZm9yIHRoZSBwdXJwb3NlcyBvZiBBU0FQLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC9xL2lzc3Vlcy8zOTZcblxuLy8gVGltZXJzIGFyZSBpbXBsZW1lbnRlZCB1bml2ZXJzYWxseS5cbi8vIFdlIGZhbGwgYmFjayB0byB0aW1lcnMgaW4gd29ya2VycyBpbiBtb3N0IGVuZ2luZXMsIGFuZCBpbiBmb3JlZ3JvdW5kXG4vLyBjb250ZXh0cyBpbiB0aGUgZm9sbG93aW5nIGJyb3dzZXJzLlxuLy8gSG93ZXZlciwgbm90ZSB0aGF0IGV2ZW4gdGhpcyBzaW1wbGUgY2FzZSByZXF1aXJlcyBudWFuY2VzIHRvIG9wZXJhdGUgaW4gYVxuLy8gYnJvYWQgc3BlY3RydW0gb2YgYnJvd3NlcnMuXG4vL1xuLy8gLSBGaXJlZm94IDMtMTNcbi8vIC0gSW50ZXJuZXQgRXhwbG9yZXIgNi05XG4vLyAtIGlQYWQgU2FmYXJpIDQuM1xuLy8gLSBMeW54IDIuOC43XG59IGVsc2Uge1xuICAgIHJlcXVlc3RGbHVzaCA9IG1ha2VSZXF1ZXN0Q2FsbEZyb21UaW1lcihmbHVzaCk7XG59XG5cbi8vIGByZXF1ZXN0Rmx1c2hgIHJlcXVlc3RzIHRoYXQgdGhlIGhpZ2ggcHJpb3JpdHkgZXZlbnQgcXVldWUgYmUgZmx1c2hlZCBhc1xuLy8gc29vbiBhcyBwb3NzaWJsZS5cbi8vIFRoaXMgaXMgdXNlZnVsIHRvIHByZXZlbnQgYW4gZXJyb3IgdGhyb3duIGluIGEgdGFzayBmcm9tIHN0YWxsaW5nIHRoZSBldmVudFxuLy8gcXVldWUgaWYgdGhlIGV4Y2VwdGlvbiBoYW5kbGVkIGJ5IE5vZGUuanPigJlzXG4vLyBgcHJvY2Vzcy5vbihcInVuY2F1Z2h0RXhjZXB0aW9uXCIpYCBvciBieSBhIGRvbWFpbi5cbnJhd0FzYXAucmVxdWVzdEZsdXNoID0gcmVxdWVzdEZsdXNoO1xuXG4vLyBUbyByZXF1ZXN0IGEgaGlnaCBwcmlvcml0eSBldmVudCwgd2UgaW5kdWNlIGEgbXV0YXRpb24gb2JzZXJ2ZXIgYnkgdG9nZ2xpbmdcbi8vIHRoZSB0ZXh0IG9mIGEgdGV4dCBub2RlIGJldHdlZW4gXCIxXCIgYW5kIFwiLTFcIi5cbmZ1bmN0aW9uIG1ha2VSZXF1ZXN0Q2FsbEZyb21NdXRhdGlvbk9ic2VydmVyKGNhbGxiYWNrKSB7XG4gICAgdmFyIHRvZ2dsZSA9IDE7XG4gICAgdmFyIG9ic2VydmVyID0gbmV3IEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKGNhbGxiYWNrKTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpO1xuICAgIG9ic2VydmVyLm9ic2VydmUobm9kZSwge2NoYXJhY3RlckRhdGE6IHRydWV9KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gcmVxdWVzdENhbGwoKSB7XG4gICAgICAgIHRvZ2dsZSA9IC10b2dnbGU7XG4gICAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZTtcbiAgICB9O1xufVxuXG4vLyBUaGUgbWVzc2FnZSBjaGFubmVsIHRlY2huaXF1ZSB3YXMgZGlzY292ZXJlZCBieSBNYWx0ZSBVYmwgYW5kIHdhcyB0aGVcbi8vIG9yaWdpbmFsIGZvdW5kYXRpb24gZm9yIHRoaXMgbGlicmFyeS5cbi8vIGh0dHA6Ly93d3cubm9uYmxvY2tpbmcuaW8vMjAxMS8wNi93aW5kb3duZXh0dGljay5odG1sXG5cbi8vIFNhZmFyaSA2LjAuNSAoYXQgbGVhc3QpIGludGVybWl0dGVudGx5IGZhaWxzIHRvIGNyZWF0ZSBtZXNzYWdlIHBvcnRzIG9uIGFcbi8vIHBhZ2UncyBmaXJzdCBsb2FkLiBUaGFua2Z1bGx5LCB0aGlzIHZlcnNpb24gb2YgU2FmYXJpIHN1cHBvcnRzXG4vLyBNdXRhdGlvbk9ic2VydmVycywgc28gd2UgZG9uJ3QgbmVlZCB0byBmYWxsIGJhY2sgaW4gdGhhdCBjYXNlLlxuXG4vLyBmdW5jdGlvbiBtYWtlUmVxdWVzdENhbGxGcm9tTWVzc2FnZUNoYW5uZWwoY2FsbGJhY2spIHtcbi8vICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuLy8gICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gY2FsbGJhY2s7XG4vLyAgICAgcmV0dXJuIGZ1bmN0aW9uIHJlcXVlc3RDYWxsKCkge1xuLy8gICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKDApO1xuLy8gICAgIH07XG4vLyB9XG5cbi8vIEZvciByZWFzb25zIGV4cGxhaW5lZCBhYm92ZSwgd2UgYXJlIGFsc28gdW5hYmxlIHRvIHVzZSBgc2V0SW1tZWRpYXRlYFxuLy8gdW5kZXIgYW55IGNpcmN1bXN0YW5jZXMuXG4vLyBFdmVuIGlmIHdlIHdlcmUsIHRoZXJlIGlzIGFub3RoZXIgYnVnIGluIEludGVybmV0IEV4cGxvcmVyIDEwLlxuLy8gSXQgaXMgbm90IHN1ZmZpY2llbnQgdG8gYXNzaWduIGBzZXRJbW1lZGlhdGVgIHRvIGByZXF1ZXN0Rmx1c2hgIGJlY2F1c2Vcbi8vIGBzZXRJbW1lZGlhdGVgIG11c3QgYmUgY2FsbGVkICpieSBuYW1lKiBhbmQgdGhlcmVmb3JlIG11c3QgYmUgd3JhcHBlZCBpbiBhXG4vLyBjbG9zdXJlLlxuLy8gTmV2ZXIgZm9yZ2V0LlxuXG4vLyBmdW5jdGlvbiBtYWtlUmVxdWVzdENhbGxGcm9tU2V0SW1tZWRpYXRlKGNhbGxiYWNrKSB7XG4vLyAgICAgcmV0dXJuIGZ1bmN0aW9uIHJlcXVlc3RDYWxsKCkge1xuLy8gICAgICAgICBzZXRJbW1lZGlhdGUoY2FsbGJhY2spO1xuLy8gICAgIH07XG4vLyB9XG5cbi8vIFNhZmFyaSA2LjAgaGFzIGEgcHJvYmxlbSB3aGVyZSB0aW1lcnMgd2lsbCBnZXQgbG9zdCB3aGlsZSB0aGUgdXNlciBpc1xuLy8gc2Nyb2xsaW5nLiBUaGlzIHByb2JsZW0gZG9lcyBub3QgaW1wYWN0IEFTQVAgYmVjYXVzZSBTYWZhcmkgNi4wIHN1cHBvcnRzXG4vLyBtdXRhdGlvbiBvYnNlcnZlcnMsIHNvIHRoYXQgaW1wbGVtZW50YXRpb24gaXMgdXNlZCBpbnN0ZWFkLlxuLy8gSG93ZXZlciwgaWYgd2UgZXZlciBlbGVjdCB0byB1c2UgdGltZXJzIGluIFNhZmFyaSwgdGhlIHByZXZhbGVudCB3b3JrLWFyb3VuZFxuLy8gaXMgdG8gYWRkIGEgc2Nyb2xsIGV2ZW50IGxpc3RlbmVyIHRoYXQgY2FsbHMgZm9yIGEgZmx1c2guXG5cbi8vIGBzZXRUaW1lb3V0YCBkb2VzIG5vdCBjYWxsIHRoZSBwYXNzZWQgY2FsbGJhY2sgaWYgdGhlIGRlbGF5IGlzIGxlc3MgdGhhblxuLy8gYXBwcm94aW1hdGVseSA3IGluIHdlYiB3b3JrZXJzIGluIEZpcmVmb3ggOCB0aHJvdWdoIDE4LCBhbmQgc29tZXRpbWVzIG5vdFxuLy8gZXZlbiB0aGVuLlxuXG5mdW5jdGlvbiBtYWtlUmVxdWVzdENhbGxGcm9tVGltZXIoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gcmVxdWVzdENhbGwoKSB7XG4gICAgICAgIC8vIFdlIGRpc3BhdGNoIGEgdGltZW91dCB3aXRoIGEgc3BlY2lmaWVkIGRlbGF5IG9mIDAgZm9yIGVuZ2luZXMgdGhhdFxuICAgICAgICAvLyBjYW4gcmVsaWFibHkgYWNjb21tb2RhdGUgdGhhdCByZXF1ZXN0LiBUaGlzIHdpbGwgdXN1YWxseSBiZSBzbmFwcGVkXG4gICAgICAgIC8vIHRvIGEgNCBtaWxpc2Vjb25kIGRlbGF5LCBidXQgb25jZSB3ZSdyZSBmbHVzaGluZywgdGhlcmUncyBubyBkZWxheVxuICAgICAgICAvLyBiZXR3ZWVuIGV2ZW50cy5cbiAgICAgICAgdmFyIHRpbWVvdXRIYW5kbGUgPSBzZXRUaW1lb3V0KGhhbmRsZVRpbWVyLCAwKTtcbiAgICAgICAgLy8gSG93ZXZlciwgc2luY2UgdGhpcyB0aW1lciBnZXRzIGZyZXF1ZW50bHkgZHJvcHBlZCBpbiBGaXJlZm94XG4gICAgICAgIC8vIHdvcmtlcnMsIHdlIGVubGlzdCBhbiBpbnRlcnZhbCBoYW5kbGUgdGhhdCB3aWxsIHRyeSB0byBmaXJlXG4gICAgICAgIC8vIGFuIGV2ZW50IDIwIHRpbWVzIHBlciBzZWNvbmQgdW50aWwgaXQgc3VjY2VlZHMuXG4gICAgICAgIHZhciBpbnRlcnZhbEhhbmRsZSA9IHNldEludGVydmFsKGhhbmRsZVRpbWVyLCA1MCk7XG5cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlVGltZXIoKSB7XG4gICAgICAgICAgICAvLyBXaGljaGV2ZXIgdGltZXIgc3VjY2VlZHMgd2lsbCBjYW5jZWwgYm90aCB0aW1lcnMgYW5kXG4gICAgICAgICAgICAvLyBleGVjdXRlIHRoZSBjYWxsYmFjay5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SGFuZGxlKTtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxIYW5kbGUpO1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbi8vIFRoaXMgaXMgZm9yIGBhc2FwLmpzYCBvbmx5LlxuLy8gSXRzIG5hbWUgd2lsbCBiZSBwZXJpb2RpY2FsbHkgcmFuZG9taXplZCB0byBicmVhayBhbnkgY29kZSB0aGF0IGRlcGVuZHMgb25cbi8vIGl0cyBleGlzdGVuY2UuXG5yYXdBc2FwLm1ha2VSZXF1ZXN0Q2FsbEZyb21UaW1lciA9IG1ha2VSZXF1ZXN0Q2FsbEZyb21UaW1lcjtcblxuLy8gQVNBUCB3YXMgb3JpZ2luYWxseSBhIG5leHRUaWNrIHNoaW0gaW5jbHVkZWQgaW4gUS4gVGhpcyB3YXMgZmFjdG9yZWQgb3V0XG4vLyBpbnRvIHRoaXMgQVNBUCBwYWNrYWdlLiBJdCB3YXMgbGF0ZXIgYWRhcHRlZCB0byBSU1ZQIHdoaWNoIG1hZGUgZnVydGhlclxuLy8gYW1lbmRtZW50cy4gVGhlc2UgZGVjaXNpb25zLCBwYXJ0aWN1bGFybHkgdG8gbWFyZ2luYWxpemUgTWVzc2FnZUNoYW5uZWwgYW5kXG4vLyB0byBjYXB0dXJlIHRoZSBNdXRhdGlvbk9ic2VydmVyIGltcGxlbWVudGF0aW9uIGluIGEgY2xvc3VyZSwgd2VyZSBpbnRlZ3JhdGVkXG4vLyBiYWNrIGludG8gQVNBUCBwcm9wZXIuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGlsZGVpby9yc3ZwLmpzL2Jsb2IvY2RkZjcyMzI1NDZhOWNmODU4NTI0Yjc1Y2RlNmY5ZWRmNzI2MjBhNy9saWIvcnN2cC9hc2FwLmpzXG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KSkpXG5cbi8qKiovIH0pLFxuLyogMTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxudmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpXHJcblx0XHRnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuXG5cbi8qKiovIH0pLFxuLyogMTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fOy8vIE1JVCBsaWNlbnNlIChieSBFbGFuIFNoYW5rZXIpLlxuKGZ1bmN0aW9uKGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBleGVjdXRlU3luYyA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ2Z1bmN0aW9uJyl7XG4gICAgICBhcmdzWzBdLmFwcGx5KG51bGwsIGFyZ3Muc3BsaWNlKDEpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGV4ZWN1dGVBc3luYyA9IGZ1bmN0aW9uKGZuKXtcbiAgICBpZiAodHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgc2V0SW1tZWRpYXRlKGZuKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLm5leHRUaWNrKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0VGltZW91dChmbiwgMCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBtYWtlSXRlcmF0b3IgPSBmdW5jdGlvbiAodGFza3MpIHtcbiAgICB2YXIgbWFrZUNhbGxiYWNrID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICB2YXIgZm4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0YXNrcy5sZW5ndGgpIHtcbiAgICAgICAgICB0YXNrc1tpbmRleF0uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4ubmV4dCgpO1xuICAgICAgfTtcbiAgICAgIGZuLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoaW5kZXggPCB0YXNrcy5sZW5ndGggLSAxKSA/IG1ha2VDYWxsYmFjayhpbmRleCArIDEpOiBudWxsO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBmbjtcbiAgICB9O1xuICAgIHJldHVybiBtYWtlQ2FsbGJhY2soMCk7XG4gIH07XG4gIFxuICB2YXIgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uKG1heWJlQXJyYXkpe1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobWF5YmVBcnJheSkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gIH07XG5cbiAgdmFyIHdhdGVyZmFsbCA9IGZ1bmN0aW9uICh0YXNrcywgY2FsbGJhY2ssIGZvcmNlQXN5bmMpIHtcbiAgICB2YXIgbmV4dFRpY2sgPSBmb3JjZUFzeW5jID8gZXhlY3V0ZUFzeW5jIDogZXhlY3V0ZVN5bmM7XG4gICAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcbiAgICBpZiAoIV9pc0FycmF5KHRhc2tzKSkge1xuICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignRmlyc3QgYXJndW1lbnQgdG8gd2F0ZXJmYWxsIG11c3QgYmUgYW4gYXJyYXkgb2YgZnVuY3Rpb25zJyk7XG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICB9XG4gICAgaWYgKCF0YXNrcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cbiAgICB2YXIgd3JhcEl0ZXJhdG9yID0gZnVuY3Rpb24gKGl0ZXJhdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgY2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgICB2YXIgbmV4dCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgICAgYXJncy5wdXNoKHdyYXBJdGVyYXRvcihuZXh0KSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFyZ3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9yLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgd3JhcEl0ZXJhdG9yKG1ha2VJdGVyYXRvcih0YXNrcykpKCk7XG4gIH07XG5cbiAgaWYgKHRydWUpIHtcbiAgICAhKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbXSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSAoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHdhdGVyZmFsbDtcbiAgICB9KS5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSxcblx0XHRcdFx0X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpOyAvLyBSZXF1aXJlSlNcbiAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gd2F0ZXJmYWxsOyAvLyBDb21tb25KU1xuICB9IGVsc2Uge1xuICAgIGdsb2JhbHMud2F0ZXJmYWxsID0gd2F0ZXJmYWxsOyAvLyA8c2NyaXB0PlxuICB9XG59KSh0aGlzKTtcblxuXG4vKioqLyB9KSxcbi8qIDE2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cblxuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxudmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuZnVuY3Rpb24gY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8IDAgfHwgTnVtYmVySXNOYU4oYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgYXJnICsgJy4nKTtcbiAgICB9XG4gICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgfVxufSk7XG5cbkV2ZW50RW1pdHRlci5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gX2dldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gX2dldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xuXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZClcbiAgICBkb0Vycm9yID0gKGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQpO1xuICBlbHNlIGlmICghZG9FcnJvcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAoZG9FcnJvcikge1xuICAgIHZhciBlcjtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKVxuICAgICAgZXIgPSBhcmdzWzBdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3dcbiAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9XG4gICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCBlcnJvci4nICsgKGVyID8gJyAoJyArIGVyLm1lc3NhZ2UgKyAnKScgOiAnJykpO1xuICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICB9XG5cbiAgdmFyIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgdmFyIG07XG4gIHZhciBldmVudHM7XG4gIHZhciBleGlzdGluZztcblxuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgICAgIC8vIFJlLWFzc2lnbiBgZXZlbnRzYCBiZWNhdXNlIGEgbmV3TGlzdGVuZXIgaGFuZGxlciBjb3VsZCBoYXZlIGNhdXNlZCB0aGVcbiAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3RcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICAgIH1cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTtcbiAgfVxuXG4gIGlmIChleGlzdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XG4gICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xuICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgbSA9IF9nZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICBpZiAobSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSAmJiAhZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgLy8gTm8gZXJyb3IgY29kZSBmb3IgdGhpcyBzaW5jZSBpdCBpcyBhIFdhcm5pbmdcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxlbmd0aCArICcgJyArIFN0cmluZyh0eXBlKSArICcgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgIHcubmFtZSA9ICdNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmcnO1xuICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgIHcuY291bnQgPSBleGlzdGluZy5sZW5ndGg7XG4gICAgICBQcm9jZXNzRW1pdFdhcm5pbmcodyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XG4gICAgdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLndyYXBGbik7XG4gICAgdGhpcy5maXJlZCA9IHRydWU7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5hcHBseSh0aGlzLnRhcmdldCwgYXJndW1lbnRzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSB7IGZpcmVkOiBmYWxzZSwgd3JhcEZuOiB1bmRlZmluZWQsIHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBsaXN0ZW5lcjogbGlzdGVuZXIgfTtcbiAgdmFyIHdyYXBwZWQgPSBvbmNlV3JhcHBlci5iaW5kKHN0YXRlKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZS53cmFwRm4gPSB3cmFwcGVkO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcbiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gbGlzdFswXTtcblxuICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5mdW5jdGlvbiBfbGlzdGVuZXJzKHRhcmdldCwgdHlwZSwgdW53cmFwKSB7XG4gIHZhciBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICBpZiAoZXZsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuXG4gIHJldHVybiB1bndyYXAgP1xuICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIHRydWUpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKylcbiAgICBsaXN0W2luZGV4XSA9IGxpc3RbaW5kZXggKyAxXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuXG4vKioqLyB9KSxcbi8qIDE3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBub2RlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBsaWIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgc3ltID0gMDtcblxuZnVuY3Rpb24gZ2Vuc3ltKCkge1xuICByZXR1cm4gJ2hvbGVfJyArIHN5bSsrO1xufSAvLyBjb3B5LW9uLXdyaXRlIHZlcnNpb24gb2YgbWFwXG5cblxuZnVuY3Rpb24gbWFwQ09XKGFyciwgZnVuYykge1xuICB2YXIgcmVzID0gbnVsbDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gZnVuYyhhcnJbaV0pO1xuXG4gICAgaWYgKGl0ZW0gIT09IGFycltpXSkge1xuICAgICAgaWYgKCFyZXMpIHtcbiAgICAgICAgcmVzID0gYXJyLnNsaWNlKCk7XG4gICAgICB9XG5cbiAgICAgIHJlc1tpXSA9IGl0ZW07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcyB8fCBhcnI7XG59XG5cbmZ1bmN0aW9uIHdhbGsoYXN0LCBmdW5jLCBkZXB0aEZpcnN0KSB7XG4gIGlmICghKGFzdCBpbnN0YW5jZW9mIG5vZGVzLk5vZGUpKSB7XG4gICAgcmV0dXJuIGFzdDtcbiAgfVxuXG4gIGlmICghZGVwdGhGaXJzdCkge1xuICAgIHZhciBhc3RUID0gZnVuYyhhc3QpO1xuXG4gICAgaWYgKGFzdFQgJiYgYXN0VCAhPT0gYXN0KSB7XG4gICAgICByZXR1cm4gYXN0VDtcbiAgICB9XG4gIH1cblxuICBpZiAoYXN0IGluc3RhbmNlb2Ygbm9kZXMuTm9kZUxpc3QpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBtYXBDT1coYXN0LmNoaWxkcmVuLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgcmV0dXJuIHdhbGsobm9kZSwgZnVuYywgZGVwdGhGaXJzdCk7XG4gICAgfSk7XG5cbiAgICBpZiAoY2hpbGRyZW4gIT09IGFzdC5jaGlsZHJlbikge1xuICAgICAgYXN0ID0gbmV3IG5vZGVzW2FzdC50eXBlbmFtZV0oYXN0LmxpbmVubywgYXN0LmNvbG5vLCBjaGlsZHJlbik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGFzdCBpbnN0YW5jZW9mIG5vZGVzLkNhbGxFeHRlbnNpb24pIHtcbiAgICB2YXIgYXJncyA9IHdhbGsoYXN0LmFyZ3MsIGZ1bmMsIGRlcHRoRmlyc3QpO1xuICAgIHZhciBjb250ZW50QXJncyA9IG1hcENPVyhhc3QuY29udGVudEFyZ3MsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICByZXR1cm4gd2Fsayhub2RlLCBmdW5jLCBkZXB0aEZpcnN0KTtcbiAgICB9KTtcblxuICAgIGlmIChhcmdzICE9PSBhc3QuYXJncyB8fCBjb250ZW50QXJncyAhPT0gYXN0LmNvbnRlbnRBcmdzKSB7XG4gICAgICBhc3QgPSBuZXcgbm9kZXNbYXN0LnR5cGVuYW1lXShhc3QuZXh0TmFtZSwgYXN0LnByb3AsIGFyZ3MsIGNvbnRlbnRBcmdzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIHByb3BzID0gYXN0LmZpZWxkcy5tYXAoZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICByZXR1cm4gYXN0W2ZpZWxkXTtcbiAgICB9KTtcbiAgICB2YXIgcHJvcHNUID0gbWFwQ09XKHByb3BzLCBmdW5jdGlvbiAocHJvcCkge1xuICAgICAgcmV0dXJuIHdhbGsocHJvcCwgZnVuYywgZGVwdGhGaXJzdCk7XG4gICAgfSk7XG5cbiAgICBpZiAocHJvcHNUICE9PSBwcm9wcykge1xuICAgICAgYXN0ID0gbmV3IG5vZGVzW2FzdC50eXBlbmFtZV0oYXN0LmxpbmVubywgYXN0LmNvbG5vKTtcbiAgICAgIHByb3BzVC5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wLCBpKSB7XG4gICAgICAgIGFzdFthc3QuZmllbGRzW2ldXSA9IHByb3A7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGVwdGhGaXJzdCA/IGZ1bmMoYXN0KSB8fCBhc3QgOiBhc3Q7XG59XG5cbmZ1bmN0aW9uIGRlcHRoV2Fsayhhc3QsIGZ1bmMpIHtcbiAgcmV0dXJuIHdhbGsoYXN0LCBmdW5jLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gX2xpZnRGaWx0ZXJzKG5vZGUsIGFzeW5jRmlsdGVycywgcHJvcCkge1xuICB2YXIgY2hpbGRyZW4gPSBbXTtcbiAgdmFyIHdhbGtlZCA9IGRlcHRoV2Fsayhwcm9wID8gbm9kZVtwcm9wXSA6IG5vZGUsIGZ1bmN0aW9uIChkZXNjTm9kZSkge1xuICAgIHZhciBzeW1ib2w7XG5cbiAgICBpZiAoZGVzY05vZGUgaW5zdGFuY2VvZiBub2Rlcy5CbG9jaykge1xuICAgICAgcmV0dXJuIGRlc2NOb2RlO1xuICAgIH0gZWxzZSBpZiAoZGVzY05vZGUgaW5zdGFuY2VvZiBub2Rlcy5GaWx0ZXIgJiYgbGliLmluZGV4T2YoYXN5bmNGaWx0ZXJzLCBkZXNjTm9kZS5uYW1lLnZhbHVlKSAhPT0gLTEgfHwgZGVzY05vZGUgaW5zdGFuY2VvZiBub2Rlcy5DYWxsRXh0ZW5zaW9uQXN5bmMpIHtcbiAgICAgIHN5bWJvbCA9IG5ldyBub2Rlcy5TeW1ib2woZGVzY05vZGUubGluZW5vLCBkZXNjTm9kZS5jb2xubywgZ2Vuc3ltKCkpO1xuICAgICAgY2hpbGRyZW4ucHVzaChuZXcgbm9kZXMuRmlsdGVyQXN5bmMoZGVzY05vZGUubGluZW5vLCBkZXNjTm9kZS5jb2xubywgZGVzY05vZGUubmFtZSwgZGVzY05vZGUuYXJncywgc3ltYm9sKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN5bWJvbDtcbiAgfSk7XG5cbiAgaWYgKHByb3ApIHtcbiAgICBub2RlW3Byb3BdID0gd2Fsa2VkO1xuICB9IGVsc2Uge1xuICAgIG5vZGUgPSB3YWxrZWQ7XG4gIH1cblxuICBpZiAoY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgY2hpbGRyZW4ucHVzaChub2RlKTtcbiAgICByZXR1cm4gbmV3IG5vZGVzLk5vZGVMaXN0KG5vZGUubGluZW5vLCBub2RlLmNvbG5vLCBjaGlsZHJlbik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGlmdEZpbHRlcnMoYXN0LCBhc3luY0ZpbHRlcnMpIHtcbiAgcmV0dXJuIGRlcHRoV2Fsayhhc3QsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBub2Rlcy5PdXRwdXQpIHtcbiAgICAgIHJldHVybiBfbGlmdEZpbHRlcnMobm9kZSwgYXN5bmNGaWx0ZXJzKTtcbiAgICB9IGVsc2UgaWYgKG5vZGUgaW5zdGFuY2VvZiBub2Rlcy5TZXQpIHtcbiAgICAgIHJldHVybiBfbGlmdEZpbHRlcnMobm9kZSwgYXN5bmNGaWx0ZXJzLCAndmFsdWUnKTtcbiAgICB9IGVsc2UgaWYgKG5vZGUgaW5zdGFuY2VvZiBub2Rlcy5Gb3IpIHtcbiAgICAgIHJldHVybiBfbGlmdEZpbHRlcnMobm9kZSwgYXN5bmNGaWx0ZXJzLCAnYXJyJyk7XG4gICAgfSBlbHNlIGlmIChub2RlIGluc3RhbmNlb2Ygbm9kZXMuSWYpIHtcbiAgICAgIHJldHVybiBfbGlmdEZpbHRlcnMobm9kZSwgYXN5bmNGaWx0ZXJzLCAnY29uZCcpO1xuICAgIH0gZWxzZSBpZiAobm9kZSBpbnN0YW5jZW9mIG5vZGVzLkNhbGxFeHRlbnNpb24pIHtcbiAgICAgIHJldHVybiBfbGlmdEZpbHRlcnMobm9kZSwgYXN5bmNGaWx0ZXJzLCAnYXJncycpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGxpZnRTdXBlcihhc3QpIHtcbiAgcmV0dXJuIHdhbGsoYXN0LCBmdW5jdGlvbiAoYmxvY2tOb2RlKSB7XG4gICAgaWYgKCEoYmxvY2tOb2RlIGluc3RhbmNlb2Ygbm9kZXMuQmxvY2spKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGhhc1N1cGVyID0gZmFsc2U7XG4gICAgdmFyIHN5bWJvbCA9IGdlbnN5bSgpO1xuICAgIGJsb2NrTm9kZS5ib2R5ID0gd2FsayhibG9ja05vZGUuYm9keSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgICAgIGlmIChub2RlIGluc3RhbmNlb2Ygbm9kZXMuRnVuQ2FsbCAmJiBub2RlLm5hbWUudmFsdWUgPT09ICdzdXBlcicpIHtcbiAgICAgICAgaGFzU3VwZXIgPSB0cnVlO1xuICAgICAgICByZXR1cm4gbmV3IG5vZGVzLlN5bWJvbChub2RlLmxpbmVubywgbm9kZS5jb2xubywgc3ltYm9sKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChoYXNTdXBlcikge1xuICAgICAgYmxvY2tOb2RlLmJvZHkuY2hpbGRyZW4udW5zaGlmdChuZXcgbm9kZXMuU3VwZXIoMCwgMCwgYmxvY2tOb2RlLm5hbWUsIG5ldyBub2Rlcy5TeW1ib2woMCwgMCwgc3ltYm9sKSkpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRTdGF0ZW1lbnRzKGFzdCkge1xuICByZXR1cm4gZGVwdGhXYWxrKGFzdCwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBpZiAoIShub2RlIGluc3RhbmNlb2Ygbm9kZXMuSWYpICYmICEobm9kZSBpbnN0YW5jZW9mIG5vZGVzLkZvcikpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdmFyIGFzeW5jID0gZmFsc2U7XG4gICAgd2Fsayhub2RlLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIG5vZGVzLkZpbHRlckFzeW5jIHx8IGNoaWxkIGluc3RhbmNlb2Ygbm9kZXMuSWZBc3luYyB8fCBjaGlsZCBpbnN0YW5jZW9mIG5vZGVzLkFzeW5jRWFjaCB8fCBjaGlsZCBpbnN0YW5jZW9mIG5vZGVzLkFzeW5jQWxsIHx8IGNoaWxkIGluc3RhbmNlb2Ygbm9kZXMuQ2FsbEV4dGVuc2lvbkFzeW5jKSB7XG4gICAgICAgIGFzeW5jID0gdHJ1ZTsgLy8gU3RvcCBpdGVyYXRpbmcgYnkgcmV0dXJuaW5nIHRoZSBub2RlXG5cbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0pO1xuXG4gICAgaWYgKGFzeW5jKSB7XG4gICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIG5vZGVzLklmKSB7XG4gICAgICAgIHJldHVybiBuZXcgbm9kZXMuSWZBc3luYyhub2RlLmxpbmVubywgbm9kZS5jb2xubywgbm9kZS5jb25kLCBub2RlLmJvZHksIG5vZGUuZWxzZV8pO1xuICAgICAgfSBlbHNlIGlmIChub2RlIGluc3RhbmNlb2Ygbm9kZXMuRm9yICYmICEobm9kZSBpbnN0YW5jZW9mIG5vZGVzLkFzeW5jQWxsKSkge1xuICAgICAgICByZXR1cm4gbmV3IG5vZGVzLkFzeW5jRWFjaChub2RlLmxpbmVubywgbm9kZS5jb2xubywgbm9kZS5hcnIsIG5vZGUubmFtZSwgbm9kZS5ib2R5LCBub2RlLmVsc2VfKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY3BzKGFzdCwgYXN5bmNGaWx0ZXJzKSB7XG4gIHJldHVybiBjb252ZXJ0U3RhdGVtZW50cyhsaWZ0U3VwZXIobGlmdEZpbHRlcnMoYXN0LCBhc3luY0ZpbHRlcnMpKSk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybShhc3QsIGFzeW5jRmlsdGVycykge1xuICByZXR1cm4gY3BzKGFzdCwgYXN5bmNGaWx0ZXJzIHx8IFtdKTtcbn0gLy8gdmFyIHBhcnNlciA9IHJlcXVpcmUoJy4vcGFyc2VyJyk7XG4vLyB2YXIgc3JjID0gJ2hlbGxvIHslIGZvbyAlfXslIGVuZGZvbyAlfSBlbmQnO1xuLy8gdmFyIGFzdCA9IHRyYW5zZm9ybShwYXJzZXIucGFyc2Uoc3JjLCBbbmV3IEZvb0V4dGVuc2lvbigpXSksIFsnYmFyJ10pO1xuLy8gbm9kZXMucHJpbnROb2Rlcyhhc3QpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB0cmFuc2Zvcm06IHRyYW5zZm9ybVxufTtcblxuLyoqKi8gfSksXG4vKiAxOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgbGliID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIHIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZSh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBmYWxzZSkge1xuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbmV4cG9ydHMuYWJzID0gTWF0aC5hYnM7XG5cbmZ1bmN0aW9uIGlzTmFOKG51bSkge1xuICByZXR1cm4gbnVtICE9PSBudW07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG5cbmZ1bmN0aW9uIGJhdGNoKGFyciwgbGluZWNvdW50LCBmaWxsV2l0aCkge1xuICB2YXIgaTtcbiAgdmFyIHJlcyA9IFtdO1xuICB2YXIgdG1wID0gW107XG5cbiAgZm9yIChpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChpICUgbGluZWNvdW50ID09PSAwICYmIHRtcC5sZW5ndGgpIHtcbiAgICAgIHJlcy5wdXNoKHRtcCk7XG4gICAgICB0bXAgPSBbXTtcbiAgICB9XG5cbiAgICB0bXAucHVzaChhcnJbaV0pO1xuICB9XG5cbiAgaWYgKHRtcC5sZW5ndGgpIHtcbiAgICBpZiAoZmlsbFdpdGgpIHtcbiAgICAgIGZvciAoaSA9IHRtcC5sZW5ndGg7IGkgPCBsaW5lY291bnQ7IGkrKykge1xuICAgICAgICB0bXAucHVzaChmaWxsV2l0aCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmVzLnB1c2godG1wKTtcbiAgfVxuXG4gIHJldHVybiByZXM7XG59XG5cbmV4cG9ydHMuYmF0Y2ggPSBiYXRjaDtcblxuZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHIpIHtcbiAgc3RyID0gbm9ybWFsaXplKHN0ciwgJycpO1xuICB2YXIgcmV0ID0gc3RyLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiByLmNvcHlTYWZlbmVzcyhzdHIsIHJldC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHJldC5zbGljZSgxKSk7XG59XG5cbmV4cG9ydHMuY2FwaXRhbGl6ZSA9IGNhcGl0YWxpemU7XG5cbmZ1bmN0aW9uIGNlbnRlcihzdHIsIHdpZHRoKSB7XG4gIHN0ciA9IG5vcm1hbGl6ZShzdHIsICcnKTtcbiAgd2lkdGggPSB3aWR0aCB8fCA4MDtcblxuICBpZiAoc3RyLmxlbmd0aCA+PSB3aWR0aCkge1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICB2YXIgc3BhY2VzID0gd2lkdGggLSBzdHIubGVuZ3RoO1xuICB2YXIgcHJlID0gbGliLnJlcGVhdCgnICcsIHNwYWNlcyAvIDIgLSBzcGFjZXMgJSAyKTtcbiAgdmFyIHBvc3QgPSBsaWIucmVwZWF0KCcgJywgc3BhY2VzIC8gMik7XG4gIHJldHVybiByLmNvcHlTYWZlbmVzcyhzdHIsIHByZSArIHN0ciArIHBvc3QpO1xufVxuXG5leHBvcnRzLmNlbnRlciA9IGNlbnRlcjtcblxuZnVuY3Rpb24gZGVmYXVsdF8odmFsLCBkZWYsIGJvb2wpIHtcbiAgaWYgKGJvb2wpIHtcbiAgICByZXR1cm4gdmFsIHx8IGRlZjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgPyB2YWwgOiBkZWY7XG4gIH1cbn0gLy8gVE9ETzogaXQgaXMgY29uZnVzaW5nIHRvIGV4cG9ydCBzb21ldGhpbmcgY2FsbGVkICdkZWZhdWx0J1xuXG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGRlZmF1bHRfOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuXG5mdW5jdGlvbiBkaWN0c29ydCh2YWwsIGNhc2VTZW5zaXRpdmUsIGJ5KSB7XG4gIGlmICghbGliLmlzT2JqZWN0KHZhbCkpIHtcbiAgICB0aHJvdyBuZXcgbGliLlRlbXBsYXRlRXJyb3IoJ2RpY3Rzb3J0IGZpbHRlcjogdmFsIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cblxuICB2YXIgYXJyYXkgPSBbXTsgLy8gZGVsaWJlcmF0ZWx5IGluY2x1ZGUgcHJvcGVydGllcyBmcm9tIHRoZSBvYmplY3QncyBwcm90b3R5cGVcblxuICBmb3IgKHZhciBrIGluIHZhbCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZ3VhcmQtZm9yLWluLCBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgIGFycmF5LnB1c2goW2ssIHZhbFtrXV0pO1xuICB9XG5cbiAgdmFyIHNpO1xuXG4gIGlmIChieSA9PT0gdW5kZWZpbmVkIHx8IGJ5ID09PSAna2V5Jykge1xuICAgIHNpID0gMDtcbiAgfSBlbHNlIGlmIChieSA9PT0gJ3ZhbHVlJykge1xuICAgIHNpID0gMTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgbGliLlRlbXBsYXRlRXJyb3IoJ2RpY3Rzb3J0IGZpbHRlcjogWW91IGNhbiBvbmx5IHNvcnQgYnkgZWl0aGVyIGtleSBvciB2YWx1ZScpO1xuICB9XG5cbiAgYXJyYXkuc29ydChmdW5jdGlvbiAodDEsIHQyKSB7XG4gICAgdmFyIGEgPSB0MVtzaV07XG4gICAgdmFyIGIgPSB0MltzaV07XG5cbiAgICBpZiAoIWNhc2VTZW5zaXRpdmUpIHtcbiAgICAgIGlmIChsaWIuaXNTdHJpbmcoYSkpIHtcbiAgICAgICAgYSA9IGEudG9VcHBlckNhc2UoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxpYi5pc1N0cmluZyhiKSkge1xuICAgICAgICBiID0gYi50b1VwcGVyQ2FzZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhID4gYiA/IDEgOiBhID09PSBiID8gMCA6IC0xOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gIH0pO1xuICByZXR1cm4gYXJyYXk7XG59XG5cbmV4cG9ydHMuZGljdHNvcnQgPSBkaWN0c29ydDtcblxuZnVuY3Rpb24gZHVtcChvYmosIHNwYWNlcykge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqLCBudWxsLCBzcGFjZXMpO1xufVxuXG5leHBvcnRzLmR1bXAgPSBkdW1wO1xuXG5mdW5jdGlvbiBlc2NhcGUoc3RyKSB7XG4gIGlmIChzdHIgaW5zdGFuY2VvZiByLlNhZmVTdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgc3RyID0gc3RyID09PSBudWxsIHx8IHN0ciA9PT0gdW5kZWZpbmVkID8gJycgOiBzdHI7XG4gIHJldHVybiByLm1hcmtTYWZlKGxpYi5lc2NhcGUoc3RyLnRvU3RyaW5nKCkpKTtcbn1cblxuZXhwb3J0cy5lc2NhcGUgPSBlc2NhcGU7XG5cbmZ1bmN0aW9uIHNhZmUoc3RyKSB7XG4gIGlmIChzdHIgaW5zdGFuY2VvZiByLlNhZmVTdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgc3RyID0gc3RyID09PSBudWxsIHx8IHN0ciA9PT0gdW5kZWZpbmVkID8gJycgOiBzdHI7XG4gIHJldHVybiByLm1hcmtTYWZlKHN0ci50b1N0cmluZygpKTtcbn1cblxuZXhwb3J0cy5zYWZlID0gc2FmZTtcblxuZnVuY3Rpb24gZmlyc3QoYXJyKSB7XG4gIHJldHVybiBhcnJbMF07XG59XG5cbmV4cG9ydHMuZmlyc3QgPSBmaXJzdDtcblxuZnVuY3Rpb24gZm9yY2Vlc2NhcGUoc3RyKSB7XG4gIHN0ciA9IHN0ciA9PT0gbnVsbCB8fCBzdHIgPT09IHVuZGVmaW5lZCA/ICcnIDogc3RyO1xuICByZXR1cm4gci5tYXJrU2FmZShsaWIuZXNjYXBlKHN0ci50b1N0cmluZygpKSk7XG59XG5cbmV4cG9ydHMuZm9yY2Vlc2NhcGUgPSBmb3JjZWVzY2FwZTtcblxuZnVuY3Rpb24gZ3JvdXBieShhcnIsIGF0dHIpIHtcbiAgcmV0dXJuIGxpYi5ncm91cEJ5KGFyciwgYXR0ciwgdGhpcy5lbnYub3B0cy50aHJvd09uVW5kZWZpbmVkKTtcbn1cblxuZXhwb3J0cy5ncm91cGJ5ID0gZ3JvdXBieTtcblxuZnVuY3Rpb24gaW5kZW50KHN0ciwgd2lkdGgsIGluZGVudGZpcnN0KSB7XG4gIHN0ciA9IG5vcm1hbGl6ZShzdHIsICcnKTtcblxuICBpZiAoc3RyID09PSAnJykge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHdpZHRoID0gd2lkdGggfHwgNDsgLy8gbGV0IHJlcyA9ICcnO1xuXG4gIHZhciBsaW5lcyA9IHN0ci5zcGxpdCgnXFxuJyk7XG4gIHZhciBzcCA9IGxpYi5yZXBlYXQoJyAnLCB3aWR0aCk7XG4gIHZhciByZXMgPSBsaW5lcy5tYXAoZnVuY3Rpb24gKGwsIGkpIHtcbiAgICByZXR1cm4gaSA9PT0gMCAmJiAhaW5kZW50Zmlyc3QgPyBsIDogXCJcIiArIHNwICsgbDtcbiAgfSkuam9pbignXFxuJyk7XG4gIHJldHVybiByLmNvcHlTYWZlbmVzcyhzdHIsIHJlcyk7XG59XG5cbmV4cG9ydHMuaW5kZW50ID0gaW5kZW50O1xuXG5mdW5jdGlvbiBqb2luKGFyciwgZGVsLCBhdHRyKSB7XG4gIGRlbCA9IGRlbCB8fCAnJztcblxuICBpZiAoYXR0cikge1xuICAgIGFyciA9IGxpYi5tYXAoYXJyLCBmdW5jdGlvbiAodikge1xuICAgICAgcmV0dXJuIHZbYXR0cl07XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gYXJyLmpvaW4oZGVsKTtcbn1cblxuZXhwb3J0cy5qb2luID0gam9pbjtcblxuZnVuY3Rpb24gbGFzdChhcnIpIHtcbiAgcmV0dXJuIGFyclthcnIubGVuZ3RoIC0gMV07XG59XG5cbmV4cG9ydHMubGFzdCA9IGxhc3Q7XG5cbmZ1bmN0aW9uIGxlbmd0aEZpbHRlcih2YWwpIHtcbiAgdmFyIHZhbHVlID0gbm9ybWFsaXplKHZhbCwgJycpO1xuXG4gIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBNYXAgPT09ICdmdW5jdGlvbicgJiYgdmFsdWUgaW5zdGFuY2VvZiBNYXAgfHwgdHlwZW9mIFNldCA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgLy8gRUNNQVNjcmlwdCAyMDE1IE1hcHMgYW5kIFNldHNcbiAgICAgIHJldHVybiB2YWx1ZS5zaXplO1xuICAgIH1cblxuICAgIGlmIChsaWIuaXNPYmplY3QodmFsdWUpICYmICEodmFsdWUgaW5zdGFuY2VvZiByLlNhZmVTdHJpbmcpKSB7XG4gICAgICAvLyBPYmplY3RzIChiZXNpZGVzIFNhZmVTdHJpbmdzKSwgbm9uLXByaW1hdGl2ZSBBcnJheXNcbiAgICAgIHJldHVybiBsaWIua2V5cyh2YWx1ZSkubGVuZ3RoO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZS5sZW5ndGg7XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuZXhwb3J0cy5sZW5ndGggPSBsZW5ndGhGaWx0ZXI7XG5cbmZ1bmN0aW9uIGxpc3QodmFsKSB7XG4gIGlmIChsaWIuaXNTdHJpbmcodmFsKSkge1xuICAgIHJldHVybiB2YWwuc3BsaXQoJycpO1xuICB9IGVsc2UgaWYgKGxpYi5pc09iamVjdCh2YWwpKSB7XG4gICAgcmV0dXJuIGxpYi5fZW50cmllcyh2YWwgfHwge30pLm1hcChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIGtleSA9IF9yZWZbMF0sXG4gICAgICAgICAgdmFsdWUgPSBfcmVmWzFdO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2V5OiBrZXksXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChsaWIuaXNBcnJheSh2YWwpKSB7XG4gICAgcmV0dXJuIHZhbDtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgbGliLlRlbXBsYXRlRXJyb3IoJ2xpc3QgZmlsdGVyOiB0eXBlIG5vdCBpdGVyYWJsZScpO1xuICB9XG59XG5cbmV4cG9ydHMubGlzdCA9IGxpc3Q7XG5cbmZ1bmN0aW9uIGxvd2VyKHN0cikge1xuICBzdHIgPSBub3JtYWxpemUoc3RyLCAnJyk7XG4gIHJldHVybiBzdHIudG9Mb3dlckNhc2UoKTtcbn1cblxuZXhwb3J0cy5sb3dlciA9IGxvd2VyO1xuXG5mdW5jdGlvbiBubDJicihzdHIpIHtcbiAgaWYgKHN0ciA9PT0gbnVsbCB8fCBzdHIgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHJldHVybiByLmNvcHlTYWZlbmVzcyhzdHIsIHN0ci5yZXBsYWNlKC9cXHJcXG58XFxuL2csICc8YnIgLz5cXG4nKSk7XG59XG5cbmV4cG9ydHMubmwyYnIgPSBubDJicjtcblxuZnVuY3Rpb24gcmFuZG9tKGFycikge1xuICByZXR1cm4gYXJyW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFyci5sZW5ndGgpXTtcbn1cblxuZXhwb3J0cy5yYW5kb20gPSByYW5kb207XG4vKipcbiAqIENvbnN0cnVjdCBzZWxlY3Qgb3IgcmVqZWN0IGZpbHRlclxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gZXhwZWN0ZWRUZXN0UmVzdWx0XG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oYXJyYXksIHN0cmluZywgKik6IGFycmF5fVxuICovXG5cbmZ1bmN0aW9uIGdldFNlbGVjdE9yUmVqZWN0KGV4cGVjdGVkVGVzdFJlc3VsdCkge1xuICBmdW5jdGlvbiBmaWx0ZXIoYXJyLCB0ZXN0TmFtZSwgc2Vjb25kQXJnKSB7XG4gICAgaWYgKHRlc3ROYW1lID09PSB2b2lkIDApIHtcbiAgICAgIHRlc3ROYW1lID0gJ3RydXRoeSc7XG4gICAgfVxuXG4gICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgIHZhciB0ZXN0ID0gY29udGV4dC5lbnYuZ2V0VGVzdCh0ZXN0TmFtZSk7XG4gICAgcmV0dXJuIGxpYi50b0FycmF5KGFycikuZmlsdGVyKGZ1bmN0aW9uIGV4YW1pbmVUZXN0UmVzdWx0KGl0ZW0pIHtcbiAgICAgIHJldHVybiB0ZXN0LmNhbGwoY29udGV4dCwgaXRlbSwgc2Vjb25kQXJnKSA9PT0gZXhwZWN0ZWRUZXN0UmVzdWx0O1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZpbHRlcjtcbn1cblxuZXhwb3J0cy5yZWplY3QgPSBnZXRTZWxlY3RPclJlamVjdChmYWxzZSk7XG5cbmZ1bmN0aW9uIHJlamVjdGF0dHIoYXJyLCBhdHRyKSB7XG4gIHJldHVybiBhcnIuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuICFpdGVtW2F0dHJdO1xuICB9KTtcbn1cblxuZXhwb3J0cy5yZWplY3RhdHRyID0gcmVqZWN0YXR0cjtcbmV4cG9ydHMuc2VsZWN0ID0gZ2V0U2VsZWN0T3JSZWplY3QodHJ1ZSk7XG5cbmZ1bmN0aW9uIHNlbGVjdGF0dHIoYXJyLCBhdHRyKSB7XG4gIHJldHVybiBhcnIuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuICEhaXRlbVthdHRyXTtcbiAgfSk7XG59XG5cbmV4cG9ydHMuc2VsZWN0YXR0ciA9IHNlbGVjdGF0dHI7XG5cbmZ1bmN0aW9uIHJlcGxhY2Uoc3RyLCBvbGQsIG5ld18sIG1heENvdW50KSB7XG4gIHZhciBvcmlnaW5hbFN0ciA9IHN0cjtcblxuICBpZiAob2xkIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKG9sZCwgbmV3Xyk7XG4gIH1cblxuICBpZiAodHlwZW9mIG1heENvdW50ID09PSAndW5kZWZpbmVkJykge1xuICAgIG1heENvdW50ID0gLTE7XG4gIH1cblxuICB2YXIgcmVzID0gJyc7IC8vIE91dHB1dFxuICAvLyBDYXN0IE51bWJlcnMgaW4gdGhlIHNlYXJjaCB0ZXJtIHRvIHN0cmluZ1xuXG4gIGlmICh0eXBlb2Ygb2xkID09PSAnbnVtYmVyJykge1xuICAgIG9sZCA9ICcnICsgb2xkO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBvbGQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gSWYgaXQgaXMgc29tZXRoaW5nIG90aGVyIHRoYW4gbnVtYmVyIG9yIHN0cmluZyxcbiAgICAvLyByZXR1cm4gdGhlIG9yaWdpbmFsIHN0cmluZ1xuICAgIHJldHVybiBzdHI7XG4gIH0gLy8gQ2FzdCBudW1iZXJzIGluIHRoZSByZXBsYWNlbWVudCB0byBzdHJpbmdcblxuXG4gIGlmICh0eXBlb2Ygc3RyID09PSAnbnVtYmVyJykge1xuICAgIHN0ciA9ICcnICsgc3RyO1xuICB9IC8vIElmIGJ5IG5vdywgd2UgZG9uJ3QgaGF2ZSBhIHN0cmluZywgdGhyb3cgaXQgYmFja1xuXG5cbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnICYmICEoc3RyIGluc3RhbmNlb2Ygci5TYWZlU3RyaW5nKSkge1xuICAgIHJldHVybiBzdHI7XG4gIH0gLy8gU2hvcnRDaXJjdWl0c1xuXG5cbiAgaWYgKG9sZCA9PT0gJycpIHtcbiAgICAvLyBNaW1pYyB0aGUgcHl0aG9uIGJlaGF2aW91cjogZW1wdHkgc3RyaW5nIGlzIHJlcGxhY2VkXG4gICAgLy8gYnkgcmVwbGFjZW1lbnQgZS5nLiBcImFiY1wifHJlcGxhY2UoXCJcIiwgXCIuXCIpIC0+IC5hLmIuYy5cbiAgICByZXMgPSBuZXdfICsgc3RyLnNwbGl0KCcnKS5qb2luKG5ld18pICsgbmV3XztcbiAgICByZXR1cm4gci5jb3B5U2FmZW5lc3Moc3RyLCByZXMpO1xuICB9XG5cbiAgdmFyIG5leHRJbmRleCA9IHN0ci5pbmRleE9mKG9sZCk7IC8vIGlmICMgb2YgcmVwbGFjZW1lbnRzIHRvIHBlcmZvcm0gaXMgMCwgb3IgdGhlIHN0cmluZyB0byBkb2VzXG4gIC8vIG5vdCBjb250YWluIHRoZSBvbGQgdmFsdWUsIHJldHVybiB0aGUgc3RyaW5nXG5cbiAgaWYgKG1heENvdW50ID09PSAwIHx8IG5leHRJbmRleCA9PT0gLTEpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgdmFyIHBvcyA9IDA7XG4gIHZhciBjb3VudCA9IDA7IC8vICMgb2YgcmVwbGFjZW1lbnRzIG1hZGVcblxuICB3aGlsZSAobmV4dEluZGV4ID4gLTEgJiYgKG1heENvdW50ID09PSAtMSB8fCBjb3VudCA8IG1heENvdW50KSkge1xuICAgIC8vIEdyYWIgdGhlIG5leHQgY2h1bmsgb2Ygc3JjIHN0cmluZyBhbmQgYWRkIGl0IHdpdGggdGhlXG4gICAgLy8gcmVwbGFjZW1lbnQsIHRvIHRoZSByZXN1bHRcbiAgICByZXMgKz0gc3RyLnN1YnN0cmluZyhwb3MsIG5leHRJbmRleCkgKyBuZXdfOyAvLyBJbmNyZW1lbnQgb3VyIHBvaW50ZXIgaW4gdGhlIHNyYyBzdHJpbmdcblxuICAgIHBvcyA9IG5leHRJbmRleCArIG9sZC5sZW5ndGg7XG4gICAgY291bnQrKzsgLy8gU2VlIGlmIHRoZXJlIGFyZSBhbnkgbW9yZSByZXBsYWNlbWVudHMgdG8gYmUgbWFkZVxuXG4gICAgbmV4dEluZGV4ID0gc3RyLmluZGV4T2Yob2xkLCBwb3MpO1xuICB9IC8vIFdlJ3ZlIGVpdGhlciByZWFjaGVkIHRoZSBlbmQsIG9yIGRvbmUgdGhlIG1heCAjIG9mXG4gIC8vIHJlcGxhY2VtZW50cywgdGFjayBvbiBhbnkgcmVtYWluaW5nIHN0cmluZ1xuXG5cbiAgaWYgKHBvcyA8IHN0ci5sZW5ndGgpIHtcbiAgICByZXMgKz0gc3RyLnN1YnN0cmluZyhwb3MpO1xuICB9XG5cbiAgcmV0dXJuIHIuY29weVNhZmVuZXNzKG9yaWdpbmFsU3RyLCByZXMpO1xufVxuXG5leHBvcnRzLnJlcGxhY2UgPSByZXBsYWNlO1xuXG5mdW5jdGlvbiByZXZlcnNlKHZhbCkge1xuICB2YXIgYXJyO1xuXG4gIGlmIChsaWIuaXNTdHJpbmcodmFsKSkge1xuICAgIGFyciA9IGxpc3QodmFsKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBDb3B5IGl0XG4gICAgYXJyID0gbGliLm1hcCh2YWwsIGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gdjtcbiAgICB9KTtcbiAgfVxuXG4gIGFyci5yZXZlcnNlKCk7XG5cbiAgaWYgKGxpYi5pc1N0cmluZyh2YWwpKSB7XG4gICAgcmV0dXJuIHIuY29weVNhZmVuZXNzKHZhbCwgYXJyLmpvaW4oJycpKTtcbiAgfVxuXG4gIHJldHVybiBhcnI7XG59XG5cbmV4cG9ydHMucmV2ZXJzZSA9IHJldmVyc2U7XG5cbmZ1bmN0aW9uIHJvdW5kKHZhbCwgcHJlY2lzaW9uLCBtZXRob2QpIHtcbiAgcHJlY2lzaW9uID0gcHJlY2lzaW9uIHx8IDA7XG4gIHZhciBmYWN0b3IgPSBNYXRoLnBvdygxMCwgcHJlY2lzaW9uKTtcbiAgdmFyIHJvdW5kZXI7XG5cbiAgaWYgKG1ldGhvZCA9PT0gJ2NlaWwnKSB7XG4gICAgcm91bmRlciA9IE1hdGguY2VpbDtcbiAgfSBlbHNlIGlmIChtZXRob2QgPT09ICdmbG9vcicpIHtcbiAgICByb3VuZGVyID0gTWF0aC5mbG9vcjtcbiAgfSBlbHNlIHtcbiAgICByb3VuZGVyID0gTWF0aC5yb3VuZDtcbiAgfVxuXG4gIHJldHVybiByb3VuZGVyKHZhbCAqIGZhY3RvcikgLyBmYWN0b3I7XG59XG5cbmV4cG9ydHMucm91bmQgPSByb3VuZDtcblxuZnVuY3Rpb24gc2xpY2UoYXJyLCBzbGljZXMsIGZpbGxXaXRoKSB7XG4gIHZhciBzbGljZUxlbmd0aCA9IE1hdGguZmxvb3IoYXJyLmxlbmd0aCAvIHNsaWNlcyk7XG4gIHZhciBleHRyYSA9IGFyci5sZW5ndGggJSBzbGljZXM7XG4gIHZhciByZXMgPSBbXTtcbiAgdmFyIG9mZnNldCA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZXM7IGkrKykge1xuICAgIHZhciBzdGFydCA9IG9mZnNldCArIGkgKiBzbGljZUxlbmd0aDtcblxuICAgIGlmIChpIDwgZXh0cmEpIHtcbiAgICAgIG9mZnNldCsrO1xuICAgIH1cblxuICAgIHZhciBlbmQgPSBvZmZzZXQgKyAoaSArIDEpICogc2xpY2VMZW5ndGg7XG4gICAgdmFyIGN1cnJTbGljZSA9IGFyci5zbGljZShzdGFydCwgZW5kKTtcblxuICAgIGlmIChmaWxsV2l0aCAmJiBpID49IGV4dHJhKSB7XG4gICAgICBjdXJyU2xpY2UucHVzaChmaWxsV2l0aCk7XG4gICAgfVxuXG4gICAgcmVzLnB1c2goY3VyclNsaWNlKTtcbiAgfVxuXG4gIHJldHVybiByZXM7XG59XG5cbmV4cG9ydHMuc2xpY2UgPSBzbGljZTtcblxuZnVuY3Rpb24gc3VtKGFyciwgYXR0ciwgc3RhcnQpIHtcbiAgaWYgKHN0YXJ0ID09PSB2b2lkIDApIHtcbiAgICBzdGFydCA9IDA7XG4gIH1cblxuICBpZiAoYXR0cikge1xuICAgIGFyciA9IGxpYi5tYXAoYXJyLCBmdW5jdGlvbiAodikge1xuICAgICAgcmV0dXJuIHZbYXR0cl07XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gc3RhcnQgKyBhcnIucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGEgKyBiO1xuICB9LCAwKTtcbn1cblxuZXhwb3J0cy5zdW0gPSBzdW07XG5leHBvcnRzLnNvcnQgPSByLm1ha2VNYWNybyhbJ3ZhbHVlJywgJ3JldmVyc2UnLCAnY2FzZV9zZW5zaXRpdmUnLCAnYXR0cmlidXRlJ10sIFtdLCBmdW5jdGlvbiAoYXJyLCByZXZlcnNlZCwgY2FzZVNlbnMsIGF0dHIpIHtcbiAgLy8gQ29weSBpdFxuICB2YXIgYXJyYXkgPSBsaWIubWFwKGFyciwgZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gdjtcbiAgfSk7XG4gIGFycmF5LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICB2YXIgeCA9IGF0dHIgPyBhW2F0dHJdIDogYTtcbiAgICB2YXIgeSA9IGF0dHIgPyBiW2F0dHJdIDogYjtcblxuICAgIGlmICghY2FzZVNlbnMgJiYgbGliLmlzU3RyaW5nKHgpICYmIGxpYi5pc1N0cmluZyh5KSkge1xuICAgICAgeCA9IHgudG9Mb3dlckNhc2UoKTtcbiAgICAgIHkgPSB5LnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgaWYgKHggPCB5KSB7XG4gICAgICByZXR1cm4gcmV2ZXJzZWQgPyAxIDogLTE7XG4gICAgfSBlbHNlIGlmICh4ID4geSkge1xuICAgICAgcmV0dXJuIHJldmVyc2VkID8gLTEgOiAxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYXJyYXk7XG59KTtcblxuZnVuY3Rpb24gc3RyaW5nKG9iaikge1xuICByZXR1cm4gci5jb3B5U2FmZW5lc3Mob2JqLCBvYmopO1xufVxuXG5leHBvcnRzLnN0cmluZyA9IHN0cmluZztcblxuZnVuY3Rpb24gc3RyaXB0YWdzKGlucHV0LCBwcmVzZXJ2ZUxpbmVicmVha3MpIHtcbiAgaW5wdXQgPSBub3JtYWxpemUoaW5wdXQsICcnKTtcbiAgdmFyIHRhZ3MgPSAvPFxcLz8oW2Etel1bYS16MC05XSopXFxiW14+XSo+fDwhLS1bXFxzXFxTXSo/LS0+L2dpO1xuICB2YXIgdHJpbW1lZElucHV0ID0gdHJpbShpbnB1dC5yZXBsYWNlKHRhZ3MsICcnKSk7XG4gIHZhciByZXMgPSAnJztcblxuICBpZiAocHJlc2VydmVMaW5lYnJlYWtzKSB7XG4gICAgcmVzID0gdHJpbW1lZElucHV0LnJlcGxhY2UoL14gK3wgKyQvZ20sICcnKSAvLyByZW1vdmUgbGVhZGluZyBhbmQgdHJhaWxpbmcgc3BhY2VzXG4gICAgLnJlcGxhY2UoLyArL2csICcgJykgLy8gc3F1YXNoIGFkamFjZW50IHNwYWNlc1xuICAgIC5yZXBsYWNlKC8oXFxyXFxuKS9nLCAnXFxuJykgLy8gbm9ybWFsaXplIGxpbmVicmVha3MgKENSTEYgLT4gTEYpXG4gICAgLnJlcGxhY2UoL1xcblxcblxcbisvZywgJ1xcblxcbicpOyAvLyBzcXVhc2ggYWJub3JtYWwgYWRqYWNlbnQgbGluZWJyZWFrc1xuICB9IGVsc2Uge1xuICAgIHJlcyA9IHRyaW1tZWRJbnB1dC5yZXBsYWNlKC9cXHMrL2dpLCAnICcpO1xuICB9XG5cbiAgcmV0dXJuIHIuY29weVNhZmVuZXNzKGlucHV0LCByZXMpO1xufVxuXG5leHBvcnRzLnN0cmlwdGFncyA9IHN0cmlwdGFncztcblxuZnVuY3Rpb24gdGl0bGUoc3RyKSB7XG4gIHN0ciA9IG5vcm1hbGl6ZShzdHIsICcnKTtcbiAgdmFyIHdvcmRzID0gc3RyLnNwbGl0KCcgJykubWFwKGZ1bmN0aW9uICh3b3JkKSB7XG4gICAgcmV0dXJuIGNhcGl0YWxpemUod29yZCk7XG4gIH0pO1xuICByZXR1cm4gci5jb3B5U2FmZW5lc3Moc3RyLCB3b3Jkcy5qb2luKCcgJykpO1xufVxuXG5leHBvcnRzLnRpdGxlID0gdGl0bGU7XG5cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiByLmNvcHlTYWZlbmVzcyhzdHIsIHN0ci5yZXBsYWNlKC9eXFxzKnxcXHMqJC9nLCAnJykpO1xufVxuXG5leHBvcnRzLnRyaW0gPSB0cmltO1xuXG5mdW5jdGlvbiB0cnVuY2F0ZShpbnB1dCwgbGVuZ3RoLCBraWxsd29yZHMsIGVuZCkge1xuICB2YXIgb3JpZyA9IGlucHV0O1xuICBpbnB1dCA9IG5vcm1hbGl6ZShpbnB1dCwgJycpO1xuICBsZW5ndGggPSBsZW5ndGggfHwgMjU1O1xuXG4gIGlmIChpbnB1dC5sZW5ndGggPD0gbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9XG5cbiAgaWYgKGtpbGx3b3Jkcykge1xuICAgIGlucHV0ID0gaW5wdXQuc3Vic3RyaW5nKDAsIGxlbmd0aCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGlkeCA9IGlucHV0Lmxhc3RJbmRleE9mKCcgJywgbGVuZ3RoKTtcblxuICAgIGlmIChpZHggPT09IC0xKSB7XG4gICAgICBpZHggPSBsZW5ndGg7XG4gICAgfVxuXG4gICAgaW5wdXQgPSBpbnB1dC5zdWJzdHJpbmcoMCwgaWR4KTtcbiAgfVxuXG4gIGlucHV0ICs9IGVuZCAhPT0gdW5kZWZpbmVkICYmIGVuZCAhPT0gbnVsbCA/IGVuZCA6ICcuLi4nO1xuICByZXR1cm4gci5jb3B5U2FmZW5lc3Mob3JpZywgaW5wdXQpO1xufVxuXG5leHBvcnRzLnRydW5jYXRlID0gdHJ1bmNhdGU7XG5cbmZ1bmN0aW9uIHVwcGVyKHN0cikge1xuICBzdHIgPSBub3JtYWxpemUoc3RyLCAnJyk7XG4gIHJldHVybiBzdHIudG9VcHBlckNhc2UoKTtcbn1cblxuZXhwb3J0cy51cHBlciA9IHVwcGVyO1xuXG5mdW5jdGlvbiB1cmxlbmNvZGUob2JqKSB7XG4gIHZhciBlbmMgPSBlbmNvZGVVUklDb21wb25lbnQ7XG5cbiAgaWYgKGxpYi5pc1N0cmluZyhvYmopKSB7XG4gICAgcmV0dXJuIGVuYyhvYmopO1xuICB9IGVsc2Uge1xuICAgIHZhciBrZXl2YWxzID0gbGliLmlzQXJyYXkob2JqKSA/IG9iaiA6IGxpYi5fZW50cmllcyhvYmopO1xuICAgIHJldHVybiBrZXl2YWxzLm1hcChmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgIHZhciBrID0gX3JlZjJbMF0sXG4gICAgICAgICAgdiA9IF9yZWYyWzFdO1xuICAgICAgcmV0dXJuIGVuYyhrKSArIFwiPVwiICsgZW5jKHYpO1xuICAgIH0pLmpvaW4oJyYnKTtcbiAgfVxufVxuXG5leHBvcnRzLnVybGVuY29kZSA9IHVybGVuY29kZTsgLy8gRm9yIHRoZSBqaW5qYSByZWdleHAsIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL21pdHN1aGlrby9qaW5qYTIvYmxvYi9mMTViODE0ZGNiYTZhYTEyYmM3NGQxZjdkMGM4ODFkNTVmNzEyNmJlL2ppbmphMi91dGlscy5weSNMMjAtTDIzXG5cbnZhciBwdW5jUmUgPSAvXig/OlxcKHw8fCZsdDspPyguKj8pKD86XFwufCx8XFwpfFxcbnwmZ3Q7KT8kLzsgLy8gZnJvbSBodHRwOi8vYmxvZy5nZXJ2Lm5ldC8yMDExLzA1L2h0bWw1X2VtYWlsX2FkZHJlc3NfcmVnZXhwL1xuXG52YXIgZW1haWxSZSA9IC9eW1xcdy4hIyQlJicqK1xcLVxcLz0/XFxeYHt8fX5dK0BbYS16XFxkXFwtXSsoXFwuW2EtelxcZFxcLV0rKSskL2k7XG52YXIgaHR0cEh0dHBzUmUgPSAvXmh0dHBzPzpcXC9cXC8uKiQvO1xudmFyIHd3d1JlID0gL153d3dcXC4vO1xudmFyIHRsZFJlID0gL1xcLig/Om9yZ3xuZXR8Y29tKSg/OlxcOnxcXC98JCkvO1xuXG5mdW5jdGlvbiB1cmxpemUoc3RyLCBsZW5ndGgsIG5vZm9sbG93KSB7XG4gIGlmIChpc05hTihsZW5ndGgpKSB7XG4gICAgbGVuZ3RoID0gSW5maW5pdHk7XG4gIH1cblxuICB2YXIgbm9Gb2xsb3dBdHRyID0gbm9mb2xsb3cgPT09IHRydWUgPyAnIHJlbD1cIm5vZm9sbG93XCInIDogJyc7XG4gIHZhciB3b3JkcyA9IHN0ci5zcGxpdCgvKFxccyspLykuZmlsdGVyKGZ1bmN0aW9uICh3b3JkKSB7XG4gICAgLy8gSWYgdGhlIHdvcmQgaGFzIG5vIGxlbmd0aCwgYmFpbC4gVGhpcyBjYW4gaGFwcGVuIGZvciBzdHIgd2l0aFxuICAgIC8vIHRyYWlsaW5nIHdoaXRlc3BhY2UuXG4gICAgcmV0dXJuIHdvcmQgJiYgd29yZC5sZW5ndGg7XG4gIH0pLm1hcChmdW5jdGlvbiAod29yZCkge1xuICAgIHZhciBtYXRjaGVzID0gd29yZC5tYXRjaChwdW5jUmUpO1xuICAgIHZhciBwb3NzaWJsZVVybCA9IG1hdGNoZXMgPyBtYXRjaGVzWzFdIDogd29yZDtcbiAgICB2YXIgc2hvcnRVcmwgPSBwb3NzaWJsZVVybC5zdWJzdHIoMCwgbGVuZ3RoKTsgLy8gdXJsIHRoYXQgc3RhcnRzIHdpdGggaHR0cCBvciBodHRwc1xuXG4gICAgaWYgKGh0dHBIdHRwc1JlLnRlc3QocG9zc2libGVVcmwpKSB7XG4gICAgICByZXR1cm4gXCI8YSBocmVmPVxcXCJcIiArIHBvc3NpYmxlVXJsICsgXCJcXFwiXCIgKyBub0ZvbGxvd0F0dHIgKyBcIj5cIiArIHNob3J0VXJsICsgXCI8L2E+XCI7XG4gICAgfSAvLyB1cmwgdGhhdCBzdGFydHMgd2l0aCB3d3cuXG5cblxuICAgIGlmICh3d3dSZS50ZXN0KHBvc3NpYmxlVXJsKSkge1xuICAgICAgcmV0dXJuIFwiPGEgaHJlZj1cXFwiaHR0cDovL1wiICsgcG9zc2libGVVcmwgKyBcIlxcXCJcIiArIG5vRm9sbG93QXR0ciArIFwiPlwiICsgc2hvcnRVcmwgKyBcIjwvYT5cIjtcbiAgICB9IC8vIGFuIGVtYWlsIGFkZHJlc3Mgb2YgdGhlIGZvcm0gdXNlcm5hbWVAZG9tYWluLnRsZFxuXG5cbiAgICBpZiAoZW1haWxSZS50ZXN0KHBvc3NpYmxlVXJsKSkge1xuICAgICAgcmV0dXJuIFwiPGEgaHJlZj1cXFwibWFpbHRvOlwiICsgcG9zc2libGVVcmwgKyBcIlxcXCI+XCIgKyBwb3NzaWJsZVVybCArIFwiPC9hPlwiO1xuICAgIH0gLy8gdXJsIHRoYXQgZW5kcyBpbiAuY29tLCAub3JnIG9yIC5uZXQgdGhhdCBpcyBub3QgYW4gZW1haWwgYWRkcmVzc1xuXG5cbiAgICBpZiAodGxkUmUudGVzdChwb3NzaWJsZVVybCkpIHtcbiAgICAgIHJldHVybiBcIjxhIGhyZWY9XFxcImh0dHA6Ly9cIiArIHBvc3NpYmxlVXJsICsgXCJcXFwiXCIgKyBub0ZvbGxvd0F0dHIgKyBcIj5cIiArIHNob3J0VXJsICsgXCI8L2E+XCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHdvcmQ7XG4gIH0pO1xuICByZXR1cm4gd29yZHMuam9pbignJyk7XG59XG5cbmV4cG9ydHMudXJsaXplID0gdXJsaXplO1xuXG5mdW5jdGlvbiB3b3JkY291bnQoc3RyKSB7XG4gIHN0ciA9IG5vcm1hbGl6ZShzdHIsICcnKTtcbiAgdmFyIHdvcmRzID0gc3RyID8gc3RyLm1hdGNoKC9cXHcrL2cpIDogbnVsbDtcbiAgcmV0dXJuIHdvcmRzID8gd29yZHMubGVuZ3RoIDogbnVsbDtcbn1cblxuZXhwb3J0cy53b3JkY291bnQgPSB3b3JkY291bnQ7XG5cbmZ1bmN0aW9uIGZsb2F0KHZhbCwgZGVmKSB7XG4gIHZhciByZXMgPSBwYXJzZUZsb2F0KHZhbCk7XG4gIHJldHVybiBpc05hTihyZXMpID8gZGVmIDogcmVzO1xufVxuXG5leHBvcnRzLmZsb2F0ID0gZmxvYXQ7XG5cbmZ1bmN0aW9uIGludCh2YWwsIGRlZikge1xuICB2YXIgcmVzID0gcGFyc2VJbnQodmFsLCAxMCk7XG4gIHJldHVybiBpc05hTihyZXMpID8gZGVmIDogcmVzO1xufVxuXG5leHBvcnRzLmludCA9IGludDsgLy8gQWxpYXNlc1xuXG5leHBvcnRzLmQgPSBleHBvcnRzLmRlZmF1bHQ7XG5leHBvcnRzLmUgPSBleHBvcnRzLmVzY2FwZTtcblxuLyoqKi8gfSksXG4vKiAxOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIExvYWRlciA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cbnZhciBQcmVjb21waWxlZExvYWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0xvYWRlcikge1xuICBfaW5oZXJpdHNMb29zZShQcmVjb21waWxlZExvYWRlciwgX0xvYWRlcik7XG5cbiAgZnVuY3Rpb24gUHJlY29tcGlsZWRMb2FkZXIoY29tcGlsZWRUZW1wbGF0ZXMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9Mb2FkZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIF90aGlzLnByZWNvbXBpbGVkID0gY29tcGlsZWRUZW1wbGF0ZXMgfHwge307XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFByZWNvbXBpbGVkTG9hZGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0U291cmNlID0gZnVuY3Rpb24gZ2V0U291cmNlKG5hbWUpIHtcbiAgICBpZiAodGhpcy5wcmVjb21waWxlZFtuYW1lXSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3JjOiB7XG4gICAgICAgICAgdHlwZTogJ2NvZGUnLFxuICAgICAgICAgIG9iajogdGhpcy5wcmVjb21waWxlZFtuYW1lXVxuICAgICAgICB9LFxuICAgICAgICBwYXRoOiBuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBQcmVjb21waWxlZExvYWRlcjtcbn0oTG9hZGVyKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFByZWNvbXBpbGVkTG9hZGVyOiBQcmVjb21waWxlZExvYWRlclxufTtcblxuLyoqKi8gfSksXG4vKiAyMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgU2FmZVN0cmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oMikuU2FmZVN0cmluZztcbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdCBpcyBhIGZ1bmN0aW9uLCBvdGhlcndpc2UgYGZhbHNlYC5cbiAqIEBwYXJhbSB7IGFueSB9IHZhbHVlXG4gKiBAcmV0dXJucyB7IGJvb2xlYW4gfVxuICovXG5cblxuZnVuY3Rpb24gY2FsbGFibGUodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZXhwb3J0cy5jYWxsYWJsZSA9IGNhbGxhYmxlO1xuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0IGlzIHN0cmljdGx5IG5vdCBgdW5kZWZpbmVkYC5cbiAqIEBwYXJhbSB7IGFueSB9IHZhbHVlXG4gKiBAcmV0dXJucyB7IGJvb2xlYW4gfVxuICovXG5cbmZ1bmN0aW9uIGRlZmluZWQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydHMuZGVmaW5lZCA9IGRlZmluZWQ7XG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBvcGVyYW5kIChvbmUpIGlzIGRpdmlzYmxlIGJ5IHRoZSB0ZXN0J3MgYXJndW1lbnRcbiAqICh0d28pLlxuICogQHBhcmFtIHsgbnVtYmVyIH0gb25lXG4gKiBAcGFyYW0geyBudW1iZXIgfSB0d29cbiAqIEByZXR1cm5zIHsgYm9vbGVhbiB9XG4gKi9cblxuZnVuY3Rpb24gZGl2aXNpYmxlYnkob25lLCB0d28pIHtcbiAgcmV0dXJuIG9uZSAlIHR3byA9PT0gMDtcbn1cblxuZXhwb3J0cy5kaXZpc2libGVieSA9IGRpdmlzaWJsZWJ5O1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHN0cmluZyBoYXMgYmVlbiBlc2NhcGVkIChpLmUuLCBpcyBhIFNhZmVTdHJpbmcpLlxuICogQHBhcmFtIHsgYW55IH0gdmFsdWVcbiAqIEByZXR1cm5zIHsgYm9vbGVhbiB9XG4gKi9cblxuZnVuY3Rpb24gZXNjYXBlZCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBTYWZlU3RyaW5nO1xufVxuXG5leHBvcnRzLmVzY2FwZWQgPSBlc2NhcGVkO1xuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqIEBwYXJhbSB7IGFueSB9IG9uZVxuICogQHBhcmFtIHsgYW55IH0gdHdvXG4gKi9cblxuZnVuY3Rpb24gZXF1YWx0byhvbmUsIHR3bykge1xuICByZXR1cm4gb25lID09PSB0d287XG59XG5cbmV4cG9ydHMuZXF1YWx0byA9IGVxdWFsdG87IC8vIEFsaWFzZXNcblxuZXhwb3J0cy5lcSA9IGV4cG9ydHMuZXF1YWx0bztcbmV4cG9ydHMuc2FtZWFzID0gZXhwb3J0cy5lcXVhbHRvO1xuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWUgaXMgZXZlbmx5IGRpdmlzaWJsZSBieSAyLlxuICogQHBhcmFtIHsgbnVtYmVyIH0gdmFsdWVcbiAqIEByZXR1cm5zIHsgYm9vbGVhbiB9XG4gKi9cblxuZnVuY3Rpb24gZXZlbih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgJSAyID09PSAwO1xufVxuXG5leHBvcnRzLmV2ZW4gPSBldmVuO1xuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWUgaXMgZmFsc3kgLSBpZiBJIHJlY2FsbCBjb3JyZWN0bHksICcnLCAwLCBmYWxzZSxcbiAqIHVuZGVmaW5lZCwgTmFOIG9yIG51bGwuIEkgZG9uJ3Qga25vdyBpZiB3ZSBzaG91bGQgc3RpY2sgdG8gdGhlIGRlZmF1bHQgSlNcbiAqIGJlaGF2aW9yIG9yIGF0dGVtcHQgdG8gcmVwbGljYXRlIHdoYXQgUHl0aG9uIGJlbGlldmVzIHNob3VsZCBiZSBmYWxzeSAoaS5lLixcbiAqIGVtcHR5IGFycmF5cywgZW1wdHkgZGljdHMsIG5vdCAwLi4uKS5cbiAqIEBwYXJhbSB7IGFueSB9IHZhbHVlXG4gKiBAcmV0dXJucyB7IGJvb2xlYW4gfVxuICovXG5cbmZ1bmN0aW9uIGZhbHN5KHZhbHVlKSB7XG4gIHJldHVybiAhdmFsdWU7XG59XG5cbmV4cG9ydHMuZmFsc3kgPSBmYWxzeTtcbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9wZXJhbmQgKG9uZSkgaXMgZ3JlYXRlciBvciBlcXVhbCB0byB0aGUgdGVzdCdzXG4gKiBhcmd1bWVudCAodHdvKS5cbiAqIEBwYXJhbSB7IG51bWJlciB9IG9uZVxuICogQHBhcmFtIHsgbnVtYmVyIH0gdHdvXG4gKiBAcmV0dXJucyB7IGJvb2xlYW4gfVxuICovXG5cbmZ1bmN0aW9uIGdlKG9uZSwgdHdvKSB7XG4gIHJldHVybiBvbmUgPj0gdHdvO1xufVxuXG5leHBvcnRzLmdlID0gZ2U7XG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBvcGVyYW5kIChvbmUpIGlzIGdyZWF0ZXIgdGhhbiB0aGUgdGVzdCdzIGFyZ3VtZW50XG4gKiAodHdvKS5cbiAqIEBwYXJhbSB7IG51bWJlciB9IG9uZVxuICogQHBhcmFtIHsgbnVtYmVyIH0gdHdvXG4gKiBAcmV0dXJucyB7IGJvb2xlYW4gfVxuICovXG5cbmZ1bmN0aW9uIGdyZWF0ZXJ0aGFuKG9uZSwgdHdvKSB7XG4gIHJldHVybiBvbmUgPiB0d287XG59XG5cbmV4cG9ydHMuZ3JlYXRlcnRoYW4gPSBncmVhdGVydGhhbjsgLy8gYWxpYXNcblxuZXhwb3J0cy5ndCA9IGV4cG9ydHMuZ3JlYXRlcnRoYW47XG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBvcGVyYW5kIChvbmUpIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgdGVzdCdzXG4gKiBhcmd1bWVudCAodHdvKS5cbiAqIEBwYXJhbSB7IG51bWJlciB9IG9uZVxuICogQHBhcmFtIHsgbnVtYmVyIH0gdHdvXG4gKiBAcmV0dXJucyB7IGJvb2xlYW4gfVxuICovXG5cbmZ1bmN0aW9uIGxlKG9uZSwgdHdvKSB7XG4gIHJldHVybiBvbmUgPD0gdHdvO1xufVxuXG5leHBvcnRzLmxlID0gbGU7XG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBvcGVyYW5kIChvbmUpIGlzIGxlc3MgdGhhbiB0aGUgdGVzdCdzIHBhc3NlZCBhcmd1bWVudFxuICogKHR3bykuXG4gKiBAcGFyYW0geyBudW1iZXIgfSBvbmVcbiAqIEBwYXJhbSB7IG51bWJlciB9IHR3b1xuICogQHJldHVybnMgeyBib29sZWFuIH1cbiAqL1xuXG5mdW5jdGlvbiBsZXNzdGhhbihvbmUsIHR3bykge1xuICByZXR1cm4gb25lIDwgdHdvO1xufVxuXG5leHBvcnRzLmxlc3N0aGFuID0gbGVzc3RoYW47IC8vIGFsaWFzXG5cbmV4cG9ydHMubHQgPSBleHBvcnRzLmxlc3N0aGFuO1xuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgc3RyaW5nIGlzIGxvd2VyY2FzZWQuXG4gKiBAcGFyYW0geyBzdHJpbmcgfSB2YWx1ZVxuICogQHJldHVybnMgeyBib29sZWFuIH1cbiAqL1xuXG5mdW5jdGlvbiBsb3dlcih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gdmFsdWU7XG59XG5cbmV4cG9ydHMubG93ZXIgPSBsb3dlcjtcbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9wZXJhbmQgKG9uZSkgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSB0ZXN0J3NcbiAqIGFyZ3VtZW50ICh0d28pLlxuICogQHBhcmFtIHsgbnVtYmVyIH0gb25lXG4gKiBAcGFyYW0geyBudW1iZXIgfSB0d29cbiAqIEByZXR1cm5zIHsgYm9vbGVhbiB9XG4gKi9cblxuZnVuY3Rpb24gbmUob25lLCB0d28pIHtcbiAgcmV0dXJuIG9uZSAhPT0gdHdvO1xufVxuXG5leHBvcnRzLm5lID0gbmU7XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgdmFsdWUgaXMgc3RyaWN0bHkgZXF1YWwgdG8gYG51bGxgLlxuICogQHBhcmFtIHsgYW55IH1cbiAqIEByZXR1cm5zIHsgYm9vbGVhbiB9XG4gKi9cblxuZnVuY3Rpb24gbnVsbFRlc3QodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBudWxsO1xufVxuXG5leHBvcnRzLm51bGwgPSBudWxsVGVzdDtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQHBhcmFtIHsgYW55IH1cbiAqIEByZXR1cm5zIHsgYm9vbGVhbiB9XG4gKi9cblxuZnVuY3Rpb24gbnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xufVxuXG5leHBvcnRzLm51bWJlciA9IG51bWJlcjtcbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlIGlzICpub3QqIGV2ZW5seSBkaXZpc2libGUgYnkgMi5cbiAqIEBwYXJhbSB7IG51bWJlciB9IHZhbHVlXG4gKiBAcmV0dXJucyB7IGJvb2xlYW4gfVxuICovXG5cbmZ1bmN0aW9uIG9kZCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgJSAyID09PSAxO1xufVxuXG5leHBvcnRzLm9kZCA9IG9kZDtcbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlIGlzIGEgc3RyaW5nLCBgZmFsc2VgIGlmIG5vdC5cbiAqIEBwYXJhbSB7IGFueSB9IHZhbHVlXG4gKiBAcmV0dXJucyB7IGJvb2xlYW4gfVxuICovXG5cbmZ1bmN0aW9uIHN0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbn1cblxuZXhwb3J0cy5zdHJpbmcgPSBzdHJpbmc7XG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZSBpcyBub3QgaW4gdGhlIGxpc3Qgb2YgdGhpbmdzIGNvbnNpZGVyZWQgZmFsc3k6XG4gKiAnJywgbnVsbCwgdW5kZWZpbmVkLCAwLCBOYU4gYW5kIGZhbHNlLlxuICogQHBhcmFtIHsgYW55IH0gdmFsdWVcbiAqIEByZXR1cm5zIHsgYm9vbGVhbiB9XG4gKi9cblxuZnVuY3Rpb24gdHJ1dGh5KHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlO1xufVxuXG5leHBvcnRzLnRydXRoeSA9IHRydXRoeTtcbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZC5cbiAqIEBwYXJhbSB7IGFueSB9IHZhbHVlXG4gKiBAcmV0dXJucyB7IGJvb2xlYW4gfVxuICovXG5cbmZ1bmN0aW9uIHVuZGVmaW5lZFRlc3QodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydHMudW5kZWZpbmVkID0gdW5kZWZpbmVkVGVzdDtcbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHN0cmluZyBpcyB1cHBlcmNhc2VkLlxuICogQHBhcmFtIHsgc3RyaW5nIH0gdmFsdWVcbiAqIEByZXR1cm5zIHsgYm9vbGVhbiB9XG4gKi9cblxuZnVuY3Rpb24gdXBwZXIodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlLnRvVXBwZXJDYXNlKCkgPT09IHZhbHVlO1xufVxuXG5leHBvcnRzLnVwcGVyID0gdXBwZXI7XG4vKipcbiAqIElmIEVTNiBmZWF0dXJlcyBhcmUgYXZhaWxhYmxlLCByZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWUgaW1wbGVtZW50cyB0aGVcbiAqIGBTeW1ib2wuaXRlcmF0b3JgIG1ldGhvZC4gSWYgbm90LCBpdCdzIGEgc3RyaW5nIG9yIEFycmF5LlxuICpcbiAqIENvdWxkIHBvdGVudGlhbGx5IGNhdXNlIGlzc3VlcyBpZiBhIGJyb3dzZXIgZXhpc3RzIHRoYXQgaGFzIFNldCBhbmQgTWFwIGJ1dFxuICogbm90IFN5bWJvbC5cbiAqXG4gKiBAcGFyYW0geyBhbnkgfSB2YWx1ZVxuICogQHJldHVybnMgeyBib29sZWFuIH1cbiAqL1xuXG5mdW5jdGlvbiBpdGVyYWJsZSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gISF2YWx1ZVtTeW1ib2wuaXRlcmF0b3JdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xuICB9XG59XG5cbmV4cG9ydHMuaXRlcmFibGUgPSBpdGVyYWJsZTtcbi8qKlxuICogSWYgRVM2IGZlYXR1cmVzIGFyZSBhdmFpbGFibGUsIHJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZSBpcyBhbiBvYmplY3QgaGFzaFxuICogb3IgYW4gRVM2IE1hcC4gT3RoZXJ3aXNlIGp1c3QgcmV0dXJuIGlmIGl0J3MgYW4gb2JqZWN0IGhhc2guXG4gKiBAcGFyYW0geyBhbnkgfSB2YWx1ZVxuICogQHJldHVybnMgeyBib29sZWFuIH1cbiAqL1xuXG5mdW5jdGlvbiBtYXBwaW5nKHZhbHVlKSB7XG4gIC8vIG9ubHkgbWFwcyBhbmQgb2JqZWN0IGhhc2hlc1xuICB2YXIgYm9vbCA9IHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG5cbiAgaWYgKFNldCkge1xuICAgIHJldHVybiBib29sICYmICEodmFsdWUgaW5zdGFuY2VvZiBTZXQpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBib29sO1xuICB9XG59XG5cbmV4cG9ydHMubWFwcGluZyA9IG1hcHBpbmc7XG5cbi8qKiovIH0pLFxuLyogMjEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gX2N5Y2xlcihpdGVtcykge1xuICB2YXIgaW5kZXggPSAtMTtcbiAgcmV0dXJuIHtcbiAgICBjdXJyZW50OiBudWxsLFxuICAgIHJlc2V0OiBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIGluZGV4ID0gLTE7XG4gICAgICB0aGlzLmN1cnJlbnQgPSBudWxsO1xuICAgIH0sXG4gICAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIGluZGV4Kys7XG5cbiAgICAgIGlmIChpbmRleCA+PSBpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgaW5kZXggPSAwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmN1cnJlbnQgPSBpdGVtc1tpbmRleF07XG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50O1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gX2pvaW5lcihzZXApIHtcbiAgc2VwID0gc2VwIHx8ICcsJztcbiAgdmFyIGZpcnN0ID0gdHJ1ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsID0gZmlyc3QgPyAnJyA6IHNlcDtcbiAgICBmaXJzdCA9IGZhbHNlO1xuICAgIHJldHVybiB2YWw7XG4gIH07XG59IC8vIE1ha2luZyB0aGlzIGEgZnVuY3Rpb24gaW5zdGVhZCBzbyBpdCByZXR1cm5zIGEgbmV3IG9iamVjdFxuLy8gZWFjaCB0aW1lIGl0J3MgY2FsbGVkLiBUaGF0IHdheSwgaWYgc29tZXRoaW5nIGxpa2UgYW4gZW52aXJvbm1lbnRcbi8vIHVzZXMgaXQsIHRoZXkgd2lsbCBlYWNoIGhhdmUgdGhlaXIgb3duIGNvcHkuXG5cblxuZnVuY3Rpb24gZ2xvYmFscygpIHtcbiAgcmV0dXJuIHtcbiAgICByYW5nZTogZnVuY3Rpb24gcmFuZ2Uoc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICAgIGlmICh0eXBlb2Ygc3RvcCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc3RvcCA9IHN0YXJ0O1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIHN0ZXAgPSAxO1xuICAgICAgfSBlbHNlIGlmICghc3RlcCkge1xuICAgICAgICBzdGVwID0gMTtcbiAgICAgIH1cblxuICAgICAgdmFyIGFyciA9IFtdO1xuXG4gICAgICBpZiAoc3RlcCA+IDApIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgc3RvcDsgaSArPSBzdGVwKSB7XG4gICAgICAgICAgYXJyLnB1c2goaSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAodmFyIF9pID0gc3RhcnQ7IF9pID4gc3RvcDsgX2kgKz0gc3RlcCkge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZm9yLWRpcmVjdGlvblxuICAgICAgICAgIGFyci5wdXNoKF9pKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXJyO1xuICAgIH0sXG4gICAgY3ljbGVyOiBmdW5jdGlvbiBjeWNsZXIoKSB7XG4gICAgICByZXR1cm4gX2N5Y2xlcihBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICB9LFxuICAgIGpvaW5lcjogZnVuY3Rpb24gam9pbmVyKHNlcCkge1xuICAgICAgcmV0dXJuIF9qb2luZXIoc2VwKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFscztcblxuLyoqKi8gfSksXG4vKiAyMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgcGF0aCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXhwcmVzcyhlbnYsIGFwcCkge1xuICBmdW5jdGlvbiBOdW5qdWNrc1ZpZXcobmFtZSwgb3B0cykge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5wYXRoID0gbmFtZTtcbiAgICB0aGlzLmRlZmF1bHRFbmdpbmUgPSBvcHRzLmRlZmF1bHRFbmdpbmU7XG4gICAgdGhpcy5leHQgPSBwYXRoLmV4dG5hbWUobmFtZSk7XG5cbiAgICBpZiAoIXRoaXMuZXh0ICYmICF0aGlzLmRlZmF1bHRFbmdpbmUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gZGVmYXVsdCBlbmdpbmUgd2FzIHNwZWNpZmllZCBhbmQgbm8gZXh0ZW5zaW9uIHdhcyBwcm92aWRlZC4nKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuZXh0KSB7XG4gICAgICB0aGlzLm5hbWUgKz0gdGhpcy5leHQgPSAodGhpcy5kZWZhdWx0RW5naW5lWzBdICE9PSAnLicgPyAnLicgOiAnJykgKyB0aGlzLmRlZmF1bHRFbmdpbmU7XG4gICAgfVxuICB9XG5cbiAgTnVuanVja3NWaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIob3B0cywgY2IpIHtcbiAgICBlbnYucmVuZGVyKHRoaXMubmFtZSwgb3B0cywgY2IpO1xuICB9O1xuXG4gIGFwcC5zZXQoJ3ZpZXcnLCBOdW5qdWNrc1ZpZXcpO1xuICBhcHAuc2V0KCdudW5qdWNrc0VudicsIGVudik7XG4gIHJldHVybiBlbnY7XG59O1xuXG4vKioqLyB9KSxcbi8qIDIzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBmcyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBwYXRoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxudmFyIF9yZXF1aXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKSxcbiAgICBfcHJldHRpZnlFcnJvciA9IF9yZXF1aXJlLl9wcmV0dGlmeUVycm9yO1xuXG52YXIgY29tcGlsZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG52YXIgX3JlcXVpcmUyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KSxcbiAgICBFbnZpcm9ubWVudCA9IF9yZXF1aXJlMi5FbnZpcm9ubWVudDtcblxudmFyIHByZWNvbXBpbGVHbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KTtcblxuZnVuY3Rpb24gbWF0Y2goZmlsZW5hbWUsIHBhdHRlcm5zKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShwYXR0ZXJucykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gcGF0dGVybnMuc29tZShmdW5jdGlvbiAocGF0dGVybikge1xuICAgIHJldHVybiBmaWxlbmFtZS5tYXRjaChwYXR0ZXJuKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHByZWNvbXBpbGVTdHJpbmcoc3RyLCBvcHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuICBvcHRzLmlzU3RyaW5nID0gdHJ1ZTtcbiAgdmFyIGVudiA9IG9wdHMuZW52IHx8IG5ldyBFbnZpcm9ubWVudChbXSk7XG4gIHZhciB3cmFwcGVyID0gb3B0cy53cmFwcGVyIHx8IHByZWNvbXBpbGVHbG9iYWw7XG5cbiAgaWYgKCFvcHRzLm5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3RoZSBcIm5hbWVcIiBvcHRpb24gaXMgcmVxdWlyZWQgd2hlbiBjb21waWxpbmcgYSBzdHJpbmcnKTtcbiAgfVxuXG4gIHJldHVybiB3cmFwcGVyKFtfcHJlY29tcGlsZShzdHIsIG9wdHMubmFtZSwgZW52KV0sIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBwcmVjb21waWxlKGlucHV0LCBvcHRzKSB7XG4gIC8vIFRoZSBmb2xsb3dpbmcgb3B0aW9ucyBhcmUgYXZhaWxhYmxlOlxuICAvL1xuICAvLyAqIG5hbWU6IG5hbWUgb2YgdGhlIHRlbXBsYXRlIChhdXRvLWdlbmVyYXRlZCB3aGVuIGNvbXBpbGluZyBhIGRpcmVjdG9yeSlcbiAgLy8gKiBpc1N0cmluZzogaW5wdXQgaXMgYSBzdHJpbmcsIG5vdCBhIGZpbGUgcGF0aFxuICAvLyAqIGFzRnVuY3Rpb246IGdlbmVyYXRlIGEgY2FsbGFibGUgZnVuY3Rpb25cbiAgLy8gKiBmb3JjZToga2VlcCBjb21waWxpbmcgb24gZXJyb3JcbiAgLy8gKiBlbnY6IHRoZSBFbnZpcm9ubWVudCB0byB1c2UgKGdldHMgZXh0ZW5zaW9ucyBhbmQgYXN5bmMgZmlsdGVycyBmcm9tIGl0KVxuICAvLyAqIGluY2x1ZGU6IHdoaWNoIGZpbGUvZm9sZGVycyB0byBpbmNsdWRlIChmb2xkZXJzIGFyZSBhdXRvLWluY2x1ZGVkLCBmaWxlcyBhcmUgYXV0by1leGNsdWRlZClcbiAgLy8gKiBleGNsdWRlOiB3aGljaCBmaWxlL2ZvbGRlcnMgdG8gZXhjbHVkZSAoZm9sZGVycyBhcmUgYXV0by1pbmNsdWRlZCwgZmlsZXMgYXJlIGF1dG8tZXhjbHVkZWQpXG4gIC8vICogd3JhcHBlcjogZnVuY3Rpb24odGVtcGxhdGVzLCBvcHRzKSB7Li4ufVxuICAvLyAgICAgICBDdXN0b21pemUgdGhlIG91dHB1dCBmb3JtYXQgdG8gc3RvcmUgdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAvLyAgICAgICBCeSBkZWZhdWx0LCB0ZW1wbGF0ZXMgYXJlIHN0b3JlZCBpbiBhIGdsb2JhbCB2YXJpYWJsZSB1c2VkIGJ5IHRoZSBydW50aW1lLlxuICAvLyAgICAgICBBIGN1c3RvbSBsb2FkZXIgd2lsbCBiZSBuZWNlc3NhcnkgdG8gbG9hZCB5b3VyIGN1c3RvbSB3cmFwcGVyLlxuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgdmFyIGVudiA9IG9wdHMuZW52IHx8IG5ldyBFbnZpcm9ubWVudChbXSk7XG4gIHZhciB3cmFwcGVyID0gb3B0cy53cmFwcGVyIHx8IHByZWNvbXBpbGVHbG9iYWw7XG5cbiAgaWYgKG9wdHMuaXNTdHJpbmcpIHtcbiAgICByZXR1cm4gcHJlY29tcGlsZVN0cmluZyhpbnB1dCwgb3B0cyk7XG4gIH1cblxuICB2YXIgcGF0aFN0YXRzID0gZnMuZXhpc3RzU3luYyhpbnB1dCkgJiYgZnMuc3RhdFN5bmMoaW5wdXQpO1xuICB2YXIgcHJlY29tcGlsZWQgPSBbXTtcbiAgdmFyIHRlbXBsYXRlcyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFkZFRlbXBsYXRlcyhkaXIpIHtcbiAgICBmcy5yZWFkZGlyU3luYyhkaXIpLmZvckVhY2goZnVuY3Rpb24gKGZpbGUpIHtcbiAgICAgIHZhciBmaWxlcGF0aCA9IHBhdGguam9pbihkaXIsIGZpbGUpO1xuICAgICAgdmFyIHN1YnBhdGggPSBmaWxlcGF0aC5zdWJzdHIocGF0aC5qb2luKGlucHV0LCAnLycpLmxlbmd0aCk7XG4gICAgICB2YXIgc3RhdCA9IGZzLnN0YXRTeW5jKGZpbGVwYXRoKTtcblxuICAgICAgaWYgKHN0YXQgJiYgc3RhdC5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgIHN1YnBhdGggKz0gJy8nO1xuXG4gICAgICAgIGlmICghbWF0Y2goc3VicGF0aCwgb3B0cy5leGNsdWRlKSkge1xuICAgICAgICAgIGFkZFRlbXBsYXRlcyhmaWxlcGF0aCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobWF0Y2goc3VicGF0aCwgb3B0cy5pbmNsdWRlKSkge1xuICAgICAgICB0ZW1wbGF0ZXMucHVzaChmaWxlcGF0aCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAocGF0aFN0YXRzLmlzRmlsZSgpKSB7XG4gICAgcHJlY29tcGlsZWQucHVzaChfcHJlY29tcGlsZShmcy5yZWFkRmlsZVN5bmMoaW5wdXQsICd1dGYtOCcpLCBvcHRzLm5hbWUgfHwgaW5wdXQsIGVudikpO1xuICB9IGVsc2UgaWYgKHBhdGhTdGF0cy5pc0RpcmVjdG9yeSgpKSB7XG4gICAgYWRkVGVtcGxhdGVzKGlucHV0KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGVtcGxhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbmFtZSA9IHRlbXBsYXRlc1tpXS5yZXBsYWNlKHBhdGguam9pbihpbnB1dCwgJy8nKSwgJycpO1xuXG4gICAgICB0cnkge1xuICAgICAgICBwcmVjb21waWxlZC5wdXNoKF9wcmVjb21waWxlKGZzLnJlYWRGaWxlU3luYyh0ZW1wbGF0ZXNbaV0sICd1dGYtOCcpLCBuYW1lLCBlbnYpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKG9wdHMuZm9yY2UpIHtcbiAgICAgICAgICAvLyBEb24ndCBzdG9wIGdlbmVyYXRpbmcgdGhlIG91dHB1dCBpZiB3ZSdyZVxuICAgICAgICAgIC8vIGZvcmNpbmcgY29tcGlsYXRpb24uXG4gICAgICAgICAgY29uc29sZS5lcnJvcihlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB3cmFwcGVyKHByZWNvbXBpbGVkLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gX3ByZWNvbXBpbGUoc3RyLCBuYW1lLCBlbnYpIHtcbiAgZW52ID0gZW52IHx8IG5ldyBFbnZpcm9ubWVudChbXSk7XG4gIHZhciBhc3luY0ZpbHRlcnMgPSBlbnYuYXN5bmNGaWx0ZXJzO1xuICB2YXIgZXh0ZW5zaW9ucyA9IGVudi5leHRlbnNpb25zTGlzdDtcbiAgdmFyIHRlbXBsYXRlO1xuICBuYW1lID0gbmFtZS5yZXBsYWNlKC9cXFxcL2csICcvJyk7XG5cbiAgdHJ5IHtcbiAgICB0ZW1wbGF0ZSA9IGNvbXBpbGVyLmNvbXBpbGUoc3RyLCBhc3luY0ZpbHRlcnMsIGV4dGVuc2lvbnMsIG5hbWUsIGVudi5vcHRzKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhyb3cgX3ByZXR0aWZ5RXJyb3IobmFtZSwgZmFsc2UsIGVycik7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgdGVtcGxhdGU6IHRlbXBsYXRlXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwcmVjb21waWxlOiBwcmVjb21waWxlLFxuICBwcmVjb21waWxlU3RyaW5nOiBwcmVjb21waWxlU3RyaW5nXG59O1xuXG4vKioqLyB9KSxcbi8qIDI0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIHByZWNvbXBpbGVHbG9iYWwodGVtcGxhdGVzLCBvcHRzKSB7XG4gIHZhciBvdXQgPSAnJztcbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZW1wbGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbmFtZSA9IEpTT04uc3RyaW5naWZ5KHRlbXBsYXRlc1tpXS5uYW1lKTtcbiAgICB2YXIgdGVtcGxhdGUgPSB0ZW1wbGF0ZXNbaV0udGVtcGxhdGU7XG4gICAgb3V0ICs9ICcoZnVuY3Rpb24oKSB7JyArICcod2luZG93Lm51bmp1Y2tzUHJlY29tcGlsZWQgPSB3aW5kb3cubnVuanVja3NQcmVjb21waWxlZCB8fCB7fSknICsgJ1snICsgbmFtZSArICddID0gKGZ1bmN0aW9uKCkge1xcbicgKyB0ZW1wbGF0ZSArICdcXG59KSgpO1xcbic7XG5cbiAgICBpZiAob3B0cy5hc0Z1bmN0aW9uKSB7XG4gICAgICBvdXQgKz0gJ3JldHVybiBmdW5jdGlvbihjdHgsIGNiKSB7IHJldHVybiBudW5qdWNrcy5yZW5kZXIoJyArIG5hbWUgKyAnLCBjdHgsIGNiKTsgfVxcbic7XG4gICAgfVxuXG4gICAgb3V0ICs9ICd9KSgpO1xcbic7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHByZWNvbXBpbGVHbG9iYWw7XG5cbi8qKiovIH0pLFxuLyogMjUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZnVuY3Rpb24gaW5zdGFsbENvbXBhdCgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cbiAgLy8gVGhpcyBtdXN0IGJlIGNhbGxlZCBsaWtlIGBudW5qdWNrcy5pbnN0YWxsQ29tcGF0YCBzbyB0aGF0IGB0aGlzYFxuICAvLyByZWZlcmVuY2VzIHRoZSBudW5qdWNrcyBpbnN0YW5jZVxuXG4gIHZhciBydW50aW1lID0gdGhpcy5ydW50aW1lO1xuICB2YXIgbGliID0gdGhpcy5saWI7IC8vIEhhbmRsZSBzbGltIGNhc2Ugd2hlcmUgdGhlc2UgJ21vZHVsZXMnIGFyZSBleGNsdWRlZCBmcm9tIHRoZSBidWlsdCBzb3VyY2VcblxuICB2YXIgQ29tcGlsZXIgPSB0aGlzLmNvbXBpbGVyLkNvbXBpbGVyO1xuICB2YXIgUGFyc2VyID0gdGhpcy5wYXJzZXIuUGFyc2VyO1xuICB2YXIgbm9kZXMgPSB0aGlzLm5vZGVzO1xuICB2YXIgbGV4ZXIgPSB0aGlzLmxleGVyO1xuICB2YXIgb3JpZ19jb250ZXh0T3JGcmFtZUxvb2t1cCA9IHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXA7XG4gIHZhciBvcmlnX21lbWJlckxvb2t1cCA9IHJ1bnRpbWUubWVtYmVyTG9va3VwO1xuICB2YXIgb3JpZ19Db21waWxlcl9hc3NlcnRUeXBlO1xuICB2YXIgb3JpZ19QYXJzZXJfcGFyc2VBZ2dyZWdhdGU7XG5cbiAgaWYgKENvbXBpbGVyKSB7XG4gICAgb3JpZ19Db21waWxlcl9hc3NlcnRUeXBlID0gQ29tcGlsZXIucHJvdG90eXBlLmFzc2VydFR5cGU7XG4gIH1cblxuICBpZiAoUGFyc2VyKSB7XG4gICAgb3JpZ19QYXJzZXJfcGFyc2VBZ2dyZWdhdGUgPSBQYXJzZXIucHJvdG90eXBlLnBhcnNlQWdncmVnYXRlO1xuICB9XG5cbiAgZnVuY3Rpb24gdW5pbnN0YWxsKCkge1xuICAgIHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAgPSBvcmlnX2NvbnRleHRPckZyYW1lTG9va3VwO1xuICAgIHJ1bnRpbWUubWVtYmVyTG9va3VwID0gb3JpZ19tZW1iZXJMb29rdXA7XG5cbiAgICBpZiAoQ29tcGlsZXIpIHtcbiAgICAgIENvbXBpbGVyLnByb3RvdHlwZS5hc3NlcnRUeXBlID0gb3JpZ19Db21waWxlcl9hc3NlcnRUeXBlO1xuICAgIH1cblxuICAgIGlmIChQYXJzZXIpIHtcbiAgICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VBZ2dyZWdhdGUgPSBvcmlnX1BhcnNlcl9wYXJzZUFnZ3JlZ2F0ZTtcbiAgICB9XG4gIH1cblxuICBydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwID0gZnVuY3Rpb24gY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIGtleSkge1xuICAgIHZhciB2YWwgPSBvcmlnX2NvbnRleHRPckZyYW1lTG9va3VwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICBpZiAodmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuXG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgIGNhc2UgJ1RydWUnOlxuICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgY2FzZSAnRmFsc2UnOlxuICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgIGNhc2UgJ05vbmUnOlxuICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0VG9rZW5zU3RhdGUodG9rZW5zKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluZGV4OiB0b2tlbnMuaW5kZXgsXG4gICAgICBsaW5lbm86IHRva2Vucy5saW5lbm8sXG4gICAgICBjb2xubzogdG9rZW5zLmNvbG5vXG4gICAgfTtcbiAgfVxuXG4gIGlmIChcIlNURFwiICE9PSAnU0xJTScgJiYgbm9kZXMgJiYgQ29tcGlsZXIgJiYgUGFyc2VyKSB7XG4gICAgLy8gaS5lLiwgbm90IHNsaW0gbW9kZVxuICAgIHZhciBTbGljZSA9IG5vZGVzLk5vZGUuZXh0ZW5kKCdTbGljZScsIHtcbiAgICAgIGZpZWxkczogWydzdGFydCcsICdzdG9wJywgJ3N0ZXAnXSxcbiAgICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQobGluZW5vLCBjb2xubywgc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICAgICAgc3RhcnQgPSBzdGFydCB8fCBuZXcgbm9kZXMuTGl0ZXJhbChsaW5lbm8sIGNvbG5vLCBudWxsKTtcbiAgICAgICAgc3RvcCA9IHN0b3AgfHwgbmV3IG5vZGVzLkxpdGVyYWwobGluZW5vLCBjb2xubywgbnVsbCk7XG4gICAgICAgIHN0ZXAgPSBzdGVwIHx8IG5ldyBub2Rlcy5MaXRlcmFsKGxpbmVubywgY29sbm8sIDEpO1xuICAgICAgICB0aGlzLnBhcmVudChsaW5lbm8sIGNvbG5vLCBzdGFydCwgc3RvcCwgc3RlcCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBDb21waWxlci5wcm90b3R5cGUuYXNzZXJ0VHlwZSA9IGZ1bmN0aW9uIGFzc2VydFR5cGUobm9kZSkge1xuICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBTbGljZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG9yaWdfQ29tcGlsZXJfYXNzZXJ0VHlwZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBDb21waWxlci5wcm90b3R5cGUuY29tcGlsZVNsaWNlID0gZnVuY3Rpb24gY29tcGlsZVNsaWNlKG5vZGUsIGZyYW1lKSB7XG4gICAgICB0aGlzLl9lbWl0KCcoJyk7XG5cbiAgICAgIHRoaXMuX2NvbXBpbGVFeHByZXNzaW9uKG5vZGUuc3RhcnQsIGZyYW1lKTtcblxuICAgICAgdGhpcy5fZW1pdCgnKSwoJyk7XG5cbiAgICAgIHRoaXMuX2NvbXBpbGVFeHByZXNzaW9uKG5vZGUuc3RvcCwgZnJhbWUpO1xuXG4gICAgICB0aGlzLl9lbWl0KCcpLCgnKTtcblxuICAgICAgdGhpcy5fY29tcGlsZUV4cHJlc3Npb24obm9kZS5zdGVwLCBmcmFtZSk7XG5cbiAgICAgIHRoaXMuX2VtaXQoJyknKTtcbiAgICB9O1xuXG4gICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUFnZ3JlZ2F0ZSA9IGZ1bmN0aW9uIHBhcnNlQWdncmVnYXRlKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIG9yaWdTdGF0ZSA9IGdldFRva2Vuc1N0YXRlKHRoaXMudG9rZW5zKTsgLy8gU2V0IGJhY2sgb25lIGFjY291bnRpbmcgZm9yIG9wZW5pbmcgYnJhY2tldC9wYXJlbnNcblxuICAgICAgb3JpZ1N0YXRlLmNvbG5vLS07XG4gICAgICBvcmlnU3RhdGUuaW5kZXgtLTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIG9yaWdfUGFyc2VyX3BhcnNlQWdncmVnYXRlLmFwcGx5KHRoaXMpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB2YXIgZXJyU3RhdGUgPSBnZXRUb2tlbnNTdGF0ZSh0aGlzLnRva2Vucyk7XG5cbiAgICAgICAgdmFyIHJldGhyb3cgPSBmdW5jdGlvbiByZXRocm93KCkge1xuICAgICAgICAgIGxpYi5fYXNzaWduKF90aGlzLnRva2VucywgZXJyU3RhdGUpO1xuXG4gICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIH07IC8vIFJlc2V0IHRvIHN0YXRlIGJlZm9yZSBvcmlnaW5hbCBwYXJzZUFnZ3JlZ2F0ZSBjYWxsZWRcblxuXG4gICAgICAgIGxpYi5fYXNzaWduKHRoaXMudG9rZW5zLCBvcmlnU3RhdGUpO1xuXG4gICAgICAgIHRoaXMucGVla2VkID0gZmFsc2U7XG4gICAgICAgIHZhciB0b2sgPSB0aGlzLnBlZWtUb2tlbigpO1xuXG4gICAgICAgIGlmICh0b2sudHlwZSAhPT0gbGV4ZXIuVE9LRU5fTEVGVF9CUkFDS0VUKSB7XG4gICAgICAgICAgdGhyb3cgcmV0aHJvdygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbm9kZSA9IG5ldyBTbGljZSh0b2subGluZW5vLCB0b2suY29sbm8pOyAvLyBJZiB3ZSBkb24ndCBlbmNvdW50ZXIgYSBjb2xvbiB3aGlsZSBwYXJzaW5nLCB0aGlzIGlzIG5vdCBhIHNsaWNlLFxuICAgICAgICAvLyBzbyByZS1yYWlzZSB0aGUgb3JpZ2luYWwgZXhjZXB0aW9uLlxuXG4gICAgICAgIHZhciBpc1NsaWNlID0gZmFsc2U7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gbm9kZS5maWVsZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAodGhpcy5za2lwKGxleGVyLlRPS0VOX1JJR0hUX0JSQUNLRVQpKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaSA9PT0gbm9kZS5maWVsZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaXNTbGljZSkge1xuICAgICAgICAgICAgICB0aGlzLmZhaWwoJ3BhcnNlU2xpY2U6IHRvbyBtYW55IHNsaWNlIGNvbXBvbmVudHMnLCB0b2subGluZW5vLCB0b2suY29sbm8pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuc2tpcChsZXhlci5UT0tFTl9DT0xPTikpIHtcbiAgICAgICAgICAgIGlzU2xpY2UgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgZmllbGQgPSBub2RlLmZpZWxkc1tpXTtcbiAgICAgICAgICAgIG5vZGVbZmllbGRdID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgIGlzU2xpY2UgPSB0aGlzLnNraXAobGV4ZXIuVE9LRU5fQ09MT04pIHx8IGlzU2xpY2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc1NsaWNlKSB7XG4gICAgICAgICAgdGhyb3cgcmV0aHJvdygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBub2Rlcy5BcnJheSh0b2subGluZW5vLCB0b2suY29sbm8sIFtub2RlXSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNsaWNlTG9va3VwKG9iaiwgc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICBvYmogPSBvYmogfHwgW107XG5cbiAgICBpZiAoc3RhcnQgPT09IG51bGwpIHtcbiAgICAgIHN0YXJ0ID0gc3RlcCA8IDAgPyBvYmoubGVuZ3RoIC0gMSA6IDA7XG4gICAgfVxuXG4gICAgaWYgKHN0b3AgPT09IG51bGwpIHtcbiAgICAgIHN0b3AgPSBzdGVwIDwgMCA/IC0xIDogb2JqLmxlbmd0aDtcbiAgICB9IGVsc2UgaWYgKHN0b3AgPCAwKSB7XG4gICAgICBzdG9wICs9IG9iai5sZW5ndGg7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgc3RhcnQgKz0gb2JqLmxlbmd0aDtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OzsgaSArPSBzdGVwKSB7XG4gICAgICBpZiAoaSA8IDAgfHwgaSA+IG9iai5sZW5ndGgpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGVwID4gMCAmJiBpID49IHN0b3ApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGVwIDwgMCAmJiBpIDw9IHN0b3ApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdHMucHVzaChydW50aW1lLm1lbWJlckxvb2t1cChvYmosIGkpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc093blByb3Aob2JqLCBrZXkpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbiAgfVxuXG4gIHZhciBBUlJBWV9NRU1CRVJTID0ge1xuICAgIHBvcDogZnVuY3Rpb24gcG9wKGluZGV4KSB7XG4gICAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3AoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGluZGV4ID49IHRoaXMubGVuZ3RoIHx8IGluZGV4IDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0tleUVycm9yJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfSxcbiAgICBhcHBlbmQ6IGZ1bmN0aW9uIGFwcGVuZChlbGVtZW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5wdXNoKGVsZW1lbnQpO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoZWxlbWVudCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzW2ldID09PSBlbGVtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcignVmFsdWVFcnJvcicpO1xuICAgIH0sXG4gICAgY291bnQ6IGZ1bmN0aW9uIGNvdW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBjb3VudCA9IDA7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodGhpc1tpXSA9PT0gZWxlbWVudCkge1xuICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvdW50O1xuICAgIH0sXG4gICAgaW5kZXg6IGZ1bmN0aW9uIGluZGV4KGVsZW1lbnQpIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBpZiAoKGkgPSB0aGlzLmluZGV4T2YoZWxlbWVudCkpID09PSAtMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1ZhbHVlRXJyb3InKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLmluZGV4T2YoZWxlbWVudCk7XG4gICAgfSxcbiAgICBpbnNlcnQ6IGZ1bmN0aW9uIGluc2VydChpbmRleCwgZWxlbSkge1xuICAgICAgcmV0dXJuIHRoaXMuc3BsaWNlKGluZGV4LCAwLCBlbGVtKTtcbiAgICB9XG4gIH07XG4gIHZhciBPQkpFQ1RfTUVNQkVSUyA9IHtcbiAgICBpdGVtczogZnVuY3Rpb24gaXRlbXMoKSB7XG4gICAgICByZXR1cm4gbGliLl9lbnRyaWVzKHRoaXMpO1xuICAgIH0sXG4gICAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgICByZXR1cm4gbGliLl92YWx1ZXModGhpcyk7XG4gICAgfSxcbiAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgICAgcmV0dXJuIGxpYi5rZXlzKHRoaXMpO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5LCBkZWYpIHtcbiAgICAgIHZhciBvdXRwdXQgPSB0aGlzW2tleV07XG5cbiAgICAgIGlmIChvdXRwdXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBvdXRwdXQgPSBkZWY7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfSxcbiAgICBoYXNfa2V5OiBmdW5jdGlvbiBoYXNfa2V5KGtleSkge1xuICAgICAgcmV0dXJuIGhhc093blByb3AodGhpcywga2V5KTtcbiAgICB9LFxuICAgIHBvcDogZnVuY3Rpb24gcG9wKGtleSwgZGVmKSB7XG4gICAgICB2YXIgb3V0cHV0ID0gdGhpc1trZXldO1xuXG4gICAgICBpZiAob3V0cHV0ID09PSB1bmRlZmluZWQgJiYgZGVmICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb3V0cHV0ID0gZGVmO1xuICAgICAgfSBlbHNlIGlmIChvdXRwdXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0tleUVycm9yJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWxldGUgdGhpc1trZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH0sXG4gICAgcG9waXRlbTogZnVuY3Rpb24gcG9waXRlbSgpIHtcbiAgICAgIHZhciBrZXlzID0gbGliLmtleXModGhpcyk7XG5cbiAgICAgIGlmICgha2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdLZXlFcnJvcicpO1xuICAgICAgfVxuXG4gICAgICB2YXIgayA9IGtleXNbMF07XG4gICAgICB2YXIgdmFsID0gdGhpc1trXTtcbiAgICAgIGRlbGV0ZSB0aGlzW2tdO1xuICAgICAgcmV0dXJuIFtrLCB2YWxdO1xuICAgIH0sXG4gICAgc2V0ZGVmYXVsdDogZnVuY3Rpb24gc2V0ZGVmYXVsdChrZXksIGRlZikge1xuICAgICAgaWYgKGRlZiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGRlZiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICghKGtleSBpbiB0aGlzKSkge1xuICAgICAgICB0aGlzW2tleV0gPSBkZWY7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzW2tleV07XG4gICAgfSxcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShrd2FyZ3MpIHtcbiAgICAgIGxpYi5fYXNzaWduKHRoaXMsIGt3YXJncyk7XG5cbiAgICAgIHJldHVybiBudWxsOyAvLyBBbHdheXMgcmV0dXJucyBOb25lXG4gICAgfVxuICB9O1xuICBPQkpFQ1RfTUVNQkVSUy5pdGVyaXRlbXMgPSBPQkpFQ1RfTUVNQkVSUy5pdGVtcztcbiAgT0JKRUNUX01FTUJFUlMuaXRlcnZhbHVlcyA9IE9CSkVDVF9NRU1CRVJTLnZhbHVlcztcbiAgT0JKRUNUX01FTUJFUlMuaXRlcmtleXMgPSBPQkpFQ1RfTUVNQkVSUy5rZXlzO1xuXG4gIHJ1bnRpbWUubWVtYmVyTG9va3VwID0gZnVuY3Rpb24gbWVtYmVyTG9va3VwKG9iaiwgdmFsLCBhdXRvZXNjYXBlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDQpIHtcbiAgICAgIHJldHVybiBzbGljZUxvb2t1cC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIG9iaiA9IG9iaiB8fCB7fTsgLy8gSWYgdGhlIG9iamVjdCBpcyBhbiBvYmplY3QsIHJldHVybiBhbnkgb2YgdGhlIG1ldGhvZHMgdGhhdCBQeXRob24gd291bGRcbiAgICAvLyBvdGhlcndpc2UgcHJvdmlkZS5cblxuICAgIGlmIChsaWIuaXNBcnJheShvYmopICYmIGhhc093blByb3AoQVJSQVlfTUVNQkVSUywgdmFsKSkge1xuICAgICAgcmV0dXJuIEFSUkFZX01FTUJFUlNbdmFsXS5iaW5kKG9iaik7XG4gICAgfVxuXG4gICAgaWYgKGxpYi5pc09iamVjdChvYmopICYmIGhhc093blByb3AoT0JKRUNUX01FTUJFUlMsIHZhbCkpIHtcbiAgICAgIHJldHVybiBPQkpFQ1RfTUVNQkVSU1t2YWxdLmJpbmQob2JqKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3JpZ19tZW1iZXJMb29rdXAuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcblxuICByZXR1cm4gdW5pbnN0YWxsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc3RhbGxDb21wYXQ7XG5cbi8qKiovIH0pXG4vKioqKioqLyBdKTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bnVuanVja3MuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogTG9kYXNoIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vb3BlbmpzZi5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG47KGZ1bmN0aW9uKCkge1xuXG4gIC8qKiBVc2VkIGFzIGEgc2FmZSByZWZlcmVuY2UgZm9yIGB1bmRlZmluZWRgIGluIHByZS1FUzUgZW52aXJvbm1lbnRzLiAqL1xuICB2YXIgdW5kZWZpbmVkO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci4gKi9cbiAgdmFyIFZFUlNJT04gPSAnNC4xNy4yMCc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG4gIHZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4gIC8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbiAgdmFyIENPUkVfRVJST1JfVEVYVCA9ICdVbnN1cHBvcnRlZCBjb3JlLWpzIHVzZS4gVHJ5IGh0dHBzOi8vbnBtcy5pby9zZWFyY2g/cT1wb255ZmlsbC4nLFxuICAgICAgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4gIC8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbiAgdmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbiAgdmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIGludGVybmFsIGFyZ3VtZW50IHBsYWNlaG9sZGVyLiAqL1xuICB2YXIgUExBQ0VIT0xERVIgPSAnX19sb2Rhc2hfcGxhY2Vob2xkZXJfXyc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbiAgdmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgICBDTE9ORV9GTEFUX0ZMQUcgPSAyLFxuICAgICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbiAgdmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICB2YXIgV1JBUF9CSU5EX0ZMQUcgPSAxLFxuICAgICAgV1JBUF9CSU5EX0tFWV9GTEFHID0gMixcbiAgICAgIFdSQVBfQ1VSUllfQk9VTkRfRkxBRyA9IDQsXG4gICAgICBXUkFQX0NVUlJZX0ZMQUcgPSA4LFxuICAgICAgV1JBUF9DVVJSWV9SSUdIVF9GTEFHID0gMTYsXG4gICAgICBXUkFQX1BBUlRJQUxfRkxBRyA9IDMyLFxuICAgICAgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgPSA2NCxcbiAgICAgIFdSQVBfQVJZX0ZMQUcgPSAxMjgsXG4gICAgICBXUkFQX1JFQVJHX0ZMQUcgPSAyNTYsXG4gICAgICBXUkFQX0ZMSVBfRkxBRyA9IDUxMjtcblxuICAvKiogVXNlZCBhcyBkZWZhdWx0IG9wdGlvbnMgZm9yIGBfLnRydW5jYXRlYC4gKi9cbiAgdmFyIERFRkFVTFRfVFJVTkNfTEVOR1RIID0gMzAsXG4gICAgICBERUZBVUxUX1RSVU5DX09NSVNTSU9OID0gJy4uLic7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xuICB2YXIgSE9UX0NPVU5UID0gODAwLFxuICAgICAgSE9UX1NQQU4gPSAxNjtcblxuICAvKiogVXNlZCB0byBpbmRpY2F0ZSB0aGUgdHlwZSBvZiBsYXp5IGl0ZXJhdGVlcy4gKi9cbiAgdmFyIExBWllfRklMVEVSX0ZMQUcgPSAxLFxuICAgICAgTEFaWV9NQVBfRkxBRyA9IDIsXG4gICAgICBMQVpZX1dISUxFX0ZMQUcgPSAzO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xuICB2YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICAgIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxLFxuICAgICAgTUFYX0lOVEVHRVIgPSAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOCxcbiAgICAgIE5BTiA9IDAgLyAwO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHRoZSBtYXhpbXVtIGxlbmd0aCBhbmQgaW5kZXggb2YgYW4gYXJyYXkuICovXG4gIHZhciBNQVhfQVJSQVlfTEVOR1RIID0gNDI5NDk2NzI5NSxcbiAgICAgIE1BWF9BUlJBWV9JTkRFWCA9IE1BWF9BUlJBWV9MRU5HVEggLSAxLFxuICAgICAgSEFMRl9NQVhfQVJSQVlfTEVOR1RIID0gTUFYX0FSUkFZX0xFTkdUSCA+Pj4gMTtcblxuICAvKiogVXNlZCB0byBhc3NvY2lhdGUgd3JhcCBtZXRob2RzIHdpdGggdGhlaXIgYml0IGZsYWdzLiAqL1xuICB2YXIgd3JhcEZsYWdzID0gW1xuICAgIFsnYXJ5JywgV1JBUF9BUllfRkxBR10sXG4gICAgWydiaW5kJywgV1JBUF9CSU5EX0ZMQUddLFxuICAgIFsnYmluZEtleScsIFdSQVBfQklORF9LRVlfRkxBR10sXG4gICAgWydjdXJyeScsIFdSQVBfQ1VSUllfRkxBR10sXG4gICAgWydjdXJyeVJpZ2h0JywgV1JBUF9DVVJSWV9SSUdIVF9GTEFHXSxcbiAgICBbJ2ZsaXAnLCBXUkFQX0ZMSVBfRkxBR10sXG4gICAgWydwYXJ0aWFsJywgV1JBUF9QQVJUSUFMX0ZMQUddLFxuICAgIFsncGFydGlhbFJpZ2h0JywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUddLFxuICAgIFsncmVhcmcnLCBXUkFQX1JFQVJHX0ZMQUddXG4gIF07XG5cbiAgLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xuICB2YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgICAgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICAgIGRvbUV4Y1RhZyA9ICdbb2JqZWN0IERPTUV4Y2VwdGlvbl0nLFxuICAgICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICAgIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XScsXG4gICAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nLFxuICAgICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJyxcbiAgICAgIHdlYWtTZXRUYWcgPSAnW29iamVjdCBXZWFrU2V0XSc7XG5cbiAgdmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBlbXB0eSBzdHJpbmcgbGl0ZXJhbHMgaW4gY29tcGlsZWQgdGVtcGxhdGUgc291cmNlLiAqL1xuICB2YXIgcmVFbXB0eVN0cmluZ0xlYWRpbmcgPSAvXFxiX19wIFxcKz0gJyc7L2csXG4gICAgICByZUVtcHR5U3RyaW5nTWlkZGxlID0gL1xcYihfX3AgXFwrPSkgJycgXFwrL2csXG4gICAgICByZUVtcHR5U3RyaW5nVHJhaWxpbmcgPSAvKF9fZVxcKC4qP1xcKXxcXGJfX3RcXCkpIFxcK1xcbicnOy9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIEhUTUwgZW50aXRpZXMgYW5kIEhUTUwgY2hhcmFjdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlZEh0bWwgPSAvJig/OmFtcHxsdHxndHxxdW90fCMzOSk7L2csXG4gICAgICByZVVuZXNjYXBlZEh0bWwgPSAvWyY8PlwiJ10vZyxcbiAgICAgIHJlSGFzRXNjYXBlZEh0bWwgPSBSZWdFeHAocmVFc2NhcGVkSHRtbC5zb3VyY2UpLFxuICAgICAgcmVIYXNVbmVzY2FwZWRIdG1sID0gUmVnRXhwKHJlVW5lc2NhcGVkSHRtbC5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZUVzY2FwZSA9IC88JS0oW1xcc1xcU10rPyklPi9nLFxuICAgICAgcmVFdmFsdWF0ZSA9IC88JShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUludGVycG9sYXRlID0gLzwlPShbXFxzXFxTXSs/KSU+L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xuICB2YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLyxcbiAgICAgIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAgICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gICAqL1xuICB2YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nLFxuICAgICAgcmVIYXNSZWdFeHBDaGFyID0gUmVnRXhwKHJlUmVnRXhwQ2hhci5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG4gIHZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZyxcbiAgICAgIHJlVHJpbVN0YXJ0ID0gL15cXHMrLyxcbiAgICAgIHJlVHJpbUVuZCA9IC9cXHMrJC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd3JhcCBkZXRhaWwgY29tbWVudHMuICovXG4gIHZhciByZVdyYXBDb21tZW50ID0gL1xceyg/OlxcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggLitcXF0gXFwqXFwvKT9cXG4/LyxcbiAgICAgIHJlV3JhcERldGFpbHMgPSAvXFx7XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAoLispXFxdIFxcKi8sXG4gICAgICByZVNwbGl0RGV0YWlscyA9IC8sPyAmIC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUFzY2lpV29yZCA9IC9bXlxceDAwLVxceDJmXFx4M2EtXFx4NDBcXHg1Yi1cXHg2MFxceDdiLVxceDdmXSsvZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoXG4gICAqIFtFUyB0ZW1wbGF0ZSBkZWxpbWl0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10ZW1wbGF0ZS1saXRlcmFsLWxleGljYWwtY29tcG9uZW50cykuXG4gICAqL1xuICB2YXIgcmVFc1RlbXBsYXRlID0gL1xcJFxceyhbXlxcXFx9XSooPzpcXFxcLlteXFxcXH1dKikqKVxcfS9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbiAgdmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBMYXRpbiBVbmljb2RlIGxldHRlcnMgKGV4Y2x1ZGluZyBtYXRoZW1hdGljYWwgb3BlcmF0b3JzKS4gKi9cbiAgdmFyIHJlTGF0aW4gPSAvW1xceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHhmZlxcdTAxMDAtXFx1MDE3Zl0vZztcblxuICAvKiogVXNlZCB0byBlbnN1cmUgY2FwdHVyaW5nIG9yZGVyIG9mIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZU5vTWF0Y2ggPSAvKCReKS87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdW5lc2NhcGVkIGNoYXJhY3RlcnMgaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgcmVVbmVzY2FwZWRTdHJpbmcgPSAvWydcXG5cXHJcXHUyMDI4XFx1MjAyOVxcXFxdL2c7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xuICB2YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICAgIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLFxuICAgICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICAgIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSxcbiAgICAgIHJzRGluZ2JhdFJhbmdlID0gJ1xcXFx1MjcwMC1cXFxcdTI3YmYnLFxuICAgICAgcnNMb3dlclJhbmdlID0gJ2EtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZicsXG4gICAgICByc01hdGhPcFJhbmdlID0gJ1xcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjcnLFxuICAgICAgcnNOb25DaGFyUmFuZ2UgPSAnXFxcXHgwMC1cXFxceDJmXFxcXHgzYS1cXFxceDQwXFxcXHg1Yi1cXFxceDYwXFxcXHg3Yi1cXFxceGJmJyxcbiAgICAgIHJzUHVuY3R1YXRpb25SYW5nZSA9ICdcXFxcdTIwMDAtXFxcXHUyMDZmJyxcbiAgICAgIHJzU3BhY2VSYW5nZSA9ICcgXFxcXHRcXFxceDBiXFxcXGZcXFxceGEwXFxcXHVmZWZmXFxcXG5cXFxcclxcXFx1MjAyOFxcXFx1MjAyOVxcXFx1MTY4MFxcXFx1MTgwZVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwYVxcXFx1MjAyZlxcXFx1MjA1ZlxcXFx1MzAwMCcsXG4gICAgICByc1VwcGVyUmFuZ2UgPSAnQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlJyxcbiAgICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJyxcbiAgICAgIHJzQnJlYWtSYW5nZSA9IHJzTWF0aE9wUmFuZ2UgKyByc05vbkNoYXJSYW5nZSArIHJzUHVuY3R1YXRpb25SYW5nZSArIHJzU3BhY2VSYW5nZTtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG4gIHZhciByc0Fwb3MgPSBcIlsnXFx1MjAxOV1cIixcbiAgICAgIHJzQXN0cmFsID0gJ1snICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICAgIHJzQnJlYWsgPSAnWycgKyByc0JyZWFrUmFuZ2UgKyAnXScsXG4gICAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgICAgcnNEaWdpdHMgPSAnXFxcXGQrJyxcbiAgICAgIHJzRGluZ2JhdCA9ICdbJyArIHJzRGluZ2JhdFJhbmdlICsgJ10nLFxuICAgICAgcnNMb3dlciA9ICdbJyArIHJzTG93ZXJSYW5nZSArICddJyxcbiAgICAgIHJzTWlzYyA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgcnNCcmVha1JhbmdlICsgcnNEaWdpdHMgKyByc0RpbmdiYXRSYW5nZSArIHJzTG93ZXJSYW5nZSArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzRml0eiA9ICdcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICAgIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nLFxuICAgICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNVcHBlciA9ICdbJyArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG4gIHZhciByc01pc2NMb3dlciA9ICcoPzonICsgcnNMb3dlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzTWlzY1VwcGVyID0gJyg/OicgKyByc1VwcGVyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgICAgcnNPcHRDb250ckxvd2VyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86ZHxsbHxtfHJlfHN8dHx2ZSkpPycsXG4gICAgICByc09wdENvbnRyVXBwZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpEfExMfE18UkV8U3xUfFZFKSk/JyxcbiAgICAgIHJlT3B0TW9kID0gcnNNb2RpZmllciArICc/JyxcbiAgICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgICAgcnNPcmRMb3dlciA9ICdcXFxcZCooPzoxc3R8Mm5kfDNyZHwoPyFbMTIzXSlcXFxcZHRoKSg/PVxcXFxifFtBLVpfXSknLFxuICAgICAgcnNPcmRVcHBlciA9ICdcXFxcZCooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKSg/PVxcXFxifFthLXpfXSknLFxuICAgICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgICAgcnNFbW9qaSA9ICcoPzonICsgW3JzRGluZ2JhdCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNTZXEsXG4gICAgICByc1N5bWJvbCA9ICcoPzonICsgW3JzTm9uQXN0cmFsICsgcnNDb21ibyArICc/JywgcnNDb21ibywgcnNSZWdpb25hbCwgcnNTdXJyUGFpciwgcnNBc3RyYWxdLmpvaW4oJ3wnKSArICcpJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBhcG9zdHJvcGhlcy4gKi9cbiAgdmFyIHJlQXBvcyA9IFJlZ0V4cChyc0Fwb3MsICdnJyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKSBhbmRcbiAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrcyBmb3Igc3ltYm9sc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzX2Zvcl9TeW1ib2xzKS5cbiAgICovXG4gIHZhciByZUNvbWJvTWFyayA9IFJlZ0V4cChyc0NvbWJvLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIFtzdHJpbmcgc3ltYm9sc10oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtdW5pY29kZSkuICovXG4gIHZhciByZVVuaWNvZGUgPSBSZWdFeHAocnNGaXR6ICsgJyg/PScgKyByc0ZpdHogKyAnKXwnICsgcnNTeW1ib2wgKyByc1NlcSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBjb21wbGV4IG9yIGNvbXBvdW5kIHdvcmRzLiAqL1xuICB2YXIgcmVVbmljb2RlV29yZCA9IFJlZ0V4cChbXG4gICAgcnNVcHBlciArICc/JyArIHJzTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc01pc2NVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIgKyByc01pc2NMb3dlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNVcHBlciArICc/JyArIHJzTWlzY0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyLFxuICAgIHJzVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIsXG4gICAgcnNPcmRVcHBlcixcbiAgICByc09yZExvd2VyLFxuICAgIHJzRGlnaXRzLFxuICAgIHJzRW1vamlcbiAgXS5qb2luKCd8JyksICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3Mgd2l0aCBbemVyby13aWR0aCBqb2luZXJzIG9yIGNvZGUgcG9pbnRzIGZyb20gdGhlIGFzdHJhbCBwbGFuZXNdKGh0dHA6Ly9lZXYuZWUvYmxvZy8yMDE1LzA5LzEyL2RhcmstY29ybmVycy1vZi11bmljb2RlLykuICovXG4gIHZhciByZUhhc1VuaWNvZGUgPSBSZWdFeHAoJ1snICsgcnNaV0ogKyByc0FzdHJhbFJhbmdlICArIHJzQ29tYm9SYW5nZSArIHJzVmFyUmFuZ2UgKyAnXScpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHRoYXQgbmVlZCBhIG1vcmUgcm9idXN0IHJlZ2V4cCB0byBtYXRjaCB3b3Jkcy4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZVdvcmQgPSAvW2Etel1bQS1aXXxbQS1aXXsyfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcblxuICAvKiogVXNlZCB0byBhc3NpZ24gZGVmYXVsdCBgY29udGV4dGAgb2JqZWN0IHByb3BlcnRpZXMuICovXG4gIHZhciBjb250ZXh0UHJvcHMgPSBbXG4gICAgJ0FycmF5JywgJ0J1ZmZlcicsICdEYXRhVmlldycsICdEYXRlJywgJ0Vycm9yJywgJ0Zsb2F0MzJBcnJheScsICdGbG9hdDY0QXJyYXknLFxuICAgICdGdW5jdGlvbicsICdJbnQ4QXJyYXknLCAnSW50MTZBcnJheScsICdJbnQzMkFycmF5JywgJ01hcCcsICdNYXRoJywgJ09iamVjdCcsXG4gICAgJ1Byb21pc2UnLCAnUmVnRXhwJywgJ1NldCcsICdTdHJpbmcnLCAnU3ltYm9sJywgJ1R5cGVFcnJvcicsICdVaW50OEFycmF5JyxcbiAgICAnVWludDhDbGFtcGVkQXJyYXknLCAnVWludDE2QXJyYXknLCAnVWludDMyQXJyYXknLCAnV2Vha01hcCcsXG4gICAgJ18nLCAnY2xlYXJUaW1lb3V0JywgJ2lzRmluaXRlJywgJ3BhcnNlSW50JywgJ3NldFRpbWVvdXQnXG4gIF07XG5cbiAgLyoqIFVzZWQgdG8gbWFrZSB0ZW1wbGF0ZSBzb3VyY2VVUkxzIGVhc2llciB0byBpZGVudGlmeS4gKi9cbiAgdmFyIHRlbXBsYXRlQ291bnRlciA9IC0xO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbiAgdmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG4gIHR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIHR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xuICB2YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuICBjbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICBjbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xuICB2YXIgZGVidXJyZWRMZXR0ZXJzID0ge1xuICAgIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgICAnXFx4ZTAnOiAnYScsICAnXFx4ZTEnOiAnYScsICdcXHhlMic6ICdhJywgJ1xceGUzJzogJ2EnLCAnXFx4ZTQnOiAnYScsICdcXHhlNSc6ICdhJyxcbiAgICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAgICdcXHhjOCc6ICdFJywgICdcXHhjOSc6ICdFJywgJ1xceGNhJzogJ0UnLCAnXFx4Y2InOiAnRScsXG4gICAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAgICdcXHhlYyc6ICdpJywgICdcXHhlZCc6ICdpJywgJ1xceGVlJzogJ2knLCAnXFx4ZWYnOiAnaScsXG4gICAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAgICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAgICdcXHhmMic6ICdvJywgICdcXHhmMyc6ICdvJywgJ1xceGY0JzogJ28nLCAnXFx4ZjUnOiAnbycsICdcXHhmNic6ICdvJywgJ1xceGY4JzogJ28nLFxuICAgICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgICAnXFx4ZGQnOiAnWScsICAnXFx4ZmQnOiAneScsICdcXHhmZic6ICd5JyxcbiAgICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAgICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICAgJ1xceGRmJzogJ3NzJyxcbiAgICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAgICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAgICdcXHUwMTAxJzogJ2EnLCAgJ1xcdTAxMDMnOiAnYScsICdcXHUwMTA1JzogJ2EnLFxuICAgICdcXHUwMTA2JzogJ0MnLCAgJ1xcdTAxMDgnOiAnQycsICdcXHUwMTBhJzogJ0MnLCAnXFx1MDEwYyc6ICdDJyxcbiAgICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICAgJ1xcdTAxMGUnOiAnRCcsICAnXFx1MDExMCc6ICdEJywgJ1xcdTAxMGYnOiAnZCcsICdcXHUwMTExJzogJ2QnLFxuICAgICdcXHUwMTEyJzogJ0UnLCAgJ1xcdTAxMTQnOiAnRScsICdcXHUwMTE2JzogJ0UnLCAnXFx1MDExOCc6ICdFJywgJ1xcdTAxMWEnOiAnRScsXG4gICAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgICAnXFx1MDExYyc6ICdHJywgICdcXHUwMTFlJzogJ0cnLCAnXFx1MDEyMCc6ICdHJywgJ1xcdTAxMjInOiAnRycsXG4gICAgJ1xcdTAxMWQnOiAnZycsICAnXFx1MDExZic6ICdnJywgJ1xcdTAxMjEnOiAnZycsICdcXHUwMTIzJzogJ2cnLFxuICAgICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgICAnXFx1MDEyOCc6ICdJJywgICdcXHUwMTJhJzogJ0knLCAnXFx1MDEyYyc6ICdJJywgJ1xcdTAxMmUnOiAnSScsICdcXHUwMTMwJzogJ0knLFxuICAgICdcXHUwMTI5JzogJ2knLCAgJ1xcdTAxMmInOiAnaScsICdcXHUwMTJkJzogJ2knLCAnXFx1MDEyZic6ICdpJywgJ1xcdTAxMzEnOiAnaScsXG4gICAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgICAnXFx1MDEzNic6ICdLJywgICdcXHUwMTM3JzogJ2snLCAnXFx1MDEzOCc6ICdrJyxcbiAgICAnXFx1MDEzOSc6ICdMJywgICdcXHUwMTNiJzogJ0wnLCAnXFx1MDEzZCc6ICdMJywgJ1xcdTAxM2YnOiAnTCcsICdcXHUwMTQxJzogJ0wnLFxuICAgICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICAgJ1xcdTAxNDMnOiAnTicsICAnXFx1MDE0NSc6ICdOJywgJ1xcdTAxNDcnOiAnTicsICdcXHUwMTRhJzogJ04nLFxuICAgICdcXHUwMTQ0JzogJ24nLCAgJ1xcdTAxNDYnOiAnbicsICdcXHUwMTQ4JzogJ24nLCAnXFx1MDE0Yic6ICduJyxcbiAgICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgICAnXFx1MDE0ZCc6ICdvJywgICdcXHUwMTRmJzogJ28nLCAnXFx1MDE1MSc6ICdvJyxcbiAgICAnXFx1MDE1NCc6ICdSJywgICdcXHUwMTU2JzogJ1InLCAnXFx1MDE1OCc6ICdSJyxcbiAgICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgICAnXFx1MDE1YSc6ICdTJywgICdcXHUwMTVjJzogJ1MnLCAnXFx1MDE1ZSc6ICdTJywgJ1xcdTAxNjAnOiAnUycsXG4gICAgJ1xcdTAxNWInOiAncycsICAnXFx1MDE1ZCc6ICdzJywgJ1xcdTAxNWYnOiAncycsICdcXHUwMTYxJzogJ3MnLFxuICAgICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAgICdcXHUwMTYzJzogJ3QnLCAgJ1xcdTAxNjUnOiAndCcsICdcXHUwMTY3JzogJ3QnLFxuICAgICdcXHUwMTY4JzogJ1UnLCAgJ1xcdTAxNmEnOiAnVScsICdcXHUwMTZjJzogJ1UnLCAnXFx1MDE2ZSc6ICdVJywgJ1xcdTAxNzAnOiAnVScsICdcXHUwMTcyJzogJ1UnLFxuICAgICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAgICdcXHUwMTc0JzogJ1cnLCAgJ1xcdTAxNzUnOiAndycsXG4gICAgJ1xcdTAxNzYnOiAnWScsICAnXFx1MDE3Nyc6ICd5JywgJ1xcdTAxNzgnOiAnWScsXG4gICAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICAgJ1xcdTAxN2EnOiAneicsICAnXFx1MDE3Yyc6ICd6JywgJ1xcdTAxN2UnOiAneicsXG4gICAgJ1xcdTAxMzInOiAnSUonLCAnXFx1MDEzMyc6ICdpaicsXG4gICAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICAgJ1xcdTAxNDknOiBcIiduXCIsICdcXHUwMTdmJzogJ3MnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy4gKi9cbiAgdmFyIGh0bWxFc2NhcGVzID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjMzk7J1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuICovXG4gIHZhciBodG1sVW5lc2NhcGVzID0ge1xuICAgICcmYW1wOyc6ICcmJyxcbiAgICAnJmx0Oyc6ICc8JyxcbiAgICAnJmd0Oyc6ICc+JyxcbiAgICAnJnF1b3Q7JzogJ1wiJyxcbiAgICAnJiMzOTsnOiBcIidcIlxuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgc3RyaW5nRXNjYXBlcyA9IHtcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICBcIidcIjogXCInXCIsXG4gICAgJ1xcbic6ICduJyxcbiAgICAnXFxyJzogJ3InLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICAvKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xuICB2YXIgZnJlZVBhcnNlRmxvYXQgPSBwYXJzZUZsb2F0LFxuICAgICAgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG4gIHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4gIC8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xuICB2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xuICB2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xuICB2YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4gIC8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG4gIHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuICAvKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbiAgdmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgICBpZiAodHlwZXMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVzO1xuICAgICAgfVxuXG4gICAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0oKSk7XG5cbiAgLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIG5vZGVJc0FycmF5QnVmZmVyID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNBcnJheUJ1ZmZlcixcbiAgICAgIG5vZGVJc0RhdGUgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0RhdGUsXG4gICAgICBub2RlSXNNYXAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc01hcCxcbiAgICAgIG5vZGVJc1JlZ0V4cCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzUmVnRXhwLFxuICAgICAgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQsXG4gICAgICBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlQWdncmVnYXRvcmAgZm9yIGFycmF5cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlBZ2dyZWdhdG9yKGFycmF5LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaFJpZ2h0KGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5ldmVyeWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFdmVyeShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmICghcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5jbHVkZXNgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBzcGVjaWZ5aW5nIGFuIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gISFsZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKHZhbHVlLCBhcnJheVtpbmRleF0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlKGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICAgIH1cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZVJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZVJpZ2h0KGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVstLWxlbmd0aF07XG4gICAgfVxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhbiBBU0NJSSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgdmFyIGFzY2lpU2l6ZSA9IGJhc2VQcm9wZXJ0eSgnbGVuZ3RoJyk7XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJyk7XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlQXNjaWlXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZmluZEtleWAgYW5kIGBfLmZpbmRMYXN0S2V5YCxcbiAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYFxuICAgKiB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmb3VuZCBlbGVtZW50IG9yIGl0cyBrZXksIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEtleShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGVhY2hGdW5jKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJlc3VsdCA9IGtleTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAxIDogLTEpO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICA/IHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpXG4gICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZldpdGgoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZWFuYCBhbmQgYF8ubWVhbkJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlTWVhbihhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuIGxlbmd0aCA/IChiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkgLyBsZW5ndGgpIDogTkFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVkdWNlYCBhbmQgYF8ucmVkdWNlUmlnaHRgLCB3aXRob3V0IHN1cHBvcnRcbiAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBpbml0QWNjdW0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3Qgb3IgbGFzdCBlbGVtZW50IG9mXG4gICAqICBgY29sbGVjdGlvbmAgYXMgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBlYWNoRnVuYykge1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgYWNjdW11bGF0b3IgPSBpbml0QWNjdW1cbiAgICAgICAgPyAoaW5pdEFjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgICA6IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0QnlgIHdoaWNoIHVzZXMgYGNvbXBhcmVyYCB0byBkZWZpbmUgdGhlXG4gICAqIHNvcnQgb3JkZXIgb2YgYGFycmF5YCBhbmQgcmVwbGFjZXMgY3JpdGVyaWEgb2JqZWN0cyB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmdcbiAgICogdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc29ydC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyZXIgVGhlIGZ1bmN0aW9uIHRvIGRlZmluZSBzb3J0IG9yZGVyLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIGFycmF5LnNvcnQoY29tcGFyZXIpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYXJyYXlbbGVuZ3RoXSA9IGFycmF5W2xlbmd0aF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zdW1gIGFuZCBgXy5zdW1CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciByZXN1bHQsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSk7XG4gICAgICBpZiAoY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gY3VycmVudCA6IChyZXN1bHQgKyBjdXJyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gICAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9QYWlyc2AgYW5kIGBfLnRvUGFpcnNJbmAgd2hpY2ggY3JlYXRlcyBhbiBhcnJheVxuICAgKiBvZiBrZXktdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVG9QYWlycyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBba2V5LCBvYmplY3Rba2V5XV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy52YWx1ZXNgIGFuZCBgXy52YWx1ZXNJbmAgd2hpY2ggY3JlYXRlcyBhblxuICAgKiBhcnJheSBvZiBgb2JqZWN0YCBwcm9wZXJ0eSB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXNcbiAgICogb2YgYHByb3BzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VWYWx1ZXMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICAgIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltU3RhcnRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltRW5kYCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGluZGV4LS0gJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBgcGxhY2Vob2xkZXJgIG9jY3VycmVuY2VzIGluIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byBzZWFyY2ggZm9yLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciBjb3VudC5cbiAgICovXG4gIGZ1bmN0aW9uIGNvdW50SG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSAwO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBpZiAoYXJyYXlbbGVuZ3RoXSA9PT0gcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgKytyZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy5kZWJ1cnJgIHRvIGNvbnZlcnQgTGF0aW4tMSBTdXBwbGVtZW50IGFuZCBMYXRpbiBFeHRlbmRlZC1BXG4gICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxldHRlciBUaGUgbWF0Y2hlZCBsZXR0ZXIgdG8gZGVidXJyLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBsZXR0ZXIuXG4gICAqL1xuICB2YXIgZGVidXJyTGV0dGVyID0gYmFzZVByb3BlcnR5T2YoZGVidXJyZWRMZXR0ZXJzKTtcblxuICAvKipcbiAgICogVXNlZCBieSBgXy5lc2NhcGVgIHRvIGNvbnZlcnQgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIGVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbEVzY2FwZXMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRlbXBsYXRlYCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIGZ1bmN0aW9uIGVzY2FwZVN0cmluZ0NoYXIoY2hyKSB7XG4gICAgcmV0dXJuICdcXFxcJyArIHN0cmluZ0VzY2FwZXNbY2hyXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSBzeW1ib2wgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlSGFzVW5pY29kZS50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIGEgd29yZCBjb21wb3NlZCBvZiBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSB3b3JkIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNVbmljb2RlV29yZChzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlV29yZC50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYGl0ZXJhdG9yYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGl0ZXJhdG9yIFRoZSBpdGVyYXRvciB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGl0ZXJhdG9yVG9BcnJheShpdGVyYXRvcikge1xuICAgIHZhciBkYXRhLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICghKGRhdGEgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGRhdGEudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBgcGxhY2Vob2xkZXJgIGVsZW1lbnRzIGluIGBhcnJheWAgd2l0aCBhbiBpbnRlcm5hbCBwbGFjZWhvbGRlclxuICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGVpciBpbmRleGVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byByZXBsYWNlLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVwbGFjZUhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBpZiAodmFsdWUgPT09IHBsYWNlaG9sZGVyIHx8IHZhbHVlID09PSBQTEFDRUhPTERFUikge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBQTEFDRUhPTERFUjtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gaXRzIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIHNldFRvUGFpcnMoc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSBbdmFsdWUsIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5sYXN0SW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gICAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggKyAxO1xuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2Ygc3ltYm9scyBpbiBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nU2l6ZShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVTaXplKHN0cmluZylcbiAgICAgIDogYXNjaWlTaXplKHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyB1bmljb2RlVG9BcnJheShzdHJpbmcpXG4gICAgICA6IGFzY2lpVG9BcnJheShzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udW5lc2NhcGVgIHRvIGNvbnZlcnQgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byB1bmVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIHZhciB1bmVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbFVuZXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYSBVbmljb2RlIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlU2l6ZShzdHJpbmcpIHtcbiAgICB2YXIgcmVzdWx0ID0gcmVVbmljb2RlLmxhc3RJbmRleCA9IDA7XG4gICAgd2hpbGUgKHJlVW5pY29kZS50ZXN0KHN0cmluZykpIHtcbiAgICAgICsrcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgVW5pY29kZSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGUpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhIFVuaWNvZGUgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGVXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdXNpbmcgdGhlIGBjb250ZXh0YCBvYmplY3QuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDEuMS4wXG4gICAqIEBjYXRlZ29yeSBVdGlsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dD1yb290XSBUaGUgY29udGV4dCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBhIG5ldyBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogXy5taXhpbih7ICdmb28nOiBfLmNvbnN0YW50KCdmb28nKSB9KTtcbiAgICpcbiAgICogdmFyIGxvZGFzaCA9IF8ucnVuSW5Db250ZXh0KCk7XG4gICAqIGxvZGFzaC5taXhpbih7ICdiYXInOiBsb2Rhc2guY29uc3RhbnQoJ2JhcicpIH0pO1xuICAgKlxuICAgKiBfLmlzRnVuY3Rpb24oXy5mb28pO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqIF8uaXNGdW5jdGlvbihfLmJhcik7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5mb28pO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guYmFyKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiAvLyBDcmVhdGUgYSBzdXBlZC11cCBgZGVmZXJgIGluIE5vZGUuanMuXG4gICAqIHZhciBkZWZlciA9IF8ucnVuSW5Db250ZXh0KHsgJ3NldFRpbWVvdXQnOiBzZXRJbW1lZGlhdGUgfSkuZGVmZXI7XG4gICAqL1xuICB2YXIgcnVuSW5Db250ZXh0ID0gKGZ1bmN0aW9uIHJ1bkluQ29udGV4dChjb250ZXh0KSB7XG4gICAgY29udGV4dCA9IGNvbnRleHQgPT0gbnVsbCA/IHJvb3QgOiBfLmRlZmF1bHRzKHJvb3QuT2JqZWN0KCksIGNvbnRleHQsIF8ucGljayhyb290LCBjb250ZXh0UHJvcHMpKTtcblxuICAgIC8qKiBCdWlsdC1pbiBjb25zdHJ1Y3RvciByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBBcnJheSA9IGNvbnRleHQuQXJyYXksXG4gICAgICAgIERhdGUgPSBjb250ZXh0LkRhdGUsXG4gICAgICAgIEVycm9yID0gY29udGV4dC5FcnJvcixcbiAgICAgICAgRnVuY3Rpb24gPSBjb250ZXh0LkZ1bmN0aW9uLFxuICAgICAgICBNYXRoID0gY29udGV4dC5NYXRoLFxuICAgICAgICBPYmplY3QgPSBjb250ZXh0Lk9iamVjdCxcbiAgICAgICAgUmVnRXhwID0gY29udGV4dC5SZWdFeHAsXG4gICAgICAgIFN0cmluZyA9IGNvbnRleHQuU3RyaW5nLFxuICAgICAgICBUeXBlRXJyb3IgPSBjb250ZXh0LlR5cGVFcnJvcjtcblxuICAgIC8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICAgICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgICAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG4gICAgdmFyIGNvcmVKc0RhdGEgPSBjb250ZXh0WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbiAgICB2YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG4gICAgdmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbiAgICAvKiogVXNlZCB0byBnZW5lcmF0ZSB1bmlxdWUgSURzLiAqL1xuICAgIHZhciBpZENvdW50ZXIgPSAwO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbiAgICB2YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gICAgICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAgICAgKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAgICAgKiBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgdmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG4gICAgdmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzdG9yZSB0aGUgb3JpZ2luYWwgYF9gIHJlZmVyZW5jZSBpbiBgXy5ub0NvbmZsaWN0YC4gKi9cbiAgICB2YXIgb2xkRGFzaCA9IHJvb3QuXztcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG4gICAgdmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbiAgICApO1xuXG4gICAgLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyBjb250ZXh0LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgU3ltYm9sID0gY29udGV4dC5TeW1ib2wsXG4gICAgICAgIFVpbnQ4QXJyYXkgPSBjb250ZXh0LlVpbnQ4QXJyYXksXG4gICAgICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkLFxuICAgICAgICBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KSxcbiAgICAgICAgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSxcbiAgICAgICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZSxcbiAgICAgICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2UsXG4gICAgICAgIHNwcmVhZGFibGVTeW1ib2wgPSBTeW1ib2wgPyBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1JdGVyYXRvciA9IFN5bWJvbCA/IFN5bWJvbC5pdGVyYXRvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgICAgICBmdW5jKHt9LCAnJywge30pO1xuICAgICAgICByZXR1cm4gZnVuYztcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfSgpKTtcblxuICAgIC8qKiBNb2NrZWQgYnVpbHQtaW5zLiAqL1xuICAgIHZhciBjdHhDbGVhclRpbWVvdXQgPSBjb250ZXh0LmNsZWFyVGltZW91dCAhPT0gcm9vdC5jbGVhclRpbWVvdXQgJiYgY29udGV4dC5jbGVhclRpbWVvdXQsXG4gICAgICAgIGN0eE5vdyA9IERhdGUgJiYgRGF0ZS5ub3cgIT09IHJvb3QuRGF0ZS5ub3cgJiYgRGF0ZS5ub3csXG4gICAgICAgIGN0eFNldFRpbWVvdXQgPSBjb250ZXh0LnNldFRpbWVvdXQgIT09IHJvb3Quc2V0VGltZW91dCAmJiBjb250ZXh0LnNldFRpbWVvdXQ7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG4gICAgdmFyIG5hdGl2ZUNlaWwgPSBNYXRoLmNlaWwsXG4gICAgICAgIG5hdGl2ZUZsb29yID0gTWF0aC5mbG9vcixcbiAgICAgICAgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgICAgIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBuYXRpdmVJc0Zpbml0ZSA9IGNvbnRleHQuaXNGaW5pdGUsXG4gICAgICAgIG5hdGl2ZUpvaW4gPSBhcnJheVByb3RvLmpvaW4sXG4gICAgICAgIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpLFxuICAgICAgICBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICAgICAgbmF0aXZlTWluID0gTWF0aC5taW4sXG4gICAgICAgIG5hdGl2ZU5vdyA9IERhdGUubm93LFxuICAgICAgICBuYXRpdmVQYXJzZUludCA9IGNvbnRleHQucGFyc2VJbnQsXG4gICAgICAgIG5hdGl2ZVJhbmRvbSA9IE1hdGgucmFuZG9tLFxuICAgICAgICBuYXRpdmVSZXZlcnNlID0gYXJyYXlQcm90by5yZXZlcnNlO1xuXG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xuICAgIHZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShjb250ZXh0LCAnRGF0YVZpZXcnKSxcbiAgICAgICAgTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdNYXAnKSxcbiAgICAgICAgUHJvbWlzZSA9IGdldE5hdGl2ZShjb250ZXh0LCAnUHJvbWlzZScpLFxuICAgICAgICBTZXQgPSBnZXROYXRpdmUoY29udGV4dCwgJ1NldCcpLFxuICAgICAgICBXZWFrTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdXZWFrTWFwJyksXG4gICAgICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuICAgIC8qKiBVc2VkIHRvIHN0b3JlIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICAgIHZhciBtZXRhTWFwID0gV2Vha01hcCAmJiBuZXcgV2Vha01hcDtcblxuICAgIC8qKiBVc2VkIHRvIGxvb2t1cCB1bm1pbmlmaWVkIGZ1bmN0aW9uIG5hbWVzLiAqL1xuICAgIHZhciByZWFsTmFtZXMgPSB7fTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG4gICAgdmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICAgICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgICAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4gICAgLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG4gICAgdmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBpbXBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMuIE1ldGhvZHMgdGhhdCBvcGVyYXRlIG9uIGFuZCByZXR1cm4gYXJyYXlzLCBjb2xsZWN0aW9ucyxcbiAgICAgKiBhbmQgZnVuY3Rpb25zIGNhbiBiZSBjaGFpbmVkIHRvZ2V0aGVyLiBNZXRob2RzIHRoYXQgcmV0cmlldmUgYSBzaW5nbGUgdmFsdWVcbiAgICAgKiBvciBtYXkgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlIHdpbGwgYXV0b21hdGljYWxseSBlbmQgdGhlIGNoYWluIHNlcXVlbmNlXG4gICAgICogYW5kIHJldHVybiB0aGUgdW53cmFwcGVkIHZhbHVlLiBPdGhlcndpc2UsIHRoZSB2YWx1ZSBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogRXhwbGljaXQgY2hhaW4gc2VxdWVuY2VzLCB3aGljaCBtdXN0IGJlIHVud3JhcHBlZCB3aXRoIGBfI3ZhbHVlYCwgbWF5IGJlXG4gICAgICogZW5hYmxlZCB1c2luZyBgXy5jaGFpbmAuXG4gICAgICpcbiAgICAgKiBUaGUgZXhlY3V0aW9uIG9mIGNoYWluZWQgbWV0aG9kcyBpcyBsYXp5LCB0aGF0IGlzLCBpdCdzIGRlZmVycmVkIHVudGlsXG4gICAgICogYF8jdmFsdWVgIGlzIGltcGxpY2l0bHkgb3IgZXhwbGljaXRseSBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBMYXp5IGV2YWx1YXRpb24gYWxsb3dzIHNldmVyYWwgbWV0aG9kcyB0byBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbi5cbiAgICAgKiBTaG9ydGN1dCBmdXNpb24gaXMgYW4gb3B0aW1pemF0aW9uIHRvIG1lcmdlIGl0ZXJhdGVlIGNhbGxzOyB0aGlzIGF2b2lkc1xuICAgICAqIHRoZSBjcmVhdGlvbiBvZiBpbnRlcm1lZGlhdGUgYXJyYXlzIGFuZCBjYW4gZ3JlYXRseSByZWR1Y2UgdGhlIG51bWJlciBvZlxuICAgICAqIGl0ZXJhdGVlIGV4ZWN1dGlvbnMuIFNlY3Rpb25zIG9mIGEgY2hhaW4gc2VxdWVuY2UgcXVhbGlmeSBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaWYgdGhlIHNlY3Rpb24gaXMgYXBwbGllZCB0byBhbiBhcnJheSBhbmQgaXRlcmF0ZWVzIGFjY2VwdCBvbmx5XG4gICAgICogb25lIGFyZ3VtZW50LiBUaGUgaGV1cmlzdGljIGZvciB3aGV0aGVyIGEgc2VjdGlvbiBxdWFsaWZpZXMgZm9yIHNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlzIHN1YmplY3QgdG8gY2hhbmdlLlxuICAgICAqXG4gICAgICogQ2hhaW5pbmcgaXMgc3VwcG9ydGVkIGluIGN1c3RvbSBidWlsZHMgYXMgbG9uZyBhcyB0aGUgYF8jdmFsdWVgIG1ldGhvZCBpc1xuICAgICAqIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkgaW5jbHVkZWQgaW4gdGhlIGJ1aWxkLlxuICAgICAqXG4gICAgICogSW4gYWRkaXRpb24gdG8gbG9kYXNoIG1ldGhvZHMsIHdyYXBwZXJzIGhhdmUgYEFycmF5YCBhbmQgYFN0cmluZ2AgbWV0aG9kcy5cbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBBcnJheWAgbWV0aG9kcyBhcmU6XG4gICAgICogYGNvbmNhdGAsIGBqb2luYCwgYHBvcGAsIGBwdXNoYCwgYHNoaWZ0YCwgYHNvcnRgLCBgc3BsaWNlYCwgYW5kIGB1bnNoaWZ0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYFN0cmluZ2AgbWV0aG9kcyBhcmU6XG4gICAgICogYHJlcGxhY2VgIGFuZCBgc3BsaXRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24gYXJlOlxuICAgICAqIGBhdGAsIGBjb21wYWN0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGRyb3BXaGlsZWAsIGBmaWx0ZXJgLCBgZmluZGAsXG4gICAgICogYGZpbmRMYXN0YCwgYGhlYWRgLCBgaW5pdGlhbGAsIGBsYXN0YCwgYG1hcGAsIGByZWplY3RgLCBgcmV2ZXJzZWAsIGBzbGljZWAsXG4gICAgICogYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLCBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYW5kIGB0b0FycmF5YFxuICAgICAqXG4gICAgICogVGhlIGNoYWluYWJsZSB3cmFwcGVyIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhZnRlcmAsIGBhcnlgLCBgYXNzaWduYCwgYGFzc2lnbkluYCwgYGFzc2lnbkluV2l0aGAsIGBhc3NpZ25XaXRoYCwgYGF0YCxcbiAgICAgKiBgYmVmb3JlYCwgYGJpbmRgLCBgYmluZEFsbGAsIGBiaW5kS2V5YCwgYGNhc3RBcnJheWAsIGBjaGFpbmAsIGBjaHVua2AsXG4gICAgICogYGNvbW1pdGAsIGBjb21wYWN0YCwgYGNvbmNhdGAsIGBjb25mb3Jtc2AsIGBjb25zdGFudGAsIGBjb3VudEJ5YCwgYGNyZWF0ZWAsXG4gICAgICogYGN1cnJ5YCwgYGRlYm91bmNlYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBkZWZlcmAsIGBkZWxheWAsXG4gICAgICogYGRpZmZlcmVuY2VgLCBgZGlmZmVyZW5jZUJ5YCwgYGRpZmZlcmVuY2VXaXRoYCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCxcbiAgICAgKiBgZHJvcFJpZ2h0V2hpbGVgLCBgZHJvcFdoaWxlYCwgYGV4dGVuZGAsIGBleHRlbmRXaXRoYCwgYGZpbGxgLCBgZmlsdGVyYCxcbiAgICAgKiBgZmxhdE1hcGAsIGBmbGF0TWFwRGVlcGAsIGBmbGF0TWFwRGVwdGhgLCBgZmxhdHRlbmAsIGBmbGF0dGVuRGVlcGAsXG4gICAgICogYGZsYXR0ZW5EZXB0aGAsIGBmbGlwYCwgYGZsb3dgLCBgZmxvd1JpZ2h0YCwgYGZyb21QYWlyc2AsIGBmdW5jdGlvbnNgLFxuICAgICAqIGBmdW5jdGlvbnNJbmAsIGBncm91cEJ5YCwgYGluaXRpYWxgLCBgaW50ZXJzZWN0aW9uYCwgYGludGVyc2VjdGlvbkJ5YCxcbiAgICAgKiBgaW50ZXJzZWN0aW9uV2l0aGAsIGBpbnZlcnRgLCBgaW52ZXJ0QnlgLCBgaW52b2tlTWFwYCwgYGl0ZXJhdGVlYCwgYGtleUJ5YCxcbiAgICAgKiBga2V5c2AsIGBrZXlzSW5gLCBgbWFwYCwgYG1hcEtleXNgLCBgbWFwVmFsdWVzYCwgYG1hdGNoZXNgLCBgbWF0Y2hlc1Byb3BlcnR5YCxcbiAgICAgKiBgbWVtb2l6ZWAsIGBtZXJnZWAsIGBtZXJnZVdpdGhgLCBgbWV0aG9kYCwgYG1ldGhvZE9mYCwgYG1peGluYCwgYG5lZ2F0ZWAsXG4gICAgICogYG50aEFyZ2AsIGBvbWl0YCwgYG9taXRCeWAsIGBvbmNlYCwgYG9yZGVyQnlgLCBgb3ZlcmAsIGBvdmVyQXJnc2AsXG4gICAgICogYG92ZXJFdmVyeWAsIGBvdmVyU29tZWAsIGBwYXJ0aWFsYCwgYHBhcnRpYWxSaWdodGAsIGBwYXJ0aXRpb25gLCBgcGlja2AsXG4gICAgICogYHBpY2tCeWAsIGBwbGFudGAsIGBwcm9wZXJ0eWAsIGBwcm9wZXJ0eU9mYCwgYHB1bGxgLCBgcHVsbEFsbGAsIGBwdWxsQWxsQnlgLFxuICAgICAqIGBwdWxsQWxsV2l0aGAsIGBwdWxsQXRgLCBgcHVzaGAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlYXJnYCwgYHJlamVjdGAsXG4gICAgICogYHJlbW92ZWAsIGByZXN0YCwgYHJldmVyc2VgLCBgc2FtcGxlU2l6ZWAsIGBzZXRgLCBgc2V0V2l0aGAsIGBzaHVmZmxlYCxcbiAgICAgKiBgc2xpY2VgLCBgc29ydGAsIGBzb3J0QnlgLCBgc3BsaWNlYCwgYHNwcmVhZGAsIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYHRhcGAsIGB0aHJvdHRsZWAsIGB0aHJ1YCwgYHRvQXJyYXlgLFxuICAgICAqIGB0b1BhaXJzYCwgYHRvUGFpcnNJbmAsIGB0b1BhdGhgLCBgdG9QbGFpbk9iamVjdGAsIGB0cmFuc2Zvcm1gLCBgdW5hcnlgLFxuICAgICAqIGB1bmlvbmAsIGB1bmlvbkJ5YCwgYHVuaW9uV2l0aGAsIGB1bmlxYCwgYHVuaXFCeWAsIGB1bmlxV2l0aGAsIGB1bnNldGAsXG4gICAgICogYHVuc2hpZnRgLCBgdW56aXBgLCBgdW56aXBXaXRoYCwgYHVwZGF0ZWAsIGB1cGRhdGVXaXRoYCwgYHZhbHVlc2AsXG4gICAgICogYHZhbHVlc0luYCwgYHdpdGhvdXRgLCBgd3JhcGAsIGB4b3JgLCBgeG9yQnlgLCBgeG9yV2l0aGAsIGB6aXBgLFxuICAgICAqIGB6aXBPYmplY3RgLCBgemlwT2JqZWN0RGVlcGAsIGFuZCBgemlwV2l0aGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBhcmUgKipub3QqKiBjaGFpbmFibGUgYnkgZGVmYXVsdCBhcmU6XG4gICAgICogYGFkZGAsIGBhdHRlbXB0YCwgYGNhbWVsQ2FzZWAsIGBjYXBpdGFsaXplYCwgYGNlaWxgLCBgY2xhbXBgLCBgY2xvbmVgLFxuICAgICAqIGBjbG9uZURlZXBgLCBgY2xvbmVEZWVwV2l0aGAsIGBjbG9uZVdpdGhgLCBgY29uZm9ybXNUb2AsIGBkZWJ1cnJgLFxuICAgICAqIGBkZWZhdWx0VG9gLCBgZGl2aWRlYCwgYGVhY2hgLCBgZWFjaFJpZ2h0YCwgYGVuZHNXaXRoYCwgYGVxYCwgYGVzY2FwZWAsXG4gICAgICogYGVzY2FwZVJlZ0V4cGAsIGBldmVyeWAsIGBmaW5kYCwgYGZpbmRJbmRleGAsIGBmaW5kS2V5YCwgYGZpbmRMYXN0YCxcbiAgICAgKiBgZmluZExhc3RJbmRleGAsIGBmaW5kTGFzdEtleWAsIGBmaXJzdGAsIGBmbG9vcmAsIGBmb3JFYWNoYCwgYGZvckVhY2hSaWdodGAsXG4gICAgICogYGZvckluYCwgYGZvckluUmlnaHRgLCBgZm9yT3duYCwgYGZvck93blJpZ2h0YCwgYGdldGAsIGBndGAsIGBndGVgLCBgaGFzYCxcbiAgICAgKiBgaGFzSW5gLCBgaGVhZGAsIGBpZGVudGl0eWAsIGBpbmNsdWRlc2AsIGBpbmRleE9mYCwgYGluUmFuZ2VgLCBgaW52b2tlYCxcbiAgICAgKiBgaXNBcmd1bWVudHNgLCBgaXNBcnJheWAsIGBpc0FycmF5QnVmZmVyYCwgYGlzQXJyYXlMaWtlYCwgYGlzQXJyYXlMaWtlT2JqZWN0YCxcbiAgICAgKiBgaXNCb29sZWFuYCwgYGlzQnVmZmVyYCwgYGlzRGF0ZWAsIGBpc0VsZW1lbnRgLCBgaXNFbXB0eWAsIGBpc0VxdWFsYCxcbiAgICAgKiBgaXNFcXVhbFdpdGhgLCBgaXNFcnJvcmAsIGBpc0Zpbml0ZWAsIGBpc0Z1bmN0aW9uYCwgYGlzSW50ZWdlcmAsIGBpc0xlbmd0aGAsXG4gICAgICogYGlzTWFwYCwgYGlzTWF0Y2hgLCBgaXNNYXRjaFdpdGhgLCBgaXNOYU5gLCBgaXNOYXRpdmVgLCBgaXNOaWxgLCBgaXNOdWxsYCxcbiAgICAgKiBgaXNOdW1iZXJgLCBgaXNPYmplY3RgLCBgaXNPYmplY3RMaWtlYCwgYGlzUGxhaW5PYmplY3RgLCBgaXNSZWdFeHBgLFxuICAgICAqIGBpc1NhZmVJbnRlZ2VyYCwgYGlzU2V0YCwgYGlzU3RyaW5nYCwgYGlzVW5kZWZpbmVkYCwgYGlzVHlwZWRBcnJheWAsXG4gICAgICogYGlzV2Vha01hcGAsIGBpc1dlYWtTZXRgLCBgam9pbmAsIGBrZWJhYkNhc2VgLCBgbGFzdGAsIGBsYXN0SW5kZXhPZmAsXG4gICAgICogYGxvd2VyQ2FzZWAsIGBsb3dlckZpcnN0YCwgYGx0YCwgYGx0ZWAsIGBtYXhgLCBgbWF4QnlgLCBgbWVhbmAsIGBtZWFuQnlgLFxuICAgICAqIGBtaW5gLCBgbWluQnlgLCBgbXVsdGlwbHlgLCBgbm9Db25mbGljdGAsIGBub29wYCwgYG5vd2AsIGBudGhgLCBgcGFkYCxcbiAgICAgKiBgcGFkRW5kYCwgYHBhZFN0YXJ0YCwgYHBhcnNlSW50YCwgYHBvcGAsIGByYW5kb21gLCBgcmVkdWNlYCwgYHJlZHVjZVJpZ2h0YCxcbiAgICAgKiBgcmVwZWF0YCwgYHJlc3VsdGAsIGByb3VuZGAsIGBydW5JbkNvbnRleHRgLCBgc2FtcGxlYCwgYHNoaWZ0YCwgYHNpemVgLFxuICAgICAqIGBzbmFrZUNhc2VgLCBgc29tZWAsIGBzb3J0ZWRJbmRleGAsIGBzb3J0ZWRJbmRleEJ5YCwgYHNvcnRlZExhc3RJbmRleGAsXG4gICAgICogYHNvcnRlZExhc3RJbmRleEJ5YCwgYHN0YXJ0Q2FzZWAsIGBzdGFydHNXaXRoYCwgYHN0dWJBcnJheWAsIGBzdHViRmFsc2VgLFxuICAgICAqIGBzdHViT2JqZWN0YCwgYHN0dWJTdHJpbmdgLCBgc3R1YlRydWVgLCBgc3VidHJhY3RgLCBgc3VtYCwgYHN1bUJ5YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdGltZXNgLCBgdG9GaW5pdGVgLCBgdG9JbnRlZ2VyYCwgYHRvSlNPTmAsIGB0b0xlbmd0aGAsXG4gICAgICogYHRvTG93ZXJgLCBgdG9OdW1iZXJgLCBgdG9TYWZlSW50ZWdlcmAsIGB0b1N0cmluZ2AsIGB0b1VwcGVyYCwgYHRyaW1gLFxuICAgICAqIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGB0cnVuY2F0ZWAsIGB1bmVzY2FwZWAsIGB1bmlxdWVJZGAsIGB1cHBlckNhc2VgLFxuICAgICAqIGB1cHBlckZpcnN0YCwgYHZhbHVlYCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBuYW1lIF9cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcCBpbiBhIGBsb2Rhc2hgIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMiwgM10pO1xuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhbiB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogd3JhcHBlZC5yZWR1Y2UoXy5hZGQpO1xuICAgICAqIC8vID0+IDZcbiAgICAgKlxuICAgICAqIC8vIFJldHVybnMgYSB3cmFwcGVkIHZhbHVlLlxuICAgICAqIHZhciBzcXVhcmVzID0gd3JhcHBlZC5tYXAoc3F1YXJlKTtcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMudmFsdWUoKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxvZGFzaCh2YWx1ZSkge1xuICAgICAgaWYgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzQXJyYXkodmFsdWUpICYmICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikpIHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTG9kYXNoV3JhcHBlcikge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ19fd3JhcHBlZF9fJykpIHtcbiAgICAgICAgICByZXR1cm4gd3JhcHBlckNsb25lKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gICAgICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgICAgIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmdW5jdGlvbiB3aG9zZSBwcm90b3R5cGUgY2hhaW4gc2VxdWVuY2Ugd3JhcHBlcnMgaW5oZXJpdCBmcm9tLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTG9kYXNoKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBjb25zdHJ1Y3RvciBmb3IgY3JlYXRpbmcgYGxvZGFzaGAgd3JhcHBlciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NoYWluQWxsXSBFbmFibGUgZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMb2Rhc2hXcmFwcGVyKHZhbHVlLCBjaGFpbkFsbCkge1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgdGhpcy5fX2NoYWluX18gPSAhIWNoYWluQWxsO1xuICAgICAgdGhpcy5fX2luZGV4X18gPSAwO1xuICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzIHVzZWQgYnkgbG9kYXNoIGFyZSBsaWtlIHRob3NlIGluXG4gICAgICogZW1iZWRkZWQgUnVieSAoRVJCKSBhcyB3ZWxsIGFzIEVTMjAxNSB0ZW1wbGF0ZSBzdHJpbmdzLiBDaGFuZ2UgdGhlXG4gICAgICogZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncyA9IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGJlIEhUTUwtZXNjYXBlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXNjYXBlJzogcmVFc2NhcGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgY29kZSB0byBiZSBldmFsdWF0ZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2V2YWx1YXRlJzogcmVFdmFsdWF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGluamVjdC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnaW50ZXJwb2xhdGUnOiByZUludGVycG9sYXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gcmVmZXJlbmNlIHRoZSBkYXRhIG9iamVjdCBpbiB0aGUgdGVtcGxhdGUgdGV4dC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAgICovXG4gICAgICAndmFyaWFibGUnOiAnJyxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGltcG9ydCB2YXJpYWJsZXMgaW50byB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAqL1xuICAgICAgJ2ltcG9ydHMnOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXG4gICAgICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgICdfJzogbG9kYXNoXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEVuc3VyZSB3cmFwcGVycyBhcmUgaW5zdGFuY2VzIG9mIGBiYXNlTG9kYXNoYC5cbiAgICBsb2Rhc2gucHJvdG90eXBlID0gYmFzZUxvZGFzaC5wcm90b3R5cGU7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGxvZGFzaDtcblxuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMb2Rhc2hXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGxhenkgd3JhcHBlciBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgbGF6eSBldmFsdWF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExhenlXcmFwcGVyKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fZGlyX18gPSAxO1xuICAgICAgdGhpcy5fX2ZpbHRlcmVkX18gPSBmYWxzZTtcbiAgICAgIHRoaXMuX19pdGVyYXRlZXNfXyA9IFtdO1xuICAgICAgdGhpcy5fX3Rha2VDb3VudF9fID0gTUFYX0FSUkFZX0xFTkdUSDtcbiAgICAgIHRoaXMuX192aWV3c19fID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBsYXp5IHdyYXBwZXIgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbG9uZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5Q2xvbmUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMuX193cmFwcGVkX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9fZGlyX18gPSB0aGlzLl9fZGlyX187XG4gICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdGhpcy5fX2ZpbHRlcmVkX187XG4gICAgICByZXN1bHQuX19pdGVyYXRlZXNfXyA9IGNvcHlBcnJheSh0aGlzLl9faXRlcmF0ZWVzX18pO1xuICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSB0aGlzLl9fdGFrZUNvdW50X187XG4gICAgICByZXN1bHQuX192aWV3c19fID0gY29weUFycmF5KHRoaXMuX192aWV3c19fKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgdGhlIGRpcmVjdGlvbiBvZiBsYXp5IGl0ZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyByZXZlcnNlZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5UmV2ZXJzZSgpIHtcbiAgICAgIGlmICh0aGlzLl9fZmlsdGVyZWRfXykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyA9IC0xO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gKj0gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHRoZSB1bndyYXBwZWQgdmFsdWUgZnJvbSBpdHMgbGF6eSB3cmFwcGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVZhbHVlKCkge1xuICAgICAgdmFyIGFycmF5ID0gdGhpcy5fX3dyYXBwZWRfXy52YWx1ZSgpLFxuICAgICAgICAgIGRpciA9IHRoaXMuX19kaXJfXyxcbiAgICAgICAgICBpc0FyciA9IGlzQXJyYXkoYXJyYXkpLFxuICAgICAgICAgIGlzUmlnaHQgPSBkaXIgPCAwLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGlzQXJyID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICB2aWV3ID0gZ2V0VmlldygwLCBhcnJMZW5ndGgsIHRoaXMuX192aWV3c19fKSxcbiAgICAgICAgICBzdGFydCA9IHZpZXcuc3RhcnQsXG4gICAgICAgICAgZW5kID0gdmlldy5lbmQsXG4gICAgICAgICAgbGVuZ3RoID0gZW5kIC0gc3RhcnQsXG4gICAgICAgICAgaW5kZXggPSBpc1JpZ2h0ID8gZW5kIDogKHN0YXJ0IC0gMSksXG4gICAgICAgICAgaXRlcmF0ZWVzID0gdGhpcy5fX2l0ZXJhdGVlc19fLFxuICAgICAgICAgIGl0ZXJMZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICB0YWtlQ291bnQgPSBuYXRpdmVNaW4obGVuZ3RoLCB0aGlzLl9fdGFrZUNvdW50X18pO1xuXG4gICAgICBpZiAoIWlzQXJyIHx8ICghaXNSaWdodCAmJiBhcnJMZW5ndGggPT0gbGVuZ3RoICYmIHRha2VDb3VudCA9PSBsZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKGFycmF5LCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAobGVuZ3RoLS0gJiYgcmVzSW5kZXggPCB0YWtlQ291bnQpIHtcbiAgICAgICAgaW5kZXggKz0gZGlyO1xuXG4gICAgICAgIHZhciBpdGVySW5kZXggPSAtMSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgICAgIHdoaWxlICgrK2l0ZXJJbmRleCA8IGl0ZXJMZW5ndGgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IGl0ZXJhdGVlc1tpdGVySW5kZXhdLFxuICAgICAgICAgICAgICBpdGVyYXRlZSA9IGRhdGEuaXRlcmF0ZWUsXG4gICAgICAgICAgICAgIHR5cGUgPSBkYXRhLnR5cGUsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9NQVBfRkxBRykge1xuICAgICAgICAgICAgdmFsdWUgPSBjb21wdXRlZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFjb21wdXRlZCkge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRykge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIGBMYXp5V3JhcHBlcmAgaXMgYW4gaW5zdGFuY2Ugb2YgYGJhc2VMb2Rhc2hgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExhenlXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICAgICAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG4gICAgSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG4gICAgSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbiAgICBIYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuICAgIEhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG4gICAgSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICAgICAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgICAgICBkYXRhLnBvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgLS10aGlzLnNpemU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgKyt0aGlzLnNpemU7XG4gICAgICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAgICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgYWRkXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQGFsaWFzIHB1c2hcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICAgICAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICAgICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICAgICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gICAgICB9XG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG4gICAgU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcbiAgICBTdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG4gICAgU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuICAgIFN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcbiAgICBTdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICAgICAgKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2Jhc2VSYW5kb20oMCwgbGVuZ3RoIC0gMSldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVTaXplYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlU2l6ZShhcnJheSwgbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTaHVmZmxlKGFycmF5KSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhc3NpZ25WYWx1ZWAgZXhjZXB0IHRoYXQgaXQgZG9lc24ndCBhc3NpZ25cbiAgICAgKiBgdW5kZWZpbmVkYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWVxKG9iamVjdFtrZXldLCB2YWx1ZSkpIHx8XG4gICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICAgICAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFnZ3JlZ2F0ZXMgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIG9uIGBhY2N1bXVsYXRvcmAgd2l0aCBrZXlzIHRyYW5zZm9ybWVkXG4gICAgICogYnkgYGl0ZXJhdGVlYCBhbmQgdmFsdWVzIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFnZ3JlZ2F0b3IoY29sbGVjdGlvbiwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICAgICAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbkluKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICAgICAqIHZhbHVlIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBdChvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICBza2lwID0gb2JqZWN0ID09IG51bGw7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBza2lwID8gdW5kZWZpbmVkIDogZ2V0KG9iamVjdCwgcGF0aHNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xhbXBgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKG51bWJlciA9PT0gbnVtYmVyKSB7XG4gICAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyIDw9IHVwcGVyID8gbnVtYmVyIDogdXBwZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPj0gbG93ZXIgPyBudW1iZXIgOiBsb3dlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgYW5kIGBfLmNsb25lRGVlcGAgd2hpY2ggdHJhY2tzXG4gICAgICogdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIERlZXAgY2xvbmVcbiAgICAgKiAgMiAtIEZsYXR0ZW4gaW5oZXJpdGVkIHByb3BlcnRpZXNcbiAgICAgKiAgNCAtIENsb25lIHN5bWJvbHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBba2V5XSBUaGUga2V5IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGFuZCB0aGVpciBjbG9uZSBjb3VudGVycGFydHMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgICAgIGlzRmxhdCA9IGJpdG1hc2sgJiBDTE9ORV9GTEFUX0ZMQUcsXG4gICAgICAgICAgaXNGdWxsID0gYml0bWFzayAmIENMT05FX1NZTUJPTFNfRkxBRztcblxuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gb2JqZWN0ID8gY3VzdG9taXplcih2YWx1ZSwga2V5LCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgICAgIGlmIChpc0Fycikge1xuICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVBcnJheSh2YWx1ZSk7XG4gICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBpc0Z1bmMgPSB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xuXG4gICAgICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IChpc0ZsYXQgfHwgaXNGdW5jKSA/IHt9IDogaW5pdENsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgICAgICA/IGNvcHlTeW1ib2xzSW4odmFsdWUsIGJhc2VBc3NpZ25JbihyZXN1bHQsIHZhbHVlKSlcbiAgICAgICAgICAgICAgOiBjb3B5U3ltYm9scyh2YWx1ZSwgYmFzZUFzc2lnbihyZXN1bHQsIHZhbHVlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghY2xvbmVhYmxlVGFnc1t0YWddKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQnlUYWcodmFsdWUsIHRhZywgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMgYW5kIHJldHVybiBpdHMgY29ycmVzcG9uZGluZyBjbG9uZS5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZDtcbiAgICAgIH1cbiAgICAgIHN0YWNrLnNldCh2YWx1ZSwgcmVzdWx0KTtcblxuICAgICAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0LmFkZChiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN1YlZhbHVlLCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGlzTWFwKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgICAgID8gKGlzRmxhdCA/IGdldEFsbEtleXNJbiA6IGdldEFsbEtleXMpXG4gICAgICAgIDogKGlzRmxhdCA/IGtleXNJbiA6IGtleXMpO1xuXG4gICAgICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgICAgIGFycmF5RWFjaChwcm9wcyB8fCB2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICBpZiAocHJvcHMpIHtcbiAgICAgICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgICAgICBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgYXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb25mb3Jtc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtcyhzb3VyY2UpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zVG9gIHdoaWNoIGFjY2VwdHMgYHByb3BzYCB0byBjaGVjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgY29uZm9ybXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwgcHJvcHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbbGVuZ3RoXSxcbiAgICAgICAgICAgIHByZWRpY2F0ZSA9IHNvdXJjZVtrZXldLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICBpZiAoKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkgfHwgIXByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmRlbGF5YCBhbmQgYF8uZGVmZXJgIHdoaWNoIGFjY2VwdHMgYGFyZ3NgXG4gICAgICogdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGVsYXkoZnVuYywgd2FpdCwgYXJncykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTsgfSwgd2FpdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRpZmZlcmVuY2VgIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBleGNsdWRpbmcgbXVsdGlwbGUgYXJyYXlzIG9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHZhbHVlc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFsdWVzID0gYXJyYXlNYXAodmFsdWVzLCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh2YWx1ZXMubGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzID0gbmV3IFNldENhY2hlKHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPT0gbnVsbCA/IHZhbHVlIDogaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHZhbHVlc0luZGV4ID0gdmFsdWVzTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICh2YWx1ZXNJbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAodmFsdWVzW3ZhbHVlc0luZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXModmFsdWVzLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hSaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2hSaWdodCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd25SaWdodCwgdHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ldmVyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFdmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9ICEhcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLm1heGAgYW5kIGBfLm1pbmAgd2hpY2ggYWNjZXB0cyBhXG4gICAgICogYGNvbXBhcmF0b3JgIHRvIGRldGVybWluZSB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIHVzZWQgdG8gY29tcGFyZSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFeHRyZW11bShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY3VycmVudCA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICBpZiAoY3VycmVudCAhPSBudWxsICYmIChjb21wdXRlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKGN1cnJlbnQgPT09IGN1cnJlbnQgJiYgIWlzU3ltYm9sKGN1cnJlbnQpKVxuICAgICAgICAgICAgICA6IGNvbXBhcmF0b3IoY3VycmVudCwgY29tcHV0ZWQpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgdmFyIGNvbXB1dGVkID0gY3VycmVudCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsbGAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gbGVuZ3RoKSA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVuZCA9IHN0YXJ0ID4gZW5kID8gMCA6IHRvTGVuZ3RoKGVuZCk7XG4gICAgICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgYXJyYXlbc3RhcnQrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWx0ZXJgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmxhdHRlbmAgd2l0aCBzdXBwb3J0IGZvciByZXN0cmljdGluZyBmbGF0dGVuaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVwdGggVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU3RyaWN0XSBSZXN0cmljdCB0byB2YWx1ZXMgdGhhdCBwYXNzIGBwcmVkaWNhdGVgIGNoZWNrcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0PVtdXSBUaGUgaW5pdGlhbCByZXN1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSB8fCAocHJlZGljYXRlID0gaXNGbGF0dGVuYWJsZSk7XG4gICAgICByZXN1bHQgfHwgKHJlc3VsdCA9IFtdKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICBpZiAoZGVwdGggPiAxKSB7XG4gICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBmbGF0dGVuIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghaXNTdHJpY3QpIHtcbiAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICAgICAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYmFzZUZvcmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzXG4gICAgICogaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yUmlnaHQgPSBjcmVhdGVCYXNlRm9yKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93blJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JSaWdodChvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mdW5jdGlvbnNgIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXkgb2ZcbiAgICAgKiBgb2JqZWN0YCBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmaWx0ZXJlZCBmcm9tIGBwcm9wc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBmaWx0ZXIuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRnVuY3Rpb25zKG9iamVjdCwgcHJvcHMpIHtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG9iamVjdFtrZXldKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gICAgICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgICAgIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgICAgIH1cbiAgICAgIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICAgICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmd0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc2Agd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXMob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGtleSBpbiBPYmplY3Qob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pblJhbmdlYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHJldHVybiBudW1iZXIgPj0gbmF0aXZlTWluKHN0YXJ0LCBlbmQpICYmIG51bWJlciA8IG5hdGl2ZU1heChzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCwgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHNoYXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludGVyc2VjdGlvbihhcnJheXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5jbHVkZXMgPSBjb21wYXJhdG9yID8gYXJyYXlJbmNsdWRlc1dpdGggOiBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5c1swXS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aCxcbiAgICAgICAgICBjYWNoZXMgPSBBcnJheShvdGhMZW5ndGgpLFxuICAgICAgICAgIG1heExlbmd0aCA9IEluZmluaXR5LFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAob3RoSW5kZXgtLSkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbb3RoSW5kZXhdO1xuICAgICAgICBpZiAob3RoSW5kZXggJiYgaXRlcmF0ZWUpIHtcbiAgICAgICAgICBhcnJheSA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgICAgfVxuICAgICAgICBtYXhMZW5ndGggPSBuYXRpdmVNaW4oYXJyYXkubGVuZ3RoLCBtYXhMZW5ndGgpO1xuICAgICAgICBjYWNoZXNbb3RoSW5kZXhdID0gIWNvbXBhcmF0b3IgJiYgKGl0ZXJhdGVlIHx8IChsZW5ndGggPj0gMTIwICYmIGFycmF5Lmxlbmd0aCA+PSAxMjApKVxuICAgICAgICAgID8gbmV3IFNldENhY2hlKG90aEluZGV4ICYmIGFycmF5KVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJyYXkgPSBhcnJheXNbMF07XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHNlZW4gPSBjYWNoZXNbMF07XG5cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgcmVzdWx0Lmxlbmd0aCA8IG1heExlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmICghKHNlZW5cbiAgICAgICAgICAgICAgPyBjYWNoZUhhcyhzZWVuLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgOiBpbmNsdWRlcyhyZXN1bHQsIGNvbXB1dGVkLCBjb21wYXJhdG9yKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgtLW90aEluZGV4KSB7XG4gICAgICAgICAgICB2YXIgY2FjaGUgPSBjYWNoZXNbb3RoSW5kZXhdO1xuICAgICAgICAgICAgaWYgKCEoY2FjaGVcbiAgICAgICAgICAgICAgICAgID8gY2FjaGVIYXMoY2FjaGUsIGNvbXB1dGVkKVxuICAgICAgICAgICAgICAgICAgOiBpbmNsdWRlcyhhcnJheXNbb3RoSW5kZXhdLCBjb21wdXRlZCwgY29tcGFyYXRvcikpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludmVydGAgYW5kIGBfLmludmVydEJ5YCB3aGljaCBpbnZlcnRzXG4gICAgICogYG9iamVjdGAgd2l0aCB2YWx1ZXMgdHJhbnNmb3JtZWQgYnkgYGl0ZXJhdGVlYCBhbmQgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0gdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCBpdGVyYXRlZSh2YWx1ZSksIGtleSwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludm9rZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogbWV0aG9kIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgdmFyIGZ1bmMgPSBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgICByZXR1cm4gZnVuYyA9PSBudWxsID8gdW5kZWZpbmVkIDogYXBwbHkoZnVuYywgb2JqZWN0LCBhcmdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcnJheUJ1ZmZlcmAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FycmF5QnVmZmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcnJheUJ1ZmZlclRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0RhdGVgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRGF0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gZGF0ZVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gICAgICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gICAgICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICAgICAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gICAgICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICAgICAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICAgICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgfVxuICAgICAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgICAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICAgICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWlzU2FtZVRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hcGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IG1hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtBcnJheX0gbWF0Y2hEYXRhIFRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gaW5kZXgsXG4gICAgICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgICAgICA/IGRhdGFbMV0gIT09IG9iamVjdFtkYXRhWzBdXVxuICAgICAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgICAgIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICAgICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcsIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1JlZ0V4cGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzUmVnRXhwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSByZWdleHBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNTZXRgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBzZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSkge1xuICAgICAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgICAgIDogYmFzZU1hdGNoZXModmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICAgICAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmx0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA8IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hcGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gICAgICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgaWYgKGlzS2V5KHBhdGgpICYmIGlzU3RyaWN0Q29tcGFyYWJsZShzcmNWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgICAgICByZXR1cm4gKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgb2JqVmFsdWUgPT09IHNyY1ZhbHVlKVxuICAgICAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICBpZiAob2JqZWN0ID09PSBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYmFzZUZvcihzb3VyY2UsIGZ1bmN0aW9uKHNyY1ZhbHVlLCBrZXkpIHtcbiAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VNZXJnZWAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgbWVyZ2VzIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gbWVyZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXJnZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1lcmdlIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IHNhZmVHZXQob2JqZWN0LCBrZXkpLFxuICAgICAgICAgIHNyY1ZhbHVlID0gc2FmZUdldChzb3VyY2UsIGtleSksXG4gICAgICAgICAgc3RhY2tlZCA9IHN0YWNrLmdldChzcmNWYWx1ZSk7XG5cbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHN0YWNrZWQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBpc0NvbW1vbiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiBpc0J1ZmZlcihzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc1R5cGVkID0gIWlzQXJyICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKTtcblxuICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICBpZiAoaXNBcnIgfHwgaXNCdWZmIHx8IGlzVHlwZWQpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjb3B5QXJyYXkob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0J1ZmYpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lQnVmZmVyKHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNUeXBlZCkge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVUeXBlZEFycmF5KHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdG9QbGFpbk9iamVjdChvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKCFpc09iamVjdChvYmpWYWx1ZSkgfHwgaXNGdW5jdGlvbihvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaW5pdENsb25lT2JqZWN0KHNyY1ZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgbWVyZ2VGdW5jKG5ld1ZhbHVlLCBzcmNWYWx1ZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5udGhgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU50aChhcnJheSwgbikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG4gKz0gbiA8IDAgPyBsZW5ndGggOiAwO1xuICAgICAgcmV0dXJuIGlzSW5kZXgobiwgbGVuZ3RoKSA/IGFycmF5W25dIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm9yZGVyQnlgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBpdGVyYXRlZXMgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IG9yZGVycyBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKSB7XG4gICAgICBpZiAoaXRlcmF0ZWVzLmxlbmd0aCkge1xuICAgICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgaWYgKGlzQXJyYXkoaXRlcmF0ZWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGJhc2VHZXQodmFsdWUsIGl0ZXJhdGVlLmxlbmd0aCA9PT0gMSA/IGl0ZXJhdGVlWzBdIDogaXRlcmF0ZWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaXRlcmF0ZWU7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW2lkZW50aXR5XTtcbiAgICAgIH1cblxuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlTWFwKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgdmFyIGNyaXRlcmlhID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRlZSh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4geyAnY3JpdGVyaWEnOiBjcml0ZXJpYSwgJ2luZGV4JzogKytpbmRleCwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVNvcnRCeShyZXN1bHQsIGZ1bmN0aW9uKG9iamVjdCwgb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucGlja2Agd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUGljayhvYmplY3QsIHBhdGhzKSB7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gaGFzSW4ob2JqZWN0LCBwYXRoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mICBgXy5waWNrQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHBhdGggPSBwYXRoc1tpbmRleF0sXG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcblxuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBwYXRoKSkge1xuICAgICAgICAgIGJhc2VTZXQocmVzdWx0LCBjYXN0UGF0aChwYXRoLCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUHJvcGVydHlgIHdoaWNoIHN1cHBvcnRzIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVByb3BlcnR5RGVlcChwYXRoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBbGxCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgICAqIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleE9mID0gY29tcGFyYXRvciA/IGJhc2VJbmRleE9mV2l0aCA6IGJhc2VJbmRleE9mLFxuICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICBzZWVuID0gYXJyYXk7XG5cbiAgICAgIGlmIChhcnJheSA9PT0gdmFsdWVzKSB7XG4gICAgICAgIHZhbHVlcyA9IGNvcHlBcnJheSh2YWx1ZXMpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHNlZW4gPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZnJvbUluZGV4ID0gMCxcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzW2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB3aGlsZSAoKGZyb21JbmRleCA9IGluZGV4T2Yoc2VlbiwgY29tcHV0ZWQsIGZyb21JbmRleCwgY29tcGFyYXRvcikpID4gLTEpIHtcbiAgICAgICAgICBpZiAoc2VlbiAhPT0gYXJyYXkpIHtcbiAgICAgICAgICAgIHNwbGljZS5jYWxsKHNlZW4sIGZyb21JbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHVsbEF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBpbmRleGVzIG9yIGNhcHR1cmluZyB0aGUgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcltdfSBpbmRleGVzIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBpbmRleGVzLmxlbmd0aCA6IDAsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgaWYgKGxlbmd0aCA9PSBsYXN0SW5kZXggfHwgaW5kZXggIT09IHByZXZpb3VzKSB7XG4gICAgICAgICAgdmFyIHByZXZpb3VzID0gaW5kZXg7XG4gICAgICAgICAgaWYgKGlzSW5kZXgoaW5kZXgpKSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgaW5kZXgsIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBiYXNlVW5zZXQoYXJyYXksIGluZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5kb21gIHdpdGhvdXQgc3VwcG9ydCBmb3IgcmV0dXJuaW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxvd2VyIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmRvbShsb3dlciwgdXBwZXIpIHtcbiAgICAgIHJldHVybiBsb3dlciArIG5hdGl2ZUZsb29yKG5hdGl2ZVJhbmRvbSgpICogKHVwcGVyIC0gbG93ZXIgKyAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZ2VgIGFuZCBgXy5yYW5nZVJpZ2h0YCB3aGljaCBkb2Vzbid0XG4gICAgICogY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RlcCBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KG5hdGl2ZUNlaWwoKGVuZCAtIHN0YXJ0KSAvIChzdGVwIHx8IDEpKSwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XSA9IHN0YXJ0O1xuICAgICAgICBzdGFydCArPSBzdGVwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXBlYXRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVwZWF0KHN0cmluZywgbikge1xuICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgaWYgKCFzdHJpbmcgfHwgbiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIC8vIExldmVyYWdlIHRoZSBleHBvbmVudGlhdGlvbiBieSBzcXVhcmluZyBhbGdvcml0aG0gZm9yIGEgZmFzdGVyIHJlcGVhdC5cbiAgICAgIC8vIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FeHBvbmVudGlhdGlvbl9ieV9zcXVhcmluZyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgZG8ge1xuICAgICAgICBpZiAobiAlIDIpIHtcbiAgICAgICAgICByZXN1bHQgKz0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIG4gPSBuYXRpdmVGbG9vcihuIC8gMik7XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgc3RyaW5nICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAobik7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2FtcGxlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBhcnJheVNhbXBsZSh2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZVNpemVgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZVNpemUoY29sbGVjdGlvbiwgbikge1xuICAgICAgdmFyIGFycmF5ID0gdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGFycmF5LCBiYXNlQ2xhbXAobiwgMCwgYXJyYXkubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH1cbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxLFxuICAgICAgICAgIG5lc3RlZCA9IG9iamVjdDtcblxuICAgICAgd2hpbGUgKG5lc3RlZCAhPSBudWxsICYmICsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKSxcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdmFsdWU7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gJ19fcHJvdG9fXycgfHwga2V5ID09PSAnY29uc3RydWN0b3InIHx8IGtleSA9PT0gJ3Byb3RvdHlwZScpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IGxhc3RJbmRleCkge1xuICAgICAgICAgIHZhciBvYmpWYWx1ZSA9IG5lc3RlZFtrZXldO1xuICAgICAgICAgIG5ld1ZhbHVlID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIGtleSwgbmVzdGVkKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpc09iamVjdChvYmpWYWx1ZSlcbiAgICAgICAgICAgICAgPyBvYmpWYWx1ZVxuICAgICAgICAgICAgICA6IChpc0luZGV4KHBhdGhbaW5kZXggKyAxXSkgPyBbXSA6IHt9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXNzaWduVmFsdWUobmVzdGVkLCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgbmVzdGVkID0gbmVzdGVkW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXREYXRhYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXREYXRhID0gIW1ldGFNYXAgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIGRhdGEpIHtcbiAgICAgIG1ldGFNYXAuc2V0KGZ1bmMsIGRhdGEpO1xuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXRUb1N0cmluZ2Agd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jLCAndG9TdHJpbmcnLCB7XG4gICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICAgICAndmFsdWUnOiBjb25zdGFudChzdHJpbmcpLFxuICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2h1ZmZsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2xpY2VgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IGVuZCA+IGxlbmd0aCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBzdGFydCA+IGVuZCA/IDAgOiAoKGVuZCAtIHN0YXJ0KSA+Pj4gMCk7XG4gICAgICBzdGFydCA+Pj49IDA7XG5cbiAgICAgIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4ICsgc3RhcnRdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb21lYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29tZShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQ7XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHQgPSBwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuICFyZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleGAgYW5kIGBfLnNvcnRlZExhc3RJbmRleGAgd2hpY2hcbiAgICAgKiBwZXJmb3JtcyBhIGJpbmFyeSBzZWFyY2ggb2YgYGFycmF5YCB0byBkZXRlcm1pbmUgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0SGlnaGVzdF0gU3BlY2lmeSByZXR1cm5pbmcgdGhlIGhpZ2hlc3QgcXVhbGlmaWVkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCByZXRIaWdoZXN0KSB7XG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IGxvdyA6IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PT0gdmFsdWUgJiYgaGlnaCA8PSBIQUxGX01BWF9BUlJBWV9MRU5HVEgpIHtcbiAgICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgICB2YXIgbWlkID0gKGxvdyArIGhpZ2gpID4+PiAxLFxuICAgICAgICAgICAgICBjb21wdXRlZCA9IGFycmF5W21pZF07XG5cbiAgICAgICAgICBpZiAoY29tcHV0ZWQgIT09IG51bGwgJiYgIWlzU3ltYm9sKGNvbXB1dGVkKSAmJlxuICAgICAgICAgICAgICAocmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSkpKSB7XG4gICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGlnaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGlkZW50aXR5LCByZXRIaWdoZXN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleEJ5YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4QnlgXG4gICAgICogd2hpY2ggaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlXG4gICAgICogdGhlaXIgc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGhpZ2ggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIHZhbHVlID0gaXRlcmF0ZWUodmFsdWUpO1xuICAgICAgdmFyIHZhbElzTmFOID0gdmFsdWUgIT09IHZhbHVlLFxuICAgICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpLFxuICAgICAgICAgIHZhbElzVW5kZWZpbmVkID0gdmFsdWUgPT09IHVuZGVmaW5lZDtcblxuICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgdmFyIG1pZCA9IG5hdGl2ZUZsb29yKChsb3cgKyBoaWdoKSAvIDIpLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZShhcnJheVttaWRdKSxcbiAgICAgICAgICAgIG90aElzRGVmaW5lZCA9IGNvbXB1dGVkICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdGhJc051bGwgPSBjb21wdXRlZCA9PT0gbnVsbCxcbiAgICAgICAgICAgIG90aElzUmVmbGV4aXZlID0gY29tcHV0ZWQgPT09IGNvbXB1dGVkLFxuICAgICAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChjb21wdXRlZCk7XG5cbiAgICAgICAgaWYgKHZhbElzTmFOKSB7XG4gICAgICAgICAgdmFyIHNldExvdyA9IHJldEhpZ2hlc3QgfHwgb3RoSXNSZWZsZXhpdmU7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNVbmRlZmluZWQpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiAocmV0SGlnaGVzdCB8fCBvdGhJc0RlZmluZWQpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzTnVsbCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIG90aElzRGVmaW5lZCAmJiAocmV0SGlnaGVzdCB8fCAhb3RoSXNOdWxsKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1N5bWJvbCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIG90aElzRGVmaW5lZCAmJiAhb3RoSXNOdWxsICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc1N5bWJvbCk7XG4gICAgICAgIH0gZWxzZSBpZiAob3RoSXNOdWxsIHx8IG90aElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0TG93ID0gcmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNldExvdykge1xuICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZU1pbihoaWdoLCBNQVhfQVJSQVlfSU5ERVgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZFVuaXFgIGFuZCBgXy5zb3J0ZWRVbmlxQnlgIHdpdGhvdXRcbiAgICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRVbmlxKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIGlmICghaW5kZXggfHwgIWVxKGNvbXB1dGVkLCBzZWVuKSkge1xuICAgICAgICAgIHZhciBzZWVuID0gY29tcHV0ZWQ7XG4gICAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9OdW1iZXJgIHdoaWNoIGRvZXNuJ3QgZW5zdXJlIGNvcnJlY3RcbiAgICAgKiBjb252ZXJzaW9ucyBvZiBiaW5hcnksIGhleGFkZWNpbWFsLCBvciBvY3RhbCBzdHJpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9OdW1iZXIodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gTkFOO1xuICAgICAgfVxuICAgICAgcmV0dXJuICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAgICAgKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuaXFCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVbmlxKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgc2VlbiA9IHJlc3VsdDtcblxuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgICAgIHZhciBzZXQgPSBpdGVyYXRlZSA/IG51bGwgOiBjcmVhdGVTZXQoYXJyYXkpO1xuICAgICAgICBpZiAoc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRvQXJyYXkoc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgICAgICBzZWVuID0gbmV3IFNldENhY2hlO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHNlZW4gPSBpdGVyYXRlZSA/IFtdIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICB2YXIgc2VlbkluZGV4ID0gc2Vlbi5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHNlZW5JbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAoc2VlbltzZWVuSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluY2x1ZGVzKHNlZW4sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgICAgIGlmIChzZWVuICE9PSByZXN1bHQpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bnNldGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHByb3BlcnR5IHBhdGggdG8gdW5zZXQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICBvYmplY3QgPSBwYXJlbnQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCB8fCBkZWxldGUgb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51cGRhdGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byB1cGRhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIHVwZGF0ZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHJldHVybiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdXBkYXRlcihiYXNlR2V0KG9iamVjdCwgcGF0aCkpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZHJvcFdoaWxlYCBhbmQgYF8udGFrZVdoaWxlYFxuICAgICAqIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRHJvcF0gU3BlY2lmeSBkcm9wcGluZyBlbGVtZW50cyBpbnN0ZWFkIG9mIHRha2luZyB0aGVtLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV2hpbGUoYXJyYXksIHByZWRpY2F0ZSwgaXNEcm9wLCBmcm9tUmlnaHQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMTtcblxuICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkgJiZcbiAgICAgICAgcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge31cblxuICAgICAgcmV0dXJuIGlzRHJvcFxuICAgICAgICA/IGJhc2VTbGljZShhcnJheSwgKGZyb21SaWdodCA/IDAgOiBpbmRleCksIChmcm9tUmlnaHQgPyBpbmRleCArIDEgOiBsZW5ndGgpKVxuICAgICAgICA6IGJhc2VTbGljZShhcnJheSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IDApLCAoZnJvbVJpZ2h0ID8gbGVuZ3RoIDogaW5kZXgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgd3JhcHBlclZhbHVlYCB3aGljaCByZXR1cm5zIHRoZSByZXN1bHQgb2ZcbiAgICAgKiBwZXJmb3JtaW5nIGEgc2VxdWVuY2Ugb2YgYWN0aW9ucyBvbiB0aGUgdW53cmFwcGVkIGB2YWx1ZWAsIHdoZXJlIGVhY2hcbiAgICAgKiBzdWNjZXNzaXZlIGFjdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFjdGlvbnMgQWN0aW9ucyB0byBwZXJmb3JtIHRvIHJlc29sdmUgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVdyYXBwZXJWYWx1ZSh2YWx1ZSwgYWN0aW9ucykge1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC52YWx1ZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKGFjdGlvbnMsIGZ1bmN0aW9uKHJlc3VsdCwgYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBhY3Rpb24uZnVuYy5hcHBseShhY3Rpb24udGhpc0FyZywgYXJyYXlQdXNoKFtyZXN1bHRdLCBhY3Rpb24uYXJncykpO1xuICAgICAgfSwgcmVzdWx0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8ueG9yYCwgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWG9yKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VVbmlxKGFycmF5c1swXSkgOiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFycmF5c1tpbmRleF0sXG4gICAgICAgICAgICBvdGhJbmRleCA9IC0xO1xuXG4gICAgICAgIHdoaWxlICgrK290aEluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKG90aEluZGV4ICE9IGluZGV4KSB7XG4gICAgICAgICAgICByZXN1bHRbaW5kZXhdID0gYmFzZURpZmZlcmVuY2UocmVzdWx0W2luZGV4XSB8fCBhcnJheSwgYXJyYXlzW290aEluZGV4XSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKHJlc3VsdCwgMSksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uemlwT2JqZWN0YCB3aGljaCBhc3NpZ25zIHZhbHVlcyB1c2luZyBgYXNzaWduRnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25GdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVppcE9iamVjdChwcm9wcywgdmFsdWVzLCBhc3NpZ25GdW5jKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGgsXG4gICAgICAgICAgdmFsc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGluZGV4IDwgdmFsc0xlbmd0aCA/IHZhbHVlc1tpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICAgIGFzc2lnbkZ1bmMocmVzdWx0LCBwcm9wc1tpbmRleF0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBhbiBlbXB0eSBhcnJheSBpZiBpdCdzIG5vdCBhbiBhcnJheSBsaWtlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgPyB2YWx1ZSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYGlkZW50aXR5YCBpZiBpdCdzIG5vdCBhIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBjYXN0IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nID8gdmFsdWUgOiBpZGVudGl0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0UGF0aCh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgYGJhc2VSZXN0YCBhbGlhcyB3aGljaCBjYW4gYmUgcmVwbGFjZWQgd2l0aCBgaWRlbnRpdHlgIGJ5IG1vZHVsZVxuICAgICAqIHJlcGxhY2VtZW50IHBsdWdpbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHZhciBjYXN0UmVzdCA9IGJhc2VSZXN0O1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYGFycmF5YCB0byBhIHNsaWNlIGlmIGl0J3MgbmVlZGVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3Qgc2xpY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdFNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQ7XG4gICAgICByZXR1cm4gKCFzdGFydCAmJiBlbmQgPj0gbGVuZ3RoKSA/IGFycmF5IDogYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNpbXBsZSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2xvYmFsIFtgY2xlYXJUaW1lb3V0YF0oaHR0cHM6Ly9tZG4uaW8vY2xlYXJUaW1lb3V0KS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ8T2JqZWN0fSBpZCBUaGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3Qgb2YgdGhlIHRpbWVyIHRvIGNsZWFyLlxuICAgICAqL1xuICAgIHZhciBjbGVhclRpbWVvdXQgPSBjdHhDbGVhclRpbWVvdXQgfHwgZnVuY3Rpb24oaWQpIHtcbiAgICAgIHJldHVybiByb290LmNsZWFyVGltZW91dChpZCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVCdWZmZXIoYnVmZmVyLCBpc0RlZXApIHtcbiAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gYWxsb2NVbnNhZmUgPyBhbGxvY1Vuc2FmZShsZW5ndGgpIDogbmV3IGJ1ZmZlci5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICBidWZmZXIuY29weShyZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGFycmF5QnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYXJyYXlCdWZmZXIgVGhlIGFycmF5IGJ1ZmZlciB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBhcnJheSBidWZmZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVBcnJheUJ1ZmZlcihhcnJheUJ1ZmZlcikge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBhcnJheUJ1ZmZlci5jb25zdHJ1Y3RvcihhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgZGF0YVZpZXdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVZpZXcgVGhlIGRhdGEgdmlldyB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBkYXRhIHZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEYXRhVmlldyhkYXRhVmlldywgaXNEZWVwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcihkYXRhVmlldy5idWZmZXIpIDogZGF0YVZpZXcuYnVmZmVyO1xuICAgICAgcmV0dXJuIG5ldyBkYXRhVmlldy5jb25zdHJ1Y3RvcihidWZmZXIsIGRhdGFWaWV3LmJ5dGVPZmZzZXQsIGRhdGFWaWV3LmJ5dGVMZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgcmVnZXhwYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJlZ2V4cCBUaGUgcmVnZXhwIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVSZWdFeHAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gICAgICByZXN1bHQubGFzdEluZGV4ID0gcmVnZXhwLmxhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBgc3ltYm9sYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzeW1ib2wgVGhlIHN5bWJvbCBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHN5bWJvbCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVTeW1ib2woc3ltYm9sKSB7XG4gICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZiA/IE9iamVjdChzeW1ib2xWYWx1ZU9mLmNhbGwoc3ltYm9sKSkgOiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHR5cGVkQXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdHlwZWRBcnJheSBUaGUgdHlwZWQgYXJyYXkgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wYXJlcyB2YWx1ZXMgdG8gc29ydCB0aGVtIGluIGFzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgdmFsdWVgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVBc2NlbmRpbmcodmFsdWUsIG90aGVyKSB7XG4gICAgICBpZiAodmFsdWUgIT09IG90aGVyKSB7XG4gICAgICAgIHZhciB2YWxJc0RlZmluZWQgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgICB2YWxJc1JlZmxleGl2ZSA9IHZhbHVlID09PSB2YWx1ZSxcbiAgICAgICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpO1xuXG4gICAgICAgIHZhciBvdGhJc0RlZmluZWQgPSBvdGhlciAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3RoSXNOdWxsID0gb3RoZXIgPT09IG51bGwsXG4gICAgICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IG90aGVyID09PSBvdGhlcixcbiAgICAgICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2wob3RoZXIpO1xuXG4gICAgICAgIGlmICgoIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wgJiYgIXZhbElzU3ltYm9sICYmIHZhbHVlID4gb3RoZXIpIHx8XG4gICAgICAgICAgICAodmFsSXNTeW1ib2wgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlICYmICFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sKSB8fFxuICAgICAgICAgICAgKHZhbElzTnVsbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAoIXZhbElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICF2YWxJc1JlZmxleGl2ZSkge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wgJiYgIW90aElzU3ltYm9sICYmIHZhbHVlIDwgb3RoZXIpIHx8XG4gICAgICAgICAgICAob3RoSXNTeW1ib2wgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlICYmICF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sKSB8fFxuICAgICAgICAgICAgKG90aElzTnVsbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAoIW90aElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICFvdGhJc1JlZmxleGl2ZSkge1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5vcmRlckJ5YCB0byBjb21wYXJlIG11bHRpcGxlIHByb3BlcnRpZXMgb2YgYSB2YWx1ZSB0byBhbm90aGVyXG4gICAgICogYW5kIHN0YWJsZSBzb3J0IHRoZW0uXG4gICAgICpcbiAgICAgKiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlcyBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLFxuICAgICAqIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yIGRlc2NlbmRpbmcgb3IgXCJhc2NcIiBmb3IgYXNjZW5kaW5nIHNvcnQgb3JkZXJcbiAgICAgKiBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW5bXXxzdHJpbmdbXX0gb3JkZXJzIFRoZSBvcmRlciB0byBzb3J0IGJ5IGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBvYmpDcml0ZXJpYSA9IG9iamVjdC5jcml0ZXJpYSxcbiAgICAgICAgICBvdGhDcml0ZXJpYSA9IG90aGVyLmNyaXRlcmlhLFxuICAgICAgICAgIGxlbmd0aCA9IG9iakNyaXRlcmlhLmxlbmd0aCxcbiAgICAgICAgICBvcmRlcnNMZW5ndGggPSBvcmRlcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY29tcGFyZUFzY2VuZGluZyhvYmpDcml0ZXJpYVtpbmRleF0sIG90aENyaXRlcmlhW2luZGV4XSk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBpZiAoaW5kZXggPj0gb3JkZXJzTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgb3JkZXIgPSBvcmRlcnNbaW5kZXhdO1xuICAgICAgICAgIHJldHVybiByZXN1bHQgKiAob3JkZXIgPT0gJ2Rlc2MnID8gLTEgOiAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRml4ZXMgYW4gYEFycmF5I3NvcnRgIGJ1ZyBpbiB0aGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIGFwcGxpY2F0aW9uc1xuICAgICAgLy8gdGhhdCBjYXVzZXMgaXQsIHVuZGVyIGNlcnRhaW4gY2lyY3Vtc3RhbmNlcywgdG8gcHJvdmlkZSB0aGUgc2FtZSB2YWx1ZSBmb3JcbiAgICAgIC8vIGBvYmplY3RgIGFuZCBgb3RoZXJgLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL3B1bGwvMTI0N1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGFsc28gZW5zdXJlcyBhIHN0YWJsZSBzb3J0IGluIFY4IGFuZCBvdGhlciBlbmdpbmVzLlxuICAgICAgLy8gU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTkwIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0LmluZGV4IC0gb3RoZXIuaW5kZXg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMsXG4gICAgICogcGxhY2Vob2xkZXJzLCBhbmQgcHJvdmlkZWQgYXJndW1lbnRzIGludG8gYSBzaW5nbGUgYXJyYXkgb2YgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZWZ0TGVuZ3RoICsgcmFuZ2VMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICByZXN1bHRbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKythcmdzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0W2hvbGRlcnNbYXJnc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlIChyYW5nZUxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXgrK10gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBjb21wb3NlQXJnc2AgZXhjZXB0IHRoYXQgdGhlIGFyZ3VtZW50cyBjb21wb3NpdGlvblxuICAgICAqIGlzIHRhaWxvcmVkIGZvciBgXy5wYXJ0aWFsUmlnaHRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xuICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBob2xkZXJzSW5kZXggPSAtMSxcbiAgICAgICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICAgICAgcmlnaHRJbmRleCA9IC0xLFxuICAgICAgICAgIHJpZ2h0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShyYW5nZUxlbmd0aCArIHJpZ2h0TGVuZ3RoKSxcbiAgICAgICAgICBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG5cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IHJhbmdlTGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFthcmdzSW5kZXhdID0gYXJnc1thcmdzSW5kZXhdO1xuICAgICAgfVxuICAgICAgdmFyIG9mZnNldCA9IGFyZ3NJbmRleDtcbiAgICAgIHdoaWxlICgrK3JpZ2h0SW5kZXggPCByaWdodExlbmd0aCkge1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgcmlnaHRJbmRleF0gPSBwYXJ0aWFsc1tyaWdodEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2hvbGRlcnNJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbb2Zmc2V0ICsgaG9sZGVyc1tob2xkZXJzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICAgICAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICAgICAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgICAgIG9iamVjdCB8fCAob2JqZWN0ID0ge30pO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICAgID8gY3VzdG9taXplcihvYmplY3Rba2V5XSwgc291cmNlW2tleV0sIGtleSwgb2JqZWN0LCBzb3VyY2UpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc05ldykge1xuICAgICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVN5bWJvbHMoc291cmNlLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9scyhzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBvd24gYW5kIGluaGVyaXRlZCBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVN5bWJvbHNJbihzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5ncm91cEJ5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpbml0aWFsaXplcl0gVGhlIGFjY3VtdWxhdG9yIG9iamVjdCBpbml0aWFsaXplci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhZ2dyZWdhdG9yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFnZ3JlZ2F0b3Ioc2V0dGVyLCBpbml0aWFsaXplcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5QWdncmVnYXRvciA6IGJhc2VBZ2dyZWdhdG9yLFxuICAgICAgICAgICAgYWNjdW11bGF0b3IgPSBpbml0aWFsaXplciA/IGluaXRpYWxpemVyKCkgOiB7fTtcblxuICAgICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBzZXR0ZXIsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYWNjdW11bGF0b3IpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5hc3NpZ25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25lciBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhc3NpZ25lciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBc3NpZ25lcihhc3NpZ25lcikge1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoLFxuICAgICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA+IDEgPyBzb3VyY2VzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgICBjdXN0b21pemVyID0gKGFzc2lnbmVyLmxlbmd0aCA+IDMgJiYgdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICA/IChsZW5ndGgtLSwgY3VzdG9taXplcilcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICAgIGFzc2lnbmVyKG9iamVjdCwgc291cmNlLCBpbmRleCwgY3VzdG9taXplcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGJhc2VFYWNoYCBvciBgYmFzZUVhY2hSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYSBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmFzZUVhY2goZWFjaEZ1bmMsIGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmV0dXJuIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVbaW5kZXhdLCBpbmRleCwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgICAgIHByb3BzID0ga2V5c0Z1bmMob2JqZWN0KSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmluZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkoaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5sb3dlckZpcnN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBTdHJpbmdgIGNhc2UgbWV0aG9kIHRvIHVzZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNhc2VGaXJzdChtZXRob2ROYW1lKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgICAgICA/IHN0cmluZ1RvQXJyYXkoc3RyaW5nKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIHZhciBjaHIgPSBzdHJTeW1ib2xzXG4gICAgICAgICAgPyBzdHJTeW1ib2xzWzBdXG4gICAgICAgICAgOiBzdHJpbmcuY2hhckF0KDApO1xuXG4gICAgICAgIHZhciB0cmFpbGluZyA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IGNhc3RTbGljZShzdHJTeW1ib2xzLCAxKS5qb2luKCcnKVxuICAgICAgICAgIDogc3RyaW5nLnNsaWNlKDEpO1xuXG4gICAgICAgIHJldHVybiBjaHJbbWV0aG9kTmFtZV0oKSArIHRyYWlsaW5nO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5jYW1lbENhc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gY29tYmluZSBlYWNoIHdvcmQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG91bmRlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDb21wb3VuZGVyKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBhcnJheVJlZHVjZSh3b3JkcyhkZWJ1cnIoc3RyaW5nKS5yZXBsYWNlKHJlQXBvcywgJycpKSwgY2FsbGJhY2ssICcnKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJvZHVjZXMgYW4gaW5zdGFuY2Ugb2YgYEN0b3JgIHJlZ2FyZGxlc3Mgb2ZcbiAgICAgKiB3aGV0aGVyIGl0IHdhcyBpbnZva2VkIGFzIHBhcnQgb2YgYSBgbmV3YCBleHByZXNzaW9uIG9yIGJ5IGBjYWxsYCBvciBgYXBwbHlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBDdG9yIFRoZSBjb25zdHJ1Y3RvciB0byB3cmFwLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3RvcihDdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFVzZSBhIGBzd2l0Y2hgIHN0YXRlbWVudCB0byB3b3JrIHdpdGggY2xhc3MgY29uc3RydWN0b3JzLiBTZWVcbiAgICAgICAgLy8gaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1mdW5jdGlvbi1vYmplY3RzLWNhbGwtdGhpc2FyZ3VtZW50LWFyZ3VtZW50c2xpc3RcbiAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQ3RvcjtcbiAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdKTtcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdKTtcbiAgICAgICAgICBjYXNlIDc6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdLCBhcmdzWzZdKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBiYXNlQ3JlYXRlKEN0b3IucHJvdG90eXBlKSxcbiAgICAgICAgICAgIHJlc3VsdCA9IEN0b3IuYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuXG4gICAgICAgIC8vIE1pbWljIHRoZSBjb25zdHJ1Y3RvcidzIGByZXR1cm5gIGJlaGF2aW9yLlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTMuMi4yIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogdGhpc0JpbmRpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBlbmFibGUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXJpdHkgVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KSB7XG4gICAgICB2YXIgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBob2xkZXJzID0gKGxlbmd0aCA8IDMgJiYgYXJnc1swXSAhPT0gcGxhY2Vob2xkZXIgJiYgYXJnc1tsZW5ndGggLSAxXSAhPT0gcGxhY2Vob2xkZXIpXG4gICAgICAgICAgPyBbXVxuICAgICAgICAgIDogcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuXG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFyZ3MsIGhvbGRlcnMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSAtIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZuLCB0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5maW5kYCBvciBgXy5maW5kTGFzdGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbmRJbmRleEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZpbmQgdGhlIGNvbGxlY3Rpb24gaW5kZXguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmluZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGaW5kKGZpbmRJbmRleEZ1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgICB2YXIgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICB2YXIgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgICAgIGNvbGxlY3Rpb24gPSBrZXlzKGNvbGxlY3Rpb24pO1xuICAgICAgICAgIHByZWRpY2F0ZSA9IGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSk7IH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluZGV4ID0gZmluZEluZGV4RnVuYyhjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCk7XG4gICAgICAgIHJldHVybiBpbmRleCA+IC0xID8gaXRlcmFibGVbaXRlcmF0ZWUgPyBjb2xsZWN0aW9uW2luZGV4XSA6IGluZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZsb3dgIG9yIGBfLmZsb3dSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZsb3cgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmxvdyhmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihmdW5jcykge1xuICAgICAgICB2YXIgbGVuZ3RoID0gZnVuY3MubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgICAgICBwcmVyZXEgPSBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS50aHJ1O1xuXG4gICAgICAgIGlmIChmcm9tUmlnaHQpIHtcbiAgICAgICAgICBmdW5jcy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICB2YXIgZnVuYyA9IGZ1bmNzW2luZGV4XTtcbiAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJlcmVxICYmICF3cmFwcGVyICYmIGdldEZ1bmNOYW1lKGZ1bmMpID09ICd3cmFwcGVyJykge1xuICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBuZXcgTG9kYXNoV3JhcHBlcihbXSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gd3JhcHBlciA/IGluZGV4IDogbGVuZ3RoO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGZ1bmMgPSBmdW5jc1tpbmRleF07XG5cbiAgICAgICAgICB2YXIgZnVuY05hbWUgPSBnZXRGdW5jTmFtZShmdW5jKSxcbiAgICAgICAgICAgICAgZGF0YSA9IGZ1bmNOYW1lID09ICd3cmFwcGVyJyA/IGdldERhdGEoZnVuYykgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAoZGF0YSAmJiBpc0xhemlhYmxlKGRhdGFbMF0pICYmXG4gICAgICAgICAgICAgICAgZGF0YVsxXSA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSAmJlxuICAgICAgICAgICAgICAgICFkYXRhWzRdLmxlbmd0aCAmJiBkYXRhWzldID09IDFcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gd3JhcHBlcltnZXRGdW5jTmFtZShkYXRhWzBdKV0uYXBwbHkod3JhcHBlciwgZGF0YVszXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSAoZnVuYy5sZW5ndGggPT0gMSAmJiBpc0xhemlhYmxlKGZ1bmMpKVxuICAgICAgICAgICAgICA/IHdyYXBwZXJbZnVuY05hbWVdKClcbiAgICAgICAgICAgICAgOiB3cmFwcGVyLnRocnUoZnVuYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgdmFsdWUgPSBhcmdzWzBdO1xuXG4gICAgICAgICAgaWYgKHdyYXBwZXIgJiYgYXJncy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHdyYXBwZXIucGxhbnQodmFsdWUpLnZhbHVlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgICAgIHJlc3VsdCA9IGxlbmd0aCA/IGZ1bmNzW2luZGV4XS5hcHBseSh0aGlzLCBhcmdzKSA6IHZhbHVlO1xuXG4gICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmNzW2luZGV4XS5jYWxsKHRoaXMsIHJlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AsIHBhcnRpYWwgYXBwbGljYXRpb24sIGFuZCBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzUmlnaHRdIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkXG4gICAgICogIHRvIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNSaWdodF0gVGhlIGBwYXJ0aWFsc1JpZ2h0YCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUh5YnJpZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0FyeSA9IGJpdG1hc2sgJiBXUkFQX0FSWV9GTEFHLFxuICAgICAgICAgIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHLFxuICAgICAgICAgIGlzQ3VycmllZCA9IGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSxcbiAgICAgICAgICBpc0ZsaXAgPSBiaXRtYXNrICYgV1JBUF9GTElQX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDdXJyaWVkKSB7XG4gICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpLFxuICAgICAgICAgICAgICBob2xkZXJzQ291bnQgPSBjb3VudEhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFscykge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydGlhbHNSaWdodCkge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgaXNDdXJyaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBsZW5ndGggLT0gaG9sZGVyc0NvdW50O1xuICAgICAgICBpZiAoaXNDdXJyaWVkICYmIGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgdmFyIG5ld0hvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHRoaXNBcmcsXG4gICAgICAgICAgICBhcmdzLCBuZXdIb2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkgLSBsZW5ndGhcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLFxuICAgICAgICAgICAgZm4gPSBpc0JpbmRLZXkgPyB0aGlzQmluZGluZ1tmdW5jXSA6IGZ1bmM7XG5cbiAgICAgICAgbGVuZ3RoID0gYXJncy5sZW5ndGg7XG4gICAgICAgIGlmIChhcmdQb3MpIHtcbiAgICAgICAgICBhcmdzID0gcmVvcmRlcihhcmdzLCBhcmdQb3MpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRmxpcCAmJiBsZW5ndGggPiAxKSB7XG4gICAgICAgICAgYXJncy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJ5ICYmIGFyeSA8IGxlbmd0aCkge1xuICAgICAgICAgIGFyZ3MubGVuZ3RoID0gYXJ5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpIHtcbiAgICAgICAgICBmbiA9IEN0b3IgfHwgY3JlYXRlQ3Rvcihmbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmludmVydEJ5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHRvSXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludmVydGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmVydGVyKHNldHRlciwgdG9JdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZlcnRlcihvYmplY3QsIHNldHRlciwgdG9JdGVyYXRlZShpdGVyYXRlZSksIHt9KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSB1c2VkIGZvciBgdW5kZWZpbmVkYCBhcmd1bWVudHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbiBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVNYXRoT3BlcmF0aW9uKG9wZXJhdG9yLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgb3RoZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3RoZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG90aGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiBvdGhlciA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFsdWUgPSBiYXNlVG9TdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgb3RoZXIgPSBiYXNlVG9TdHJpbmcob3RoZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb051bWJlcihvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IG9wZXJhdG9yKHZhbHVlLCBvdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ub3ZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFycmF5RnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGl0ZXJhdGVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBvdmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU92ZXIoYXJyYXlGdW5jKSB7XG4gICAgICByZXR1cm4gZmxhdFJlc3QoZnVuY3Rpb24oaXRlcmF0ZWVzKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgICB2YXIgdGhpc0FyZyA9IHRoaXM7XG4gICAgICAgICAgcmV0dXJuIGFycmF5RnVuYyhpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkoaXRlcmF0ZWUsIHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgIGJhc2VkIG9uIGBsZW5ndGhgLiBUaGUgYGNoYXJzYCBzdHJpbmdcbiAgICAgKiBpcyB0cnVuY2F0ZWQgaWYgdGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGV4Y2VlZHMgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkaW5nIGZvciBgc3RyaW5nYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYWRkaW5nKGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIGNoYXJzID0gY2hhcnMgPT09IHVuZGVmaW5lZCA/ICcgJyA6IGJhc2VUb1N0cmluZyhjaGFycyk7XG5cbiAgICAgIHZhciBjaGFyc0xlbmd0aCA9IGNoYXJzLmxlbmd0aDtcbiAgICAgIGlmIChjaGFyc0xlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGNoYXJzTGVuZ3RoID8gYmFzZVJlcGVhdChjaGFycywgbGVuZ3RoKSA6IGNoYXJzO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VSZXBlYXQoY2hhcnMsIG5hdGl2ZUNlaWwobGVuZ3RoIC8gc3RyaW5nU2l6ZShjaGFycykpKTtcbiAgICAgIHJldHVybiBoYXNVbmljb2RlKGNoYXJzKVxuICAgICAgICA/IGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHJlc3VsdCksIDAsIGxlbmd0aCkuam9pbignJylcbiAgICAgICAgOiByZXN1bHQuc2xpY2UoMCwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nXG4gICAgICogb2YgYHRoaXNBcmdgIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZWZ0TGVuZ3RoICsgYXJnc0xlbmd0aCksXG4gICAgICAgICAgICBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG5cbiAgICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGFyZ3NMZW5ndGgtLSkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4KytdID0gYXJndW1lbnRzWysrYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5yYW5nZWAgb3IgYF8ucmFuZ2VSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJhbmdlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJhbmdlKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIHN0ZXApIHtcbiAgICAgICAgaWYgKHN0ZXAgJiYgdHlwZW9mIHN0ZXAgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RhcnQsIGVuZCwgc3RlcCkpIHtcbiAgICAgICAgICBlbmQgPSBzdGVwID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuc3VyZSB0aGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgICAgICB9XG4gICAgICAgIHN0ZXAgPSBzdGVwID09PSB1bmRlZmluZWQgPyAoc3RhcnQgPCBlbmQgPyAxIDogLTEpIDogdG9GaW5pdGUoc3RlcCk7XG4gICAgICAgIHJldHVybiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSByZWxhdGlvbmFsIG9wZXJhdGlvbiBvbiB0d28gdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcGVyYXRvciBUaGUgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlbGF0aW9uYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24ob3BlcmF0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgaWYgKCEodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnICYmIHR5cGVvZiBvdGhlciA9PSAnc3RyaW5nJykpIHtcbiAgICAgICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICBvdGhlciA9IHRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGNvbnRpbnVlIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgYGZ1bmNgIHdyYXBwZXIuXG4gICAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlY3VycnkoZnVuYywgYml0bWFzaywgd3JhcEZ1bmMsIHBsYWNlaG9sZGVyLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNDdXJyeSA9IGJpdG1hc2sgJiBXUkFQX0NVUlJZX0ZMQUcsXG4gICAgICAgICAgbmV3SG9sZGVycyA9IGlzQ3VycnkgPyBob2xkZXJzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG5ld0hvbGRlcnNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBob2xkZXJzLFxuICAgICAgICAgIG5ld1BhcnRpYWxzID0gaXNDdXJyeSA/IHBhcnRpYWxzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG5ld1BhcnRpYWxzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogcGFydGlhbHM7XG5cbiAgICAgIGJpdG1hc2sgfD0gKGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfRkxBRyA6IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgIGJpdG1hc2sgJj0gfihpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgOiBXUkFQX1BBUlRJQUxfRkxBRyk7XG5cbiAgICAgIGlmICghKGJpdG1hc2sgJiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyk7XG4gICAgICB9XG4gICAgICB2YXIgbmV3RGF0YSA9IFtcbiAgICAgICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgbmV3UGFydGlhbHMsIG5ld0hvbGRlcnMsIG5ld1BhcnRpYWxzUmlnaHQsXG4gICAgICAgIG5ld0hvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5XG4gICAgICBdO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gd3JhcEZ1bmMuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgICAgIGlmIChpc0xhemlhYmxlKGZ1bmMpKSB7XG4gICAgICAgIHNldERhdGEocmVzdWx0LCBuZXdEYXRhKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhyZXN1bHQsIGZ1bmMsIGJpdG1hc2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLnJvdW5kYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBNYXRoYCBtZXRob2QgdG8gdXNlIHdoZW4gcm91bmRpbmcuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcm91bmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUm91bmQobWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBNYXRoW21ldGhvZE5hbWVdO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG51bWJlciwgcHJlY2lzaW9uKSB7XG4gICAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PSBudWxsID8gMCA6IG5hdGl2ZU1pbih0b0ludGVnZXIocHJlY2lzaW9uKSwgMjkyKTtcbiAgICAgICAgaWYgKHByZWNpc2lvbiAmJiBuYXRpdmVJc0Zpbml0ZShudW1iZXIpKSB7XG4gICAgICAgICAgLy8gU2hpZnQgd2l0aCBleHBvbmVudGlhbCBub3RhdGlvbiB0byBhdm9pZCBmbG9hdGluZy1wb2ludCBpc3N1ZXMuXG4gICAgICAgICAgLy8gU2VlIFtNRE5dKGh0dHBzOi8vbWRuLmlvL3JvdW5kI0V4YW1wbGVzKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICAgIHZhciBwYWlyID0gKHRvU3RyaW5nKG51bWJlcikgKyAnZScpLnNwbGl0KCdlJyksXG4gICAgICAgICAgICAgIHZhbHVlID0gZnVuYyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdICsgcHJlY2lzaW9uKSk7XG5cbiAgICAgICAgICBwYWlyID0gKHRvU3RyaW5nKHZhbHVlKSArICdlJykuc3BsaXQoJ2UnKTtcbiAgICAgICAgICByZXR1cm4gKyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdIC0gcHJlY2lzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMobnVtYmVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNldCBvYmplY3Qgb2YgYHZhbHVlc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFkZCB0byB0aGUgc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBzZXQuXG4gICAgICovXG4gICAgdmFyIGNyZWF0ZVNldCA9ICEoU2V0ICYmICgxIC8gc2V0VG9BcnJheShuZXcgU2V0KFssLTBdKSlbMV0pID09IElORklOSVRZKSA/IG5vb3AgOiBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBuZXcgU2V0KHZhbHVlcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy50b1BhaXJzYCBvciBgXy50b1BhaXJzSW5gIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhaXJzIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVRvUGFpcnMoa2V5c0Z1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyhvYmplY3QpO1xuICAgICAgICBpZiAodGFnID09IG1hcFRhZykge1xuICAgICAgICAgIHJldHVybiBtYXBUb0FycmF5KG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9QYWlycyhvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYXNlVG9QYWlycyhvYmplY3QsIGtleXNGdW5jKG9iamVjdCkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBlaXRoZXIgY3VycmllcyBvciBpbnZva2VzIGBmdW5jYCB3aXRoIG9wdGlvbmFsXG4gICAgICogYHRoaXNgIGJpbmRpbmcgYW5kIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogICAgMSAtIGBfLmJpbmRgXG4gICAgICogICAgMiAtIGBfLmJpbmRLZXlgXG4gICAgICogICAgNCAtIGBfLmN1cnJ5YCBvciBgXy5jdXJyeVJpZ2h0YCBvZiBhIGJvdW5kIGZ1bmN0aW9uXG4gICAgICogICAgOCAtIGBfLmN1cnJ5YFxuICAgICAqICAgMTYgLSBgXy5jdXJyeVJpZ2h0YFxuICAgICAqICAgMzIgLSBgXy5wYXJ0aWFsYFxuICAgICAqICAgNjQgLSBgXy5wYXJ0aWFsUmlnaHRgXG4gICAgICogIDEyOCAtIGBfLnJlYXJnYFxuICAgICAqICAyNTYgLSBgXy5hcnlgXG4gICAgICogIDUxMiAtIGBfLmZsaXBgXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlV3JhcChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNCaW5kS2V5ID0gYml0bWFzayAmIFdSQVBfQklORF9LRVlfRkxBRztcbiAgICAgIGlmICghaXNCaW5kS2V5ICYmIHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHBhcnRpYWxzID8gcGFydGlhbHMubGVuZ3RoIDogMDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX1BBUlRJQUxfRkxBRyB8IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJ5ID0gYXJ5ID09PSB1bmRlZmluZWQgPyBhcnkgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKGFyeSksIDApO1xuICAgICAgYXJpdHkgPSBhcml0eSA9PT0gdW5kZWZpbmVkID8gYXJpdHkgOiB0b0ludGVnZXIoYXJpdHkpO1xuICAgICAgbGVuZ3RoIC09IGhvbGRlcnMgPyBob2xkZXJzLmxlbmd0aCA6IDA7XG5cbiAgICAgIGlmIChiaXRtYXNrICYgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzUmlnaHQgPSBwYXJ0aWFscyxcbiAgICAgICAgICAgIGhvbGRlcnNSaWdodCA9IGhvbGRlcnM7XG5cbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBnZXREYXRhKGZ1bmMpO1xuXG4gICAgICB2YXIgbmV3RGF0YSA9IFtcbiAgICAgICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCxcbiAgICAgICAgYXJnUG9zLCBhcnksIGFyaXR5XG4gICAgICBdO1xuXG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBtZXJnZURhdGEobmV3RGF0YSwgZGF0YSk7XG4gICAgICB9XG4gICAgICBmdW5jID0gbmV3RGF0YVswXTtcbiAgICAgIGJpdG1hc2sgPSBuZXdEYXRhWzFdO1xuICAgICAgdGhpc0FyZyA9IG5ld0RhdGFbMl07XG4gICAgICBwYXJ0aWFscyA9IG5ld0RhdGFbM107XG4gICAgICBob2xkZXJzID0gbmV3RGF0YVs0XTtcbiAgICAgIGFyaXR5ID0gbmV3RGF0YVs5XSA9IG5ld0RhdGFbOV0gPT09IHVuZGVmaW5lZFxuICAgICAgICA/IChpc0JpbmRLZXkgPyAwIDogZnVuYy5sZW5ndGgpXG4gICAgICAgIDogbmF0aXZlTWF4KG5ld0RhdGFbOV0gLSBsZW5ndGgsIDApO1xuXG4gICAgICBpZiAoIWFyaXR5ICYmIGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKTtcbiAgICAgIH1cbiAgICAgIGlmICghYml0bWFzayB8fCBiaXRtYXNrID09IFdSQVBfQklORF9GTEFHKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpO1xuICAgICAgfSBlbHNlIGlmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRyB8fCBiaXRtYXNrID09IFdSQVBfQ1VSUllfUklHSFRfRkxBRykge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSk7XG4gICAgICB9IGVsc2UgaWYgKChiaXRtYXNrID09IFdSQVBfUEFSVElBTF9GTEFHIHx8IGJpdG1hc2sgPT0gKFdSQVBfQklORF9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcpKSAmJiAhaG9sZGVycy5sZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVIeWJyaWQuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgICAgIH1cbiAgICAgIHZhciBzZXR0ZXIgPSBkYXRhID8gYmFzZVNldERhdGEgOiBzZXREYXRhO1xuICAgICAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhzZXR0ZXIocmVzdWx0LCBuZXdEYXRhKSwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5kZWZhdWx0c2AgdG8gY3VzdG9taXplIGl0cyBgXy5hc3NpZ25JbmAgdXNlIHRvIGFzc2lnbiBwcm9wZXJ0aWVzXG4gICAgICogb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXNcbiAgICAgKiB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgKGVxKG9ialZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgIHJldHVybiBzcmNWYWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzRGVlcGAgdG8gY3VzdG9taXplIGl0cyBgXy5tZXJnZWAgdXNlIHRvIG1lcmdlIHNvdXJjZVxuICAgICAqIG9iamVjdHMgaW50byBkZXN0aW5hdGlvbiBvYmplY3RzIHRoYXQgYXJlIHBhc3NlZCB0aHJ1LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IG9ialZhbHVlIFRoZSBkZXN0aW5hdGlvbiB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSBzb3VyY2UgdmFsdWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBtZXJnZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgcGFyZW50IG9iamVjdCBvZiBgc3JjVmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzTWVyZ2Uob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykge1xuICAgICAgaWYgKGlzT2JqZWN0KG9ialZhbHVlKSAmJiBpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgb2JqVmFsdWUpO1xuICAgICAgICBiYXNlTWVyZ2Uob2JqVmFsdWUsIHNyY1ZhbHVlLCB1bmRlZmluZWQsIGN1c3RvbURlZmF1bHRzTWVyZ2UsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9taXRgIHRvIGN1c3RvbWl6ZSBpdHMgYF8uY2xvbmVEZWVwYCB1c2UgdG8gb25seSBjbG9uZSBwbGFpblxuICAgICAqIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bmNsb25lZCB2YWx1ZSBvciBgdW5kZWZpbmVkYCB0byBkZWZlciBjbG9uaW5nIHRvIGBfLmNsb25lRGVlcGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tT21pdENsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNQbGFpbk9iamVjdCh2YWx1ZSkgPyB1bmRlZmluZWQgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gICAgICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgYXJyU3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gICAgICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gICAgICBpZiAoYXJyU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBhcnJTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gYXJyYXk7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gICAgICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gICAgICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICAgICAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgY2FzZSBib29sVGFnOlxuICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgICAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICAgICAgY2FzZSBtYXBUYWc6XG4gICAgICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgICAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgICAgIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgb2JqU3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICAgICAgaWYgKG9ialN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gb2JqU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IG9iamVjdDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gICAgICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgICAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgICAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIGZsYXR0ZW5zIHRoZSByZXN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRSZXN0KGZ1bmMpIHtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCB1bmRlZmluZWQsIGZsYXR0ZW4pLCBmdW5jICsgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QWxsS2V5c0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0luLCBnZXRTeW1ib2xzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGdldERhdGEgPSAhbWV0YU1hcCA/IG5vb3AgOiBmdW5jdGlvbihmdW5jKSB7XG4gICAgICByZXR1cm4gbWV0YU1hcC5nZXQoZnVuYyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hbWUgb2YgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEZ1bmNOYW1lKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSAoZnVuYy5uYW1lICsgJycpLFxuICAgICAgICAgIGFycmF5ID0gcmVhbE5hbWVzW3Jlc3VsdF0sXG4gICAgICAgICAgbGVuZ3RoID0gaGFzT3duUHJvcGVydHkuY2FsbChyZWFsTmFtZXMsIHJlc3VsdCkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBhcnJheVtsZW5ndGhdLFxuICAgICAgICAgICAgb3RoZXJGdW5jID0gZGF0YS5mdW5jO1xuICAgICAgICBpZiAob3RoZXJGdW5jID09IG51bGwgfHwgb3RoZXJGdW5jID09IGZ1bmMpIHtcbiAgICAgICAgICByZXR1cm4gZGF0YS5uYW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFyZ3VtZW50IHBsYWNlaG9sZGVyIHZhbHVlIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEhvbGRlcihmdW5jKSB7XG4gICAgICB2YXIgb2JqZWN0ID0gaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gsICdwbGFjZWhvbGRlcicpID8gbG9kYXNoIDogZnVuYztcbiAgICAgIHJldHVybiBvYmplY3QucGxhY2Vob2xkZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXBwcm9wcmlhdGUgXCJpdGVyYXRlZVwiIGZ1bmN0aW9uLiBJZiBgXy5pdGVyYXRlZWAgaXMgY3VzdG9taXplZCxcbiAgICAgKiB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIGN1c3RvbSBtZXRob2QsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBiYXNlSXRlcmF0ZWVgLlxuICAgICAqIElmIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQsIHRoZSBjaG9zZW4gZnVuY3Rpb24gaXMgaW52b2tlZCB3aXRoIHRoZW0gYW5kXG4gICAgICogaXRzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBbdmFsdWVdIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiB0aGUgY3JlYXRlZCBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNob3NlbiBmdW5jdGlvbiBvciBpdHMgcmVzdWx0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEl0ZXJhdGVlKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaC5pdGVyYXRlZSB8fCBpdGVyYXRlZTtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gaXRlcmF0ZWUgPyBiYXNlSXRlcmF0ZWUgOiByZXN1bHQ7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHJlc3VsdChhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSkgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgICAgIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgICAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgICAgICA6IGRhdGEubWFwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBtYXRjaCBkYXRhIG9mIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1hdGNoRGF0YShvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBrZXlzKG9iamVjdCksXG4gICAgICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSByZXN1bHRbbGVuZ3RoXSxcbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgcmVzdWx0W2xlbmd0aF0gPSBba2V5LCB2YWx1ZSwgaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gICAgICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICAgICAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgaWYgKHVubWFza2VkKSB7XG4gICAgICAgIGlmIChpc093bikge1xuICAgICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gICAgICovXG4gICAgdmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gICAgICovXG4gICAgdmFyIGdldFN5bWJvbHNJbiA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICB3aGlsZSAob2JqZWN0KSB7XG4gICAgICAgIGFycmF5UHVzaChyZXN1bHQsIGdldFN5bWJvbHMob2JqZWN0KSk7XG4gICAgICAgIG9iamVjdCA9IGdldFByb3RvdHlwZShvYmplY3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIHZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4gICAgLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuICAgIGlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAgICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgICAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAgICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICAgICAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgICAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZpZXcsIGFwcGx5aW5nIGFueSBgdHJhbnNmb3Jtc2AgdG8gdGhlIGBzdGFydGAgYW5kIGBlbmRgIHBvc2l0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdHJhbnNmb3JtcyBUaGUgdHJhbnNmb3JtYXRpb25zIHRvIGFwcGx5IHRvIHRoZSB2aWV3LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGBzdGFydGAgYW5kIGBlbmRgXG4gICAgICogIHBvc2l0aW9ucyBvZiB0aGUgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRWaWV3KHN0YXJ0LCBlbmQsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZGF0YSA9IHRyYW5zZm9ybXNbaW5kZXhdLFxuICAgICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgICBzd2l0Y2ggKGRhdGEudHlwZSkge1xuICAgICAgICAgIGNhc2UgJ2Ryb3AnOiAgICAgIHN0YXJ0ICs9IHNpemU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2Ryb3BSaWdodCc6IGVuZCAtPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICd0YWtlJzogICAgICBlbmQgPSBuYXRpdmVNaW4oZW5kLCBzdGFydCArIHNpemUpOyBicmVhaztcbiAgICAgICAgICBjYXNlICd0YWtlUmlnaHQnOiBzdGFydCA9IG5hdGl2ZU1heChzdGFydCwgZW5kIC0gc2l6ZSk7IGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4geyAnc3RhcnQnOiBzdGFydCwgJ2VuZCc6IGVuZCB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHdyYXBwZXIgZGV0YWlscyBmcm9tIHRoZSBgc291cmNlYCBib2R5IGNvbW1lbnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd3JhcHBlciBkZXRhaWxzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFdyYXBEZXRhaWxzKHNvdXJjZSkge1xuICAgICAgdmFyIG1hdGNoID0gc291cmNlLm1hdGNoKHJlV3JhcERldGFpbHMpO1xuICAgICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0uc3BsaXQocmVTcGxpdERldGFpbHMpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBleGlzdHMgb24gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYXNGdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjayBwcm9wZXJ0aWVzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzUGF0aChvYmplY3QsIHBhdGgsIGhhc0Z1bmMpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKTtcbiAgICAgICAgaWYgKCEocmVzdWx0ID0gb2JqZWN0ICE9IG51bGwgJiYgaGFzRnVuYyhvYmplY3QsIGtleSkpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0IHx8ICsraW5kZXggIT0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBvYmplY3QgPT0gbnVsbCA/IDAgOiBvYmplY3QubGVuZ3RoO1xuICAgICAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAgICAgKGlzQXJyYXkob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBhcnJheSBjbG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lQXJyYXkoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gbmV3IGFycmF5LmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzIGFzc2lnbmVkIGJ5IGBSZWdFeHAjZXhlY2AuXG4gICAgICBpZiAobGVuZ3RoICYmIHR5cGVvZiBhcnJheVswXSA9PSAnc3RyaW5nJyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCAnaW5kZXgnKSkge1xuICAgICAgICByZXN1bHQuaW5kZXggPSBhcnJheS5pbmRleDtcbiAgICAgICAgcmVzdWx0LmlucHV0ID0gYXJyYXkuaW5wdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZU9iamVjdChvYmplY3QpIHtcbiAgICAgIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgICAgICA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpXG4gICAgICAgIDoge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lIGJhc2VkIG9uIGl0cyBgdG9TdHJpbmdUYWdgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjbG9uaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE1hcGAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgYFNldGAsIG9yIGBTdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lQnlUYWcob2JqZWN0LCB0YWcsIGlzRGVlcCkge1xuICAgICAgdmFyIEN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZUFycmF5QnVmZmVyKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSBib29sVGFnOlxuICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKCtvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lRGF0YVZpZXcob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgICAgIGNhc2UgZmxvYXQzMlRhZzogY2FzZSBmbG9hdDY0VGFnOlxuICAgICAgICBjYXNlIGludDhUYWc6IGNhc2UgaW50MTZUYWc6IGNhc2UgaW50MzJUYWc6XG4gICAgICAgIGNhc2UgdWludDhUYWc6IGNhc2UgdWludDhDbGFtcGVkVGFnOiBjYXNlIHVpbnQxNlRhZzogY2FzZSB1aW50MzJUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lVHlwZWRBcnJheShvYmplY3QsIGlzRGVlcCk7XG5cbiAgICAgICAgY2FzZSBtYXBUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3Iob2JqZWN0KTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVSZWdFeHAob2JqZWN0KTtcblxuICAgICAgICBjYXNlIHNldFRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICAgICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lU3ltYm9sKG9iamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5zZXJ0cyB3cmFwcGVyIGBkZXRhaWxzYCBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgYHNvdXJjZWAgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBUaGUgc291cmNlIHRvIG1vZGlmeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGRldGFpbHMgVGhlIGRldGFpbHMgdG8gaW5zZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIG1vZGlmaWVkIHNvdXJjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIGRldGFpbHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBkZXRhaWxzLmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICAgIGRldGFpbHNbbGFzdEluZGV4XSA9IChsZW5ndGggPiAxID8gJyYgJyA6ICcnKSArIGRldGFpbHNbbGFzdEluZGV4XTtcbiAgICAgIGRldGFpbHMgPSBkZXRhaWxzLmpvaW4obGVuZ3RoID4gMiA/ICcsICcgOiAnICcpO1xuICAgICAgcmV0dXJuIHNvdXJjZS5yZXBsYWNlKHJlV3JhcENvbW1lbnQsICd7XFxuLyogW3dyYXBwZWQgd2l0aCAnICsgZGV0YWlscyArICddICovXFxuJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmbGF0dGVuYWJsZSBgYXJndW1lbnRzYCBvYmplY3Qgb3IgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZsYXR0ZW5hYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGbGF0dGVuYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSB8fFxuICAgICAgICAhIShzcHJlYWRhYmxlU3ltYm9sICYmIHZhbHVlICYmIHZhbHVlW3NwcmVhZGFibGVTeW1ib2xdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICAgICAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0geyp9IGluZGV4IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgaW5kZXggb3Iga2V5IGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgb2JqZWN0IGFyZ3VtZW50LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICAgICAgaWYgKHR5cGUgPT0gJ251bWJlcidcbiAgICAgICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpXG4gICAgICAgICAgICA6ICh0eXBlID09ICdzdHJpbmcnICYmIGluZGV4IGluIG9iamVjdClcbiAgICAgICAgICApIHtcbiAgICAgICAgcmV0dXJuIGVxKG9iamVjdFtpbmRleF0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNLZXkodmFsdWUsIG9iamVjdCkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgICAgIHZhbHVlID09IG51bGwgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlSXNQbGFpblByb3AudGVzdCh2YWx1ZSkgfHwgIXJlSXNEZWVwUHJvcC50ZXN0KHZhbHVlKSB8fFxuICAgICAgICAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICAgICAgOiAodmFsdWUgPT09IG51bGwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNMYXppYWJsZShmdW5jKSB7XG4gICAgICB2YXIgZnVuY05hbWUgPSBnZXRGdW5jTmFtZShmdW5jKSxcbiAgICAgICAgICBvdGhlciA9IGxvZGFzaFtmdW5jTmFtZV07XG5cbiAgICAgIGlmICh0eXBlb2Ygb3RoZXIgIT0gJ2Z1bmN0aW9uJyB8fCAhKGZ1bmNOYW1lIGluIExhenlXcmFwcGVyLnByb3RvdHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGZ1bmMgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBnZXREYXRhKG90aGVyKTtcbiAgICAgIHJldHVybiAhIWRhdGEgJiYgZnVuYyA9PT0gZGF0YVswXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gICAgICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaXMgY2FwYWJsZSBvZiBiZWluZyBtYXNrZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2FibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICB2YXIgaXNNYXNrYWJsZSA9IGNvcmVKc0RhdGEgPyBpc0Z1bmN0aW9uIDogc3R1YkZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICAgICAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICAgICAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpZiBzdWl0YWJsZSBmb3Igc3RyaWN0XG4gICAgICogIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlICYmICFpc09iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBtYXRjaGVzUHJvcGVydHlgIGZvciBzb3VyY2UgdmFsdWVzIHN1aXRhYmxlXG4gICAgICogZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShrZXksIHNyY1ZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0W2tleV0gPT09IHNyY1ZhbHVlICYmXG4gICAgICAgICAgKHNyY1ZhbHVlICE9PSB1bmRlZmluZWQgfHwgKGtleSBpbiBPYmplY3Qob2JqZWN0KSkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWVtb2l6ZWAgd2hpY2ggY2xlYXJzIHRoZSBtZW1vaXplZCBmdW5jdGlvbidzXG4gICAgICogY2FjaGUgd2hlbiBpdCBleGNlZWRzIGBNQVhfTUVNT0laRV9TSVpFYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemVDYXBwZWQoZnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IG1lbW9pemUoZnVuYywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGlmIChjYWNoZS5zaXplID09PSBNQVhfTUVNT0laRV9TSVpFKSB7XG4gICAgICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBjYWNoZSA9IHJlc3VsdC5jYWNoZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWVyZ2VzIHRoZSBmdW5jdGlvbiBtZXRhZGF0YSBvZiBgc291cmNlYCBpbnRvIGBkYXRhYC5cbiAgICAgKlxuICAgICAqIE1lcmdpbmcgbWV0YWRhdGEgcmVkdWNlcyB0aGUgbnVtYmVyIG9mIHdyYXBwZXJzIHVzZWQgdG8gaW52b2tlIGEgZnVuY3Rpb24uXG4gICAgICogVGhpcyBpcyBwb3NzaWJsZSBiZWNhdXNlIG1ldGhvZHMgbGlrZSBgXy5iaW5kYCwgYF8uY3VycnlgLCBhbmQgYF8ucGFydGlhbGBcbiAgICAgKiBtYXkgYmUgYXBwbGllZCByZWdhcmRsZXNzIG9mIGV4ZWN1dGlvbiBvcmRlci4gTWV0aG9kcyBsaWtlIGBfLmFyeWAgYW5kXG4gICAgICogYF8ucmVhcmdgIG1vZGlmeSBmdW5jdGlvbiBhcmd1bWVudHMsIG1ha2luZyB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSBhcmVcbiAgICAgKiBleGVjdXRlZCBpbXBvcnRhbnQsIHByZXZlbnRpbmcgdGhlIG1lcmdpbmcgb2YgbWV0YWRhdGEuIEhvd2V2ZXIsIHdlIG1ha2VcbiAgICAgKiBhbiBleGNlcHRpb24gZm9yIGEgc2FmZSBjb21iaW5lZCBjYXNlIHdoZXJlIGN1cnJpZWQgZnVuY3Rpb25zIGhhdmUgYF8uYXJ5YFxuICAgICAqIGFuZCBvciBgXy5yZWFyZ2AgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gZGF0YSBUaGUgZGVzdGluYXRpb24gbWV0YWRhdGEuXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBzb3VyY2UgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkYXRhYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZXJnZURhdGEoZGF0YSwgc291cmNlKSB7XG4gICAgICB2YXIgYml0bWFzayA9IGRhdGFbMV0sXG4gICAgICAgICAgc3JjQml0bWFzayA9IHNvdXJjZVsxXSxcbiAgICAgICAgICBuZXdCaXRtYXNrID0gYml0bWFzayB8IHNyY0JpdG1hc2ssXG4gICAgICAgICAgaXNDb21tb24gPSBuZXdCaXRtYXNrIDwgKFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHIHwgV1JBUF9BUllfRkxBRyk7XG5cbiAgICAgIHZhciBpc0NvbWJvID1cbiAgICAgICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcpICYmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRykpIHx8XG4gICAgICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX1JFQVJHX0ZMQUcpICYmIChkYXRhWzddLmxlbmd0aCA8PSBzb3VyY2VbOF0pKSB8fFxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gKFdSQVBfQVJZX0ZMQUcgfCBXUkFQX1JFQVJHX0ZMQUcpKSAmJiAoc291cmNlWzddLmxlbmd0aCA8PSBzb3VyY2VbOF0pICYmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRykpO1xuXG4gICAgICAvLyBFeGl0IGVhcmx5IGlmIG1ldGFkYXRhIGNhbid0IGJlIG1lcmdlZC5cbiAgICAgIGlmICghKGlzQ29tbW9uIHx8IGlzQ29tYm8pKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgdGhpc0FyZ2AgaWYgYXZhaWxhYmxlLlxuICAgICAgaWYgKHNyY0JpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRykge1xuICAgICAgICBkYXRhWzJdID0gc291cmNlWzJdO1xuICAgICAgICAvLyBTZXQgd2hlbiBjdXJyeWluZyBhIGJvdW5kIGZ1bmN0aW9uLlxuICAgICAgICBuZXdCaXRtYXNrIHw9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyA/IDAgOiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUc7XG4gICAgICB9XG4gICAgICAvLyBDb21wb3NlIHBhcnRpYWwgYXJndW1lbnRzLlxuICAgICAgdmFyIHZhbHVlID0gc291cmNlWzNdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHZhciBwYXJ0aWFscyA9IGRhdGFbM107XG4gICAgICAgIGRhdGFbM10gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzKHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzRdKSA6IHZhbHVlO1xuICAgICAgICBkYXRhWzRdID0gcGFydGlhbHMgPyByZXBsYWNlSG9sZGVycyhkYXRhWzNdLCBQTEFDRUhPTERFUikgOiBzb3VyY2VbNF07XG4gICAgICB9XG4gICAgICAvLyBDb21wb3NlIHBhcnRpYWwgcmlnaHQgYXJndW1lbnRzLlxuICAgICAgdmFsdWUgPSBzb3VyY2VbNV07XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgcGFydGlhbHMgPSBkYXRhWzVdO1xuICAgICAgICBkYXRhWzVdID0gcGFydGlhbHMgPyBjb21wb3NlQXJnc1JpZ2h0KHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzZdKSA6IHZhbHVlO1xuICAgICAgICBkYXRhWzZdID0gcGFydGlhbHMgPyByZXBsYWNlSG9sZGVycyhkYXRhWzVdLCBQTEFDRUhPTERFUikgOiBzb3VyY2VbNl07XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcmdQb3NgIGlmIGF2YWlsYWJsZS5cbiAgICAgIHZhbHVlID0gc291cmNlWzddO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGRhdGFbN10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyeWAgaWYgaXQncyBzbWFsbGVyLlxuICAgICAgaWYgKHNyY0JpdG1hc2sgJiBXUkFQX0FSWV9GTEFHKSB7XG4gICAgICAgIGRhdGFbOF0gPSBkYXRhWzhdID09IG51bGwgPyBzb3VyY2VbOF0gOiBuYXRpdmVNaW4oZGF0YVs4XSwgc291cmNlWzhdKTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyaXR5YCBpZiBvbmUgaXMgbm90IHByb3ZpZGVkLlxuICAgICAgaWYgKGRhdGFbOV0gPT0gbnVsbCkge1xuICAgICAgICBkYXRhWzldID0gc291cmNlWzldO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgZnVuY2AgYW5kIG1lcmdlIGJpdG1hc2tzLlxuICAgICAgZGF0YVswXSA9IHNvdXJjZVswXTtcbiAgICAgIGRhdGFbMV0gPSBuZXdCaXRtYXNrO1xuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2VcbiAgICAgKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gICAgICogZXhjZXB0IHRoYXQgaXQgaW5jbHVkZXMgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmF0aXZlS2V5c0luKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIHRyYW5zZm9ybXMgdGhlIHJlc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgcmVzdCBhcnJheSB0cmFuc2Zvcm0uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gb3ZlclJlc3QoZnVuYywgc3RhcnQsIHRyYW5zZm9ybSkge1xuICAgICAgc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQgPT09IHVuZGVmaW5lZCA/IChmdW5jLmxlbmd0aCAtIDEpIDogc3RhcnQsIDApO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgICAgICBhcnJheSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gLTE7XG4gICAgICAgIHZhciBvdGhlckFyZ3MgPSBBcnJheShzdGFydCArIDEpO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IHN0YXJ0KSB7XG4gICAgICAgICAgb3RoZXJBcmdzW2luZGV4XSA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIG90aGVyQXJnc1tzdGFydF0gPSB0cmFuc2Zvcm0oYXJyYXkpO1xuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcGFyZW50IHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhdGggVGhlIHBhdGggdG8gZ2V0IHRoZSBwYXJlbnQgdmFsdWUgb2YuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHBhcmVudCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJlbnQob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5sZW5ndGggPCAyID8gb2JqZWN0IDogYmFzZUdldChvYmplY3QsIGJhc2VTbGljZShwYXRoLCAwLCAtMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlb3JkZXIgYGFycmF5YCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBpbmRleGVzIHdoZXJlIHRoZSBlbGVtZW50IGF0XG4gICAgICogdGhlIGZpcnN0IGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBmaXJzdCBlbGVtZW50LCB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBzZWNvbmQgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIHNlY29uZCBlbGVtZW50LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byByZW9yZGVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFycmF5IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVvcmRlcihhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4oaW5kZXhlcy5sZW5ndGgsIGFyckxlbmd0aCksXG4gICAgICAgICAgb2xkQXJyYXkgPSBjb3B5QXJyYXkoYXJyYXkpO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhlc1tsZW5ndGhdO1xuICAgICAgICBhcnJheVtsZW5ndGhdID0gaXNJbmRleChpbmRleCwgYXJyTGVuZ3RoKSA/IG9sZEFycmF5W2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCwgdW5sZXNzIGBrZXlgIGlzIFwiX19wcm90b19fXCIgb3IgXCJjb25zdHJ1Y3RvclwiLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhZmVHZXQob2JqZWN0LCBrZXkpIHtcbiAgICAgIGlmIChrZXkgPT09ICdjb25zdHJ1Y3RvcicgJiYgdHlwZW9mIG9iamVjdFtrZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgdGhpcyBmdW5jdGlvbiBiZWNvbWVzIGhvdCwgaS5lLiBpcyBpbnZva2VkIGEgbG90IGluIGEgc2hvcnRcbiAgICAgKiBwZXJpb2Qgb2YgdGltZSwgaXQgd2lsbCB0cmlwIGl0cyBicmVha2VyIGFuZCB0cmFuc2l0aW9uIHRvIGFuIGlkZW50aXR5XG4gICAgICogZnVuY3Rpb24gdG8gYXZvaWQgZ2FyYmFnZSBjb2xsZWN0aW9uIHBhdXNlcyBpbiBWOC4gU2VlXG4gICAgICogW1Y4IGlzc3VlIDIwNzBdKGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTIwNzApXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzb2NpYXRlIG1ldGFkYXRhIHdpdGguXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBzZXREYXRhID0gc2hvcnRPdXQoYmFzZVNldERhdGEpO1xuXG4gICAgLyoqXG4gICAgICogQSBzaW1wbGUgd3JhcHBlciBhcm91bmQgdGhlIGdsb2JhbCBbYHNldFRpbWVvdXRgXShodHRwczovL21kbi5pby9zZXRUaW1lb3V0KS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfE9iamVjdH0gUmV0dXJucyB0aGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3QuXG4gICAgICovXG4gICAgdmFyIHNldFRpbWVvdXQgPSBjdHhTZXRUaW1lb3V0IHx8IGZ1bmN0aW9uKGZ1bmMsIHdhaXQpIHtcbiAgICAgIHJldHVybiByb290LnNldFRpbWVvdXQoZnVuYywgd2FpdCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGBmdW5jYCB0byByZXR1cm4gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIHNldFRvU3RyaW5nID0gc2hvcnRPdXQoYmFzZVNldFRvU3RyaW5nKTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGB3cmFwcGVyYCB0byBtaW1pYyB0aGUgc291cmNlIG9mIGByZWZlcmVuY2VgXG4gICAgICogd2l0aCB3cmFwcGVyIGRldGFpbHMgaW4gYSBjb21tZW50IGF0IHRoZSB0b3Agb2YgdGhlIHNvdXJjZSBib2R5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwcGVyIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVmZXJlbmNlIFRoZSByZWZlcmVuY2UgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYHdyYXBwZXJgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFdyYXBUb1N0cmluZyh3cmFwcGVyLCByZWZlcmVuY2UsIGJpdG1hc2spIHtcbiAgICAgIHZhciBzb3VyY2UgPSAocmVmZXJlbmNlICsgJycpO1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKHdyYXBwZXIsIGluc2VydFdyYXBEZXRhaWxzKHNvdXJjZSwgdXBkYXRlV3JhcERldGFpbHMoZ2V0V3JhcERldGFpbHMoc291cmNlKSwgYml0bWFzaykpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCdsbCBzaG9ydCBvdXQgYW5kIGludm9rZSBgaWRlbnRpdHlgIGluc3RlYWRcbiAgICAgKiBvZiBgZnVuY2Agd2hlbiBpdCdzIGNhbGxlZCBgSE9UX0NPVU5UYCBvciBtb3JlIHRpbWVzIGluIGBIT1RfU1BBTmBcbiAgICAgKiBtaWxsaXNlY29uZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNob3J0YWJsZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaG9ydE91dChmdW5jKSB7XG4gICAgICB2YXIgY291bnQgPSAwLFxuICAgICAgICAgIGxhc3RDYWxsZWQgPSAwO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzdGFtcCA9IG5hdGl2ZU5vdygpLFxuICAgICAgICAgICAgcmVtYWluaW5nID0gSE9UX1NQQU4gLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKTtcblxuICAgICAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgICAgIGlmIChyZW1haW5pbmcgPiAwKSB7XG4gICAgICAgICAgaWYgKCsrY291bnQgPj0gSE9UX0NPVU5UKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb3VudCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgd2hpY2ggbXV0YXRlcyBhbmQgc2V0cyB0aGUgc2l6ZSBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2h1ZmZsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9YXJyYXkubGVuZ3RoXSBUaGUgc2l6ZSBvZiBgYXJyYXlgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNodWZmbGVTZWxmKGFycmF5LCBzaXplKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICAgICAgc2l6ZSA9IHNpemUgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHNpemU7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IHNpemUpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBiYXNlUmFuZG9tKGluZGV4LCBsYXN0SW5kZXgpLFxuICAgICAgICAgICAgdmFsdWUgPSBhcnJheVtyYW5kXTtcblxuICAgICAgICBhcnJheVtyYW5kXSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBhcnJheS5sZW5ndGggPSBzaXplO1xuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIHZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KDApID09PSA0NiAvKiAuICovKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgICAgIH1cbiAgICAgIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdWJTdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyBrZXkgaWYgaXQncyBub3QgYSBzdHJpbmcgb3Igc3ltYm9sLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9LZXkodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gICAgICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHdyYXBwZXIgYGRldGFpbHNgIGJhc2VkIG9uIGBiaXRtYXNrYCBmbGFncy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGV0YWlsc2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlV3JhcERldGFpbHMoZGV0YWlscywgYml0bWFzaykge1xuICAgICAgYXJyYXlFYWNoKHdyYXBGbGFncywgZnVuY3Rpb24ocGFpcikge1xuICAgICAgICB2YXIgdmFsdWUgPSAnXy4nICsgcGFpclswXTtcbiAgICAgICAgaWYgKChiaXRtYXNrICYgcGFpclsxXSkgJiYgIWFycmF5SW5jbHVkZXMoZGV0YWlscywgdmFsdWUpKSB7XG4gICAgICAgICAgZGV0YWlscy5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGV0YWlscy5zb3J0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGB3cmFwcGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHdyYXBwZXIgVGhlIHdyYXBwZXIgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHdyYXBwZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNsb25lKHdyYXBwZXIpIHtcbiAgICAgIGlmICh3cmFwcGVyIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBwZXIuY2xvbmUoKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVyLl9fd3JhcHBlZF9fLCB3cmFwcGVyLl9fY2hhaW5fXyk7XG4gICAgICByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkod3JhcHBlci5fX2FjdGlvbnNfXyk7XG4gICAgICByZXN1bHQuX19pbmRleF9fICA9IHdyYXBwZXIuX19pbmRleF9fO1xuICAgICAgcmVzdWx0Ll9fdmFsdWVzX18gPSB3cmFwcGVyLl9fdmFsdWVzX187XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byBncm91cHMgdGhlIGxlbmd0aCBvZiBgc2l6ZWAuXG4gICAgICogSWYgYGFycmF5YCBjYW4ndCBiZSBzcGxpdCBldmVubHksIHRoZSBmaW5hbCBjaHVuayB3aWxsIGJlIHRoZSByZW1haW5pbmdcbiAgICAgKiBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT0xXSBUaGUgbGVuZ3RoIG9mIGVhY2ggY2h1bmtcbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNodW5rcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMik7XG4gICAgICogLy8gPT4gW1snYScsICdiJ10sIFsnYycsICdkJ11dXG4gICAgICpcbiAgICAgKiBfLmNodW5rKFsnYScsICdiJywgJ2MnLCAnZCddLCAzKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InLCAnYyddLCBbJ2QnXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjaHVuayhhcnJheSwgc2l6ZSwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgc2l6ZSwgZ3VhcmQpIDogc2l6ZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBzaXplID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNpemUgPSBuYXRpdmVNYXgodG9JbnRlZ2VyKHNpemUpLCAwKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoIHx8IHNpemUgPCAxKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KG5hdGl2ZUNlaWwobGVuZ3RoIC8gc2l6ZSkpO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gYmFzZVNsaWNlKGFycmF5LCBpbmRleCwgKGluZGV4ICs9IHNpemUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBmYWxzZXkgdmFsdWVzIHJlbW92ZWQuIFRoZSB2YWx1ZXMgYGZhbHNlYCwgYG51bGxgLFxuICAgICAqIGAwYCwgYFwiXCJgLCBgdW5kZWZpbmVkYCwgYW5kIGBOYU5gIGFyZSBmYWxzZXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY29tcGFjdChbMCwgMSwgZmFsc2UsIDIsICcnLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFjdChhcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYXJyYXkgY29uY2F0ZW5hdGluZyBgYXJyYXlgIHdpdGggYW55IGFkZGl0aW9uYWwgYXJyYXlzXG4gICAgICogYW5kL29yIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb25jYXRlbmF0ZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgY29uY2F0ZW5hdGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMV07XG4gICAgICogdmFyIG90aGVyID0gXy5jb25jYXQoYXJyYXksIDIsIFszXSwgW1s0XV0pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob3RoZXIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbNF1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uY2F0KCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgYXJncyA9IEFycmF5KGxlbmd0aCAtIDEpLFxuICAgICAgICAgIGFycmF5ID0gYXJndW1lbnRzWzBdLFxuICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICBhcmdzW2luZGV4IC0gMV0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5UHVzaChpc0FycmF5KGFycmF5KSA/IGNvcHlBcnJheShhcnJheSkgOiBbYXJyYXldLCBiYXNlRmxhdHRlbihhcmdzLCAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBgYXJyYXlgIHZhbHVlcyBub3QgaW5jbHVkZWQgaW4gdGhlIG90aGVyIGdpdmVuIGFycmF5c1xuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy53aXRob3V0LCBfLnhvclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2UoWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGlmZmVyZW5jZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgYW5kIGB2YWx1ZXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbEJ5YCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2VCeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kaWZmZXJlbmNlQnkoW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCBbeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2VCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QodmFsdWVzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRpZmZlcmVuY2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAgdG8gYHZhbHVlc2AuIFRoZSBvcmRlciBhbmRcbiAgICAgKiByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvclxuICAgICAqIGlzIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsV2l0aGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2VXaXRoKG9iamVjdHMsIFt7ICd4JzogMSwgJ3knOiAyIH1dLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2VXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KHZhbHVlcyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoY29tcGFyYXRvcikpIHtcbiAgICAgICAgY29tcGFyYXRvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRyb3AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRyb3AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCAwLCBuIDwgMCA/IDAgOiBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBlbmQuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0V2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCB0cnVlLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGV4Y2x1ZGluZyBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKiBFbGVtZW50cyBhcmUgZHJvcHBlZCB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wV2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbGxzIGVsZW1lbnRzIG9mIGBhcnJheWAgd2l0aCBgdmFsdWVgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdFxuICAgICAqIGluY2x1ZGluZywgYGVuZGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZmlsbCBgYXJyYXlgIHdpdGguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLmZpbGwoYXJyYXksICdhJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYScsICdhJywgJ2EnXVxuICAgICAqXG4gICAgICogXy5maWxsKEFycmF5KDMpLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgMiwgMl1cbiAgICAgKlxuICAgICAqIF8uZmlsbChbNCwgNiwgOCwgMTBdLCAnKicsIDEsIDMpO1xuICAgICAqIC8vID0+IFs0LCAnKicsICcqJywgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCAmJiB0eXBlb2Ygc3RhcnQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHZhbHVlLCBzdGFydCkpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICBlbmQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdFxuICAgICAqIGVsZW1lbnQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdiYXJuZXknOyB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2ZyZWQnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmluZEluZGV4KGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBpbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHNcbiAgICAgKiBvZiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXIgPT0gJ3BlYmJsZXMnOyB9KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRMYXN0SW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgaWYgKGZyb21JbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICAgIGluZGV4ID0gZnJvbUluZGV4IDwgMFxuICAgICAgICAgID8gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKVxuICAgICAgICAgIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmluZEluZGV4KGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBpbmRleCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmxhdHRlbnMgYGFycmF5YCBhIHNpbmdsZSBsZXZlbCBkZWVwLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW4oWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbihhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCAxKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlZXAoWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNCwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuRGVlcChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCBJTkZJTklUWSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmbGF0dGVuIGBhcnJheWAgdXAgdG8gYGRlcHRoYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIFsyLCBbMywgWzRdXSwgNV1dO1xuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVwdGgoYXJyYXksIDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlcHRoKGFycmF5LCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgWzRdLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW5EZXB0aChhcnJheSwgZGVwdGgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGRlcHRoID0gZGVwdGggPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGgpO1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGludmVyc2Ugb2YgYF8udG9QYWlyc2A7IHRoaXMgbWV0aG9kIHJldHVybnMgYW4gb2JqZWN0IGNvbXBvc2VkXG4gICAgICogZnJvbSBrZXktdmFsdWUgYHBhaXJzYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhaXJzIFRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mcm9tUGFpcnMoW1snYScsIDFdLCBbJ2InLCAyXV0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21QYWlycyhwYWlycykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYWlyID0gcGFpcnNbaW5kZXhdO1xuICAgICAgICByZXN1bHRbcGFpclswXV0gPSBwYWlyWzFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZmlyc3RcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5oZWFkKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5oZWFkKFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoZWFkKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBhcnJheVswXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBgdmFsdWVgIGlzIGZvdW5kIGluIGBhcnJheWBcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhcyB0aGVcbiAgICAgKiBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBTZWFyY2ggZnJvbSB0aGUgYGZyb21JbmRleGAuXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBpbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5pdGlhbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRpYWwoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDAsIC0xKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcyB0aGF0IGFyZSBpbmNsdWRlZCBpbiBhbGwgZ2l2ZW4gYXJyYXlzXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMl1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZClcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uaW50ZXJzZWN0aW9uQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH1dXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbkJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyksXG4gICAgICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICAgICAgaWYgKGl0ZXJhdGVlID09PSBsYXN0KG1hcHBlZCkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXBwZWQucG9wKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzXG4gICAgICogb2YgcmVzdWx0IHZhbHVlcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBjb21wYXJhdG9yIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb25XaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9XVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb25XaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKSxcbiAgICAgICAgICBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuXG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBtYXBwZWQucG9wKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQsIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGFsbCBlbGVtZW50cyBpbiBgYXJyYXlgIGludG8gYSBzdHJpbmcgc2VwYXJhdGVkIGJ5IGBzZXBhcmF0b3JgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzZXBhcmF0b3I9JywnXSBUaGUgZWxlbWVudCBzZXBhcmF0b3IuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgam9pbmVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5qb2luKFsnYScsICdiJywgJ2MnXSwgJ34nKTtcbiAgICAgKiAvLyA9PiAnYX5ifmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gam9pbihhcnJheSwgc2VwYXJhdG9yKSB7XG4gICAgICByZXR1cm4gYXJyYXkgPT0gbnVsbCA/ICcnIDogbmF0aXZlSm9pbi5jYWxsKGFycmF5LCBzZXBhcmF0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3QoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBhcnJheVtsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgYXJyYXlgIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogLy8gU2VhcmNoIGZyb20gdGhlIGBmcm9tSW5kZXhgLlxuICAgICAqIF8ubGFzdEluZGV4T2YoWzEsIDIsIDEsIDJdLCAyLCAyKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGxlbmd0aDtcbiAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICBpbmRleCA9IGluZGV4IDwgMCA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCkgOiBuYXRpdmVNaW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgICAgICA/IHN0cmljdExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpXG4gICAgICAgIDogYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBpbmRleCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZWxlbWVudCBhdCBpbmRleCBgbmAgb2YgYGFycmF5YC4gSWYgYG5gIGlzIG5lZ2F0aXZlLCB0aGUgbnRoXG4gICAgICogZWxlbWVudCBmcm9tIHRoZSBlbmQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0wXSBUaGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBudGggZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnXTtcbiAgICAgKlxuICAgICAqIF8ubnRoKGFycmF5LCAxKTtcbiAgICAgKiAvLyA9PiAnYidcbiAgICAgKlxuICAgICAqIF8ubnRoKGFycmF5LCAtMik7XG4gICAgICogLy8gPT4gJ2MnO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG50aChhcnJheSwgbikge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZU50aChhcnJheSwgdG9JbnRlZ2VyKG4pKSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBnaXZlbiB2YWx1ZXMgZnJvbSBgYXJyYXlgIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLndpdGhvdXRgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuIFVzZSBgXy5yZW1vdmVgXG4gICAgICogdG8gcmVtb3ZlIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgcHJlZGljYXRlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2EnLCAnYicsICdjJ107XG4gICAgICpcbiAgICAgKiBfLnB1bGwoYXJyYXksICdhJywgJ2MnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydiJywgJ2InXVxuICAgICAqL1xuICAgIHZhciBwdWxsID0gYmFzZVJlc3QocHVsbEFsbCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYW4gYXJyYXkgb2YgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZWAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2EnLCAnYicsICdjJ107XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGwoYXJyYXksIFsnYScsICdjJ10pO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbChhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbEFsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgYW5kIGB2YWx1ZXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZUJ5YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDMgfSwgeyAneCc6IDEgfV07XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGxCeShhcnJheSwgW3sgJ3gnOiAxIH0sIHsgJ3gnOiAzIH1dLCAneCcpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsQnkoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxBbGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAgdG8gYHZhbHVlc2AuIFRoZSBjb21wYXJhdG9yIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VXaXRoYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAzLCAneSc6IDQgfSwgeyAneCc6IDUsICd5JzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbFdpdGgoYXJyYXksIFt7ICd4JzogMywgJ3knOiA0IH1dLCBfLmlzRXF1YWwpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogNSwgJ3knOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbFdpdGgoYXJyYXksIHZhbHVlcywgY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgZWxlbWVudHMgZnJvbSBgYXJyYXlgIGNvcnJlc3BvbmRpbmcgdG8gYGluZGV4ZXNgIGFuZCByZXR1cm5zIGFuXG4gICAgICogYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uYXRgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IFtpbmRleGVzXSBUaGUgaW5kZXhlcyBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gICAgICogdmFyIHB1bGxlZCA9IF8ucHVsbEF0KGFycmF5LCBbMSwgM10pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYScsICdjJ11cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKHB1bGxlZCk7XG4gICAgICogLy8gPT4gWydiJywgJ2QnXVxuICAgICAqL1xuICAgIHZhciBwdWxsQXQgPSBmbGF0UmVzdChmdW5jdGlvbihhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGJhc2VBdChhcnJheSwgaW5kZXhlcyk7XG5cbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGFycmF5TWFwKGluZGV4ZXMsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBpc0luZGV4KGluZGV4LCBsZW5ndGgpID8gK2luZGV4IDogaW5kZXg7XG4gICAgICB9KS5zb3J0KGNvbXBhcmVBc2NlbmRpbmcpKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGVsZW1lbnRzIGZyb20gYGFycmF5YCB0aGF0IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvclxuICAgICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZSByZW1vdmVkIGVsZW1lbnRzLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5maWx0ZXJgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuIFVzZSBgXy5wdWxsYFxuICAgICAqIHRvIHB1bGwgZWxlbWVudHMgZnJvbSBhbiBhcnJheSBieSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzLCA0XTtcbiAgICAgKiB2YXIgZXZlbnMgPSBfLnJlbW92ZShhcnJheSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDNdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhldmVucyk7XG4gICAgICogLy8gPT4gWzIsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluZGV4ZXMgPSBbXSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgaW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVyc2VzIGBhcnJheWAgc28gdGhhdCB0aGUgZmlyc3QgZWxlbWVudCBiZWNvbWVzIHRoZSBsYXN0LCB0aGUgc2Vjb25kXG4gICAgICogZWxlbWVudCBiZWNvbWVzIHRoZSBzZWNvbmQgdG8gbGFzdCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YCBhbmQgaXMgYmFzZWQgb25cbiAgICAgKiBbYEFycmF5I3JldmVyc2VgXShodHRwczovL21kbi5pby9BcnJheS9yZXZlcnNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8ucmV2ZXJzZShhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmV2ZXJzZShhcnJheSkge1xuICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyBhcnJheSA6IG5hdGl2ZVJldmVyc2UuY2FsbChhcnJheSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZnJvbSBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgdXNlZCBpbnN0ZWFkIG9mXG4gICAgICogW2BBcnJheSNzbGljZWBdKGh0dHBzOi8vbWRuLmlvL0FycmF5L3NsaWNlKSB0byBlbnN1cmUgZGVuc2UgYXJyYXlzIGFyZVxuICAgICAqIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgJiYgdHlwZW9mIGVuZCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgc3RhcnQsIGVuZCkpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICBlbmQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc3RhcnQgPSBzdGFydCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9JbnRlZ2VyKGVuZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VzIGEgYmluYXJ5IHNlYXJjaCB0byBkZXRlcm1pbmUgdGhlIGxvd2VzdCBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gICAgICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0byBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXgoWzMwLCA1MF0sIDQwKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpclxuICAgICAqIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDQgfSwgeyAneCc6IDUgfV07XG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvcnRlZEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgJ3gnKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgcGVyZm9ybXMgYSBiaW5hcnlcbiAgICAgKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleE9mKFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xuICAgICAgICBpZiAoaW5kZXggPCBsZW5ndGggJiYgZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZEluZGV4YCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBoaWdoZXN0XG4gICAgICogaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvXG4gICAgICogbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleChbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXgoYXJyYXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRMYXN0SW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAgICAgKiBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCBmdW5jdGlvbihvKSB7IHJldHVybiBvLng7IH0pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgJ3gnKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmxhc3RJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBwZXJmb3JtcyBhIGJpbmFyeVxuICAgICAqIHNlYXJjaCBvbiBhIHNvcnRlZCBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleE9mKFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKSAtIDE7XG4gICAgICAgIGlmIChlcShhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQncyBkZXNpZ25lZCBhbmQgb3B0aW1pemVkXG4gICAgICogZm9yIHNvcnRlZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRVbmlxKFsxLCAxLCAyXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkVW5pcShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXkpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxQnlgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRVbmlxQnkoWzEuMSwgMS4yLCAyLjMsIDIuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjEsIDIuM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRVbmlxQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU29ydGVkVW5pcShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWlsKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFpbChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VTbGljZShhcnJheSwgMSwgbGVuZ3RoKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byB0YWtlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2UoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCAwLCBuIDwgMCA/IDAgOiBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBlbmQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICBuID0gbGVuZ3RoIC0gbjtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4sIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBlbmQuIEVsZW1lbnRzIGFyZVxuICAgICAqIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVJpZ2h0V2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBmYWxzZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGJlZ2lubmluZy4gRWxlbWVudHNcbiAgICAgKiBhcmUgdGFrZW4gdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlV2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcywgaW4gb3JkZXIsIGZyb20gYWxsIGdpdmVuIGFycmF5cyB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlvbihbMl0sIFsxLCAyXSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgdmFyIHVuaW9uID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICAgICAqIHdoaWNoIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tIHRoZSBmaXJzdFxuICAgICAqIGFycmF5IGluIHdoaWNoIHRoZSB2YWx1ZSBvY2N1cnMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlvbkJ5KFsyLjFdLCBbMS4yLCAyLjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xLCAxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnVuaW9uQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIHVuaW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gUmVzdWx0IHZhbHVlcyBhcmUgY2hvc2VuIGZyb21cbiAgICAgKiB0aGUgZmlyc3QgYXJyYXkgaW4gd2hpY2ggdGhlIHZhbHVlIG9jY3Vycy4gVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8udW5pb25XaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb25XaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkdXBsaWNhdGUtZnJlZSB2ZXJzaW9uIG9mIGFuIGFycmF5LCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpbiB3aGljaCBvbmx5IHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGVhY2ggZWxlbWVudFxuICAgICAqIGlzIGtlcHQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXJcbiAgICAgKiBpbiB0aGUgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxKFsyLCAxLCAyXSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGVcbiAgICAgKiBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxQnkoWzIuMSwgMS4yLCAyLjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xLCAxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnVuaXFCeShbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8udW5pcVdpdGgob2JqZWN0cywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcVdpdGgoYXJyYXksIGNvbXBhcmF0b3IpIHtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYW4gYXJyYXkgb2YgZ3JvdXBlZFxuICAgICAqIGVsZW1lbnRzIGFuZCBjcmVhdGVzIGFuIGFycmF5IHJlZ3JvdXBpbmcgdGhlIGVsZW1lbnRzIHRvIHRoZWlyIHByZS16aXBcbiAgICAgKiBjb25maWd1cmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB6aXBwZWQgPSBfLnppcChbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICAgICAqXG4gICAgICogXy51bnppcCh6aXBwZWQpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW56aXAoYXJyYXkpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IDA7XG4gICAgICBhcnJheSA9IGFycmF5RmlsdGVyKGFycmF5LCBmdW5jdGlvbihncm91cCkge1xuICAgICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoZ3JvdXApKSB7XG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGdyb3VwLmxlbmd0aCwgbGVuZ3RoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gYmFzZVRpbWVzKGxlbmd0aCwgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKGFycmF5LCBiYXNlUHJvcGVydHkoaW5kZXgpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gICAgICogaG93IHJlZ3JvdXBlZCB2YWx1ZXMgc2hvdWxkIGJlIGNvbWJpbmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRoZVxuICAgICAqIGVsZW1lbnRzIG9mIGVhY2ggZ3JvdXA6ICguLi5ncm91cCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICAgICAqICByZWdyb3VwZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHppcHBlZCA9IF8uemlwKFsxLCAyXSwgWzEwLCAyMF0sIFsxMDAsIDIwMF0pO1xuICAgICAqIC8vID0+IFtbMSwgMTAsIDEwMF0sIFsyLCAyMCwgMjAwXV1cbiAgICAgKlxuICAgICAqIF8udW56aXBXaXRoKHppcHBlZCwgXy5hZGQpO1xuICAgICAqIC8vID0+IFszLCAzMCwgMzAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwV2l0aChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHVuemlwKGFycmF5KTtcbiAgICAgIGlmIChpdGVyYXRlZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlNYXAocmVzdWx0LCBmdW5jdGlvbihncm91cCkge1xuICAgICAgICByZXR1cm4gYXBwbHkoaXRlcmF0ZWUsIHVuZGVmaW5lZCwgZ3JvdXApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBleGNsdWRpbmcgYWxsIGdpdmVuIHZhbHVlcyB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy54b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy53aXRob3V0KFsyLCAxLCAyLCAzXSwgMSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICovXG4gICAgdmFyIHdpdGhvdXQgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcyB0aGF0IGlzIHRoZVxuICAgICAqIFtzeW1tZXRyaWMgZGlmZmVyZW5jZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3ltbWV0cmljX2RpZmZlcmVuY2UpXG4gICAgICogb2YgdGhlIGdpdmVuIGFycmF5cy4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXJcbiAgICAgKiB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy5kaWZmZXJlbmNlLCBfLndpdGhvdXRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy54b3IoWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqL1xuICAgIHZhciB4b3IgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5XG4gICAgICogd2hpY2ggYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZFxuICAgICAqIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lXG4gICAgICogYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy54b3JCeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4yLCAzLjRdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnhvckJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciB4b3JCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy54b3JgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICAgICAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy4gVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ueG9yV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciB4b3JXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLCB0aGUgZmlyc3Qgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gICAgICogZmlyc3QgZWxlbWVudHMgb2YgdGhlIGdpdmVuIGFycmF5cywgdGhlIHNlY29uZCBvZiB3aGljaCBjb250YWlucyB0aGVcbiAgICAgKiBzZWNvbmQgZWxlbWVudHMgb2YgdGhlIGdpdmVuIGFycmF5cywgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwKFsnYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snYScsIDEsIHRydWVdLCBbJ2InLCAyLCBmYWxzZV1dXG4gICAgICovXG4gICAgdmFyIHppcCA9IGJhc2VSZXN0KHVuemlwKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZnJvbVBhaXJzYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIHR3byBhcnJheXMsXG4gICAgICogb25lIG9mIHByb3BlcnR5IGlkZW50aWZpZXJzIGFuZCBvbmUgb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcHM9W11dIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwT2JqZWN0KFsnYScsICdiJ10sIFsxLCAyXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gemlwT2JqZWN0KHByb3BzLCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBiYXNlWmlwT2JqZWN0KHByb3BzIHx8IFtdLCB2YWx1ZXMgfHwgW10sIGFzc2lnblZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcE9iamVjdGAgZXhjZXB0IHRoYXQgaXQgc3VwcG9ydHMgcHJvcGVydHkgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcHM9W11dIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwT2JqZWN0RGVlcChbJ2EuYlswXS5jJywgJ2EuYlsxXS5kJ10sIFsxLCAyXSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2InOiBbeyAnYyc6IDEgfSwgeyAnZCc6IDIgfV0gfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gemlwT2JqZWN0RGVlcChwcm9wcywgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzIHx8IFtdLCBiYXNlU2V0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHRvIHNwZWNpZnlcbiAgICAgKiBob3cgZ3JvdXBlZCB2YWx1ZXMgc2hvdWxkIGJlIGNvbWJpbmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRoZVxuICAgICAqIGVsZW1lbnRzIG9mIGVhY2ggZ3JvdXA6ICguLi5ncm91cCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lXG4gICAgICogIGdyb3VwZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwV2l0aChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdLCBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gYSArIGIgKyBjO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IFsxMTEsIDIyMl1cbiAgICAgKi9cbiAgICB2YXIgemlwV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGgsXG4gICAgICAgICAgaXRlcmF0ZWUgPSBsZW5ndGggPiAxID8gYXJyYXlzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpdGVyYXRlZSA9IHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nID8gKGFycmF5cy5wb3AoKSwgaXRlcmF0ZWUpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHVuemlwV2l0aChhcnJheXMsIGl0ZXJhdGVlKTtcbiAgICB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlIHRoYXQgd3JhcHMgYHZhbHVlYCB3aXRoIGV4cGxpY2l0IG1ldGhvZFxuICAgICAqIGNoYWluIHNlcXVlbmNlcyBlbmFibGVkLiBUaGUgcmVzdWx0IG9mIHN1Y2ggc2VxdWVuY2VzIG11c3QgYmUgdW53cmFwcGVkXG4gICAgICogd2l0aCBgXyN2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogdmFyIHlvdW5nZXN0ID0gX1xuICAgICAqICAgLmNoYWluKHVzZXJzKVxuICAgICAqICAgLnNvcnRCeSgnYWdlJylcbiAgICAgKiAgIC5tYXAoZnVuY3Rpb24obykge1xuICAgICAqICAgICByZXR1cm4gby51c2VyICsgJyBpcyAnICsgby5hZ2U7XG4gICAgICogICB9KVxuICAgICAqICAgLmhlYWQoKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMgaXMgMSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjaGFpbih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaCh2YWx1ZSk7XG4gICAgICByZXN1bHQuX19jaGFpbl9fID0gdHJ1ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaW52b2tlcyBgaW50ZXJjZXB0b3JgIGFuZCByZXR1cm5zIGB2YWx1ZWAuIFRoZSBpbnRlcmNlcHRvclxuICAgICAqIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuIFRoZSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvXG4gICAgICogXCJ0YXAgaW50b1wiIGEgbWV0aG9kIGNoYWluIHNlcXVlbmNlIGluIG9yZGVyIHRvIG1vZGlmeSBpbnRlcm1lZGlhdGUgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSlcbiAgICAgKiAgLnRhcChmdW5jdGlvbihhcnJheSkge1xuICAgICAqICAgIC8vIE11dGF0ZSBpbnB1dCBhcnJheS5cbiAgICAgKiAgICBhcnJheS5wb3AoKTtcbiAgICAgKiAgfSlcbiAgICAgKiAgLnJldmVyc2UoKVxuICAgICAqICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YXAodmFsdWUsIGludGVyY2VwdG9yKSB7XG4gICAgICBpbnRlcmNlcHRvcih2YWx1ZSk7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy50YXBgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIHJlc3VsdCBvZiBgaW50ZXJjZXB0b3JgLlxuICAgICAqIFRoZSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvIFwicGFzcyB0aHJ1XCIgdmFsdWVzIHJlcGxhY2luZyBpbnRlcm1lZGlhdGVcbiAgICAgKiByZXN1bHRzIGluIGEgbWV0aG9kIGNoYWluIHNlcXVlbmNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb3ZpZGUgdG8gYGludGVyY2VwdG9yYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnRlcmNlcHRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXygnICBhYmMgICcpXG4gICAgICogIC5jaGFpbigpXG4gICAgICogIC50cmltKClcbiAgICAgKiAgLnRocnUoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgICByZXR1cm4gW3ZhbHVlXTtcbiAgICAgKiAgfSlcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydhYmMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocnUodmFsdWUsIGludGVyY2VwdG9yKSB7XG4gICAgICByZXR1cm4gaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHRoZSB3cmFwcGVyIHZlcnNpb24gb2YgYF8uYXRgLlxuICAgICAqXG4gICAgICogQG5hbWUgYXRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9LCA0XSB9O1xuICAgICAqXG4gICAgICogXyhvYmplY3QpLmF0KFsnYVswXS5iLmMnLCAnYVsxXSddKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqL1xuICAgIHZhciB3cmFwcGVyQXQgPSBmbGF0UmVzdChmdW5jdGlvbihwYXRocykge1xuICAgICAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICBzdGFydCA9IGxlbmd0aCA/IHBhdGhzWzBdIDogMCxcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgaW50ZXJjZXB0b3IgPSBmdW5jdGlvbihvYmplY3QpIHsgcmV0dXJuIGJhc2VBdChvYmplY3QsIHBhdGhzKTsgfTtcblxuICAgICAgaWYgKGxlbmd0aCA+IDEgfHwgdGhpcy5fX2FjdGlvbnNfXy5sZW5ndGggfHxcbiAgICAgICAgICAhKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHx8ICFpc0luZGV4KHN0YXJ0KSkge1xuICAgICAgICByZXR1cm4gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2Uoc3RhcnQsICtzdGFydCArIChsZW5ndGggPyAxIDogMCkpO1xuICAgICAgdmFsdWUuX19hY3Rpb25zX18ucHVzaCh7XG4gICAgICAgICdmdW5jJzogdGhydSxcbiAgICAgICAgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLFxuICAgICAgICAndGhpc0FyZyc6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUsIHRoaXMuX19jaGFpbl9fKS50aHJ1KGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgIGlmIChsZW5ndGggJiYgIWFycmF5Lmxlbmd0aCkge1xuICAgICAgICAgIGFycmF5LnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlIHdpdGggZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcyBlbmFibGVkLlxuICAgICAqXG4gICAgICogQG5hbWUgY2hhaW5cbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gQSBzZXF1ZW5jZSB3aXRob3V0IGV4cGxpY2l0IGNoYWluaW5nLlxuICAgICAqIF8odXNlcnMpLmhlYWQoKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICpcbiAgICAgKiAvLyBBIHNlcXVlbmNlIHdpdGggZXhwbGljaXQgY2hhaW5pbmcuXG4gICAgICogXyh1c2VycylcbiAgICAgKiAgIC5jaGFpbigpXG4gICAgICogICAuaGVhZCgpXG4gICAgICogICAucGljaygndXNlcicpXG4gICAgICogICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2Jhcm5leScgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDaGFpbigpIHtcbiAgICAgIHJldHVybiBjaGFpbih0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgY2hhaW4gc2VxdWVuY2UgYW5kIHJldHVybnMgdGhlIHdyYXBwZWQgcmVzdWx0LlxuICAgICAqXG4gICAgICogQG5hbWUgY29tbWl0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyXTtcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oYXJyYXkpLnB1c2goMyk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkID0gd3JhcHBlZC5jb21taXQoKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkLmxhc3QoKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNvbW1pdCgpIHtcbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih0aGlzLnZhbHVlKCksIHRoaXMuX19jaGFpbl9fKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuZXh0IHZhbHVlIG9uIGEgd3JhcHBlZCBvYmplY3QgZm9sbG93aW5nIHRoZVxuICAgICAqIFtpdGVyYXRvciBwcm90b2NvbF0oaHR0cHM6Ly9tZG4uaW8vaXRlcmF0aW9uX3Byb3RvY29scyNpdGVyYXRvcikuXG4gICAgICpcbiAgICAgKiBAbmFtZSBuZXh0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV4dCBpdGVyYXRvciB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSk7XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogZmFsc2UsICd2YWx1ZSc6IDEgfVxuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IGZhbHNlLCAndmFsdWUnOiAyIH1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiB0cnVlLCAndmFsdWUnOiB1bmRlZmluZWQgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJOZXh0KCkge1xuICAgICAgaWYgKHRoaXMuX192YWx1ZXNfXyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX192YWx1ZXNfXyA9IHRvQXJyYXkodGhpcy52YWx1ZSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciBkb25lID0gdGhpcy5fX2luZGV4X18gPj0gdGhpcy5fX3ZhbHVlc19fLmxlbmd0aCxcbiAgICAgICAgICB2YWx1ZSA9IGRvbmUgPyB1bmRlZmluZWQgOiB0aGlzLl9fdmFsdWVzX19bdGhpcy5fX2luZGV4X18rK107XG5cbiAgICAgIHJldHVybiB7ICdkb25lJzogZG9uZSwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGVzIHRoZSB3cmFwcGVyIHRvIGJlIGl0ZXJhYmxlLlxuICAgICAqXG4gICAgICogQG5hbWUgU3ltYm9sLml0ZXJhdG9yXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgd3JhcHBlciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pO1xuICAgICAqXG4gICAgICogd3JhcHBlZFtTeW1ib2wuaXRlcmF0b3JdKCkgPT09IHdyYXBwZWQ7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogQXJyYXkuZnJvbSh3cmFwcGVkKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVG9JdGVyYXRvcigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgY2hhaW4gc2VxdWVuY2UgcGxhbnRpbmcgYHZhbHVlYCBhcyB0aGUgd3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHBsYW50XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGxhbnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSkubWFwKHNxdWFyZSk7XG4gICAgICogdmFyIG90aGVyID0gd3JhcHBlZC5wbGFudChbMywgNF0pO1xuICAgICAqXG4gICAgICogb3RoZXIudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbOSwgMTZdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzEsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclBsYW50KHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0LFxuICAgICAgICAgIHBhcmVudCA9IHRoaXM7XG5cbiAgICAgIHdoaWxlIChwYXJlbnQgaW5zdGFuY2VvZiBiYXNlTG9kYXNoKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IHdyYXBwZXJDbG9uZShwYXJlbnQpO1xuICAgICAgICBjbG9uZS5fX2luZGV4X18gPSAwO1xuICAgICAgICBjbG9uZS5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgcHJldmlvdXMuX193cmFwcGVkX18gPSBjbG9uZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSBjbG9uZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJldmlvdXMgPSBjbG9uZTtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50Ll9fd3JhcHBlZF9fO1xuICAgICAgfVxuICAgICAgcHJldmlvdXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdGhlIHdyYXBwZXIgdmVyc2lvbiBvZiBgXy5yZXZlcnNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIHRoZSB3cmFwcGVkIGFycmF5LlxuICAgICAqXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfKGFycmF5KS5yZXZlcnNlKCkudmFsdWUoKVxuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJSZXZlcnNlKCkge1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXztcbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHZhciB3cmFwcGVkID0gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCkge1xuICAgICAgICAgIHdyYXBwZWQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgd3JhcHBlZCA9IHdyYXBwZWQucmV2ZXJzZSgpO1xuICAgICAgICB3cmFwcGVkLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAgICdmdW5jJzogdGhydSxcbiAgICAgICAgICAnYXJncyc6IFtyZXZlcnNlXSxcbiAgICAgICAgICAndGhpc0FyZyc6IHVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZWQsIHRoaXMuX19jaGFpbl9fKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnRocnUocmV2ZXJzZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluIHNlcXVlbmNlIHRvIHJlc29sdmUgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHZhbHVlXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgdG9KU09OLCB2YWx1ZU9mXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJWYWx1ZSgpIHtcbiAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKHRoaXMuX193cmFwcGVkX18sIHRoaXMuX19hY3Rpb25zX18pO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGtleSB3YXMgcmV0dXJuZWQgYnkgYGl0ZXJhdGVlYC4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jb3VudEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IDEsICc2JzogMiB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmNvdW50QnkoWydvbmUnLCAndHdvJywgJ3RocmVlJ10sICdsZW5ndGgnKTtcbiAgICAgKiAvLyA9PiB7ICczJzogMiwgJzUnOiAxIH1cbiAgICAgKi9cbiAgICB2YXIgY291bnRCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIGtleSkpIHtcbiAgICAgICAgKytyZXN1bHRba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgMSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYWxsKiogZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAgZm9yXG4gICAgICogW2VtcHR5IGNvbGxlY3Rpb25zXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FbXB0eV9zZXQpIGJlY2F1c2VcbiAgICAgKiBbZXZlcnl0aGluZyBpcyB0cnVlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9WYWN1b3VzX3RydXRoKSBvZlxuICAgICAqIGVsZW1lbnRzIG9mIGVtcHR5IGNvbGxlY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ldmVyeShbdHJ1ZSwgMSwgbnVsbCwgJ3llcyddLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXZlcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFdmVyeSA6IGJhc2VFdmVyeTtcbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSkge1xuICAgICAgICBwcmVkaWNhdGUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIGFuIGFycmF5IG9mIGFsbCBlbGVtZW50c1xuICAgICAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucmVtb3ZlYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKiBAc2VlIF8ucmVqZWN0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gQ29tYmluaW5nIHNldmVyYWwgcHJlZGljYXRlcyB1c2luZyBgXy5vdmVyRXZlcnlgIG9yIGBfLm92ZXJTb21lYC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5vdmVyU29tZShbeyAnYWdlJzogMzYgfSwgWydhZ2UnLCA0MF1dKSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ2Jhcm5leSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyB0aGUgZmlyc3QgZWxlbWVudFxuICAgICAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnYmFybmV5J1xuICAgICAqL1xuICAgIHZhciBmaW5kID0gY3JlYXRlRmluZChmaW5kSW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9Y29sbGVjdGlvbi5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3QoWzEsIDIsIDMsIDRdLCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgdmFyIGZpbmRMYXN0ID0gY3JlYXRlRmluZChmaW5kTGFzdEluZGV4KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmbGF0dGVuZWQgYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYFxuICAgICAqIHRocnUgYGl0ZXJhdGVlYCBhbmQgZmxhdHRlbmluZyB0aGUgbWFwcGVkIHJlc3VsdHMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbbiwgbl07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwKFsxLCAyXSwgZHVwbGljYXRlKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMiwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbW1tuLCBuXV1dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcERlZXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXBEZWVwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgSU5GSU5JVFkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxhdE1hcGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgZmxhdHRlbnMgdGhlXG4gICAgICogbWFwcGVkIHJlc3VsdHMgdXAgdG8gYGRlcHRoYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbW1tuLCBuXV1dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcERlcHRoKFsxLCAyXSwgZHVwbGljYXRlLCAyKTtcbiAgICAgKiAvLyA9PiBbWzEsIDFdLCBbMiwgMl1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlcHRoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBkZXB0aCkge1xuICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aCk7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggZWxlbWVudC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBBcyB3aXRoIG90aGVyIFwiQ29sbGVjdGlvbnNcIiBtZXRob2RzLCBvYmplY3RzIHdpdGggYSBcImxlbmd0aFwiXG4gICAgICogcHJvcGVydHkgYXJlIGl0ZXJhdGVkIGxpa2UgYXJyYXlzLiBUbyBhdm9pZCB0aGlzIGJlaGF2aW9yIHVzZSBgXy5mb3JJbmBcbiAgICAgKiBvciBgXy5mb3JPd25gIGZvciBvYmplY3QgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGVhY2hcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAc2VlIF8uZm9yRWFjaFJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChbMSwgMl0sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyBgMWAgdGhlbiBgMmAuXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaCA6IGJhc2VFYWNoO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckVhY2hgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGFsaWFzIGVhY2hSaWdodFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaFJpZ2h0KFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAyYCB0aGVuIGAxYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JFYWNoUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaFJpZ2h0IDogYmFzZUVhY2hSaWdodDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBvcmRlciBvZiBncm91cGVkIHZhbHVlc1xuICAgICAqIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gYGNvbGxlY3Rpb25gLiBUaGUgY29ycmVzcG9uZGluZ1xuICAgICAqIHZhbHVlIG9mIGVhY2gga2V5IGlzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZVxuICAgICAqIGtleS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3JvdXBCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiBbNC4yXSwgJzYnOiBbNi4xLCA2LjNdIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZ3JvdXBCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiBbJ29uZScsICd0d28nXSwgJzUnOiBbJ3RocmVlJ10gfVxuICAgICAqL1xuICAgIHZhciBncm91cEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICAgICByZXN1bHRba2V5XS5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgW3ZhbHVlXSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiBgY29sbGVjdGlvbmAuIElmIGBjb2xsZWN0aW9uYCBpcyBhIHN0cmluZywgaXQnc1xuICAgICAqIGNoZWNrZWQgZm9yIGEgc3Vic3RyaW5nIG9mIGB2YWx1ZWAsIG90aGVyd2lzZVxuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogaXMgdXNlZCBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXNcbiAgICAgKiB0aGUgb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoWzEsIDIsIDNdLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyh7ICdhJzogMSwgJ2InOiAyIH0sIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoJ2FiY2QnLCAnYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5jbHVkZXMoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCwgZ3VhcmQpIHtcbiAgICAgIGNvbGxlY3Rpb24gPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IGNvbGxlY3Rpb24gOiB2YWx1ZXMoY29sbGVjdGlvbik7XG4gICAgICBmcm9tSW5kZXggPSAoZnJvbUluZGV4ICYmICFndWFyZCkgPyB0b0ludGVnZXIoZnJvbUluZGV4KSA6IDA7XG5cbiAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgIGlmIChmcm9tSW5kZXggPCAwKSB7XG4gICAgICAgIGZyb21JbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBmcm9tSW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pXG4gICAgICAgID8gKGZyb21JbmRleCA8PSBsZW5ndGggJiYgY29sbGVjdGlvbi5pbmRleE9mKHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpXG4gICAgICAgIDogKCEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNvbGxlY3Rpb24sIHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nXG4gICAgICogYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2YgZWFjaCBpbnZva2VkIG1ldGhvZC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzXG4gICAgICogYXJlIHByb3ZpZGVkIHRvIGVhY2ggaW52b2tlZCBtZXRob2QuIElmIGBwYXRoYCBpcyBhIGZ1bmN0aW9uLCBpdCdzIGludm9rZWRcbiAgICAgKiBmb3IsIGFuZCBgdGhpc2AgYm91bmQgdG8sIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZSBvclxuICAgICAqICB0aGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGVhY2ggbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludm9rZU1hcChbWzUsIDEsIDddLCBbMywgMiwgMV1dLCAnc29ydCcpO1xuICAgICAqIC8vID0+IFtbMSwgNSwgN10sIFsxLCAyLCAzXV1cbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFsxMjMsIDQ1Nl0sIFN0cmluZy5wcm90b3R5cGUuc3BsaXQsICcnKTtcbiAgICAgKiAvLyA9PiBbWycxJywgJzInLCAnMyddLCBbJzQnLCAnNScsICc2J11dXG4gICAgICovXG4gICAgdmFyIGludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHBhdGgsIGFyZ3MpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGlzRnVuYyA9IHR5cGVvZiBwYXRoID09ICdmdW5jdGlvbicsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gaXNGdW5jID8gYXBwbHkocGF0aCwgdmFsdWUsIGFyZ3MpIDogYmFzZUludm9rZSh2YWx1ZSwgcGF0aCwgYXJncyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbGFzdCBlbGVtZW50IHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBrZXkuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtcbiAgICAgKiAgIHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LFxuICAgICAqICAgeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmtleUJ5KGFycmF5LCBmdW5jdGlvbihvKSB7XG4gICAgICogICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShvLmNvZGUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ2QnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksICdkaXInKTtcbiAgICAgKiAvLyA9PiB7ICdsZWZ0JzogeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sICdyaWdodCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqL1xuICAgIHZhciBrZXlCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIHZhbHVlKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1XG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gICAgICogYF8uZXZlcnlgLCBgXy5maWx0ZXJgLCBgXy5tYXBgLCBgXy5tYXBWYWx1ZXNgLCBgXy5yZWplY3RgLCBhbmQgYF8uc29tZWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXJ5YCwgYGNodW5rYCwgYGN1cnJ5YCwgYGN1cnJ5UmlnaHRgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZXZlcnlgLFxuICAgICAqIGBmaWxsYCwgYGludmVydGAsIGBwYXJzZUludGAsIGByYW5kb21gLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZXBlYXRgLFxuICAgICAqIGBzYW1wbGVTaXplYCwgYHNsaWNlYCwgYHNvbWVgLCBgc29ydEJ5YCwgYHNwbGl0YCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdHJpbWAsIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGFuZCBgd29yZHNgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5tYXAoWzQsIDhdLCBzcXVhcmUpO1xuICAgICAqIC8vID0+IFsxNiwgNjRdXG4gICAgICpcbiAgICAgKiBfLm1hcCh7ICdhJzogNCwgJ2InOiA4IH0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JyB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJyB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlNYXAgOiBiYXNlTWFwO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRCeWAgZXhjZXB0IHRoYXQgaXQgYWxsb3dzIHNwZWNpZnlpbmcgdGhlIHNvcnRcbiAgICAgKiBvcmRlcnMgb2YgdGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlc1xuICAgICAqIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yXG4gICAgICogZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlciBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXlbXXxGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IFtvcmRlcnNdIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5yZWR1Y2VgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDggfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBTb3J0IGJ5IGB1c2VyYCBpbiBhc2NlbmRpbmcgb3JkZXIgYW5kIGJ5IGBhZ2VgIGluIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICogXy5vcmRlckJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10sIFsnYXNjJywgJ2Rlc2MnXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCA0MF1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gb3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycywgZ3VhcmQpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKCFpc0FycmF5KGl0ZXJhdGVlcykpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gaXRlcmF0ZWVzID09IG51bGwgPyBbXSA6IFtpdGVyYXRlZXNdO1xuICAgICAgfVxuICAgICAgb3JkZXJzID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBvcmRlcnM7XG4gICAgICBpZiAoIWlzQXJyYXkob3JkZXJzKSkge1xuICAgICAgICBvcmRlcnMgPSBvcmRlcnMgPT0gbnVsbCA/IFtdIDogW29yZGVyc107XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byB0d28gZ3JvdXBzLCB0aGUgZmlyc3Qgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IsIHRoZSBzZWNvbmQgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleSBmb3IuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydmcmVkJ10sIFsnYmFybmV5JywgJ3BlYmJsZXMnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydwZWJibGVzJ10sIFsnYmFybmV5JywgJ2ZyZWQnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsICdwZWJibGVzJ10sIFsnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydmcmVkJ10sIFsnYmFybmV5JywgJ3BlYmJsZXMnXV1cbiAgICAgKi9cbiAgICB2YXIgcGFydGl0aW9uID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFtrZXkgPyAwIDogMV0ucHVzaCh2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24oKSB7IHJldHVybiBbW10sIFtdXTsgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZWR1Y2VzIGBjb2xsZWN0aW9uYCB0byBhIHZhbHVlIHdoaWNoIGlzIHRoZSBhY2N1bXVsYXRlZCByZXN1bHQgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLiBJZiBgYWNjdW11bGF0b3JgXG4gICAgICogaXMgbm90IGdpdmVuLCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgaXMgdXNlZCBhcyB0aGUgaW5pdGlhbFxuICAgICAqIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOlxuICAgICAqIChhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5yZWR1Y2VgLCBgXy5yZWR1Y2VSaWdodGAsIGFuZCBgXy50cmFuc2Zvcm1gLlxuICAgICAqXG4gICAgICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gICAgICogYGFzc2lnbmAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgaW5jbHVkZXNgLCBgbWVyZ2VgLCBgb3JkZXJCeWAsXG4gICAgICogYW5kIGBzb3J0QnlgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5yZWR1Y2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZShbMSwgMl0sIGZ1bmN0aW9uKHN1bSwgbikge1xuICAgICAqICAgcmV0dXJuIHN1bSArIG47XG4gICAgICogfSwgMCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZWR1Y2UoeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAgICAgKiAgIHJldHVybiByZXN1bHQ7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWR1Y2UoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZSA6IGJhc2VSZWR1Y2UsXG4gICAgICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2gpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucmVkdWNlYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbWzAsIDFdLCBbMiwgM10sIFs0LCA1XV07XG4gICAgICpcbiAgICAgKiBfLnJlZHVjZVJpZ2h0KGFycmF5LCBmdW5jdGlvbihmbGF0dGVuZWQsIG90aGVyKSB7XG4gICAgICogICByZXR1cm4gZmxhdHRlbmVkLmNvbmNhdChvdGhlcik7XG4gICAgICogfSwgW10pO1xuICAgICAqIC8vID0+IFs0LCA1LCAyLCAzLCAwLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlSZWR1Y2VSaWdodCA6IGJhc2VSZWR1Y2UsXG4gICAgICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2hSaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmZpbHRlcmA7IHRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYFxuICAgICAqIHRoYXQgYHByZWRpY2F0ZWAgZG9lcyAqKm5vdCoqIHJldHVybiB0cnV0aHkgZm9yLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqIEBzZWUgXy5maWx0ZXJcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5yZWplY3QodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVqZWN0KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgcmFuZG9tIGVsZW1lbnQgZnJvbSBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2FtcGxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNhbXBsZSA6IGJhc2VTYW1wbGU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGBuYCByYW5kb20gZWxlbWVudHMgYXQgdW5pcXVlIGtleXMgZnJvbSBgY29sbGVjdGlvbmAgdXAgdG8gdGhlXG4gICAgICogc2l6ZSBvZiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGVTaXplKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzMsIDFdXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCA0KTtcbiAgICAgKiAvLyA9PiBbMiwgMywgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICB9XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNhbXBsZVNpemUgOiBiYXNlU2FtcGxlU2l6ZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygc2h1ZmZsZWQgdmFsdWVzLCB1c2luZyBhIHZlcnNpb24gb2YgdGhlXG4gICAgICogW0Zpc2hlci1ZYXRlcyBzaHVmZmxlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXItWWF0ZXNfc2h1ZmZsZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2h1ZmZsZShbMSwgMiwgMywgNF0pO1xuICAgICAqIC8vID0+IFs0LCAxLCAzLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTaHVmZmxlIDogYmFzZVNodWZmbGU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzaXplIG9mIGBjb2xsZWN0aW9uYCBieSByZXR1cm5pbmcgaXRzIGxlbmd0aCBmb3IgYXJyYXktbGlrZVxuICAgICAqIHZhbHVlcyBvciB0aGUgbnVtYmVyIG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIGZvciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb2xsZWN0aW9uIHNpemUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2l6ZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uc2l6ZSh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8uc2l6ZSgncGViYmxlcycpO1xuICAgICAqIC8vID0+IDdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaXplKGNvbGxlY3Rpb24pIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pID8gc3RyaW5nU2l6ZShjb2xsZWN0aW9uKSA6IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyhjb2xsZWN0aW9uKTtcbiAgICAgIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uc2l6ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlS2V5cyhjb2xsZWN0aW9uKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFueSoqIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb21lKFtudWxsLCAwLCAneWVzJywgZmFsc2VdLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb21lKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U29tZSA6IGJhc2VTb21lO1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMsIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIgYnkgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBhIGNvbGxlY3Rpb24gdGhydSBlYWNoIGl0ZXJhdGVlLiBUaGlzIG1ldGhvZFxuICAgICAqIHBlcmZvcm1zIGEgc3RhYmxlIHNvcnQsIHRoYXQgaXMsIGl0IHByZXNlcnZlcyB0aGUgb3JpZ2luYWwgc29ydCBvcmRlciBvZlxuICAgICAqIGVxdWFsIGVsZW1lbnRzLiBUaGUgaXRlcmF0ZWVzIGFyZSBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDMwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyOyB9XSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCAzMF1dXG4gICAgICpcbiAgICAgKiBfLnNvcnRCeSh1c2VycywgWyd1c2VyJywgJ2FnZSddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNF0sIFsnYmFybmV5JywgMzZdLCBbJ2ZyZWQnLCAzMF0sIFsnZnJlZCcsIDQ4XV1cbiAgICAgKi9cbiAgICB2YXIgc29ydEJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWVzKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA+IDEgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0pKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtdO1xuICAgICAgfSBlbHNlIGlmIChsZW5ndGggPiAyICYmIGlzSXRlcmF0ZWVDYWxsKGl0ZXJhdGVlc1swXSwgaXRlcmF0ZWVzWzFdLCBpdGVyYXRlZXNbMl0pKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtpdGVyYXRlZXNbMF1dO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGJhc2VGbGF0dGVuKGl0ZXJhdGVlcywgMSksIFtdKTtcbiAgICB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICAgICAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IERhdGVcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gICAgICogfSwgXy5ub3coKSk7XG4gICAgICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAgICAgKi9cbiAgICB2YXIgbm93ID0gY3R4Tm93IHx8IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbiAgICB9O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmJlZm9yZWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXNcbiAgICAgKiBgZnVuY2Agb25jZSBpdCdzIGNhbGxlZCBgbmAgb3IgbW9yZSB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgY2FsbHMgYmVmb3JlIGBmdW5jYCBpcyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXZlcyA9IFsncHJvZmlsZScsICdzZXR0aW5ncyddO1xuICAgICAqXG4gICAgICogdmFyIGRvbmUgPSBfLmFmdGVyKHNhdmVzLmxlbmd0aCwgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnZG9uZSBzYXZpbmchJyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goc2F2ZXMsIGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgKiAgIGFzeW5jU2F2ZSh7ICd0eXBlJzogdHlwZSwgJ2NvbXBsZXRlJzogZG9uZSB9KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdkb25lIHNhdmluZyEnIGFmdGVyIHRoZSB0d28gYXN5bmMgc2F2ZXMgaGF2ZSBjb21wbGV0ZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWZ0ZXIobiwgZnVuYykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKC0tbiA8IDEpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgLCB3aXRoIHVwIHRvIGBuYCBhcmd1bWVudHMsXG4gICAgICogaWdub3JpbmcgYW55IGFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgY2FwLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnOCcsICcxMCddLCBfLmFyeShwYXJzZUludCwgMSkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnkoZnVuYywgbiwgZ3VhcmQpIHtcbiAgICAgIG4gPSBndWFyZCA/IHVuZGVmaW5lZCA6IG47XG4gICAgICBuID0gKGZ1bmMgJiYgbiA9PSBudWxsKSA/IGZ1bmMubGVuZ3RoIDogbjtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQVJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHNcbiAgICAgKiBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hpbGUgaXQncyBjYWxsZWQgbGVzcyB0aGFuIGBuYCB0aW1lcy4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBhdCB3aGljaCBgZnVuY2AgaXMgbm8gbG9uZ2VyIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uYmVmb3JlKDUsIGFkZENvbnRhY3RUb0xpc3QpKTtcbiAgICAgKiAvLyA9PiBBbGxvd3MgYWRkaW5nIHVwIHRvIDQgY29udGFjdHMgdG8gdGhlIGxpc3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmVmb3JlKG4sIGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uID4gMCkge1xuICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobiA8PSAxKSB7XG4gICAgICAgICAgZnVuYyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2BcbiAgICAgKiBhbmQgYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kLnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgbmF0aXZlIGBGdW5jdGlvbiNiaW5kYCwgdGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBvZiBib3VuZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBiaW5kLlxuICAgICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBCb3VuZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgXywgJyEnKTtcbiAgICAgKiBib3VuZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGJpdG1hc2sgPSBXUkFQX0JJTkRfRkxBRztcbiAgICAgIGlmIChwYXJ0aWFscy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKGJpbmQpKTtcbiAgICAgICAgYml0bWFzayB8PSBXUkFQX1BBUlRJQUxfRkxBRztcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIG1ldGhvZCBhdCBgb2JqZWN0W2tleV1gIHdpdGggYHBhcnRpYWxzYFxuICAgICAqIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgZGlmZmVycyBmcm9tIGBfLmJpbmRgIGJ5IGFsbG93aW5nIGJvdW5kIGZ1bmN0aW9ucyB0byByZWZlcmVuY2VcbiAgICAgKiBtZXRob2RzIHRoYXQgbWF5IGJlIHJlZGVmaW5lZCBvciBkb24ndCB5ZXQgZXhpc3QuIFNlZVxuICAgICAqIFtQZXRlciBNaWNoYXV4J3MgYXJ0aWNsZV0oaHR0cDovL3BldGVyLm1pY2hhdXguY2EvYXJ0aWNsZXMvbGF6eS1mdW5jdGlvbi1kZWZpbml0aW9uLXBhdHRlcm4pXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kS2V5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52b2tlIHRoZSBtZXRob2Qgb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7XG4gICAgICogICAndXNlcic6ICdmcmVkJyxcbiAgICAgKiAgICdncmVldCc6IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kS2V5KG9iamVjdCwgJ2dyZWV0JywgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiBvYmplY3QuZ3JlZXQgPSBmdW5jdGlvbihncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICd5YSAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBCb3VuZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaXlhIGZyZWQhJ1xuICAgICAqL1xuICAgIHZhciBiaW5kS2V5ID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBrZXksIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZEtleSkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoa2V5LCBiaXRtYXNrLCBvYmplY3QsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYXJndW1lbnRzIG9mIGBmdW5jYCBhbmQgZWl0aGVyIGludm9rZXNcbiAgICAgKiBgZnVuY2AgcmV0dXJuaW5nIGl0cyByZXN1bHQsIGlmIGF0IGxlYXN0IGBhcml0eWAgbnVtYmVyIG9mIGFyZ3VtZW50cyBoYXZlXG4gICAgICogYmVlbiBwcm92aWRlZCwgb3IgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB0aGUgcmVtYWluaW5nIGBmdW5jYFxuICAgICAqIGFyZ3VtZW50cywgYW5kIHNvIG9uLiBUaGUgYXJpdHkgb2YgYGZ1bmNgIG1heSBiZSBzcGVjaWZpZWQgaWYgYGZ1bmMubGVuZ3RoYFxuICAgICAqIGlzIG5vdCBzdWZmaWNpZW50LlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBjdXJyaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHk9ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYWJjID0gZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGN1cnJpZWQgPSBfLmN1cnJ5KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEpKDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyKSgzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMSkoXywgMykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnkoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0NVUlJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeS5wbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jdXJyeWAgZXhjZXB0IHRoYXQgYXJndW1lbnRzIGFyZSBhcHBsaWVkIHRvIGBmdW5jYFxuICAgICAqIGluIHRoZSBtYW5uZXIgb2YgYF8ucGFydGlhbFJpZ2h0YCBpbnN0ZWFkIG9mIGBfLnBhcnRpYWxgLlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5UmlnaHQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnlSaWdodChhYmMpO1xuICAgICAqXG4gICAgICogY3VycmllZCgzKSgyKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMiwgMykoMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIsIDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogLy8gQ3VycmllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiBjdXJyaWVkKDMpKDEsIF8pKDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1cnJ5UmlnaHQoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeVJpZ2h0LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAgICAgKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAgICAgKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gICAgICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gICAgICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gICAgICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAgICAgKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICAgICAqIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICAgICAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gICAgICogICAnbGVhZGluZyc6IHRydWUsXG4gICAgICogICAndHJhaWxpbmcnOiBmYWxzZVxuICAgICAqIH0pKTtcbiAgICAgKlxuICAgICAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gICAgICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gICAgICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICAgICAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAgICAgKlxuICAgICAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGxhc3RBcmdzLFxuICAgICAgICAgIGxhc3RUaGlzLFxuICAgICAgICAgIG1heFdhaXQsXG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgIHRpbWVySWQsXG4gICAgICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgICAgICBsZWFkaW5nID0gZmFsc2UsXG4gICAgICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDtcbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zO1xuICAgICAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgICAgIHRoaXNBcmcgPSBsYXN0VGhpcztcblxuICAgICAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHtcbiAgICAgICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgICAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICAgICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgICAgICB0aW1lV2FpdGluZyA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgICAgICByZXR1cm4gbWF4aW5nXG4gICAgICAgICAgPyBuYXRpdmVNaW4odGltZVdhaXRpbmcsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKVxuICAgICAgICAgIDogdGltZVdhaXRpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICAgICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgICAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAgICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAgICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICAgICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICAgICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgICAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICAgICAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gICAgICByZXR1cm4gZGVib3VuY2VkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlZmVycyBpbnZva2luZyB0aGUgYGZ1bmNgIHVudGlsIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzIGNsZWFyZWQuIEFueVxuICAgICAqIGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWZlci5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAnZGVmZXJyZWQnKTtcbiAgICAgKiAvLyA9PiBMb2dzICdkZWZlcnJlZCcgYWZ0ZXIgb25lIG1pbGxpc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWZlciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgMSwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIGBmdW5jYCBhZnRlciBgd2FpdGAgbWlsbGlzZWNvbmRzLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlXG4gICAgICogcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWxheShmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAxMDAwLCAnbGF0ZXInKTtcbiAgICAgKiAvLyA9PiBMb2dzICdsYXRlcicgYWZ0ZXIgb25lIHNlY29uZC5cbiAgICAgKi9cbiAgICB2YXIgZGVsYXkgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICByZXR1cm4gYmFzZURlbGF5KGZ1bmMsIHRvTnVtYmVyKHdhaXQpIHx8IDAsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgcmV2ZXJzZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBmbGlwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxpcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZsaXBwZWQgPSBfLmZsaXAoZnVuY3Rpb24oKSB7XG4gICAgICogICByZXR1cm4gXy50b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBmbGlwcGVkKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gWydkJywgJ2MnLCAnYicsICdhJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGlwKGZ1bmMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfRkxJUF9GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICAgICAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAgICAgKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICAgICAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICAgICAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gICAgICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAgICAgKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICAgICAqXG4gICAgICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB2YWx1ZXMob3RoZXIpO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqXG4gICAgICogb2JqZWN0LmEgPSAyO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gICAgICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKlxuICAgICAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gICAgICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgIT0gbnVsbCAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuXG4gICAgICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgICAgIHJldHVybiBtZW1vaXplZDtcbiAgICB9XG5cbiAgICAvLyBFeHBvc2UgYE1hcENhY2hlYC5cbiAgICBtZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBuZWdhdGVzIHRoZSByZXN1bHQgb2YgdGhlIHByZWRpY2F0ZSBgZnVuY2AuIFRoZVxuICAgICAqIGBmdW5jYCBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIHByZWRpY2F0ZSB0byBuZWdhdGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbmVnYXRlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNFdmVuKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsxLCAyLCAzLCA0LCA1LCA2XSwgXy5uZWdhdGUoaXNFdmVuKSk7XG4gICAgICogLy8gPT4gWzEsIDMsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmVnYXRlKHByZWRpY2F0ZSkge1xuICAgICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSAwOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMpO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpcyByZXN0cmljdGVkIHRvIGludm9raW5nIGBmdW5jYCBvbmNlLiBSZXBlYXQgY2FsbHNcbiAgICAgKiB0byB0aGUgZnVuY3Rpb24gcmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgaW52b2NhdGlvbi4gVGhlIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBpbml0aWFsaXplID0gXy5vbmNlKGNyZWF0ZUFwcGxpY2F0aW9uKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogaW5pdGlhbGl6ZSgpO1xuICAgICAqIC8vID0+IGBjcmVhdGVBcHBsaWNhdGlvbmAgaXMgaW52b2tlZCBvbmNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25jZShmdW5jKSB7XG4gICAgICByZXR1cm4gYmVmb3JlKDIsIGZ1bmMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50cyB0cmFuc2Zvcm1lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFt0cmFuc2Zvcm1zPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGFyZ3VtZW50IHRyYW5zZm9ybXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGRvdWJsZWQobikge1xuICAgICAqICAgcmV0dXJuIG4gKiAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJBcmdzKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiBbeCwgeV07XG4gICAgICogfSwgW3NxdWFyZSwgZG91YmxlZF0pO1xuICAgICAqXG4gICAgICogZnVuYyg5LCAzKTtcbiAgICAgKiAvLyA9PiBbODEsIDZdXG4gICAgICpcbiAgICAgKiBmdW5jKDEwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTAwLCAxMF1cbiAgICAgKi9cbiAgICB2YXIgb3ZlckFyZ3MgPSBjYXN0UmVzdChmdW5jdGlvbihmdW5jLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB0cmFuc2Zvcm1zID0gKHRyYW5zZm9ybXMubGVuZ3RoID09IDEgJiYgaXNBcnJheSh0cmFuc2Zvcm1zWzBdKSlcbiAgICAgICAgPyBhcnJheU1hcCh0cmFuc2Zvcm1zWzBdLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpXG4gICAgICAgIDogYXJyYXlNYXAoYmFzZUZsYXR0ZW4odHJhbnNmb3JtcywgMSksIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciBmdW5jc0xlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4oYXJncy5sZW5ndGgsIGZ1bmNzTGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gdHJhbnNmb3Jtc1tpbmRleF0uY2FsbCh0aGlzLCBhcmdzW2luZGV4XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZVxuICAgICAqIGFyZ3VtZW50cyBpdCByZWNlaXZlcy4gVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5iaW5kYCBleGNlcHQgaXQgZG9lcyAqKm5vdCoqXG4gICAgICogYWx0ZXIgdGhlIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogVGhlIGBfLnBhcnRpYWwucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIHBhcnRpYWxseVxuICAgICAqIGFwcGxpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5IGFyZ3VtZW50cyB0by5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIG5hbWUpIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIG5hbWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWwoZ3JlZXQsICdoZWxsbycpO1xuICAgICAqIHNheUhlbGxvVG8oJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFBhcnRpYWxseSBhcHBsaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWwoZ3JlZXQsIF8sICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihwYXJ0aWFsKSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnBhcnRpYWxgIGV4Y2VwdCB0aGF0IHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50c1xuICAgICAqIGFyZSBhcHBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLnBhcnRpYWxSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZ3JlZXRGcmVkID0gXy5wYXJ0aWFsUmlnaHQoZ3JlZXQsICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2hlbGxvJywgXyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsUmlnaHQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWxSaWdodCkpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgYXJyYW5nZWQgYWNjb3JkaW5nXG4gICAgICogdG8gdGhlIHNwZWNpZmllZCBgaW5kZXhlc2Agd2hlcmUgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBmaXJzdCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCwgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBzZWNvbmQgaW5kZXggaXNcbiAgICAgKiBwcm92aWRlZCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZWFycmFuZ2UgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcmd1bWVudCBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcmVhcmdlZCA9IF8ucmVhcmcoZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9LCBbMiwgMCwgMV0pO1xuICAgICAqXG4gICAgICogcmVhcmdlZCgnYicsICdjJywgJ2EnKVxuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIHZhciByZWFyZyA9IGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmMsIGluZGV4ZXMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUkVBUkdfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaW5kZXhlcyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uIGFuZCBhcmd1bWVudHMgZnJvbSBgc3RhcnRgIGFuZCBiZXlvbmQgcHJvdmlkZWQgYXNcbiAgICAgKiBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvbiB0aGVcbiAgICAgKiBbcmVzdCBwYXJhbWV0ZXJdKGh0dHBzOi8vbWRuLmlvL3Jlc3RfcGFyYW1ldGVycykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8ucmVzdChmdW5jdGlvbih3aGF0LCBuYW1lcykge1xuICAgICAqICAgcmV0dXJuIHdoYXQgKyAnICcgKyBfLmluaXRpYWwobmFtZXMpLmpvaW4oJywgJykgK1xuICAgICAqICAgICAoXy5zaXplKG5hbWVzKSA+IDEgPyAnLCAmICcgOiAnJykgKyBfLmxhc3QobmFtZXMpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KCdoZWxsbycsICdmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gc3RhcnQgPT09IHVuZGVmaW5lZCA/IHN0YXJ0IDogdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jLCBzdGFydCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlXG4gICAgICogY3JlYXRlIGZ1bmN0aW9uIGFuZCBhbiBhcnJheSBvZiBhcmd1bWVudHMgbXVjaCBsaWtlXG4gICAgICogW2BGdW5jdGlvbiNhcHBseWBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtzcHJlYWQgb3BlcmF0b3JdKGh0dHBzOi8vbWRuLmlvL3NwcmVhZF9vcGVyYXRvcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBzcHJlYWQgYXJndW1lbnRzIG92ZXIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHNwcmVhZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8uc3ByZWFkKGZ1bmN0aW9uKHdobywgd2hhdCkge1xuICAgICAqICAgcmV0dXJuIHdobyArICcgc2F5cyAnICsgd2hhdDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHNheShbJ2ZyZWQnLCAnaGVsbG8nXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQgc2F5cyBoZWxsbydcbiAgICAgKlxuICAgICAqIHZhciBudW1iZXJzID0gUHJvbWlzZS5hbGwoW1xuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDQwKSxcbiAgICAgKiAgIFByb21pc2UucmVzb2x2ZSgzNilcbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIG51bWJlcnMudGhlbihfLnNwcmVhZChmdW5jdGlvbih4LCB5KSB7XG4gICAgICogICByZXR1cm4geCArIHk7XG4gICAgICogfSkpO1xuICAgICAqIC8vID0+IGEgUHJvbWlzZSBvZiA3NlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwcmVhZChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PSBudWxsID8gMCA6IG5hdGl2ZU1heCh0b0ludGVnZXIoc3RhcnQpLCAwKTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFyZ3Nbc3RhcnRdLFxuICAgICAgICAgICAgb3RoZXJBcmdzID0gY2FzdFNsaWNlKGFyZ3MsIDAsIHN0YXJ0KTtcblxuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBhcnJheVB1c2gob3RoZXJBcmdzLCBhcnJheSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdGhyb3R0bGVkIGZ1bmN0aW9uIHRoYXQgb25seSBpbnZva2VzIGBmdW5jYCBhdCBtb3N0IG9uY2UgcGVyXG4gICAgICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAgICAgKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gICAgICogaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgXG4gICAgICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YFxuICAgICAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAgICAgKiB0aHJvdHRsZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhlIHRocm90dGxlZCBmdW5jdGlvbiByZXR1cm4gdGhlXG4gICAgICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG4gICAgICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gICAgICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICAgICAqXG4gICAgICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gICAgICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aHJvdHRsZSBpbnZvY2F0aW9ucyB0by5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGV4Y2Vzc2l2ZWx5IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBzY3JvbGxpbmcuXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICAgICAqXG4gICAgICogLy8gSW52b2tlIGByZW5ld1Rva2VuYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgYnV0IG5vdCBtb3JlIHRoYW4gb25jZSBldmVyeSA1IG1pbnV0ZXMuXG4gICAgICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pO1xuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAgICAgJ2xlYWRpbmcnOiBsZWFkaW5nLFxuICAgICAgICAnbWF4V2FpdCc6IHdhaXQsXG4gICAgICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHVwIHRvIG9uZSBhcmd1bWVudCwgaWdub3JpbmcgYW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8udW5hcnkocGFyc2VJbnQpKTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5hcnkoZnVuYykge1xuICAgICAgcmV0dXJuIGFyeShmdW5jLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm92aWRlcyBgdmFsdWVgIHRvIGB3cmFwcGVyYCBhcyBpdHMgZmlyc3RcbiAgICAgKiBhcmd1bWVudC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBmdW5jdGlvbiBhcmUgYXBwZW5kZWRcbiAgICAgKiB0byB0aG9zZSBwcm92aWRlZCB0byB0aGUgYHdyYXBwZXJgLiBUaGUgd3JhcHBlciBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFt3cmFwcGVyPWlkZW50aXR5XSBUaGUgd3JhcHBlciBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHAgPSBfLndyYXAoXy5lc2NhcGUsIGZ1bmN0aW9uKGZ1bmMsIHRleHQpIHtcbiAgICAgKiAgIHJldHVybiAnPHA+JyArIGZ1bmModGV4dCkgKyAnPC9wPic7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBwKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICc8cD5mcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXM8L3A+J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXAodmFsdWUsIHdyYXBwZXIpIHtcbiAgICAgIHJldHVybiBwYXJ0aWFsKGNhc3RGdW5jdGlvbih3cmFwcGVyKSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgYXMgYW4gYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoMSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEgfV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBbJ2FiYyddXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbbnVsbF1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gW3VuZGVmaW5lZF1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKiBjb25zb2xlLmxvZyhfLmNhc3RBcnJheShhcnJheSkgPT09IGFycmF5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5KCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2hhbGxvdyBjbG9uZSBvZiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb24gdGhlXG4gICAgICogW3N0cnVjdHVyZWQgY2xvbmUgYWxnb3JpdGhtXShodHRwczovL21kbi5pby9TdHJ1Y3R1cmVkX2Nsb25lX2FsZ29yaXRobSlcbiAgICAgKiBhbmQgc3VwcG9ydHMgY2xvbmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLCBkYXRlIG9iamVjdHMsIG1hcHMsXG4gICAgICogbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcywgc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkXG4gICAgICogYXJyYXlzLiBUaGUgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgYXJndW1lbnRzYCBvYmplY3RzIGFyZSBjbG9uZWRcbiAgICAgKiBhcyBwbGFpbiBvYmplY3RzLiBBbiBlbXB0eSBvYmplY3QgaXMgcmV0dXJuZWQgZm9yIHVuY2xvbmVhYmxlIHZhbHVlcyBzdWNoXG4gICAgICogYXMgZXJyb3Igb2JqZWN0cywgZnVuY3Rpb25zLCBET00gbm9kZXMsIGFuZCBXZWFrTWFwcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVEZWVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICAgICAqXG4gICAgICogdmFyIHNoYWxsb3cgPSBfLmNsb25lKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKHNoYWxsb3dbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgY2xvbmVkIHZhbHVlLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCxcbiAgICAgKiBjbG9uaW5nIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHVwIHRvIGZvdXIgYXJndW1lbnRzOyAodmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3QsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVEZWVwV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBlbCA9IF8uY2xvbmVXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICAgICAqXG4gICAgICogdmFyIGRlZXAgPSBfLmNsb25lRGVlcChvYmplY3RzKTtcbiAgICAgKiBjb25zb2xlLmxvZyhkZWVwWzBdID09PSBvYmplY3RzWzBdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lV2l0aGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZVdpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcih2YWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNFbGVtZW50KHZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdmFsdWUuY2xvbmVOb2RlKHRydWUpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBlbCA9IF8uY2xvbmVEZWVwV2l0aChkb2N1bWVudC5ib2R5LCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGVsID09PSBkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqIGNvbnNvbGUubG9nKGVsLm5vZGVOYW1lKTtcbiAgICAgKiAvLyA9PiAnQk9EWSdcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURlZXBXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgb2JqZWN0YCBjb25mb3JtcyB0byBgc291cmNlYCBieSBpbnZva2luZyB0aGUgcHJlZGljYXRlXG4gICAgICogcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLmNvbmZvcm1zYCB3aGVuIGBzb3VyY2VgIGlzXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xNC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBjb25mb3JtcywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uY29uZm9ybXNUbyhvYmplY3QsIHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMjsgfSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBzb3VyY2UgPT0gbnVsbCB8fCBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwga2V5cyhzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVxKCdhJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVxKE5hTiwgTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmx0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3QoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5ndCgxLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBndCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUd0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheUJ1ZmZlcmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5QnVmZmVyKG5ldyBBcnJheUJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5QnVmZmVyKG5ldyBBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcnJheUJ1ZmZlciA9IG5vZGVJc0FycmF5QnVmZmVyID8gYmFzZVVuYXJ5KG5vZGVJc0FycmF5QnVmZmVyKSA6IGJhc2VJc0FycmF5QnVmZmVyO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICAgICAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAgICAgKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gICAgICogaXMgYW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYm9vbGVhbiBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJvb2xlYW4sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4oZmFsc2UpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCb29sZWFuKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGJvb2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBEYXRlYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZGF0ZSBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUobmV3IERhdGUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNEYXRlKCdNb24gQXByaWwgMjMgMjAxMicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzRGF0ZSA9IG5vZGVJc0RhdGUgPyBiYXNlVW5hcnkobm9kZUlzRGF0ZSkgOiBiYXNlSXNEYXRlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgRE9NIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgRE9NIGVsZW1lbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoJzxib2R5PicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbGVtZW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiB2YWx1ZS5ub2RlVHlwZSA9PT0gMSAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gZW1wdHkgb2JqZWN0LCBjb2xsZWN0aW9uLCBtYXAsIG9yIHNldC5cbiAgICAgKlxuICAgICAqIE9iamVjdHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIG5vIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZFxuICAgICAqIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBBcnJheS1saWtlIHZhbHVlcyBzdWNoIGFzIGBhcmd1bWVudHNgIG9iamVjdHMsIGFycmF5cywgYnVmZmVycywgc3RyaW5ncywgb3JcbiAgICAgKiBqUXVlcnktbGlrZSBjb2xsZWN0aW9ucyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgbGVuZ3RoYCBvZiBgMGAuXG4gICAgICogU2ltaWxhcmx5LCBtYXBzIGFuZCBzZXRzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBzaXplYCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGVtcHR5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkodHJ1ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoeyAnYSc6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgICAoaXNBcnJheSh2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZS5zcGxpY2UgPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgaXNCdWZmZXIodmFsdWUpIHx8IGlzVHlwZWRBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpKSkge1xuICAgICAgICByZXR1cm4gIXZhbHVlLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gIXZhbHVlLnNpemU7XG4gICAgICB9XG4gICAgICBpZiAoaXNQcm90b3R5cGUodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAhYmFzZUtleXModmFsdWUpLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICAgICAqIGVxdWl2YWxlbnQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsXG4gICAgICogZGF0ZSBvYmplY3RzLCBlcnJvciBvYmplY3RzLCBtYXBzLCBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLFxuICAgICAqIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZCBhcnJheXMuIGBPYmplY3RgIG9iamVjdHMgYXJlIGNvbXBhcmVkXG4gICAgICogYnkgdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZ1bmN0aW9ucyBhbmQgRE9NXG4gICAgICogbm9kZXMgYXJlIGNvbXBhcmVkIGJ5IHN0cmljdCBlcXVhbGl0eSwgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWwob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogb2JqZWN0ID09PSBvdGhlcjtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWwodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzRXF1YWxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCB1cCB0b1xuICAgICAqIHNpeCBhcmd1bWVudHM6IChvYmpWYWx1ZSwgb3RoVmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3QsIG90aGVyLCBzdGFja10pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNHcmVldGluZyh2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIC9eaCg/Oml8ZWxsbykkLy50ZXN0KHZhbHVlKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSkge1xuICAgICAqICAgaWYgKGlzR3JlZXRpbmcob2JqVmFsdWUpICYmIGlzR3JlZXRpbmcob3RoVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB0cnVlO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnaGVsbG8nLCAnZ29vZGJ5ZSddO1xuICAgICAqIHZhciBvdGhlciA9IFsnaGknLCAnZ29vZGJ5ZSddO1xuICAgICAqXG4gICAgICogXy5pc0VxdWFsV2l0aChhcnJheSwgb3RoZXIsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VxdWFsV2l0aCh2YWx1ZSwgb3RoZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyID8gY3VzdG9taXplcih2YWx1ZSwgb3RoZXIpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCB1bmRlZmluZWQsIGN1c3RvbWl6ZXIpIDogISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gYEVycm9yYCwgYEV2YWxFcnJvcmAsIGBSYW5nZUVycm9yYCwgYFJlZmVyZW5jZUVycm9yYCxcbiAgICAgKiBgU3ludGF4RXJyb3JgLCBgVHlwZUVycm9yYCwgb3IgYFVSSUVycm9yYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGVycm9yIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRXJyb3IobmV3IEVycm9yKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRXJyb3IoRXJyb3IpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcnJvcih2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgICAgIHJldHVybiB0YWcgPT0gZXJyb3JUYWcgfHwgdGFnID09IGRvbUV4Y1RhZyB8fFxuICAgICAgICAodHlwZW9mIHZhbHVlLm1lc3NhZ2UgPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlLm5hbWUgPT0gJ3N0cmluZycgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBwcmltaXRpdmUgbnVtYmVyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNGaW5pdGVgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNGaW5pdGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiBuYXRpdmVJc0Zpbml0ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbihfKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gICAgICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgICAgIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzSW50ZWdlcmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0ludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT0gdG9JbnRlZ2VyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgICAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gICAgICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICAgICAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3Qoe30pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gICAgICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTWFwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNNYXAobmV3IE1hcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgV2Vha01hcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNNYXAgPSBub2RlSXNNYXAgPyBiYXNlVW5hcnkobm9kZUlzTWFwKSA6IGJhc2VJc01hcDtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiBgb2JqZWN0YCBhbmQgYHNvdXJjZWAgdG9cbiAgICAgKiBkZXRlcm1pbmUgaWYgYG9iamVjdGAgY29udGFpbnMgZXF1aXZhbGVudCBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0byBgXy5tYXRjaGVzYCB3aGVuIGBzb3VyY2VgIGlzXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdCBgc291cmNlYFxuICAgICAqIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlIGBfLmlzRXF1YWxgXG4gICAgICogZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHsgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHsgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaChvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc01hdGNoYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBjb21wYXJpc29uc1xuICAgICAqIGFyZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggZml2ZVxuICAgICAqIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwgaW5kZXh8a2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNHcmVldGluZyh2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIC9eaCg/Oml8ZWxsbykkLy50ZXN0KHZhbHVlKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgaWYgKGlzR3JlZXRpbmcob2JqVmFsdWUpICYmIGlzR3JlZXRpbmcoc3JjVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB0cnVlO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdncmVldGluZyc6ICdoZWxsbycgfTtcbiAgICAgKiB2YXIgc291cmNlID0geyAnZ3JlZXRpbmcnOiAnaGknIH07XG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2hXaXRoKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgZ2V0TWF0Y2hEYXRhKHNvdXJjZSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBOYU5gLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNOYU5gXShodHRwczovL21kbi5pby9OdW1iZXIvaXNOYU4pIGFuZCBpcyBub3QgdGhlIHNhbWUgYXNcbiAgICAgKiBnbG9iYWwgW2Bpc05hTmBdKGh0dHBzOi8vbWRuLmlvL2lzTmFOKSB3aGljaCByZXR1cm5zIGB0cnVlYCBmb3JcbiAgICAgKiBgdW5kZWZpbmVkYCBhbmQgb3RoZXIgbm9uLW51bWJlciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4oTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKG5ldyBOdW1iZXIoTmFOKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05hTih2YWx1ZSkge1xuICAgICAgLy8gQW4gYE5hTmAgcHJpbWl0aXZlIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgaXMgbm90IGVxdWFsIHRvIGl0c2VsZi5cbiAgICAgIC8vIFBlcmZvcm0gdGhlIGB0b1N0cmluZ1RhZ2AgY2hlY2sgZmlyc3QgdG8gYXZvaWQgZXJyb3JzIHdpdGggc29tZVxuICAgICAgLy8gQWN0aXZlWCBvYmplY3RzIGluIElFLlxuICAgICAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKSAmJiB2YWx1ZSAhPSArdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcmlzdGluZSBuYXRpdmUgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgY2FuJ3QgcmVsaWFibHkgZGV0ZWN0IG5hdGl2ZSBmdW5jdGlvbnMgaW4gdGhlIHByZXNlbmNlXG4gICAgICogb2YgdGhlIGNvcmUtanMgcGFja2FnZSBiZWNhdXNlIGNvcmUtanMgY2lyY3VtdmVudHMgdGhpcyBraW5kIG9mIGRldGVjdGlvbi5cbiAgICAgKiBEZXNwaXRlIG11bHRpcGxlIHJlcXVlc3RzLCB0aGUgY29yZS1qcyBtYWludGFpbmVyIGhhcyBtYWRlIGl0IGNsZWFyOiBhbnlcbiAgICAgKiBhdHRlbXB0IHRvIGZpeCB0aGUgZGV0ZWN0aW9uIHdpbGwgYmUgb2JzdHJ1Y3RlZC4gQXMgYSByZXN1bHQsIHdlJ3JlIGxlZnRcbiAgICAgKiB3aXRoIGxpdHRsZSBjaG9pY2UgYnV0IHRvIHRocm93IGFuIGVycm9yLiBVbmZvcnR1bmF0ZWx5LCB0aGlzIGFsc28gYWZmZWN0c1xuICAgICAqIHBhY2thZ2VzLCBsaWtlIFtiYWJlbC1wb2x5ZmlsbF0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYmFiZWwtcG9seWZpbGwpLFxuICAgICAqIHdoaWNoIHJlbHkgb24gY29yZS1qcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShBcnJheS5wcm90b3R5cGUucHVzaCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShfKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmF0aXZlKHZhbHVlKSB7XG4gICAgICBpZiAoaXNNYXNrYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKENPUkVfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBudWxsYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbCh2b2lkIDApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdWxsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYG51bGxgIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBudWxsaXNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbCh2b2lkIDApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmlsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE51bWJlcmAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUbyBleGNsdWRlIGBJbmZpbml0eWAsIGAtSW5maW5pdHlgLCBhbmQgYE5hTmAsIHdoaWNoIGFyZVxuICAgICAqIGNsYXNzaWZpZWQgYXMgbnVtYmVycywgdXNlIHRoZSBgXy5pc0Zpbml0ZWAgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gbnVtYmVyVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gICAgICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuOC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICAgICAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgICAgIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBSZWdFeHBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgvYWJjLyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgnL2FiYy8nKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1JlZ0V4cCA9IG5vZGVJc1JlZ0V4cCA/IGJhc2VVbmFyeShub2RlSXNSZWdFeHApIDogYmFzZUlzUmVnRXhwO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBzYWZlIGludGVnZXIuIEFuIGludGVnZXIgaXMgc2FmZSBpZiBpdCdzIGFuIElFRUUtNzU0XG4gICAgICogZG91YmxlIHByZWNpc2lvbiBudW1iZXIgd2hpY2ggaXNuJ3QgdGhlIHJlc3VsdCBvZiBhIHJvdW5kZWQgdW5zYWZlIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc1NhZmVJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzU2FmZUludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU2FmZUludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0ludGVnZXIodmFsdWUpICYmIHZhbHVlID49IC1NQVhfU0FGRV9JTlRFR0VSICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTZXRgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1NldCA9IG5vZGVJc1NldCA/IGJhc2VVbmFyeShub2RlSXNTZXQpIDogYmFzZUlzU2V0O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTdHJpbmdgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3RyaW5nLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTdHJpbmcoJ2FiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTdHJpbmcoMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAoIWlzQXJyYXkodmFsdWUpICYmIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3RyaW5nVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1VuZGVmaW5lZChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB3ZWFrIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgV2Vha01hcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtNYXAobmV3IE1hcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1dlYWtNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gd2Vha01hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtTZXRgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB3ZWFrIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgV2Vha1NldCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtTZXQobmV3IFNldCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1dlYWtTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHdlYWtTZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5ndFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0KDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHQoMywgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8ubHQoMywgMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgbHQgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGJhc2VMdCk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0b1xuICAgICAqICBgb3RoZXJgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0ZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgxLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdGUgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDw9IG90aGVyO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0FycmF5KHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KDEpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkobnVsbCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0FycmF5KHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKSA/IHN0cmluZ1RvQXJyYXkodmFsdWUpIDogY29weUFycmF5KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChzeW1JdGVyYXRvciAmJiB2YWx1ZVtzeW1JdGVyYXRvcl0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVG9BcnJheSh2YWx1ZVtzeW1JdGVyYXRvcl0oKSk7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICBmdW5jID0gdGFnID09IG1hcFRhZyA/IG1hcFRvQXJyYXkgOiAodGFnID09IHNldFRhZyA/IHNldFRvQXJyYXkgOiB2YWx1ZXMpO1xuXG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIGZpbml0ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMi4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoMy4yKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gNWUtMzI0XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgnMy4yJyk7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9GaW5pdGUodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiAwO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICBpZiAodmFsdWUgPT09IElORklOSVRZIHx8IHZhbHVlID09PSAtSU5GSU5JVFkpIHtcbiAgICAgICAgdmFyIHNpZ24gPSAodmFsdWUgPCAwID8gLTEgOiAxKTtcbiAgICAgICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyB2YWx1ZSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYFRvSW50ZWdlcmBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2ludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcigzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0b0Zpbml0ZSh2YWx1ZSksXG4gICAgICAgICAgcmVtYWluZGVyID0gcmVzdWx0ICUgMTtcblxuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlciBzdWl0YWJsZSBmb3IgdXNlIGFzIHRoZSBsZW5ndGggb2YgYW5cbiAgICAgKiBhcnJheS1saWtlIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDQyOTQ5NjcyOTVcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIDAsIE1BWF9BUlJBWV9MRU5HVEgpIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b051bWJlcigzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IEluZmluaXR5XG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gICAgICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICAgICAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgICAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcGxhaW4gb2JqZWN0IGZsYXR0ZW5pbmcgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nXG4gICAgICoga2V5ZWQgcHJvcGVydGllcyBvZiBgdmFsdWVgIHRvIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBwbGFpbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29udmVydGVkIHBsYWluIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgbmV3IEZvbyk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMSB9LCBfLnRvUGxhaW5PYmplY3QobmV3IEZvbykpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3QodmFsdWUsIGtleXNJbih2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzYWZlIGludGVnZXIuIEEgc2FmZSBpbnRlZ2VyIGNhbiBiZSBjb21wYXJlZCBhbmRcbiAgICAgKiByZXByZXNlbnRlZCBjb3JyZWN0bHkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcigzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDkwMDcxOTkyNTQ3NDA5OTFcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU2FmZUludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICA/IGJhc2VDbGFtcCh0b0ludGVnZXIodmFsdWUpLCAtTUFYX1NBRkVfSU5URUdFUiwgTUFYX1NBRkVfSU5URUdFUilcbiAgICAgICAgOiAodmFsdWUgPT09IDAgPyB2YWx1ZSA6IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gICAgICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1N0cmluZyhudWxsKTtcbiAgICAgKiAvLyA9PiAnJ1xuICAgICAqXG4gICAgICogXy50b1N0cmluZygtMCk7XG4gICAgICogLy8gPT4gJy0wJ1xuICAgICAqXG4gICAgICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICAgICAqIC8vID0+ICcxLDIsMydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgKiBTdWJzZXF1ZW50IHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YCBhbmQgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgT2JqZWN0LmFzc2lnbmBdKGh0dHBzOi8vbWRuLmlvL09iamVjdC9hc3NpZ24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduSW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICogICB0aGlzLmMgPSAzO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYiA9IDI7XG4gICAgICogQmFyLnByb3RvdHlwZS5kID0gNDtcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ24gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgaWYgKGlzUHJvdG90eXBlKHNvdXJjZSkgfHwgaXNBcnJheUxpa2Uoc291cmNlKSkge1xuICAgICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIG93biBhbmRcbiAgICAgKiBpbmhlcml0ZWQgc291cmNlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBleHRlbmRcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEJhcigpIHtcbiAgICAgKiAgIHRoaXMuYyA9IDM7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAgICAgKiBCYXIucHJvdG90eXBlLmQgPSA0O1xuICAgICAqXG4gICAgICogXy5hc3NpZ25Jbih7ICdhJzogMCB9LCBuZXcgRm9vLCBuZXcgQmFyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMsICdkJzogNCB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbkluID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduSW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gICAgICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZXh0ZW5kV2l0aFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25XaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduSW5XaXRoLCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25JbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgLCBhc3NpZ25tZW50IGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbkluV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQob2JqVmFsdWUpID8gc3JjVmFsdWUgOiBvYmpWYWx1ZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbldpdGgsIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIGBwYXRoc2Agb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8uYXQob2JqZWN0LCBbJ2FbMF0uYi5jJywgJ2FbMV0nXSk7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICovXG4gICAgdmFyIGF0ID0gZmxhdFJlc3QoYmFzZUF0KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSB0aGUgYHByb3RvdHlwZWAgb2JqZWN0LiBJZiBhXG4gICAgICogYHByb3BlcnRpZXNgIG9iamVjdCBpcyBnaXZlbiwgaXRzIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzXG4gICAgICogYXJlIGFzc2lnbmVkIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG90eXBlIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllc10gVGhlIHByb3BlcnRpZXMgdG8gYXNzaWduIHRvIHRoZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gU2hhcGUoKSB7XG4gICAgICogICB0aGlzLnggPSAwO1xuICAgICAqICAgdGhpcy55ID0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBDaXJjbGUoKSB7XG4gICAgICogICBTaGFwZS5jYWxsKHRoaXMpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIENpcmNsZS5wcm90b3R5cGUgPSBfLmNyZWF0ZShTaGFwZS5wcm90b3R5cGUsIHtcbiAgICAgKiAgICdjb25zdHJ1Y3Rvcic6IENpcmNsZVxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogdmFyIGNpcmNsZSA9IG5ldyBDaXJjbGU7XG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgQ2lyY2xlO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIFNoYXBlO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocHJvdG90eXBlLCBwcm9wZXJ0aWVzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZUNyZWF0ZShwcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIHByb3BlcnRpZXMgPT0gbnVsbCA/IHJlc3VsdCA6IGJhc2VBc3NpZ24ocmVzdWx0LCBwcm9wZXJ0aWVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlXG4gICAgICogb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllcyB0aGF0XG4gICAgICogcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAqIE9uY2UgYSBwcm9wZXJ0eSBpcyBzZXQsIGFkZGl0aW9uYWwgdmFsdWVzIG9mIHRoZSBzYW1lIHByb3BlcnR5IGFyZSBpZ25vcmVkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmRlZmF1bHRzRGVlcFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0cyA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgdmFyIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoO1xuICAgICAgdmFyIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICB2YXIgcHJvcHMgPSBrZXlzSW4oc291cmNlKTtcbiAgICAgICAgdmFyIHByb3BzSW5kZXggPSAtMTtcbiAgICAgICAgdmFyIHByb3BzTGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlICgrK3Byb3BzSW5kZXggPCBwcm9wc0xlbmd0aCkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1twcm9wc0luZGV4XTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgIChlcSh2YWx1ZSwgb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICAgICAgb2JqZWN0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGVmYXVsdHNgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGFzc2lnbnNcbiAgICAgKiBkZWZhdWx0IHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmRlZmF1bHRzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdHNEZWVwKHsgJ2EnOiB7ICdiJzogMiB9IH0sIHsgJ2EnOiB7ICdiJzogMSwgJ2MnOiAzIH0gfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2InOiAyLCAnYyc6IDMgfSB9XG4gICAgICovXG4gICAgdmFyIGRlZmF1bHRzRGVlcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgIGFyZ3MucHVzaCh1bmRlZmluZWQsIGN1c3RvbURlZmF1bHRzTWVyZ2UpO1xuICAgICAgcmV0dXJuIGFwcGx5KG1lcmdlV2l0aCwgdW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUga2V5IG9mIHRoZSBmaXJzdFxuICAgICAqIGVsZW1lbnQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsXG4gICAgICogIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiAgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6ICAgIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5JyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gYmFzZUZpbmRLZXkob2JqZWN0LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBiYXNlRm9yT3duKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRLZXlgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBhIGNvbGxlY3Rpb24gaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsXG4gICAgICogIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiAgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6ICAgIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gcmV0dXJucyAncGViYmxlcycgYXNzdW1pbmcgYF8uZmluZEtleWAgcmV0dXJucyAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3RLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBiYXNlRmluZEtleShvYmplY3QsIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGJhc2VGb3JPd25SaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuXG4gICAgICogb2JqZWN0IGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXRcbiAgICAgKiBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvckluUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9ySW4obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJywgJ2InLCB0aGVuICdjJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJbihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGxcbiAgICAgICAgPyBvYmplY3RcbiAgICAgICAgOiBiYXNlRm9yKG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9ySW5gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvckluXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvckluUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdjJywgJ2InLCB0aGVuICdhJyBhc3N1bWluZyBgXy5mb3JJbmAgbG9ncyAnYScsICdiJywgdGhlbiAnYycuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ySW5SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGxcbiAgICAgICAgPyBvYmplY3RcbiAgICAgICAgOiBiYXNlRm9yUmlnaHQob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgYW5kXG4gICAgICogaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvblxuICAgICAqIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JPd25SaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JPd24obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJyB0aGVuICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duKG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvck93bmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzIG9mXG4gICAgICogYG9iamVjdGAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9yT3duXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93blJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYicgdGhlbiAnYScgYXNzdW1pbmcgYF8uZm9yT3duYCBsb2dzICdhJyB0aGVuICdiJy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmcm9tIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXNcbiAgICAgKiBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqIEBzZWUgXy5mdW5jdGlvbnNJblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSBfLmNvbnN0YW50KCdhJyk7XG4gICAgICogICB0aGlzLmIgPSBfLmNvbnN0YW50KCdiJyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gXy5jb25zdGFudCgnYycpO1xuICAgICAqXG4gICAgICogXy5mdW5jdGlvbnMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZ1bmN0aW9ucyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZUZ1bmN0aW9ucyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmcm9tIG93biBhbmQgaW5oZXJpdGVkXG4gICAgICogZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICogQHNlZSBfLmZ1bmN0aW9uc1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSBfLmNvbnN0YW50KCdhJyk7XG4gICAgICogICB0aGlzLmIgPSBfLmNvbnN0YW50KCdiJyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gXy5jb25zdGFudCgnYycpO1xuICAgICAqXG4gICAgICogXy5mdW5jdGlvbnNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmdW5jdGlvbnNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZUZ1bmN0aW9ucyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICAgICAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiB7ICdiJzogMiB9IH07XG4gICAgICogdmFyIG90aGVyID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgJ2EuYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob3RoZXIsICdhJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXMob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdhLmInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhc0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgaW52ZXJ0ZWQga2V5cyBhbmQgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqIElmIGBvYmplY3RgIGNvbnRhaW5zIGR1cGxpY2F0ZSB2YWx1ZXMsIHN1YnNlcXVlbnQgdmFsdWVzIG92ZXJ3cml0ZVxuICAgICAqIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0KG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMSc6ICdjJywgJzInOiAnYicgfVxuICAgICAqL1xuICAgIHZhciBpbnZlcnQgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0W3ZhbHVlXSA9IGtleTtcbiAgICB9LCBjb25zdGFudChpZGVudGl0eSkpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnZlcnRgIGV4Y2VwdCB0aGF0IHRoZSBpbnZlcnRlZCBvYmplY3QgaXMgZ2VuZXJhdGVkXG4gICAgICogZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nIGVhY2ggZWxlbWVudCBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGNvcnJlc3BvbmRpbmcgaW52ZXJ0ZWQgdmFsdWUgb2YgZWFjaCBpbnZlcnRlZCBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5c1xuICAgICAqIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBpbnZlcnRlZCB2YWx1ZS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmludmVydEJ5KG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfVxuICAgICAqXG4gICAgICogXy5pbnZlcnRCeShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gJ2dyb3VwJyArIHZhbHVlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2dyb3VwMSc6IFsnYScsICdjJ10sICdncm91cDInOiBbJ2InXSB9XG4gICAgICovXG4gICAgdmFyIGludmVydEJ5ID0gY3JlYXRlSW52ZXJ0ZXIoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwgdmFsdWUpKSB7XG4gICAgICAgIHJlc3VsdFt2YWx1ZV0ucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlXSA9IFtrZXldO1xuICAgICAgfVxuICAgIH0sIGdldEl0ZXJhdGVlKTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiBbMSwgMiwgMywgNF0gfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5pbnZva2Uob2JqZWN0LCAnYVswXS5iLmMuc2xpY2UnLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlID0gYmFzZVJlc3QoYmFzZUludm9rZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gICAgICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmtleXMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogXy5rZXlzKCdoaScpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5c0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tYXBWYWx1ZXNgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZVxuICAgICAqIHNhbWUgdmFsdWVzIGFzIGBvYmplY3RgIGFuZCBrZXlzIGdlbmVyYXRlZCBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGVcbiAgICAgKiBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBzZWUgXy5tYXBWYWx1ZXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXBLZXlzKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgcmV0dXJuIGtleSArIHZhbHVlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2ExJzogMSwgJ2IyJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwS2V5cyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKTtcblxuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFzIGBvYmplY3RgIGFuZCB2YWx1ZXMgZ2VuZXJhdGVkXG4gICAgICogYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1XG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAgICAgKiBAc2VlIF8ubWFwS2V5c1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnZnJlZCc6ICAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWFwVmFsdWVzKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZTsgfSk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXBWYWx1ZXModXNlcnMsICdhZ2UnKTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwVmFsdWVzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IG1lcmdlcyBvd24gYW5kXG4gICAgICogaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgaW50byB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBwcm9wZXJ0aWVzIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYCBhcmVcbiAgICAgKiBza2lwcGVkIGlmIGEgZGVzdGluYXRpb24gdmFsdWUgZXhpc3RzLiBBcnJheSBhbmQgcGxhaW4gb2JqZWN0IHByb3BlcnRpZXNcbiAgICAgKiBhcmUgbWVyZ2VkIHJlY3Vyc2l2ZWx5LiBPdGhlciBvYmplY3RzIGFuZCB2YWx1ZSB0eXBlcyBhcmUgb3ZlcnJpZGRlbiBieVxuICAgICAqIGFzc2lnbm1lbnQuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC4gU3Vic2VxdWVudFxuICAgICAqIHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICdhJzogW3sgJ2InOiAyIH0sIHsgJ2QnOiA0IH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBvdGhlciA9IHtcbiAgICAgKiAgICdhJzogW3sgJ2MnOiAzIH0sIHsgJ2UnOiA1IH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWVyZ2Uob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2QnOiA0LCAnZSc6IDUgfV0gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZSA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCkge1xuICAgICAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1lcmdlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgbWVyZ2VkIHZhbHVlcyBvZiB0aGUgZGVzdGluYXRpb24gYW5kIHNvdXJjZVxuICAgICAqIHByb3BlcnRpZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBtZXJnaW5nIGlzIGhhbmRsZWQgYnkgdGhlXG4gICAgICogbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHNpeCBhcmd1bWVudHM6XG4gICAgICogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gb2JqVmFsdWUuY29uY2F0KHNyY1ZhbHVlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFsxXSwgJ2InOiBbMl0gfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogWzNdLCAnYic6IFs0XSB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZVdpdGgob2JqZWN0LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4geyAnYSc6IFsxLCAzXSwgJ2InOiBbMiwgNF0gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZVdpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnBpY2tgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGVcbiAgICAgKiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IHBhdGhzIG9mIGBvYmplY3RgIHRoYXQgYXJlIG5vdCBvbWl0dGVkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGNvbnNpZGVyYWJseSBzbG93ZXIgdGhhbiBgXy5waWNrYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIG9taXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLm9taXQob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAgICAgKiAvLyA9PiB7ICdiJzogJzInIH1cbiAgICAgKi9cbiAgICB2YXIgb21pdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGlzRGVlcCA9IGZhbHNlO1xuICAgICAgcGF0aHMgPSBhcnJheU1hcChwYXRocywgZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgICAgaXNEZWVwIHx8IChpc0RlZXAgPSBwYXRoLmxlbmd0aCA+IDEpO1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgIH0pO1xuICAgICAgY29weU9iamVjdChvYmplY3QsIGdldEFsbEtleXNJbihvYmplY3QpLCByZXN1bHQpO1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXN1bHQgPSBiYXNlQ2xvbmUocmVzdWx0LCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9GTEFUX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbU9taXRDbG9uZSk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGJhc2VVbnNldChyZXN1bHQsIHBhdGhzW2xlbmd0aF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrQnlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZlxuICAgICAqIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgIHRoYXRcbiAgICAgKiBgcHJlZGljYXRlYCBkb2Vzbid0IHJldHVybiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d29cbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5vbWl0Qnkob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAgICAgKiAvLyA9PiB7ICdiJzogJzInIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbWl0Qnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBwaWNrQnkob2JqZWN0LCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBwaWNrZWQgYG9iamVjdGAgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2sob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICB2YXIgcGljayA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHt9IDogYmFzZVBpY2sob2JqZWN0LCBwYXRocyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgYG9iamVjdGAgcHJvcGVydGllcyBgcHJlZGljYXRlYCByZXR1cm5zXG4gICAgICogdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2tCeShvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBpY2tCeShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wcyA9IGFycmF5TWFwKGdldEFsbEtleXNJbihvYmplY3QpLCBmdW5jdGlvbihwcm9wKSB7XG4gICAgICAgIHJldHVybiBbcHJvcF07XG4gICAgICB9KTtcbiAgICAgIHByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSk7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHByb3BzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gcHJlZGljYXRlKHZhbHVlLCBwYXRoWzBdKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZ2V0YCBleGNlcHQgdGhhdCBpZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXMgYVxuICAgICAqIGZ1bmN0aW9uIGl0J3MgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBpdHMgcGFyZW50IG9iamVjdCBhbmRcbiAgICAgKiBpdHMgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gcmVzb2x2ZS5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MxJzogMywgJ2MyJzogXy5jb25zdGFudCg0KSB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzEnKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzInKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMzJywgXy5jb25zdGFudCgnZGVmYXVsdCcpKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN1bHQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgLy8gRW5zdXJlIHRoZSBsb29wIGlzIGVudGVyZWQgd2hlbiBwYXRoIGlzIGVtcHR5LlxuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgb2JqZWN0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3RbdG9LZXkocGF0aFtpbmRleF0pXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcbiAgICAgICAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwob2JqZWN0KSA6IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIGEgcG9ydGlvbiBvZiBgcGF0aGAgZG9lc24ndCBleGlzdCxcbiAgICAgKiBpdCdzIGNyZWF0ZWQuIEFycmF5cyBhcmUgY3JlYXRlZCBmb3IgbWlzc2luZyBpbmRleCBwcm9wZXJ0aWVzIHdoaWxlIG9iamVjdHNcbiAgICAgKiBhcmUgY3JlYXRlZCBmb3IgYWxsIG90aGVyIG1pc3NpbmcgcHJvcGVydGllcy4gVXNlIGBfLnNldFdpdGhgIHRvIGN1c3RvbWl6ZVxuICAgICAqIGBwYXRoYCBjcmVhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgJ2FbMF0uYi5jJywgNCk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsIFsneCcsICcwJywgJ3knLCAneiddLCA1KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNldGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG9iamVjdHMgb2YgYHBhdGhgLiAgSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBwYXRoIGNyZWF0aW9uIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKG5zVmFsdWUsIGtleSwgbnNPYmplY3QpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHt9O1xuICAgICAqXG4gICAgICogXy5zZXRXaXRoKG9iamVjdCwgJ1swXVsxXScsICdhJywgT2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcwJzogeyAnMSc6ICdhJyB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXaXRoKG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQtdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgXG4gICAgICogd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwIG9yIHNldCwgaXRzXG4gICAgICogZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZW50cmllc1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnRvUGFpcnMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gW1snYScsIDFdLCBbJ2InLCAyXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgdG9QYWlycyA9IGNyZWF0ZVRvUGFpcnMoa2V5cyk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkLXZhbHVlIHBhaXJzXG4gICAgICogZm9yIGBvYmplY3RgIHdoaWNoIGNhbiBiZSBjb25zdW1lZCBieSBgXy5mcm9tUGFpcnNgLiBJZiBgb2JqZWN0YCBpcyBhIG1hcFxuICAgICAqIG9yIHNldCwgaXRzIGVudHJpZXMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGVudHJpZXNJblxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnRvUGFpcnNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdLCBbJ2MnLCAzXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgdG9QYWlyc0luID0gY3JlYXRlVG9QYWlycyhrZXlzSW4pO1xuXG4gICAgLyoqXG4gICAgICogQW4gYWx0ZXJuYXRpdmUgdG8gYF8ucmVkdWNlYDsgdGhpcyBtZXRob2QgdHJhbnNmb3JtcyBgb2JqZWN0YCB0byBhIG5ld1xuICAgICAqIGBhY2N1bXVsYXRvcmAgb2JqZWN0IHdoaWNoIGlzIHRoZSByZXN1bHQgb2YgcnVubmluZyBlYWNoIG9mIGl0cyBvd25cbiAgICAgKiBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIHRocnUgYGl0ZXJhdGVlYCwgd2l0aCBlYWNoIGludm9jYXRpb25cbiAgICAgKiBwb3RlbnRpYWxseSBtdXRhdGluZyB0aGUgYGFjY3VtdWxhdG9yYCBvYmplY3QuIElmIGBhY2N1bXVsYXRvcmAgaXMgbm90XG4gICAgICogcHJvdmlkZWQsIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBzYW1lIGBbW1Byb3RvdHlwZV1dYCB3aWxsIGJlIHVzZWQuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czogKGFjY3VtdWxhdG9yLCB2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgY3VzdG9tIGFjY3VtdWxhdG9yIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oWzIsIDMsIDRdLCBmdW5jdGlvbihyZXN1bHQsIG4pIHtcbiAgICAgKiAgIHJlc3VsdC5wdXNoKG4gKj0gbik7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDldXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqIH0sIHt9KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtKG9iamVjdCwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICAgICAgaXNBcnJMaWtlID0gaXNBcnIgfHwgaXNCdWZmZXIob2JqZWN0KSB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCk7XG4gICAgICBpZiAoYWNjdW11bGF0b3IgPT0gbnVsbCkge1xuICAgICAgICB2YXIgQ3RvciA9IG9iamVjdCAmJiBvYmplY3QuY29uc3RydWN0b3I7XG4gICAgICAgIGlmIChpc0Fyckxpa2UpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzQXJyID8gbmV3IEN0b3IgOiBbXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBpc0Z1bmN0aW9uKEN0b3IpID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSkgOiB7fTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAoaXNBcnJMaWtlID8gYXJyYXlFYWNoIDogYmFzZUZvck93bikob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIHByb3BlcnR5IGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVuc2V0LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcHJvcGVydHkgaXMgZGVsZXRlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDcgfSB9XSB9O1xuICAgICAqIF8udW5zZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IHt9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnVuc2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzoge30gfV0gfTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnNldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHRydWUgOiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNldGAgZXhjZXB0IHRoYXQgYWNjZXB0cyBgdXBkYXRlcmAgdG8gcHJvZHVjZSB0aGVcbiAgICAgKiB2YWx1ZSB0byBzZXQuIFVzZSBgXy51cGRhdGVXaXRoYCB0byBjdXN0b21pemUgYHBhdGhgIGNyZWF0aW9uLiBUaGUgYHVwZGF0ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZShvYmplY3QsICdhWzBdLmIuYycsIGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gKiBuOyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKlxuICAgICAqIF8udXBkYXRlKG9iamVjdCwgJ3hbMF0ueS56JywgZnVuY3Rpb24obikgeyByZXR1cm4gbiA/IG4gKyAxIDogMDsgfSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlcikge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51cGRhdGVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBwcm9kdWNlIHRoZSBvYmplY3RzIG9mIGBwYXRoYC4gIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgXG4gICAgICogcGF0aCBjcmVhdGlvbiBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6IChuc1ZhbHVlLCBrZXksIG5zT2JqZWN0KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge307XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZVdpdGgob2JqZWN0LCAnWzBdWzFdJywgXy5jb25zdGFudCgnYScpLCBPYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzAnOiB7ICcxJzogJ2EnIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdpdGgob2JqZWN0LCBwYXRoLCB1cGRhdGVyLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgY2FzdEZ1bmN0aW9uKHVwZGF0ZXIpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDJdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLnZhbHVlcygnaGknKTtcbiAgICAgKiAvLyA9PiBbJ2gnLCAnaSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eVxuICAgICAqIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2xhbXBzIGBudW1iZXJgIHdpdGhpbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjbGFtcGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jbGFtcCgtMTAsIC01LCA1KTtcbiAgICAgKiAvLyA9PiAtNVxuICAgICAqXG4gICAgICogXy5jbGFtcCgxMCwgLTUsIDUpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cHBlciA9IHRvTnVtYmVyKHVwcGVyKTtcbiAgICAgICAgdXBwZXIgPSB1cHBlciA9PT0gdXBwZXIgPyB1cHBlciA6IDA7XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb3dlciA9IHRvTnVtYmVyKGxvd2VyKTtcbiAgICAgICAgbG93ZXIgPSBsb3dlciA9PT0gbG93ZXIgPyBsb3dlciA6IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUNsYW1wKHRvTnVtYmVyKG51bWJlciksIGxvd2VyLCB1cHBlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBuYCBpcyBiZXR3ZWVuIGBzdGFydGAgYW5kIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIElmXG4gICAgICogYGVuZGAgaXMgbm90IHNwZWNpZmllZCwgaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICAgICAqIElmIGBzdGFydGAgaXMgZ3JlYXRlciB0aGFuIGBlbmRgIHRoZSBwYXJhbXMgYXJlIHN3YXBwZWQgdG8gc3VwcG9ydFxuICAgICAqIG5lZ2F0aXZlIHJhbmdlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjMuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5yYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgzLCAyLCA0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgOCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDQsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMiwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgxLjIsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg1LjIsIDQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoLTMsIC0yLCAtNik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XG4gICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICAgIH1cbiAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICByZXR1cm4gYmFzZUluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyBhIHJhbmRvbSBudW1iZXIgYmV0d2VlbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICAgICAqIElmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkIGEgbnVtYmVyIGJldHdlZW4gYDBgIGFuZCB0aGUgZ2l2ZW4gbnVtYmVyXG4gICAgICogaXMgcmV0dXJuZWQuIElmIGBmbG9hdGluZ2AgaXMgYHRydWVgLCBvciBlaXRoZXIgYGxvd2VyYCBvciBgdXBwZXJgIGFyZVxuICAgICAqIGZsb2F0cywgYSBmbG9hdGluZy1wb2ludCBudW1iZXIgaXMgcmV0dXJuZWQgaW5zdGVhZCBvZiBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEphdmFTY3JpcHQgZm9sbG93cyB0aGUgSUVFRS03NTQgc3RhbmRhcmQgZm9yIHJlc29sdmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcj0wXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt1cHBlcj0xXSBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZmxvYXRpbmddIFNwZWNpZnkgcmV0dXJuaW5nIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDAsIDUpO1xuICAgICAqIC8vID0+IGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1KTtcbiAgICAgKiAvLyA9PiBhbHNvIGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1LCB0cnVlKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDEuMiwgNS4yKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDEuMiBhbmQgNS4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmFuZG9tKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpIHtcbiAgICAgIGlmIChmbG9hdGluZyAmJiB0eXBlb2YgZmxvYXRpbmcgIT0gJ2Jvb2xlYW4nICYmIGlzSXRlcmF0ZWVDYWxsKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpKSB7XG4gICAgICAgIHVwcGVyID0gZmxvYXRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoZmxvYXRpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodHlwZW9mIHVwcGVyID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gdXBwZXI7XG4gICAgICAgICAgdXBwZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGxvd2VyID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gbG93ZXI7XG4gICAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciA9PT0gdW5kZWZpbmVkICYmIHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG93ZXIgPSAwO1xuICAgICAgICB1cHBlciA9IDE7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbG93ZXIgPSB0b0Zpbml0ZShsb3dlcik7XG4gICAgICAgIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXBwZXIgPSB0b0Zpbml0ZSh1cHBlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciA+IHVwcGVyKSB7XG4gICAgICAgIHZhciB0ZW1wID0gbG93ZXI7XG4gICAgICAgIGxvd2VyID0gdXBwZXI7XG4gICAgICAgIHVwcGVyID0gdGVtcDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyB8fCBsb3dlciAlIDEgfHwgdXBwZXIgJSAxKSB7XG4gICAgICAgIHZhciByYW5kID0gbmF0aXZlUmFuZG9tKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVNaW4obG93ZXIgKyAocmFuZCAqICh1cHBlciAtIGxvd2VyICsgZnJlZVBhcnNlRmxvYXQoJzFlLScgKyAoKHJhbmQgKyAnJykubGVuZ3RoIC0gMSkpKSksIHVwcGVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcik7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gW2NhbWVsIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhbWVsQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYW1lbCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqL1xuICAgIHZhciBjYW1lbENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHdvcmQgPSB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gY2FwaXRhbGl6ZSh3b3JkKSA6IHdvcmQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlIGFuZCB0aGUgcmVtYWluaW5nXG4gICAgICogdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjYXBpdGFsaXplLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhcGl0YWxpemVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYXBpdGFsaXplKCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgICAgIHJldHVybiB1cHBlckZpcnN0KHRvU3RyaW5nKHN0cmluZykudG9Mb3dlckNhc2UoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVidXJycyBgc3RyaW5nYCBieSBjb252ZXJ0aW5nXG4gICAgICogW0xhdGluLTEgU3VwcGxlbWVudF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW4tMV9TdXBwbGVtZW50XyhVbmljb2RlX2Jsb2NrKSNDaGFyYWN0ZXJfdGFibGUpXG4gICAgICogYW5kIFtMYXRpbiBFeHRlbmRlZC1BXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbl9FeHRlbmRlZC1BKVxuICAgICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycyBhbmQgcmVtb3ZpbmdcbiAgICAgKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGRlYnVyci5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVidXJyKCdkw6lqw6AgdnUnKTtcbiAgICAgKiAvLyA9PiAnZGVqYSB2dSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJ1cnIoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIHN0cmluZyAmJiBzdHJpbmcucmVwbGFjZShyZUxhdGluLCBkZWJ1cnJMZXR0ZXIpLnJlcGxhY2UocmVDb21ib01hcmssICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIHRoZSBnaXZlbiB0YXJnZXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPXN0cmluZy5sZW5ndGhdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggdXAgdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCBgdGFyZ2V0YCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJywgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVuZHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHRhcmdldCA9IGJhc2VUb1N0cmluZyh0YXJnZXQpO1xuXG4gICAgICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPT09IHVuZGVmaW5lZFxuICAgICAgICA/IGxlbmd0aFxuICAgICAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBsZW5ndGgpO1xuXG4gICAgICB2YXIgZW5kID0gcG9zaXRpb247XG4gICAgICBwb3NpdGlvbiAtPSB0YXJnZXQubGVuZ3RoO1xuICAgICAgcmV0dXJuIHBvc2l0aW9uID49IDAgJiYgc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBlbmQpID09IHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgY2hhcmFjdGVycyBcIiZcIiwgXCI8XCIsIFwiPlwiLCAnXCInLCBhbmQgXCInXCIgaW4gYHN0cmluZ2AgdG8gdGhlaXJcbiAgICAgKiBjb3JyZXNwb25kaW5nIEhUTUwgZW50aXRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgY2hhcmFjdGVycyBhcmUgZXNjYXBlZC4gVG8gZXNjYXBlIGFkZGl0aW9uYWxcbiAgICAgKiBjaGFyYWN0ZXJzIHVzZSBhIHRoaXJkLXBhcnR5IGxpYnJhcnkgbGlrZSBbX2hlX10oaHR0cHM6Ly9tdGhzLmJlL2hlKS5cbiAgICAgKlxuICAgICAqIFRob3VnaCB0aGUgXCI+XCIgY2hhcmFjdGVyIGlzIGVzY2FwZWQgZm9yIHN5bW1ldHJ5LCBjaGFyYWN0ZXJzIGxpa2VcbiAgICAgKiBcIj5cIiBhbmQgXCIvXCIgZG9uJ3QgbmVlZCBlc2NhcGluZyBpbiBIVE1MIGFuZCBoYXZlIG5vIHNwZWNpYWwgbWVhbmluZ1xuICAgICAqIHVubGVzcyB0aGV5J3JlIHBhcnQgb2YgYSB0YWcgb3IgdW5xdW90ZWQgYXR0cmlidXRlIHZhbHVlLiBTZWVcbiAgICAgKiBbTWF0aGlhcyBCeW5lbnMncyBhcnRpY2xlXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvYW1iaWd1b3VzLWFtcGVyc2FuZHMpXG4gICAgICogKHVuZGVyIFwic2VtaS1yZWxhdGVkIGZ1biBmYWN0XCIpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBXaGVuIHdvcmtpbmcgd2l0aCBIVE1MIHlvdSBzaG91bGQgYWx3YXlzXG4gICAgICogW3F1b3RlIGF0dHJpYnV0ZSB2YWx1ZXNdKGh0dHA6Ly93b25rby5jb20vcG9zdC9odG1sLWVzY2FwaW5nKSB0byByZWR1Y2VcbiAgICAgKiBYU1MgdmVjdG9ycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzVW5lc2NhcGVkSHRtbC50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVVbmVzY2FwZWRIdG1sLCBlc2NhcGVIdG1sQ2hhcilcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXNjYXBlcyB0aGUgYFJlZ0V4cGAgc3BlY2lhbCBjaGFyYWN0ZXJzIFwiXlwiLCBcIiRcIiwgXCJcXFwiLCBcIi5cIiwgXCIqXCIsIFwiK1wiLFxuICAgICAqIFwiP1wiLCBcIihcIiwgXCIpXCIsIFwiW1wiLCBcIl1cIiwgXCJ7XCIsIFwifVwiLCBhbmQgXCJ8XCIgaW4gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZVJlZ0V4cCgnW2xvZGFzaF0oaHR0cHM6Ly9sb2Rhc2guY29tLyknKTtcbiAgICAgKiAvLyA9PiAnXFxbbG9kYXNoXFxdXFwoaHR0cHM6Ly9sb2Rhc2hcXC5jb20vXFwpJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZVJlZ0V4cChzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1JlZ0V4cENoYXIudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW2tlYmFiIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1NwZWNpYWxfY2FzZV9zdHlsZXMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUga2ViYWIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICovXG4gICAgdmFyIGtlYmFiQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICctJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBsb3dlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICovXG4gICAgdmFyIGxvd2VyQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubG93ZXJGaXJzdCgnRnJlZCcpO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogXy5sb3dlckZpcnN0KCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ2ZSRUQnXG4gICAgICovXG4gICAgdmFyIGxvd2VyRmlyc3QgPSBjcmVhdGVDYXNlRmlyc3QoJ3RvTG93ZXJDYXNlJyk7XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSBsZWZ0IGFuZCByaWdodCBzaWRlcyBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC5cbiAgICAgKiBQYWRkaW5nIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGNhbid0IGJlIGV2ZW5seSBkaXZpZGVkIGJ5IGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4KTtcbiAgICAgKiAvLyA9PiAnICBhYmMgICAnXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgOCwgJ18tJyk7XG4gICAgICogLy8gPT4gJ18tYWJjXy1fJ1xuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIGlmICghbGVuZ3RoIHx8IHN0ckxlbmd0aCA+PSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBtaWQgPSAobGVuZ3RoIC0gc3RyTGVuZ3RoKSAvIDI7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBjcmVhdGVQYWRkaW5nKG5hdGl2ZUZsb29yKG1pZCksIGNoYXJzKSArXG4gICAgICAgIHN0cmluZyArXG4gICAgICAgIGNyZWF0ZVBhZGRpbmcobmF0aXZlQ2VpbChtaWQpLCBjaGFycylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgcmlnaHQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJ2FiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCA2LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjXy1fJ1xuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkRW5kKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIHJldHVybiAobGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aClcbiAgICAgICAgPyAoc3RyaW5nICsgY3JlYXRlUGFkZGluZyhsZW5ndGggLSBzdHJMZW5ndGgsIGNoYXJzKSlcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDYpO1xuICAgICAqIC8vID0+ICcgICBhYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCA2LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1fYWJjJ1xuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRTdGFydChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICByZXR1cm4gKGxlbmd0aCAmJiBzdHJMZW5ndGggPCBsZW5ndGgpXG4gICAgICAgID8gKGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykgKyBzdHJpbmcpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGludGVnZXIgb2YgdGhlIHNwZWNpZmllZCByYWRpeC4gSWYgYHJhZGl4YCBpc1xuICAgICAqIGB1bmRlZmluZWRgIG9yIGAwYCwgYSBgcmFkaXhgIG9mIGAxMGAgaXMgdXNlZCB1bmxlc3MgYHZhbHVlYCBpcyBhXG4gICAgICogaGV4YWRlY2ltYWwsIGluIHdoaWNoIGNhc2UgYSBgcmFkaXhgIG9mIGAxNmAgaXMgdXNlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBhbGlnbnMgd2l0aCB0aGVcbiAgICAgKiBbRVM1IGltcGxlbWVudGF0aW9uXShodHRwczovL2VzNS5naXRodWIuaW8vI3gxNS4xLjIuMikgb2YgYHBhcnNlSW50YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl4PTEwXSBUaGUgcmFkaXggdG8gaW50ZXJwcmV0IGB2YWx1ZWAgYnkuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYXJzZUludCgnMDgnKTtcbiAgICAgKiAvLyA9PiA4XG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnMDgnLCAnMTAnXSwgXy5wYXJzZUludCk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZywgcmFkaXgsIGd1YXJkKSB7XG4gICAgICBpZiAoZ3VhcmQgfHwgcmFkaXggPT0gbnVsbCkge1xuICAgICAgICByYWRpeCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHJhZGl4KSB7XG4gICAgICAgIHJhZGl4ID0gK3JhZGl4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZVBhcnNlSW50KHRvU3RyaW5nKHN0cmluZykucmVwbGFjZShyZVRyaW1TdGFydCwgJycpLCByYWRpeCB8fCAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBlYXRzIHRoZSBnaXZlbiBzdHJpbmcgYG5gIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZXBlYXQoJyonLCAzKTtcbiAgICAgKiAvLyA9PiAnKioqJ1xuICAgICAqXG4gICAgICogXy5yZXBlYXQoJ2FiYycsIDIpO1xuICAgICAqIC8vID0+ICdhYmNhYmMnXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMCk7XG4gICAgICogLy8gPT4gJydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBlYXQoc3RyaW5nLCBuLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJlcGVhdCh0b1N0cmluZyhzdHJpbmcpLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyBtYXRjaGVzIGZvciBgcGF0dGVybmAgaW4gYHN0cmluZ2Agd2l0aCBgcmVwbGFjZW1lbnRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BTdHJpbmcjcmVwbGFjZWBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9yZXBsYWNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBwYXR0ZXJuIFRoZSBwYXR0ZXJuIHRvIHJlcGxhY2UuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IHJlcGxhY2VtZW50IFRoZSBtYXRjaCByZXBsYWNlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVwbGFjZSgnSGkgRnJlZCcsICdGcmVkJywgJ0Jhcm5leScpO1xuICAgICAqIC8vID0+ICdIaSBCYXJuZXknXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwbGFjZSgpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKGFyZ3NbMF0pO1xuXG4gICAgICByZXR1cm4gYXJncy5sZW5ndGggPCAzID8gc3RyaW5nIDogc3RyaW5nLnJlcGxhY2UoYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBbc25ha2UgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU25ha2VfY2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzbmFrZSBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnLS1GT08tQkFSLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKi9cbiAgICB2YXIgc25ha2VDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJ18nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGJ5IGBzZXBhcmF0b3JgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BTdHJpbmcjc3BsaXRgXShodHRwczovL21kbi5pby9TdHJpbmcvc3BsaXQpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHNwbGl0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gc2VwYXJhdG9yIFRoZSBzZXBhcmF0b3IgcGF0dGVybiB0byBzcGxpdCBieS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xpbWl0XSBUaGUgbGVuZ3RoIHRvIHRydW5jYXRlIHJlc3VsdHMgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzdHJpbmcgc2VnbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3BsaXQoJ2EtYi1jJywgJy0nLCAyKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3BsaXQoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICBpZiAobGltaXQgJiYgdHlwZW9mIGxpbWl0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gbGltaXQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBsaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfQVJSQVlfTEVOR1RIIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAoIWxpbWl0KSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChcbiAgICAgICAgICAgIHR5cGVvZiBzZXBhcmF0b3IgPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgIChzZXBhcmF0b3IgIT0gbnVsbCAmJiAhaXNSZWdFeHAoc2VwYXJhdG9yKSlcbiAgICAgICAgICApKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoIXNlcGFyYXRvciAmJiBoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgICByZXR1cm4gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkoc3RyaW5nKSwgMCwgbGltaXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW3N0YXJ0IGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1N0eWxpc3RpY19vcl9zcGVjaWFsaXNlZF91c2FnZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdGFydCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICovXG4gICAgdmFyIHN0YXJ0Q2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHVwcGVyRmlyc3Qod29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249MF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCBgdGFyZ2V0YCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PSBudWxsXG4gICAgICAgID8gMFxuICAgICAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBzdHJpbmcubGVuZ3RoKTtcblxuICAgICAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG4gICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIHRhcmdldC5sZW5ndGgpID09IHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24gdGhhdCBjYW4gaW50ZXJwb2xhdGUgZGF0YSBwcm9wZXJ0aWVzXG4gICAgICogaW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlcnMsIEhUTUwtZXNjYXBlIGludGVycG9sYXRlZCBkYXRhIHByb3BlcnRpZXMgaW5cbiAgICAgKiBcImVzY2FwZVwiIGRlbGltaXRlcnMsIGFuZCBleGVjdXRlIEphdmFTY3JpcHQgaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuIERhdGFcbiAgICAgKiBwcm9wZXJ0aWVzIG1heSBiZSBhY2Nlc3NlZCBhcyBmcmVlIHZhcmlhYmxlcyBpbiB0aGUgdGVtcGxhdGUuIElmIGEgc2V0dGluZ1xuICAgICAqIG9iamVjdCBpcyBnaXZlbiwgaXQgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGBfLnRlbXBsYXRlU2V0dGluZ3NgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJbiB0aGUgZGV2ZWxvcG1lbnQgYnVpbGQgYF8udGVtcGxhdGVgIHV0aWxpemVzXG4gICAgICogW3NvdXJjZVVSTHNdKGh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2RldmVsb3BlcnRvb2xzL3NvdXJjZW1hcHMvI3RvYy1zb3VyY2V1cmwpXG4gICAgICogZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBwcmVjb21waWxpbmcgdGVtcGxhdGVzIHNlZVxuICAgICAqIFtsb2Rhc2gncyBjdXN0b20gYnVpbGRzIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vbG9kYXNoLmNvbS9jdXN0b20tYnVpbGRzKS5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIENocm9tZSBleHRlbnNpb24gc2FuZGJveGVzIHNlZVxuICAgICAqIFtDaHJvbWUncyBleHRlbnNpb25zIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZXh0ZW5zaW9ucy9zYW5kYm94aW5nRXZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSB0ZW1wbGF0ZSBzdHJpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmVzY2FwZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXNjYXBlXVxuICAgICAqICBUaGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXZhbHVhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmV2YWx1YXRlXVxuICAgICAqICBUaGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuaW1wb3J0cz1fLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c11cbiAgICAgKiAgQW4gb2JqZWN0IHRvIGltcG9ydCBpbnRvIHRoZSB0ZW1wbGF0ZSBhcyBmcmVlIHZhcmlhYmxlcy5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuaW50ZXJwb2xhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlXVxuICAgICAqICBUaGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc291cmNlVVJMPSdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzW25dJ11cbiAgICAgKiAgVGhlIHNvdXJjZVVSTCBvZiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnZhcmlhYmxlPSdvYmonXVxuICAgICAqICBUaGUgZGF0YSBvYmplY3QgdmFyaWFibGUgbmFtZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlciB0byBjcmVhdGUgYSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2ZyZWQnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlciB0byBlc2NhcGUgZGF0YSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPGI+PCUtIHZhbHVlICU+PC9iPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJzxzY3JpcHQ+JyB9KTtcbiAgICAgKiAvLyA9PiAnPGI+Jmx0O3NjcmlwdCZndDs8L2I+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyIHRvIGV4ZWN1dGUgSmF2YVNjcmlwdCBhbmQgZ2VuZXJhdGUgSFRNTC5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBfLmZvckVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBpbnRlcm5hbCBgcHJpbnRgIGZ1bmN0aW9uIGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIHByaW50KFwiaGVsbG8gXCIgKyB1c2VyKTsgJT4hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdiYXJuZXknIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBiYXJuZXkhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBFUyB0ZW1wbGF0ZSBsaXRlcmFsIGRlbGltaXRlciBhcyBhbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIC8vIERpc2FibGUgc3VwcG9ydCBieSByZXBsYWNpbmcgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gJHsgdXNlciB9IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAncGViYmxlcycgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIHBlYmJsZXMhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIGJhY2tzbGFzaGVzIHRvIHRyZWF0IGRlbGltaXRlcnMgYXMgcGxhaW4gdGV4dC5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JT0gXCJcXFxcPCUtIHZhbHVlICVcXFxcPlwiICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnaWdub3JlZCcgfSk7XG4gICAgICogLy8gPT4gJzwlLSB2YWx1ZSAlPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYGltcG9ydHNgIG9wdGlvbiB0byBpbXBvcnQgYGpRdWVyeWAgYXMgYGpxYC5cbiAgICAgKiB2YXIgdGV4dCA9ICc8JSBqcS5lYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nO1xuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUodGV4dCwgeyAnaW1wb3J0cyc6IHsgJ2pxJzogalF1ZXJ5IH0gfSk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gICAgICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBzb3VyY2VVUkxgIG9wdGlvbiB0byBzcGVjaWZ5IGEgY3VzdG9tIHNvdXJjZVVSTCBmb3IgdGhlIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScsIHsgJ3NvdXJjZVVSTCc6ICcvYmFzaWMvZ3JlZXRpbmcuanN0JyB9KTtcbiAgICAgKiBjb21waWxlZChkYXRhKTtcbiAgICAgKiAvLyA9PiBGaW5kIHRoZSBzb3VyY2Ugb2YgXCJncmVldGluZy5qc3RcIiB1bmRlciB0aGUgU291cmNlcyB0YWIgb3IgUmVzb3VyY2VzIHBhbmVsIG9mIHRoZSB3ZWIgaW5zcGVjdG9yLlxuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgdmFyaWFibGVgIG9wdGlvbiB0byBlbnN1cmUgYSB3aXRoLXN0YXRlbWVudCBpc24ndCB1c2VkIGluIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoaSA8JT0gZGF0YS51c2VyICU+IScsIHsgJ3ZhcmlhYmxlJzogJ2RhdGEnIH0pO1xuICAgICAqIGNvbXBpbGVkLnNvdXJjZTtcbiAgICAgKiAvLyA9PiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICogLy8gICB2YXIgX190LCBfX3AgPSAnJztcbiAgICAgKiAvLyAgIF9fcCArPSAnaGkgJyArICgoX190ID0gKCBkYXRhLnVzZXIgKSkgPT0gbnVsbCA/ICcnIDogX190KSArICchJztcbiAgICAgKiAvLyAgIHJldHVybiBfX3A7XG4gICAgICogLy8gfVxuICAgICAqXG4gICAgICogLy8gVXNlIGN1c3RvbSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLlxuICAgICAqIF8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZSA9IC97eyhbXFxzXFxTXSs/KX19L2c7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8ge3sgdXNlciB9fSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ211c3RhY2hlJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gbXVzdGFjaGUhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgc291cmNlYCBwcm9wZXJ0eSB0byBpbmxpbmUgY29tcGlsZWQgdGVtcGxhdGVzIGZvciBtZWFuaW5nZnVsXG4gICAgICogLy8gbGluZSBudW1iZXJzIGluIGVycm9yIG1lc3NhZ2VzIGFuZCBzdGFjayB0cmFjZXMuXG4gICAgICogZnMud3JpdGVGaWxlU3luYyhwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2pzdC5qcycpLCAnXFxcbiAgICAgKiAgIHZhciBKU1QgPSB7XFxcbiAgICAgKiAgICAgXCJtYWluXCI6ICcgKyBfLnRlbXBsYXRlKG1haW5UZXh0KS5zb3VyY2UgKyAnXFxcbiAgICAgKiAgIH07XFxcbiAgICAgKiAnKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0ZW1wbGF0ZShzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSB7XG4gICAgICAvLyBCYXNlZCBvbiBKb2huIFJlc2lnJ3MgYHRtcGxgIGltcGxlbWVudGF0aW9uXG4gICAgICAvLyAoaHR0cDovL2Vqb2huLm9yZy9ibG9nL2phdmFzY3JpcHQtbWljcm8tdGVtcGxhdGluZy8pXG4gICAgICAvLyBhbmQgTGF1cmEgRG9rdG9yb3ZhJ3MgZG9ULmpzIChodHRwczovL2dpdGh1Yi5jb20vb2xhZG8vZG9UKS5cbiAgICAgIHZhciBzZXR0aW5ncyA9IGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzO1xuXG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBvcHRpb25zID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLCBzZXR0aW5ncywgY3VzdG9tRGVmYXVsdHNBc3NpZ25Jbik7XG5cbiAgICAgIHZhciBpbXBvcnRzID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLmltcG9ydHMsIHNldHRpbmdzLmltcG9ydHMsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pLFxuICAgICAgICAgIGltcG9ydHNLZXlzID0ga2V5cyhpbXBvcnRzKSxcbiAgICAgICAgICBpbXBvcnRzVmFsdWVzID0gYmFzZVZhbHVlcyhpbXBvcnRzLCBpbXBvcnRzS2V5cyk7XG5cbiAgICAgIHZhciBpc0VzY2FwaW5nLFxuICAgICAgICAgIGlzRXZhbHVhdGluZyxcbiAgICAgICAgICBpbmRleCA9IDAsXG4gICAgICAgICAgaW50ZXJwb2xhdGUgPSBvcHRpb25zLmludGVycG9sYXRlIHx8IHJlTm9NYXRjaCxcbiAgICAgICAgICBzb3VyY2UgPSBcIl9fcCArPSAnXCI7XG5cbiAgICAgIC8vIENvbXBpbGUgdGhlIHJlZ2V4cCB0byBtYXRjaCBlYWNoIGRlbGltaXRlci5cbiAgICAgIHZhciByZURlbGltaXRlcnMgPSBSZWdFeHAoXG4gICAgICAgIChvcHRpb25zLmVzY2FwZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIGludGVycG9sYXRlLnNvdXJjZSArICd8JyArXG4gICAgICAgIChpbnRlcnBvbGF0ZSA9PT0gcmVJbnRlcnBvbGF0ZSA/IHJlRXNUZW1wbGF0ZSA6IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgKG9wdGlvbnMuZXZhbHVhdGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCQnXG4gICAgICAsICdnJyk7XG5cbiAgICAgIC8vIFVzZSBhIHNvdXJjZVVSTCBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgIC8vIFRoZSBzb3VyY2VVUkwgZ2V0cyBpbmplY3RlZCBpbnRvIHRoZSBzb3VyY2UgdGhhdCdzIGV2YWwtZWQsIHNvIGJlIGNhcmVmdWxcbiAgICAgIC8vIHRvIG5vcm1hbGl6ZSBhbGwga2luZHMgb2Ygd2hpdGVzcGFjZSwgc28gZS5nLiBuZXdsaW5lcyAoYW5kIHVuaWNvZGUgdmVyc2lvbnMgb2YgaXQpIGNhbid0IHNuZWFrIGluXG4gICAgICAvLyBhbmQgZXNjYXBlIHRoZSBjb21tZW50LCB0aHVzIGluamVjdGluZyBjb2RlIHRoYXQgZ2V0cyBldmFsZWQuXG4gICAgICB2YXIgc291cmNlVVJMID0gJy8vIyBzb3VyY2VVUkw9JyArXG4gICAgICAgIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICdzb3VyY2VVUkwnKVxuICAgICAgICAgID8gKG9wdGlvbnMuc291cmNlVVJMICsgJycpLnJlcGxhY2UoL1xccy9nLCAnICcpXG4gICAgICAgICAgOiAoJ2xvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbJyArICgrK3RlbXBsYXRlQ291bnRlcikgKyAnXScpXG4gICAgICAgICkgKyAnXFxuJztcblxuICAgICAgc3RyaW5nLnJlcGxhY2UocmVEZWxpbWl0ZXJzLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlVmFsdWUsIGludGVycG9sYXRlVmFsdWUsIGVzVGVtcGxhdGVWYWx1ZSwgZXZhbHVhdGVWYWx1ZSwgb2Zmc2V0KSB7XG4gICAgICAgIGludGVycG9sYXRlVmFsdWUgfHwgKGludGVycG9sYXRlVmFsdWUgPSBlc1RlbXBsYXRlVmFsdWUpO1xuXG4gICAgICAgIC8vIEVzY2FwZSBjaGFyYWN0ZXJzIHRoYXQgY2FuJ3QgYmUgaW5jbHVkZWQgaW4gc3RyaW5nIGxpdGVyYWxzLlxuICAgICAgICBzb3VyY2UgKz0gc3RyaW5nLnNsaWNlKGluZGV4LCBvZmZzZXQpLnJlcGxhY2UocmVVbmVzY2FwZWRTdHJpbmcsIGVzY2FwZVN0cmluZ0NoYXIpO1xuXG4gICAgICAgIC8vIFJlcGxhY2UgZGVsaW1pdGVycyB3aXRoIHNuaXBwZXRzLlxuICAgICAgICBpZiAoZXNjYXBlVmFsdWUpIHtcbiAgICAgICAgICBpc0VzY2FwaW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG5fX2UoXCIgKyBlc2NhcGVWYWx1ZSArIFwiKSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmFsdWF0ZVZhbHVlKSB7XG4gICAgICAgICAgaXNFdmFsdWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInO1xcblwiICsgZXZhbHVhdGVWYWx1ZSArIFwiO1xcbl9fcCArPSAnXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGludGVycG9sYXRlVmFsdWUpIHtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG4oKF9fdCA9IChcIiArIGludGVycG9sYXRlVmFsdWUgKyBcIikpID09IG51bGwgPyAnJyA6IF9fdCkgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IG9mZnNldCArIG1hdGNoLmxlbmd0aDtcblxuICAgICAgICAvLyBUaGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIHByb2R1Y3RzIG5lZWRzIGBtYXRjaGAgcmV0dXJuZWQgaW5cbiAgICAgICAgLy8gb3JkZXIgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBgb2Zmc2V0YCB2YWx1ZS5cbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgfSk7XG5cbiAgICAgIHNvdXJjZSArPSBcIic7XFxuXCI7XG5cbiAgICAgIC8vIElmIGB2YXJpYWJsZWAgaXMgbm90IHNwZWNpZmllZCB3cmFwIGEgd2l0aC1zdGF0ZW1lbnQgYXJvdW5kIHRoZSBnZW5lcmF0ZWRcbiAgICAgIC8vIGNvZGUgdG8gYWRkIHRoZSBkYXRhIG9iamVjdCB0byB0aGUgdG9wIG9mIHRoZSBzY29wZSBjaGFpbi5cbiAgICAgIHZhciB2YXJpYWJsZSA9IGhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywgJ3ZhcmlhYmxlJykgJiYgb3B0aW9ucy52YXJpYWJsZTtcbiAgICAgIGlmICghdmFyaWFibGUpIHtcbiAgICAgICAgc291cmNlID0gJ3dpdGggKG9iaikge1xcbicgKyBzb3VyY2UgKyAnXFxufVxcbic7XG4gICAgICB9XG4gICAgICAvLyBDbGVhbnVwIGNvZGUgYnkgc3RyaXBwaW5nIGVtcHR5IHN0cmluZ3MuXG4gICAgICBzb3VyY2UgPSAoaXNFdmFsdWF0aW5nID8gc291cmNlLnJlcGxhY2UocmVFbXB0eVN0cmluZ0xlYWRpbmcsICcnKSA6IHNvdXJjZSlcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ01pZGRsZSwgJyQxJylcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ1RyYWlsaW5nLCAnJDE7Jyk7XG5cbiAgICAgIC8vIEZyYW1lIGNvZGUgYXMgdGhlIGZ1bmN0aW9uIGJvZHkuXG4gICAgICBzb3VyY2UgPSAnZnVuY3Rpb24oJyArICh2YXJpYWJsZSB8fCAnb2JqJykgKyAnKSB7XFxuJyArXG4gICAgICAgICh2YXJpYWJsZVxuICAgICAgICAgID8gJydcbiAgICAgICAgICA6ICdvYmogfHwgKG9iaiA9IHt9KTtcXG4nXG4gICAgICAgICkgK1xuICAgICAgICBcInZhciBfX3QsIF9fcCA9ICcnXCIgK1xuICAgICAgICAoaXNFc2NhcGluZ1xuICAgICAgICAgICA/ICcsIF9fZSA9IF8uZXNjYXBlJ1xuICAgICAgICAgICA6ICcnXG4gICAgICAgICkgK1xuICAgICAgICAoaXNFdmFsdWF0aW5nXG4gICAgICAgICAgPyAnLCBfX2ogPSBBcnJheS5wcm90b3R5cGUuam9pbjtcXG4nICtcbiAgICAgICAgICAgIFwiZnVuY3Rpb24gcHJpbnQoKSB7IF9fcCArPSBfX2ouY2FsbChhcmd1bWVudHMsICcnKSB9XFxuXCJcbiAgICAgICAgICA6ICc7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgc291cmNlICtcbiAgICAgICAgJ3JldHVybiBfX3BcXG59JztcblxuICAgICAgdmFyIHJlc3VsdCA9IGF0dGVtcHQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbihpbXBvcnRzS2V5cywgc291cmNlVVJMICsgJ3JldHVybiAnICsgc291cmNlKVxuICAgICAgICAgIC5hcHBseSh1bmRlZmluZWQsIGltcG9ydHNWYWx1ZXMpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uJ3Mgc291cmNlIGJ5IGl0cyBgdG9TdHJpbmdgIG1ldGhvZCBvclxuICAgICAgLy8gdGhlIGBzb3VyY2VgIHByb3BlcnR5IGFzIGEgY29udmVuaWVuY2UgZm9yIGlubGluaW5nIGNvbXBpbGVkIHRlbXBsYXRlcy5cbiAgICAgIHJlc3VsdC5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICBpZiAoaXNFcnJvcihyZXN1bHQpKSB7XG4gICAgICAgIHRocm93IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIGEgd2hvbGUsIHRvIGxvd2VyIGNhc2UganVzdCBsaWtlXG4gICAgICogW1N0cmluZyN0b0xvd2VyQ2FzZV0oaHR0cHM6Ly9tZG4uaW8vdG9Mb3dlckNhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbG93ZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJy0tRm9vLUJhci0tJyk7XG4gICAgICogLy8gPT4gJy0tZm9vLWJhci0tJ1xuICAgICAqXG4gICAgICogXy50b0xvd2VyKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vYmFyJ1xuICAgICAqXG4gICAgICogXy50b0xvd2VyKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdfX2Zvb19iYXJfXydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xvd2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIGEgd2hvbGUsIHRvIHVwcGVyIGNhc2UganVzdCBsaWtlXG4gICAgICogW1N0cmluZyN0b1VwcGVyQ2FzZV0oaHR0cHM6Ly9tZG4uaW8vdG9VcHBlckNhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJy0tRk9PLUJBUi0tJ1xuICAgICAqXG4gICAgICogXy50b1VwcGVyKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PQkFSJ1xuICAgICAqXG4gICAgICogXy50b1VwcGVyKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdfX0ZPT19CQVJfXydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1VwcGVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKlxuICAgICAqIF8udHJpbSgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnICBmb28gICcsICcgIGJhciAgJ10sIF8udHJpbSk7XG4gICAgICogLy8gPT4gWydmb28nLCAnYmFyJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBjaHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShjaGFycyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scyksXG4gICAgICAgICAgZW5kID0gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgc3RhcnQsIGVuZCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltRW5kKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJyAgYWJjJ1xuICAgICAqXG4gICAgICogXy50cmltRW5kKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnLV8tYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1FbmQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltRW5kLCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpICsgMTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCAwLCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjICAnXG4gICAgICpcbiAgICAgKiBfLnRyaW1TdGFydCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYy1fLSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltU3RhcnQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0KS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcnVuY2F0ZXMgYHN0cmluZ2AgaWYgaXQncyBsb25nZXIgdGhhbiB0aGUgZ2l2ZW4gbWF4aW11bSBzdHJpbmcgbGVuZ3RoLlxuICAgICAqIFRoZSBsYXN0IGNoYXJhY3RlcnMgb2YgdGhlIHRydW5jYXRlZCBzdHJpbmcgYXJlIHJlcGxhY2VkIHdpdGggdGhlIG9taXNzaW9uXG4gICAgICogc3RyaW5nIHdoaWNoIGRlZmF1bHRzIHRvIFwiLi4uXCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJ1bmNhdGUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxlbmd0aD0zMF0gVGhlIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMub21pc3Npb249Jy4uLiddIFRoZSBzdHJpbmcgdG8gaW5kaWNhdGUgdGV4dCBpcyBvbWl0dGVkLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW29wdGlvbnMuc2VwYXJhdG9yXSBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gdHJ1bmNhdGUgdG8uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJ1bmNhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycpO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm8uLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ2xlbmd0aCc6IDI0LFxuICAgICAqICAgJ3NlcGFyYXRvcic6ICcgJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAvLD8gKy9cbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdvbWlzc2lvbic6ICcgWy4uLl0nXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZyBbLi4uXSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cnVuY2F0ZShzdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBERUZBVUxUX1RSVU5DX0xFTkdUSCxcbiAgICAgICAgICBvbWlzc2lvbiA9IERFRkFVTFRfVFJVTkNfT01JU1NJT047XG5cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gJ3NlcGFyYXRvcicgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc2VwYXJhdG9yIDogc2VwYXJhdG9yO1xuICAgICAgICBsZW5ndGggPSAnbGVuZ3RoJyBpbiBvcHRpb25zID8gdG9JbnRlZ2VyKG9wdGlvbnMubGVuZ3RoKSA6IGxlbmd0aDtcbiAgICAgICAgb21pc3Npb24gPSAnb21pc3Npb24nIGluIG9wdGlvbnMgPyBiYXNlVG9TdHJpbmcob3B0aW9ucy5vbWlzc2lvbikgOiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgaWYgKGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKTtcbiAgICAgICAgc3RyTGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG4gICAgICB9XG4gICAgICBpZiAobGVuZ3RoID49IHN0ckxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIGVuZCA9IGxlbmd0aCAtIHN0cmluZ1NpemUob21pc3Npb24pO1xuICAgICAgaWYgKGVuZCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHN0clN5bWJvbHNcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKVxuICAgICAgICA6IHN0cmluZy5zbGljZSgwLCBlbmQpO1xuXG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgaWYgKHN0clN5bWJvbHMpIHtcbiAgICAgICAgZW5kICs9IChyZXN1bHQubGVuZ3RoIC0gZW5kKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIGlmIChzdHJpbmcuc2xpY2UoZW5kKS5zZWFyY2goc2VwYXJhdG9yKSkge1xuICAgICAgICAgIHZhciBtYXRjaCxcbiAgICAgICAgICAgICAgc3Vic3RyaW5nID0gcmVzdWx0O1xuXG4gICAgICAgICAgaWYgKCFzZXBhcmF0b3IuZ2xvYmFsKSB7XG4gICAgICAgICAgICBzZXBhcmF0b3IgPSBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgdG9TdHJpbmcocmVGbGFncy5leGVjKHNlcGFyYXRvcikpICsgJ2cnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VwYXJhdG9yLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgd2hpbGUgKChtYXRjaCA9IHNlcGFyYXRvci5leGVjKHN1YnN0cmluZykpKSB7XG4gICAgICAgICAgICB2YXIgbmV3RW5kID0gbWF0Y2guaW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBuZXdFbmQgPT09IHVuZGVmaW5lZCA/IGVuZCA6IG5ld0VuZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3RyaW5nLmluZGV4T2YoYmFzZVRvU3RyaW5nKHNlcGFyYXRvciksIGVuZCkgIT0gZW5kKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHJlc3VsdC5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy5lc2NhcGVgOyB0aGlzIG1ldGhvZCBjb252ZXJ0cyB0aGUgSFRNTCBlbnRpdGllc1xuICAgICAqIGAmYW1wO2AsIGAmbHQ7YCwgYCZndDtgLCBgJnF1b3Q7YCwgYW5kIGAmIzM5O2AgaW4gYHN0cmluZ2AgdG9cbiAgICAgKiB0aGVpciBjb3JyZXNwb25kaW5nIGNoYXJhY3RlcnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgSFRNTCBlbnRpdGllcyBhcmUgdW5lc2NhcGVkLiBUbyB1bmVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogSFRNTCBlbnRpdGllcyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdW5lc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzRXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlZEh0bWwsIHVuZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1cHBlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCctLWZvby1iYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvVXBwZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKlxuICAgICAqIF8udXBwZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGUkVEJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b1VwcGVyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBbcGF0dGVybl0gVGhlIHBhdHRlcm4gdG8gbWF0Y2ggd29yZHMuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycsIC9bXiwgXSsvZyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICcmJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdvcmRzKHN0cmluZywgcGF0dGVybiwgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwYXR0ZXJuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBwYXR0ZXJuO1xuXG4gICAgICBpZiAocGF0dGVybiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBoYXNVbmljb2RlV29yZChzdHJpbmcpID8gdW5pY29kZVdvcmRzKHN0cmluZykgOiBhc2NpaVdvcmRzKHN0cmluZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHBhdHRlcm4pIHx8IFtdO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIGludm9rZSBgZnVuY2AsIHJldHVybmluZyBlaXRoZXIgdGhlIHJlc3VsdCBvciB0aGUgY2F1Z2h0IGVycm9yXG4gICAgICogb2JqZWN0LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXR0ZW1wdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYGZ1bmNgIHJlc3VsdCBvciBlcnJvciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIHRocm93aW5nIGVycm9ycyBmb3IgaW52YWxpZCBzZWxlY3RvcnMuXG4gICAgICogdmFyIGVsZW1lbnRzID0gXy5hdHRlbXB0KGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICogICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICogfSwgJz5fPicpO1xuICAgICAqXG4gICAgICogaWYgKF8uaXNFcnJvcihlbGVtZW50cykpIHtcbiAgICAgKiAgIGVsZW1lbnRzID0gW107XG4gICAgICogfVxuICAgICAqL1xuICAgIHZhciBhdHRlbXB0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBpc0Vycm9yKGUpID8gZSA6IG5ldyBFcnJvcihlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEJpbmRzIG1ldGhvZHMgb2YgYW4gb2JqZWN0IHRvIHRoZSBvYmplY3QgaXRzZWxmLCBvdmVyd3JpdGluZyB0aGUgZXhpc3RpbmdcbiAgICAgKiBtZXRob2QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgYm91bmQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gYmluZCBhbmQgYXNzaWduIHRoZSBib3VuZCBtZXRob2RzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IG1ldGhvZE5hbWVzIFRoZSBvYmplY3QgbWV0aG9kIG5hbWVzIHRvIGJpbmQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHZpZXcgPSB7XG4gICAgICogICAnbGFiZWwnOiAnZG9jcycsXG4gICAgICogICAnY2xpY2snOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQgJyArIHRoaXMubGFiZWwpO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmJpbmRBbGwodmlldywgWydjbGljayddKTtcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdmlldy5jbGljayk7XG4gICAgICogLy8gPT4gTG9ncyAnY2xpY2tlZCBkb2NzJyB3aGVuIGNsaWNrZWQuXG4gICAgICovXG4gICAgdmFyIGJpbmRBbGwgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIG1ldGhvZE5hbWVzKSB7XG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBrZXkgPSB0b0tleShrZXkpO1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIGJpbmQob2JqZWN0W2tleV0sIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXRlcmF0ZXMgb3ZlciBgcGFpcnNgIGFuZCBpbnZva2VzIHRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogZnVuY3Rpb24gb2YgdGhlIGZpcnN0IHByZWRpY2F0ZSB0byByZXR1cm4gdHJ1dGh5LiBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uXG4gICAgICogcGFpcnMgYXJlIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLmNvbmQoW1xuICAgICAqICAgW18ubWF0Y2hlcyh7ICdhJzogMSB9KSwgICAgICAgICAgIF8uY29uc3RhbnQoJ21hdGNoZXMgQScpXSxcbiAgICAgKiAgIFtfLmNvbmZvcm1zKHsgJ2InOiBfLmlzTnVtYmVyIH0pLCBfLmNvbnN0YW50KCdtYXRjaGVzIEInKV0sXG4gICAgICogICBbXy5zdHViVHJ1ZSwgICAgICAgICAgICAgICAgICAgICAgXy5jb25zdGFudCgnbm8gbWF0Y2gnKV1cbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBBJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogMCwgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+ICdtYXRjaGVzIEInXG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAnMScsICdiJzogJzInIH0pO1xuICAgICAqIC8vID0+ICdubyBtYXRjaCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25kKHBhaXJzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgdG9JdGVyYXRlZSA9IGdldEl0ZXJhdGVlKCk7XG5cbiAgICAgIHBhaXJzID0gIWxlbmd0aCA/IFtdIDogYXJyYXlNYXAocGFpcnMsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYWlyWzFdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFt0b0l0ZXJhdGVlKHBhaXJbMF0pLCBwYWlyWzFdXTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgICBpZiAoYXBwbHkocGFpclswXSwgdGhpcywgYXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShwYWlyWzFdLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHByZWRpY2F0ZSBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGhcbiAgICAgKiB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZXMgb2YgYSBnaXZlbiBvYmplY3QsIHJldHVybmluZyBgdHJ1ZWAgaWZcbiAgICAgKiBhbGwgcHJlZGljYXRlcyByZXR1cm4gdHJ1dGh5LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNyZWF0ZWQgZnVuY3Rpb24gaXMgZXF1aXZhbGVudCB0byBgXy5jb25mb3Jtc1RvYCB3aXRoXG4gICAgICogYHNvdXJjZWAgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMiwgJ2InOiAxIH0sXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5jb25mb3Jtcyh7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZUNvbmZvcm1zKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgYHZhbHVlYCB0byBkZXRlcm1pbmUgd2hldGhlciBhIGRlZmF1bHQgdmFsdWUgc2hvdWxkIGJlIHJldHVybmVkIGluXG4gICAgICogaXRzIHBsYWNlLiBUaGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaWYgYHZhbHVlYCBpcyBgTmFOYCwgYG51bGxgLFxuICAgICAqIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHsqfSBkZWZhdWx0VmFsdWUgVGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRUbygxLCAxMCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8odW5kZWZpbmVkLCAxMCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWZhdWx0VG8odmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSkgPyBkZWZhdWx0VmFsdWUgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgaW52b2tpbmcgdGhlIGdpdmVuIGZ1bmN0aW9uc1xuICAgICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3coW18uYWRkLCBzcXVhcmVdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93ID0gY3JlYXRlRmxvdygpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbG93YCBleGNlcHQgdGhhdCBpdCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdFxuICAgICAqIGludm9rZXMgdGhlIGdpdmVuIGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbZnVuY3NdIFRoZSBmdW5jdGlvbnMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAc2VlIF8uZmxvd1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3dSaWdodChbc3F1YXJlLCBfLmFkZF0pO1xuICAgICAqIGFkZFNxdWFyZSgxLCAyKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICovXG4gICAgdmFyIGZsb3dSaWdodCA9IGNyZWF0ZUZsb3codHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkXG4gICAgICogZnVuY3Rpb24uIElmIGBmdW5jYCBpcyBhIHByb3BlcnR5IG5hbWUsIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybnMgdGhlXG4gICAgICogcHJvcGVydHkgdmFsdWUgZm9yIGEgZ2l2ZW4gZWxlbWVudC4gSWYgYGZ1bmNgIGlzIGFuIGFycmF5IG9yIG9iamVjdCwgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBjb250YWluIHRoZSBlcXVpdmFsZW50XG4gICAgICogc291cmNlIHByb3BlcnRpZXMsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gW2Z1bmM9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYSBjYWxsYmFjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNhbGxiYWNrLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLml0ZXJhdGVlKHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZShbJ3VzZXInLCAnZnJlZCddKSk7XG4gICAgICogLy8gPT4gW3sgJ3VzZXInOiAnZnJlZCcsICdhZ2UnOiA0MCB9XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsIF8uaXRlcmF0ZWUoJ3VzZXInKSk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBDcmVhdGUgY3VzdG9tIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICogXy5pdGVyYXRlZSA9IF8ud3JhcChfLml0ZXJhdGVlLCBmdW5jdGlvbihpdGVyYXRlZSwgZnVuYykge1xuICAgICAqICAgcmV0dXJuICFfLmlzUmVnRXhwKGZ1bmMpID8gaXRlcmF0ZWUoZnVuYykgOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgKiAgICAgcmV0dXJuIGZ1bmMudGVzdChzdHJpbmcpO1xuICAgICAqICAgfTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsnYWJjJywgJ2RlZiddLCAvZWYvKTtcbiAgICAgKiAvLyA9PiBbJ2RlZiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXRlcmF0ZWUoZnVuYykge1xuICAgICAgcmV0dXJuIGJhc2VJdGVyYXRlZSh0eXBlb2YgZnVuYyA9PSAnZnVuY3Rpb24nID8gZnVuYyA6IGJhc2VDbG9uZShmdW5jLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYSBnaXZlblxuICAgICAqIG9iamVjdCBhbmQgYHNvdXJjZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIG9iamVjdCBoYXMgZXF1aXZhbGVudFxuICAgICAqIHByb3BlcnR5IHZhbHVlcywgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uaXNNYXRjaGAgd2l0aCBgc291cmNlYFxuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3QgYHNvdXJjZWBcbiAgICAgKiB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZSBgXy5pc0VxdWFsYFxuICAgICAqIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE11bHRpcGxlIHZhbHVlcyBjYW4gYmUgY2hlY2tlZCBieSBjb21iaW5pbmcgc2V2ZXJhbCBtYXRjaGVyc1xuICAgICAqIHVzaW5nIGBfLm92ZXJTb21lYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm1hdGNoZXMoeyAnYSc6IDQsICdjJzogNiB9KSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XVxuICAgICAqXG4gICAgICogLy8gQ2hlY2tpbmcgZm9yIHNldmVyYWwgcG9zc2libGUgdmFsdWVzXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5vdmVyU29tZShbXy5tYXRjaGVzKHsgJ2EnOiAxIH0pLCBfLm1hdGNoZXMoeyAnYSc6IDQgfSldKSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LCB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0aGVcbiAgICAgKiB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QgdG8gYHNyY1ZhbHVlYCwgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGVcbiAgICAgKiBvYmplY3QgdmFsdWUgaXMgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0XG4gICAgICogYHNyY1ZhbHVlYCB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZVxuICAgICAqIGBfLmlzRXF1YWxgIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE11bHRpcGxlIHZhbHVlcyBjYW4gYmUgY2hlY2tlZCBieSBjb21iaW5pbmcgc2V2ZXJhbCBtYXRjaGVyc1xuICAgICAqIHVzaW5nIGBfLm92ZXJTb21lYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQob2JqZWN0cywgXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCA0KSk7XG4gICAgICogLy8gPT4geyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKlxuICAgICAqIC8vIENoZWNraW5nIGZvciBzZXZlcmFsIHBvc3NpYmxlIHZhbHVlc1xuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8ub3ZlclNvbWUoW18ubWF0Y2hlc1Byb3BlcnR5KCdhJywgMSksIF8ubWF0Y2hlc1Byb3BlcnR5KCdhJywgNCldKSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LCB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIGJhc2VDbG9uZShzcmNWYWx1ZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDIpIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgxKSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKFsnYScsICdiJ10pKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tZXRob2RgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogdGhlIG1ldGhvZCBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gXy50aW1lcygzLCBfLmNvbnN0YW50KSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIHZhciBtZXRob2RPZiA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFsbCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgZnVuY3Rpb24gcHJvcGVydGllcyBvZiBhIHNvdXJjZVxuICAgICAqIG9iamVjdCB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LiBJZiBgb2JqZWN0YCBpcyBhIGZ1bmN0aW9uLCB0aGVuIG1ldGhvZHNcbiAgICAgKiBhcmUgYWRkZWQgdG8gaXRzIHByb3RvdHlwZSBhcyB3ZWxsLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVzZSBgXy5ydW5JbkNvbnRleHRgIHRvIGNyZWF0ZSBhIHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHRvXG4gICAgICogYXZvaWQgY29uZmxpY3RzIGNhdXNlZCBieSBtb2RpZnlpbmcgdGhlIG9yaWdpbmFsLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gW29iamVjdD1sb2Rhc2hdIFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIGZ1bmN0aW9ucyB0byBhZGQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jaGFpbj10cnVlXSBTcGVjaWZ5IHdoZXRoZXIgbWl4aW5zIGFyZSBjaGFpbmFibGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gdm93ZWxzKHN0cmluZykge1xuICAgICAqICAgcmV0dXJuIF8uZmlsdGVyKHN0cmluZywgZnVuY3Rpb24odikge1xuICAgICAqICAgICByZXR1cm4gL1thZWlvdV0vaS50ZXN0KHYpO1xuICAgICAqICAgfSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSk7XG4gICAgICogXy52b3dlbHMoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXygnZnJlZCcpLnZvd2VscygpLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0sIHsgJ2NoYWluJzogZmFsc2UgfSk7XG4gICAgICogXygnZnJlZCcpLnZvd2VscygpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWl4aW4ob2JqZWN0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKSxcbiAgICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBwcm9wcyk7XG5cbiAgICAgIGlmIChvcHRpb25zID09IG51bGwgJiZcbiAgICAgICAgICAhKGlzT2JqZWN0KHNvdXJjZSkgJiYgKG1ldGhvZE5hbWVzLmxlbmd0aCB8fCAhcHJvcHMubGVuZ3RoKSkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHNvdXJjZTtcbiAgICAgICAgc291cmNlID0gb2JqZWN0O1xuICAgICAgICBvYmplY3QgPSB0aGlzO1xuICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgICAgfVxuICAgICAgdmFyIGNoYWluID0gIShpc09iamVjdChvcHRpb25zKSAmJiAnY2hhaW4nIGluIG9wdGlvbnMpIHx8ICEhb3B0aW9ucy5jaGFpbixcbiAgICAgICAgICBpc0Z1bmMgPSBpc0Z1bmN0aW9uKG9iamVjdCk7XG5cbiAgICAgIGFycmF5RWFjaChtZXRob2ROYW1lcywgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgICB2YXIgZnVuYyA9IHNvdXJjZVttZXRob2ROYW1lXTtcbiAgICAgICAgb2JqZWN0W21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgaWYgKGlzRnVuYykge1xuICAgICAgICAgIG9iamVjdC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fO1xuICAgICAgICAgICAgaWYgKGNoYWluIHx8IGNoYWluQWxsKSB7XG4gICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvYmplY3QodGhpcy5fX3dyYXBwZWRfXyksXG4gICAgICAgICAgICAgICAgICBhY3Rpb25zID0gcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuXG4gICAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7ICdmdW5jJzogZnVuYywgJ2FyZ3MnOiBhcmd1bWVudHMsICd0aGlzQXJnJzogb2JqZWN0IH0pO1xuICAgICAgICAgICAgICByZXN1bHQuX19jaGFpbl9fID0gY2hhaW5BbGw7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShvYmplY3QsIGFycmF5UHVzaChbdGhpcy52YWx1ZSgpXSwgYXJndW1lbnRzKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJ0cyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0cyBwcmV2aW91cyB2YWx1ZSBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0b1xuICAgICAqIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGxvZGFzaCA9IF8ubm9Db25mbGljdCgpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgICBpZiAocm9vdC5fID09PSB0aGlzKSB7XG4gICAgICAgIHJvb3QuXyA9IG9sZERhc2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLm5vb3ApO1xuICAgICAqIC8vID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub29wKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBnZXRzIHRoZSBhcmd1bWVudCBhdCBpbmRleCBgbmAuIElmIGBuYCBpcyBuZWdhdGl2ZSxcbiAgICAgKiB0aGUgbnRoIGFyZ3VtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgYXJndW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhc3MtdGhydSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygxKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKC0yKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2MnXG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoQXJnKG4pIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICByZXR1cm4gYmFzZU50aChhcmdzLCBuKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGl0ZXJhdGVlc2Agd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzXG4gICAgICogYW5kIHJldHVybnMgdGhlaXIgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXIoW01hdGgubWF4LCBNYXRoLm1pbl0pO1xuICAgICAqXG4gICAgICogZnVuYygxLCAyLCAzLCA0KTtcbiAgICAgKiAvLyA9PiBbNCwgMV1cbiAgICAgKi9cbiAgICB2YXIgb3ZlciA9IGNyZWF0ZU92ZXIoYXJyYXlNYXApO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYWxsKiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEZvbGxvd2luZyBzaG9ydGhhbmRzIGFyZSBwb3NzaWJsZSBmb3IgcHJvdmlkaW5nIHByZWRpY2F0ZXMuXG4gICAgICogUGFzcyBhbiBgT2JqZWN0YCBhbmQgaXQgd2lsbCBiZSB1c2VkIGFzIGFuIHBhcmFtZXRlciBmb3IgYF8ubWF0Y2hlc2AgdG8gY3JlYXRlIHRoZSBwcmVkaWNhdGUuXG4gICAgICogUGFzcyBhbiBgQXJyYXlgIG9mIHBhcmFtZXRlcnMgZm9yIGBfLm1hdGNoZXNQcm9wZXJ0eWAgYW5kIHRoZSBwcmVkaWNhdGUgd2lsbCBiZSBjcmVhdGVkIHVzaW5nIHRoZW0uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckV2ZXJ5KFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIGZ1bmMoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBvdmVyRXZlcnkgPSBjcmVhdGVPdmVyKGFycmF5RXZlcnkpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYW55Kiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEZvbGxvd2luZyBzaG9ydGhhbmRzIGFyZSBwb3NzaWJsZSBmb3IgcHJvdmlkaW5nIHByZWRpY2F0ZXMuXG4gICAgICogUGFzcyBhbiBgT2JqZWN0YCBhbmQgaXQgd2lsbCBiZSB1c2VkIGFzIGFuIHBhcmFtZXRlciBmb3IgYF8ubWF0Y2hlc2AgdG8gY3JlYXRlIHRoZSBwcmVkaWNhdGUuXG4gICAgICogUGFzcyBhbiBgQXJyYXlgIG9mIHBhcmFtZXRlcnMgZm9yIGBfLm1hdGNoZXNQcm9wZXJ0eWAgYW5kIHRoZSBwcmVkaWNhdGUgd2lsbCBiZSBjcmVhdGVkIHVzaW5nIHRoZW0uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlclNvbWUoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciBtYXRjaGVzRnVuYyA9IF8ub3ZlclNvbWUoW3sgJ2EnOiAxIH0sIHsgJ2EnOiAyIH1dKVxuICAgICAqIHZhciBtYXRjaGVzUHJvcGVydHlGdW5jID0gXy5vdmVyU29tZShbWydhJywgMV0sIFsnYScsIDJdXSlcbiAgICAgKi9cbiAgICB2YXIgb3ZlclNvbWUgPSBjcmVhdGVPdmVyKGFycmF5U29tZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5wcm9wZXJ0eSgnYS5iJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5tYXAoXy5zb3J0Qnkob2JqZWN0cywgXy5wcm9wZXJ0eShbJ2EnLCAnYiddKSksICdhLmInKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7XG4gICAgICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucHJvcGVydHlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zXG4gICAgICogdGhlIHZhbHVlIGF0IGEgZ2l2ZW4gcGF0aCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMCwgMSwgMl0sXG4gICAgICogICAgIG9iamVjdCA9IHsgJ2EnOiBhcnJheSwgJ2InOiBhcnJheSwgJ2MnOiBhcnJheSB9O1xuICAgICAqXG4gICAgICogXy5tYXAoWydhWzJdJywgJ2NbMF0nXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLnByb3BlcnR5T2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHlPZihvYmplY3QpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBudW1iZXJzIChwb3NpdGl2ZSBhbmQvb3IgbmVnYXRpdmUpIHByb2dyZXNzaW5nIGZyb21cbiAgICAgKiBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIEEgc3RlcCBvZiBgLTFgIGlzIHVzZWQgaWYgYSBuZWdhdGl2ZVxuICAgICAqIGBzdGFydGAgaXMgc3BlY2lmaWVkIHdpdGhvdXQgYW4gYGVuZGAgb3IgYHN0ZXBgLiBJZiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLFxuICAgICAqIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZSg0KTtcbiAgICAgKiAvLyA9PiBbMCwgMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoLTQpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFswLCA1LCAxMCwgMTVdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIHZhciByYW5nZSA9IGNyZWF0ZVJhbmdlKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnJhbmdlYCBleGNlcHQgdGhhdCBpdCBwb3B1bGF0ZXMgdmFsdWVzIGluXG4gICAgICogZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoNCk7XG4gICAgICogLy8gPT4gWzMsIDIsIDEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoLTQpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDUpO1xuICAgICAqIC8vID0+IFs0LCAzLCAyLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTUsIDEwLCA1LCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWy0zLCAtMiwgLTEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMSwgNCwgMCk7XG4gICAgICogLy8gPT4gWzEsIDEsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2VSaWdodCA9IGNyZWF0ZVJhbmdlKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICAgICAqIC8vID0+IFtbXSwgW11dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gICAgICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5zdHViT2JqZWN0KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7fSwge31dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJPYmplY3QoKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlbXB0eSBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViU3RyaW5nKTtcbiAgICAgKiAvLyA9PiBbJycsICcnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJTdHJpbmcoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViVHJ1ZSk7XG4gICAgICogLy8gPT4gW3RydWUsIHRydWVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YlRydWUoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBpdGVyYXRlZSBgbmAgdGltZXMsIHJldHVybmluZyBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZlxuICAgICAqIGVhY2ggaW52b2NhdGlvbi4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7IChpbmRleCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDMsIFN0cmluZyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnLCAnMiddXG4gICAgICpcbiAgICAgKiAgXy50aW1lcyg0LCBfLmNvbnN0YW50KDApKTtcbiAgICAgKiAvLyA9PiBbMCwgMCwgMCwgMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aW1lcyhuLCBpdGVyYXRlZSkge1xuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIGlmIChuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBNQVhfQVJSQVlfTEVOR1RILFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSk7XG4gICAgICBuIC09IE1BWF9BUlJBWV9MRU5HVEg7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlVGltZXMobGVuZ3RoLCBpdGVyYXRlZSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgICAgaXRlcmF0ZWUoaW5kZXgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKlxuICAgICAqIF8udG9QYXRoKCdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IFsnYScsICcwJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QYXRoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCB0b0tleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTeW1ib2wodmFsdWUpID8gW3ZhbHVlXSA6IGNvcHlBcnJheShzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgdW5pcXVlIElELiBJZiBgcHJlZml4YCBpcyBnaXZlbiwgdGhlIElEIGlzIGFwcGVuZGVkIHRvIGl0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3ByZWZpeD0nJ10gVGhlIHZhbHVlIHRvIHByZWZpeCB0aGUgSUQgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmlxdWUgSUQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoJ2NvbnRhY3RfJyk7XG4gICAgICogLy8gPT4gJ2NvbnRhY3RfMTA0J1xuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgpO1xuICAgICAqIC8vID0+ICcxMDUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcXVlSWQocHJlZml4KSB7XG4gICAgICB2YXIgaWQgPSArK2lkQ291bnRlcjtcbiAgICAgIHJldHVybiB0b1N0cmluZyhwcmVmaXgpICsgaWQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQWRkcyB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGF1Z2VuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhZGRlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYW4gYWRkaXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdG90YWwuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uYWRkKDYsIDQpO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgdmFyIGFkZCA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oYXVnZW5kLCBhZGRlbmQpIHtcbiAgICAgIHJldHVybiBhdWdlbmQgKyBhZGRlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHVwIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIHVwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdXAgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCB1cCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg0LjAwNik7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogXy5jZWlsKDYuMDA0LCAyKTtcbiAgICAgKiAvLyA9PiA2LjAxXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNjA0MCwgLTIpO1xuICAgICAqIC8vID0+IDYxMDBcbiAgICAgKi9cbiAgICB2YXIgY2VpbCA9IGNyZWF0ZVJvdW5kKCdjZWlsJyk7XG5cbiAgICAvKipcbiAgICAgKiBEaXZpZGUgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpZGVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpdmlzb3IgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBkaXZpc2lvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBxdW90aWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaXZpZGUoNiwgNCk7XG4gICAgICogLy8gPT4gMS41XG4gICAgICovXG4gICAgdmFyIGRpdmlkZSA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgICAgIHJldHVybiBkaXZpZGVuZCAvIGRpdmlzb3I7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIGRvd24gdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQgZG93bi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIGRvd24gdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBkb3duIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbG9vcig0LjAwNik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5mbG9vcigwLjA0NiwgMik7XG4gICAgICogLy8gPT4gMC4wNFxuICAgICAqXG4gICAgICogXy5mbG9vcig0MDYwLCAtMik7XG4gICAgICogLy8gPT4gNDAwMFxuICAgICAqL1xuICAgIHZhciBmbG9vciA9IGNyZWF0ZVJvdW5kKCdmbG9vcicpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1heGltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWF4KFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXgoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1heGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1heEJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXhCeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXhCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlR3QpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtZWFuIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1lYW4oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbihhcnJheSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBpZGVudGl0eSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZWFuYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgdmFsdWUgdG8gYmUgYXZlcmFnZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiA0IH0sIHsgJ24nOiAyIH0sIHsgJ24nOiA4IH0sIHsgJ24nOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1lYW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZWFuQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZU1lYW4oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1pbmltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWluKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5taW4oW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1pbihhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1pbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1pbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDEgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5taW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW5CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlTHQpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE11bHRpcGx5IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXVsdGlwbGllciBUaGUgZmlyc3QgbnVtYmVyIGluIGEgbXVsdGlwbGljYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpY2FuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHByb2R1Y3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubXVsdGlwbHkoNiwgNCk7XG4gICAgICogLy8gPT4gMjRcbiAgICAgKi9cbiAgICB2YXIgbXVsdGlwbHkgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG11bHRpcGxpZXIsIG11bHRpcGxpY2FuZCkge1xuICAgICAgcmV0dXJuIG11bHRpcGxpZXIgKiBtdWx0aXBsaWNhbmQ7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYsIDIpO1xuICAgICAqIC8vID0+IDQuMDFcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQxMDBcbiAgICAgKi9cbiAgICB2YXIgcm91bmQgPSBjcmVhdGVSb3VuZCgncm91bmQnKTtcblxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWludWVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN1YnRyYWhlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBzdWJ0cmFjdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN1YnRyYWN0KDYsIDQpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICB2YXIgc3VidHJhY3QgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG1pbnVlbmQsIHN1YnRyYWhlbmQpIHtcbiAgICAgIHJldHVybiBtaW51ZW5kIC0gc3VidHJhaGVuZDtcbiAgICB9LCAwKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBzdW0gb2YgdGhlIHZhbHVlcyBpbiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdW0oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgaWRlbnRpdHkpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnN1bWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIHN1bW1lZC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zdW1CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VtQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU3VtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0aGF0IHJldHVybiB3cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFmdGVyID0gYWZ0ZXI7XG4gICAgbG9kYXNoLmFyeSA9IGFyeTtcbiAgICBsb2Rhc2guYXNzaWduID0gYXNzaWduO1xuICAgIGxvZGFzaC5hc3NpZ25JbiA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5hc3NpZ25JbldpdGggPSBhc3NpZ25JbldpdGg7XG4gICAgbG9kYXNoLmFzc2lnbldpdGggPSBhc3NpZ25XaXRoO1xuICAgIGxvZGFzaC5hdCA9IGF0O1xuICAgIGxvZGFzaC5iZWZvcmUgPSBiZWZvcmU7XG4gICAgbG9kYXNoLmJpbmQgPSBiaW5kO1xuICAgIGxvZGFzaC5iaW5kQWxsID0gYmluZEFsbDtcbiAgICBsb2Rhc2guYmluZEtleSA9IGJpbmRLZXk7XG4gICAgbG9kYXNoLmNhc3RBcnJheSA9IGNhc3RBcnJheTtcbiAgICBsb2Rhc2guY2hhaW4gPSBjaGFpbjtcbiAgICBsb2Rhc2guY2h1bmsgPSBjaHVuaztcbiAgICBsb2Rhc2guY29tcGFjdCA9IGNvbXBhY3Q7XG4gICAgbG9kYXNoLmNvbmNhdCA9IGNvbmNhdDtcbiAgICBsb2Rhc2guY29uZCA9IGNvbmQ7XG4gICAgbG9kYXNoLmNvbmZvcm1zID0gY29uZm9ybXM7XG4gICAgbG9kYXNoLmNvbnN0YW50ID0gY29uc3RhbnQ7XG4gICAgbG9kYXNoLmNvdW50QnkgPSBjb3VudEJ5O1xuICAgIGxvZGFzaC5jcmVhdGUgPSBjcmVhdGU7XG4gICAgbG9kYXNoLmN1cnJ5ID0gY3Vycnk7XG4gICAgbG9kYXNoLmN1cnJ5UmlnaHQgPSBjdXJyeVJpZ2h0O1xuICAgIGxvZGFzaC5kZWJvdW5jZSA9IGRlYm91bmNlO1xuICAgIGxvZGFzaC5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuICAgIGxvZGFzaC5kZWZhdWx0c0RlZXAgPSBkZWZhdWx0c0RlZXA7XG4gICAgbG9kYXNoLmRlZmVyID0gZGVmZXI7XG4gICAgbG9kYXNoLmRlbGF5ID0gZGVsYXk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2UgPSBkaWZmZXJlbmNlO1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlQnkgPSBkaWZmZXJlbmNlQnk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2VXaXRoID0gZGlmZmVyZW5jZVdpdGg7XG4gICAgbG9kYXNoLmRyb3AgPSBkcm9wO1xuICAgIGxvZGFzaC5kcm9wUmlnaHQgPSBkcm9wUmlnaHQ7XG4gICAgbG9kYXNoLmRyb3BSaWdodFdoaWxlID0gZHJvcFJpZ2h0V2hpbGU7XG4gICAgbG9kYXNoLmRyb3BXaGlsZSA9IGRyb3BXaGlsZTtcbiAgICBsb2Rhc2guZmlsbCA9IGZpbGw7XG4gICAgbG9kYXNoLmZpbHRlciA9IGZpbHRlcjtcbiAgICBsb2Rhc2guZmxhdE1hcCA9IGZsYXRNYXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZWVwID0gZmxhdE1hcERlZXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZXB0aCA9IGZsYXRNYXBEZXB0aDtcbiAgICBsb2Rhc2guZmxhdHRlbiA9IGZsYXR0ZW47XG4gICAgbG9kYXNoLmZsYXR0ZW5EZWVwID0gZmxhdHRlbkRlZXA7XG4gICAgbG9kYXNoLmZsYXR0ZW5EZXB0aCA9IGZsYXR0ZW5EZXB0aDtcbiAgICBsb2Rhc2guZmxpcCA9IGZsaXA7XG4gICAgbG9kYXNoLmZsb3cgPSBmbG93O1xuICAgIGxvZGFzaC5mbG93UmlnaHQgPSBmbG93UmlnaHQ7XG4gICAgbG9kYXNoLmZyb21QYWlycyA9IGZyb21QYWlycztcbiAgICBsb2Rhc2guZnVuY3Rpb25zID0gZnVuY3Rpb25zO1xuICAgIGxvZGFzaC5mdW5jdGlvbnNJbiA9IGZ1bmN0aW9uc0luO1xuICAgIGxvZGFzaC5ncm91cEJ5ID0gZ3JvdXBCeTtcbiAgICBsb2Rhc2guaW5pdGlhbCA9IGluaXRpYWw7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbiA9IGludGVyc2VjdGlvbjtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uQnkgPSBpbnRlcnNlY3Rpb25CeTtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uV2l0aCA9IGludGVyc2VjdGlvbldpdGg7XG4gICAgbG9kYXNoLmludmVydCA9IGludmVydDtcbiAgICBsb2Rhc2guaW52ZXJ0QnkgPSBpbnZlcnRCeTtcbiAgICBsb2Rhc2guaW52b2tlTWFwID0gaW52b2tlTWFwO1xuICAgIGxvZGFzaC5pdGVyYXRlZSA9IGl0ZXJhdGVlO1xuICAgIGxvZGFzaC5rZXlCeSA9IGtleUJ5O1xuICAgIGxvZGFzaC5rZXlzID0ga2V5cztcbiAgICBsb2Rhc2gua2V5c0luID0ga2V5c0luO1xuICAgIGxvZGFzaC5tYXAgPSBtYXA7XG4gICAgbG9kYXNoLm1hcEtleXMgPSBtYXBLZXlzO1xuICAgIGxvZGFzaC5tYXBWYWx1ZXMgPSBtYXBWYWx1ZXM7XG4gICAgbG9kYXNoLm1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGxvZGFzaC5tYXRjaGVzUHJvcGVydHkgPSBtYXRjaGVzUHJvcGVydHk7XG4gICAgbG9kYXNoLm1lbW9pemUgPSBtZW1vaXplO1xuICAgIGxvZGFzaC5tZXJnZSA9IG1lcmdlO1xuICAgIGxvZGFzaC5tZXJnZVdpdGggPSBtZXJnZVdpdGg7XG4gICAgbG9kYXNoLm1ldGhvZCA9IG1ldGhvZDtcbiAgICBsb2Rhc2gubWV0aG9kT2YgPSBtZXRob2RPZjtcbiAgICBsb2Rhc2gubWl4aW4gPSBtaXhpbjtcbiAgICBsb2Rhc2gubmVnYXRlID0gbmVnYXRlO1xuICAgIGxvZGFzaC5udGhBcmcgPSBudGhBcmc7XG4gICAgbG9kYXNoLm9taXQgPSBvbWl0O1xuICAgIGxvZGFzaC5vbWl0QnkgPSBvbWl0Qnk7XG4gICAgbG9kYXNoLm9uY2UgPSBvbmNlO1xuICAgIGxvZGFzaC5vcmRlckJ5ID0gb3JkZXJCeTtcbiAgICBsb2Rhc2gub3ZlciA9IG92ZXI7XG4gICAgbG9kYXNoLm92ZXJBcmdzID0gb3ZlckFyZ3M7XG4gICAgbG9kYXNoLm92ZXJFdmVyeSA9IG92ZXJFdmVyeTtcbiAgICBsb2Rhc2gub3ZlclNvbWUgPSBvdmVyU29tZTtcbiAgICBsb2Rhc2gucGFydGlhbCA9IHBhcnRpYWw7XG4gICAgbG9kYXNoLnBhcnRpYWxSaWdodCA9IHBhcnRpYWxSaWdodDtcbiAgICBsb2Rhc2gucGFydGl0aW9uID0gcGFydGl0aW9uO1xuICAgIGxvZGFzaC5waWNrID0gcGljaztcbiAgICBsb2Rhc2gucGlja0J5ID0gcGlja0J5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eU9mID0gcHJvcGVydHlPZjtcbiAgICBsb2Rhc2gucHVsbCA9IHB1bGw7XG4gICAgbG9kYXNoLnB1bGxBbGwgPSBwdWxsQWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsQnkgPSBwdWxsQWxsQnk7XG4gICAgbG9kYXNoLnB1bGxBbGxXaXRoID0gcHVsbEFsbFdpdGg7XG4gICAgbG9kYXNoLnB1bGxBdCA9IHB1bGxBdDtcbiAgICBsb2Rhc2gucmFuZ2UgPSByYW5nZTtcbiAgICBsb2Rhc2gucmFuZ2VSaWdodCA9IHJhbmdlUmlnaHQ7XG4gICAgbG9kYXNoLnJlYXJnID0gcmVhcmc7XG4gICAgbG9kYXNoLnJlamVjdCA9IHJlamVjdDtcbiAgICBsb2Rhc2gucmVtb3ZlID0gcmVtb3ZlO1xuICAgIGxvZGFzaC5yZXN0ID0gcmVzdDtcbiAgICBsb2Rhc2gucmV2ZXJzZSA9IHJldmVyc2U7XG4gICAgbG9kYXNoLnNhbXBsZVNpemUgPSBzYW1wbGVTaXplO1xuICAgIGxvZGFzaC5zZXQgPSBzZXQ7XG4gICAgbG9kYXNoLnNldFdpdGggPSBzZXRXaXRoO1xuICAgIGxvZGFzaC5zaHVmZmxlID0gc2h1ZmZsZTtcbiAgICBsb2Rhc2guc2xpY2UgPSBzbGljZTtcbiAgICBsb2Rhc2guc29ydEJ5ID0gc29ydEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRVbmlxID0gc29ydGVkVW5pcTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcUJ5ID0gc29ydGVkVW5pcUJ5O1xuICAgIGxvZGFzaC5zcGxpdCA9IHNwbGl0O1xuICAgIGxvZGFzaC5zcHJlYWQgPSBzcHJlYWQ7XG4gICAgbG9kYXNoLnRhaWwgPSB0YWlsO1xuICAgIGxvZGFzaC50YWtlID0gdGFrZTtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0ID0gdGFrZVJpZ2h0O1xuICAgIGxvZGFzaC50YWtlUmlnaHRXaGlsZSA9IHRha2VSaWdodFdoaWxlO1xuICAgIGxvZGFzaC50YWtlV2hpbGUgPSB0YWtlV2hpbGU7XG4gICAgbG9kYXNoLnRhcCA9IHRhcDtcbiAgICBsb2Rhc2gudGhyb3R0bGUgPSB0aHJvdHRsZTtcbiAgICBsb2Rhc2gudGhydSA9IHRocnU7XG4gICAgbG9kYXNoLnRvQXJyYXkgPSB0b0FycmF5O1xuICAgIGxvZGFzaC50b1BhaXJzID0gdG9QYWlycztcbiAgICBsb2Rhc2gudG9QYWlyc0luID0gdG9QYWlyc0luO1xuICAgIGxvZGFzaC50b1BhdGggPSB0b1BhdGg7XG4gICAgbG9kYXNoLnRvUGxhaW5PYmplY3QgPSB0b1BsYWluT2JqZWN0O1xuICAgIGxvZGFzaC50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgbG9kYXNoLnVuYXJ5ID0gdW5hcnk7XG4gICAgbG9kYXNoLnVuaW9uID0gdW5pb247XG4gICAgbG9kYXNoLnVuaW9uQnkgPSB1bmlvbkJ5O1xuICAgIGxvZGFzaC51bmlvbldpdGggPSB1bmlvbldpdGg7XG4gICAgbG9kYXNoLnVuaXEgPSB1bmlxO1xuICAgIGxvZGFzaC51bmlxQnkgPSB1bmlxQnk7XG4gICAgbG9kYXNoLnVuaXFXaXRoID0gdW5pcVdpdGg7XG4gICAgbG9kYXNoLnVuc2V0ID0gdW5zZXQ7XG4gICAgbG9kYXNoLnVuemlwID0gdW56aXA7XG4gICAgbG9kYXNoLnVuemlwV2l0aCA9IHVuemlwV2l0aDtcbiAgICBsb2Rhc2gudXBkYXRlID0gdXBkYXRlO1xuICAgIGxvZGFzaC51cGRhdGVXaXRoID0gdXBkYXRlV2l0aDtcbiAgICBsb2Rhc2gudmFsdWVzID0gdmFsdWVzO1xuICAgIGxvZGFzaC52YWx1ZXNJbiA9IHZhbHVlc0luO1xuICAgIGxvZGFzaC53aXRob3V0ID0gd2l0aG91dDtcbiAgICBsb2Rhc2gud29yZHMgPSB3b3JkcztcbiAgICBsb2Rhc2gud3JhcCA9IHdyYXA7XG4gICAgbG9kYXNoLnhvciA9IHhvcjtcbiAgICBsb2Rhc2gueG9yQnkgPSB4b3JCeTtcbiAgICBsb2Rhc2gueG9yV2l0aCA9IHhvcldpdGg7XG4gICAgbG9kYXNoLnppcCA9IHppcDtcbiAgICBsb2Rhc2guemlwT2JqZWN0ID0gemlwT2JqZWN0O1xuICAgIGxvZGFzaC56aXBPYmplY3REZWVwID0gemlwT2JqZWN0RGVlcDtcbiAgICBsb2Rhc2guemlwV2l0aCA9IHppcFdpdGg7XG5cbiAgICAvLyBBZGQgYWxpYXNlcy5cbiAgICBsb2Rhc2guZW50cmllcyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLmVudHJpZXNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2guZXh0ZW5kID0gYXNzaWduSW47XG4gICAgbG9kYXNoLmV4dGVuZFdpdGggPSBhc3NpZ25JbldpdGg7XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgbWl4aW4obG9kYXNoLCBsb2Rhc2gpO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gdW53cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFkZCA9IGFkZDtcbiAgICBsb2Rhc2guYXR0ZW1wdCA9IGF0dGVtcHQ7XG4gICAgbG9kYXNoLmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbiAgICBsb2Rhc2guY2FwaXRhbGl6ZSA9IGNhcGl0YWxpemU7XG4gICAgbG9kYXNoLmNlaWwgPSBjZWlsO1xuICAgIGxvZGFzaC5jbGFtcCA9IGNsYW1wO1xuICAgIGxvZGFzaC5jbG9uZSA9IGNsb25lO1xuICAgIGxvZGFzaC5jbG9uZURlZXAgPSBjbG9uZURlZXA7XG4gICAgbG9kYXNoLmNsb25lRGVlcFdpdGggPSBjbG9uZURlZXBXaXRoO1xuICAgIGxvZGFzaC5jbG9uZVdpdGggPSBjbG9uZVdpdGg7XG4gICAgbG9kYXNoLmNvbmZvcm1zVG8gPSBjb25mb3Jtc1RvO1xuICAgIGxvZGFzaC5kZWJ1cnIgPSBkZWJ1cnI7XG4gICAgbG9kYXNoLmRlZmF1bHRUbyA9IGRlZmF1bHRUbztcbiAgICBsb2Rhc2guZGl2aWRlID0gZGl2aWRlO1xuICAgIGxvZGFzaC5lbmRzV2l0aCA9IGVuZHNXaXRoO1xuICAgIGxvZGFzaC5lcSA9IGVxO1xuICAgIGxvZGFzaC5lc2NhcGUgPSBlc2NhcGU7XG4gICAgbG9kYXNoLmVzY2FwZVJlZ0V4cCA9IGVzY2FwZVJlZ0V4cDtcbiAgICBsb2Rhc2guZXZlcnkgPSBldmVyeTtcbiAgICBsb2Rhc2guZmluZCA9IGZpbmQ7XG4gICAgbG9kYXNoLmZpbmRJbmRleCA9IGZpbmRJbmRleDtcbiAgICBsb2Rhc2guZmluZEtleSA9IGZpbmRLZXk7XG4gICAgbG9kYXNoLmZpbmRMYXN0ID0gZmluZExhc3Q7XG4gICAgbG9kYXNoLmZpbmRMYXN0SW5kZXggPSBmaW5kTGFzdEluZGV4O1xuICAgIGxvZGFzaC5maW5kTGFzdEtleSA9IGZpbmRMYXN0S2V5O1xuICAgIGxvZGFzaC5mbG9vciA9IGZsb29yO1xuICAgIGxvZGFzaC5mb3JFYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZm9yRWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5mb3JJbiA9IGZvckluO1xuICAgIGxvZGFzaC5mb3JJblJpZ2h0ID0gZm9ySW5SaWdodDtcbiAgICBsb2Rhc2guZm9yT3duID0gZm9yT3duO1xuICAgIGxvZGFzaC5mb3JPd25SaWdodCA9IGZvck93blJpZ2h0O1xuICAgIGxvZGFzaC5nZXQgPSBnZXQ7XG4gICAgbG9kYXNoLmd0ID0gZ3Q7XG4gICAgbG9kYXNoLmd0ZSA9IGd0ZTtcbiAgICBsb2Rhc2guaGFzID0gaGFzO1xuICAgIGxvZGFzaC5oYXNJbiA9IGhhc0luO1xuICAgIGxvZGFzaC5oZWFkID0gaGVhZDtcbiAgICBsb2Rhc2guaWRlbnRpdHkgPSBpZGVudGl0eTtcbiAgICBsb2Rhc2guaW5jbHVkZXMgPSBpbmNsdWRlcztcbiAgICBsb2Rhc2guaW5kZXhPZiA9IGluZGV4T2Y7XG4gICAgbG9kYXNoLmluUmFuZ2UgPSBpblJhbmdlO1xuICAgIGxvZGFzaC5pbnZva2UgPSBpbnZva2U7XG4gICAgbG9kYXNoLmlzQXJndW1lbnRzID0gaXNBcmd1bWVudHM7XG4gICAgbG9kYXNoLmlzQXJyYXkgPSBpc0FycmF5O1xuICAgIGxvZGFzaC5pc0FycmF5QnVmZmVyID0gaXNBcnJheUJ1ZmZlcjtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2UgPSBpc0FycmF5TGlrZTtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2VPYmplY3QgPSBpc0FycmF5TGlrZU9iamVjdDtcbiAgICBsb2Rhc2guaXNCb29sZWFuID0gaXNCb29sZWFuO1xuICAgIGxvZGFzaC5pc0J1ZmZlciA9IGlzQnVmZmVyO1xuICAgIGxvZGFzaC5pc0RhdGUgPSBpc0RhdGU7XG4gICAgbG9kYXNoLmlzRWxlbWVudCA9IGlzRWxlbWVudDtcbiAgICBsb2Rhc2guaXNFbXB0eSA9IGlzRW1wdHk7XG4gICAgbG9kYXNoLmlzRXF1YWwgPSBpc0VxdWFsO1xuICAgIGxvZGFzaC5pc0VxdWFsV2l0aCA9IGlzRXF1YWxXaXRoO1xuICAgIGxvZGFzaC5pc0Vycm9yID0gaXNFcnJvcjtcbiAgICBsb2Rhc2guaXNGaW5pdGUgPSBpc0Zpbml0ZTtcbiAgICBsb2Rhc2guaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG4gICAgbG9kYXNoLmlzSW50ZWdlciA9IGlzSW50ZWdlcjtcbiAgICBsb2Rhc2guaXNMZW5ndGggPSBpc0xlbmd0aDtcbiAgICBsb2Rhc2guaXNNYXAgPSBpc01hcDtcbiAgICBsb2Rhc2guaXNNYXRjaCA9IGlzTWF0Y2g7XG4gICAgbG9kYXNoLmlzTWF0Y2hXaXRoID0gaXNNYXRjaFdpdGg7XG4gICAgbG9kYXNoLmlzTmFOID0gaXNOYU47XG4gICAgbG9kYXNoLmlzTmF0aXZlID0gaXNOYXRpdmU7XG4gICAgbG9kYXNoLmlzTmlsID0gaXNOaWw7XG4gICAgbG9kYXNoLmlzTnVsbCA9IGlzTnVsbDtcbiAgICBsb2Rhc2guaXNOdW1iZXIgPSBpc051bWJlcjtcbiAgICBsb2Rhc2guaXNPYmplY3QgPSBpc09iamVjdDtcbiAgICBsb2Rhc2guaXNPYmplY3RMaWtlID0gaXNPYmplY3RMaWtlO1xuICAgIGxvZGFzaC5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdDtcbiAgICBsb2Rhc2guaXNSZWdFeHAgPSBpc1JlZ0V4cDtcbiAgICBsb2Rhc2guaXNTYWZlSW50ZWdlciA9IGlzU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLmlzU2V0ID0gaXNTZXQ7XG4gICAgbG9kYXNoLmlzU3RyaW5nID0gaXNTdHJpbmc7XG4gICAgbG9kYXNoLmlzU3ltYm9sID0gaXNTeW1ib2w7XG4gICAgbG9kYXNoLmlzVHlwZWRBcnJheSA9IGlzVHlwZWRBcnJheTtcbiAgICBsb2Rhc2guaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcbiAgICBsb2Rhc2guaXNXZWFrTWFwID0gaXNXZWFrTWFwO1xuICAgIGxvZGFzaC5pc1dlYWtTZXQgPSBpc1dlYWtTZXQ7XG4gICAgbG9kYXNoLmpvaW4gPSBqb2luO1xuICAgIGxvZGFzaC5rZWJhYkNhc2UgPSBrZWJhYkNhc2U7XG4gICAgbG9kYXNoLmxhc3QgPSBsYXN0O1xuICAgIGxvZGFzaC5sYXN0SW5kZXhPZiA9IGxhc3RJbmRleE9mO1xuICAgIGxvZGFzaC5sb3dlckNhc2UgPSBsb3dlckNhc2U7XG4gICAgbG9kYXNoLmxvd2VyRmlyc3QgPSBsb3dlckZpcnN0O1xuICAgIGxvZGFzaC5sdCA9IGx0O1xuICAgIGxvZGFzaC5sdGUgPSBsdGU7XG4gICAgbG9kYXNoLm1heCA9IG1heDtcbiAgICBsb2Rhc2gubWF4QnkgPSBtYXhCeTtcbiAgICBsb2Rhc2gubWVhbiA9IG1lYW47XG4gICAgbG9kYXNoLm1lYW5CeSA9IG1lYW5CeTtcbiAgICBsb2Rhc2gubWluID0gbWluO1xuICAgIGxvZGFzaC5taW5CeSA9IG1pbkJ5O1xuICAgIGxvZGFzaC5zdHViQXJyYXkgPSBzdHViQXJyYXk7XG4gICAgbG9kYXNoLnN0dWJGYWxzZSA9IHN0dWJGYWxzZTtcbiAgICBsb2Rhc2guc3R1Yk9iamVjdCA9IHN0dWJPYmplY3Q7XG4gICAgbG9kYXNoLnN0dWJTdHJpbmcgPSBzdHViU3RyaW5nO1xuICAgIGxvZGFzaC5zdHViVHJ1ZSA9IHN0dWJUcnVlO1xuICAgIGxvZGFzaC5tdWx0aXBseSA9IG11bHRpcGx5O1xuICAgIGxvZGFzaC5udGggPSBudGg7XG4gICAgbG9kYXNoLm5vQ29uZmxpY3QgPSBub0NvbmZsaWN0O1xuICAgIGxvZGFzaC5ub29wID0gbm9vcDtcbiAgICBsb2Rhc2gubm93ID0gbm93O1xuICAgIGxvZGFzaC5wYWQgPSBwYWQ7XG4gICAgbG9kYXNoLnBhZEVuZCA9IHBhZEVuZDtcbiAgICBsb2Rhc2gucGFkU3RhcnQgPSBwYWRTdGFydDtcbiAgICBsb2Rhc2gucGFyc2VJbnQgPSBwYXJzZUludDtcbiAgICBsb2Rhc2gucmFuZG9tID0gcmFuZG9tO1xuICAgIGxvZGFzaC5yZWR1Y2UgPSByZWR1Y2U7XG4gICAgbG9kYXNoLnJlZHVjZVJpZ2h0ID0gcmVkdWNlUmlnaHQ7XG4gICAgbG9kYXNoLnJlcGVhdCA9IHJlcGVhdDtcbiAgICBsb2Rhc2gucmVwbGFjZSA9IHJlcGxhY2U7XG4gICAgbG9kYXNoLnJlc3VsdCA9IHJlc3VsdDtcbiAgICBsb2Rhc2gucm91bmQgPSByb3VuZDtcbiAgICBsb2Rhc2gucnVuSW5Db250ZXh0ID0gcnVuSW5Db250ZXh0O1xuICAgIGxvZGFzaC5zYW1wbGUgPSBzYW1wbGU7XG4gICAgbG9kYXNoLnNpemUgPSBzaXplO1xuICAgIGxvZGFzaC5zbmFrZUNhc2UgPSBzbmFrZUNhc2U7XG4gICAgbG9kYXNoLnNvbWUgPSBzb21lO1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleCA9IHNvcnRlZEluZGV4O1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleEJ5ID0gc29ydGVkSW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhPZiA9IHNvcnRlZEluZGV4T2Y7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleCA9IHNvcnRlZExhc3RJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4QnkgPSBzb3J0ZWRMYXN0SW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4T2YgPSBzb3J0ZWRMYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2guc3RhcnRDYXNlID0gc3RhcnRDYXNlO1xuICAgIGxvZGFzaC5zdGFydHNXaXRoID0gc3RhcnRzV2l0aDtcbiAgICBsb2Rhc2guc3VidHJhY3QgPSBzdWJ0cmFjdDtcbiAgICBsb2Rhc2guc3VtID0gc3VtO1xuICAgIGxvZGFzaC5zdW1CeSA9IHN1bUJ5O1xuICAgIGxvZGFzaC50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgIGxvZGFzaC50aW1lcyA9IHRpbWVzO1xuICAgIGxvZGFzaC50b0Zpbml0ZSA9IHRvRmluaXRlO1xuICAgIGxvZGFzaC50b0ludGVnZXIgPSB0b0ludGVnZXI7XG4gICAgbG9kYXNoLnRvTGVuZ3RoID0gdG9MZW5ndGg7XG4gICAgbG9kYXNoLnRvTG93ZXIgPSB0b0xvd2VyO1xuICAgIGxvZGFzaC50b051bWJlciA9IHRvTnVtYmVyO1xuICAgIGxvZGFzaC50b1NhZmVJbnRlZ2VyID0gdG9TYWZlSW50ZWdlcjtcbiAgICBsb2Rhc2gudG9TdHJpbmcgPSB0b1N0cmluZztcbiAgICBsb2Rhc2gudG9VcHBlciA9IHRvVXBwZXI7XG4gICAgbG9kYXNoLnRyaW0gPSB0cmltO1xuICAgIGxvZGFzaC50cmltRW5kID0gdHJpbUVuZDtcbiAgICBsb2Rhc2gudHJpbVN0YXJ0ID0gdHJpbVN0YXJ0O1xuICAgIGxvZGFzaC50cnVuY2F0ZSA9IHRydW5jYXRlO1xuICAgIGxvZGFzaC51bmVzY2FwZSA9IHVuZXNjYXBlO1xuICAgIGxvZGFzaC51bmlxdWVJZCA9IHVuaXF1ZUlkO1xuICAgIGxvZGFzaC51cHBlckNhc2UgPSB1cHBlckNhc2U7XG4gICAgbG9kYXNoLnVwcGVyRmlyc3QgPSB1cHBlckZpcnN0O1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5lYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmZpcnN0ID0gaGVhZDtcblxuICAgIG1peGluKGxvZGFzaCwgKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHt9O1xuICAgICAgYmFzZUZvck93bihsb2Rhc2gsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaC5wcm90b3R5cGUsIG1ldGhvZE5hbWUpKSB7XG4gICAgICAgICAgc291cmNlW21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc291cmNlO1xuICAgIH0oKSksIHsgJ2NoYWluJzogZmFsc2UgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGxvZGFzaC5WRVJTSU9OID0gVkVSU0lPTjtcblxuICAgIC8vIEFzc2lnbiBkZWZhdWx0IHBsYWNlaG9sZGVycy5cbiAgICBhcnJheUVhY2goWydiaW5kJywgJ2JpbmRLZXknLCAnY3VycnknLCAnY3VycnlSaWdodCcsICdwYXJ0aWFsJywgJ3BhcnRpYWxSaWdodCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICBsb2Rhc2hbbWV0aG9kTmFtZV0ucGxhY2Vob2xkZXIgPSBsb2Rhc2g7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5kcm9wYCBhbmQgYF8udGFrZWAgdmFyaWFudHMuXG4gICAgYXJyYXlFYWNoKFsnZHJvcCcsICd0YWtlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIG4gPSBuID09PSB1bmRlZmluZWQgPyAxIDogbmF0aXZlTWF4KHRvSW50ZWdlcihuKSwgMCk7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9ICh0aGlzLl9fZmlsdGVyZWRfXyAmJiAhaW5kZXgpXG4gICAgICAgICAgPyBuZXcgTGF6eVdyYXBwZXIodGhpcylcbiAgICAgICAgICA6IHRoaXMuY2xvbmUoKTtcblxuICAgICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXykge1xuICAgICAgICAgIHJlc3VsdC5fX3Rha2VDb3VudF9fID0gbmF0aXZlTWluKG4sIHJlc3VsdC5fX3Rha2VDb3VudF9fKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQuX192aWV3c19fLnB1c2goe1xuICAgICAgICAgICAgJ3NpemUnOiBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCksXG4gICAgICAgICAgICAndHlwZSc6IG1ldGhvZE5hbWUgKyAocmVzdWx0Ll9fZGlyX18gPCAwID8gJ1JpZ2h0JyA6ICcnKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZSArICdSaWdodCddID0gZnVuY3Rpb24obikge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKClbbWV0aG9kTmFtZV0obikucmV2ZXJzZSgpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgdGhhdCBhY2NlcHQgYW4gYGl0ZXJhdGVlYCB2YWx1ZS5cbiAgICBhcnJheUVhY2goWydmaWx0ZXInLCAnbWFwJywgJ3Rha2VXaGlsZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIHR5cGUgPSBpbmRleCArIDEsXG4gICAgICAgICAgaXNGaWx0ZXIgPSB0eXBlID09IExBWllfRklMVEVSX0ZMQUcgfHwgdHlwZSA9PSBMQVpZX1dISUxFX0ZMQUc7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fLnB1c2goe1xuICAgICAgICAgICdpdGVyYXRlZSc6IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSxcbiAgICAgICAgICAndHlwZSc6IHR5cGVcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSByZXN1bHQuX19maWx0ZXJlZF9fIHx8IGlzRmlsdGVyO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmhlYWRgIGFuZCBgXy5sYXN0YC5cbiAgICBhcnJheUVhY2goWydoZWFkJywgJ2xhc3QnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0YWtlTmFtZSA9ICd0YWtlJyArIChpbmRleCA/ICdSaWdodCcgOiAnJyk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpc1t0YWtlTmFtZV0oMSkudmFsdWUoKVswXTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5pbml0aWFsYCBhbmQgYF8udGFpbGAuXG4gICAgYXJyYXlFYWNoKFsnaW5pdGlhbCcsICd0YWlsJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgZHJvcE5hbWUgPSAnZHJvcCcgKyAoaW5kZXggPyAnJyA6ICdSaWdodCcpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19maWx0ZXJlZF9fID8gbmV3IExhenlXcmFwcGVyKHRoaXMpIDogdGhpc1tkcm9wTmFtZV0oMSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbXBhY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihpZGVudGl0eSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIocHJlZGljYXRlKS5oZWFkKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kTGFzdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLmZpbmQocHJlZGljYXRlKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKHBhdGgsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgcGF0aCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2UodmFsdWUsIHBhdGgsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIobmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcztcbiAgICAgIGlmIChyZXN1bHQuX19maWx0ZXJlZF9fICYmIChzdGFydCA+IDAgfHwgZW5kIDwgMCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcihyZXN1bHQpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudGFrZVJpZ2h0KC1zdGFydCk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0KSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5kcm9wKHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSB0b0ludGVnZXIoZW5kKTtcbiAgICAgICAgcmVzdWx0ID0gZW5kIDwgMCA/IHJlc3VsdC5kcm9wUmlnaHQoLWVuZCkgOiByZXN1bHQudGFrZShlbmQgLSBzdGFydCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudGFrZVJpZ2h0V2hpbGUgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS50YWtlV2hpbGUocHJlZGljYXRlKS5yZXZlcnNlKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50YWtlKE1BWF9BUlJBWV9MRU5HVEgpO1xuICAgIH07XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGNoZWNrSXRlcmF0ZWUgPSAvXig/OmZpbHRlcnxmaW5kfG1hcHxyZWplY3QpfFdoaWxlJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBpc1Rha2VyID0gL14oPzpoZWFkfGxhc3QpJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBsb2Rhc2hGdW5jID0gbG9kYXNoW2lzVGFrZXIgPyAoJ3Rha2UnICsgKG1ldGhvZE5hbWUgPT0gJ2xhc3QnID8gJ1JpZ2h0JyA6ICcnKSkgOiBtZXRob2ROYW1lXSxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSBpc1Rha2VyIHx8IC9eZmluZC8udGVzdChtZXRob2ROYW1lKTtcblxuICAgICAgaWYgKCFsb2Rhc2hGdW5jKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICAgIGFyZ3MgPSBpc1Rha2VyID8gWzFdIDogYXJndW1lbnRzLFxuICAgICAgICAgICAgaXNMYXp5ID0gdmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcixcbiAgICAgICAgICAgIGl0ZXJhdGVlID0gYXJnc1swXSxcbiAgICAgICAgICAgIHVzZUxhenkgPSBpc0xhenkgfHwgaXNBcnJheSh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIGludGVyY2VwdG9yID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoRnVuYy5hcHBseShsb2Rhc2gsIGFycmF5UHVzaChbdmFsdWVdLCBhcmdzKSk7XG4gICAgICAgICAgcmV0dXJuIChpc1Rha2VyICYmIGNoYWluQWxsKSA/IHJlc3VsdFswXSA6IHJlc3VsdDtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodXNlTGF6eSAmJiBjaGVja0l0ZXJhdGVlICYmIHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nICYmIGl0ZXJhdGVlLmxlbmd0aCAhPSAxKSB7XG4gICAgICAgICAgLy8gQXZvaWQgbGF6eSB1c2UgaWYgdGhlIGl0ZXJhdGVlIGhhcyBhIFwibGVuZ3RoXCIgdmFsdWUgb3RoZXIgdGhhbiBgMWAuXG4gICAgICAgICAgaXNMYXp5ID0gdXNlTGF6eSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fLFxuICAgICAgICAgICAgaXNIeWJyaWQgPSAhIXRoaXMuX19hY3Rpb25zX18ubGVuZ3RoLFxuICAgICAgICAgICAgaXNVbndyYXBwZWQgPSByZXRVbndyYXBwZWQgJiYgIWNoYWluQWxsLFxuICAgICAgICAgICAgb25seUxhenkgPSBpc0xhenkgJiYgIWlzSHlicmlkO1xuXG4gICAgICAgIGlmICghcmV0VW53cmFwcGVkICYmIHVzZUxhenkpIHtcbiAgICAgICAgICB2YWx1ZSA9IG9ubHlMYXp5ID8gdmFsdWUgOiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodmFsdWUsIGFyZ3MpO1xuICAgICAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXy5wdXNoKHsgJ2Z1bmMnOiB0aHJ1LCAnYXJncyc6IFtpbnRlcmNlcHRvcl0sICd0aGlzQXJnJzogdW5kZWZpbmVkIH0pO1xuICAgICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcihyZXN1bHQsIGNoYWluQWxsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNVbndyYXBwZWQgJiYgb25seUxhenkpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgICByZXR1cm4gaXNVbndyYXBwZWQgPyAoaXNUYWtlciA/IHJlc3VsdC52YWx1ZSgpWzBdIDogcmVzdWx0LnZhbHVlKCkpIDogcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgQXJyYXlgIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIGFycmF5RWFjaChbJ3BvcCcsICdwdXNoJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBhcnJheVByb3RvW21ldGhvZE5hbWVdLFxuICAgICAgICAgIGNoYWluTmFtZSA9IC9eKD86cHVzaHxzb3J0fHVuc2hpZnQpJC8udGVzdChtZXRob2ROYW1lKSA/ICd0YXAnIDogJ3RocnUnLFxuICAgICAgICAgIHJldFVud3JhcHBlZCA9IC9eKD86cG9wfHNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGlmIChyZXRVbndyYXBwZWQgJiYgIXRoaXMuX19jaGFpbl9fKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZSgpO1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNbY2hhaW5OYW1lXShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIE1hcCBtaW5pZmllZCBtZXRob2QgbmFtZXMgdG8gdGhlaXIgcmVhbCBuYW1lcy5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGxvZGFzaEZ1bmMgPSBsb2Rhc2hbbWV0aG9kTmFtZV07XG4gICAgICBpZiAobG9kYXNoRnVuYykge1xuICAgICAgICB2YXIga2V5ID0gbG9kYXNoRnVuYy5uYW1lICsgJyc7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChyZWFsTmFtZXMsIGtleSkpIHtcbiAgICAgICAgICByZWFsTmFtZXNba2V5XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJlYWxOYW1lc1trZXldLnB1c2goeyAnbmFtZSc6IG1ldGhvZE5hbWUsICdmdW5jJzogbG9kYXNoRnVuYyB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlYWxOYW1lc1tjcmVhdGVIeWJyaWQodW5kZWZpbmVkLCBXUkFQX0JJTkRfS0VZX0ZMQUcpLm5hbWVdID0gW3tcbiAgICAgICduYW1lJzogJ3dyYXBwZXInLFxuICAgICAgJ2Z1bmMnOiB1bmRlZmluZWRcbiAgICB9XTtcblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMYXp5V3JhcHBlcmAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNsb25lID0gbGF6eUNsb25lO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZXZlcnNlID0gbGF6eVJldmVyc2U7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnZhbHVlID0gbGF6eVZhbHVlO1xuXG4gICAgLy8gQWRkIGNoYWluIHNlcXVlbmNlIG1ldGhvZHMgdG8gdGhlIGBsb2Rhc2hgIHdyYXBwZXIuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5hdCA9IHdyYXBwZXJBdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNoYWluID0gd3JhcHBlckNoYWluO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY29tbWl0ID0gd3JhcHBlckNvbW1pdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLm5leHQgPSB3cmFwcGVyTmV4dDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnBsYW50ID0gd3JhcHBlclBsYW50O1xuICAgIGxvZGFzaC5wcm90b3R5cGUucmV2ZXJzZSA9IHdyYXBwZXJSZXZlcnNlO1xuICAgIGxvZGFzaC5wcm90b3R5cGUudG9KU09OID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZU9mID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZSA9IHdyYXBwZXJWYWx1ZTtcblxuICAgIC8vIEFkZCBsYXp5IGFsaWFzZXMuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5maXJzdCA9IGxvZGFzaC5wcm90b3R5cGUuaGVhZDtcblxuICAgIGlmIChzeW1JdGVyYXRvcikge1xuICAgICAgbG9kYXNoLnByb3RvdHlwZVtzeW1JdGVyYXRvcl0gPSB3cmFwcGVyVG9JdGVyYXRvcjtcbiAgICB9XG4gICAgcmV0dXJuIGxvZGFzaDtcbiAgfSk7XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLy8gRXhwb3J0IGxvZGFzaC5cbiAgdmFyIF8gPSBydW5JbkNvbnRleHQoKTtcblxuICAvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBjb25kaXRpb24gcGF0dGVybnMgbGlrZTpcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gRXhwb3NlIExvZGFzaCBvbiB0aGUgZ2xvYmFsIG9iamVjdCB0byBwcmV2ZW50IGVycm9ycyB3aGVuIExvZGFzaCBpc1xuICAgIC8vIGxvYWRlZCBieSBhIHNjcmlwdCB0YWcgaW4gdGhlIHByZXNlbmNlIG9mIGFuIEFNRCBsb2FkZXIuXG4gICAgLy8gU2VlIGh0dHA6Ly9yZXF1aXJlanMub3JnL2RvY3MvZXJyb3JzLmh0bWwjbWlzbWF0Y2ggZm9yIG1vcmUgZGV0YWlscy5cbiAgICAvLyBVc2UgYF8ubm9Db25mbGljdGAgdG8gcmVtb3ZlIExvZGFzaCBmcm9tIHRoZSBnbG9iYWwgb2JqZWN0LlxuICAgIHJvb3QuXyA9IF87XG5cbiAgICAvLyBEZWZpbmUgYXMgYW4gYW5vbnltb3VzIG1vZHVsZSBzbywgdGhyb3VnaCBwYXRoIG1hcHBpbmcsIGl0IGNhbiBiZVxuICAgIC8vIHJlZmVyZW5jZWQgYXMgdGhlIFwidW5kZXJzY29yZVwiIG1vZHVsZS5cbiAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXztcbiAgICB9KTtcbiAgfVxuICAvLyBDaGVjayBmb3IgYGV4cG9ydHNgIGFmdGVyIGBkZWZpbmVgIGluIGNhc2UgYSBidWlsZCBvcHRpbWl6ZXIgYWRkcyBpdC5cbiAgZWxzZSBpZiAoZnJlZU1vZHVsZSkge1xuICAgIC8vIEV4cG9ydCBmb3IgTm9kZS5qcy5cbiAgICAoZnJlZU1vZHVsZS5leHBvcnRzID0gXykuXyA9IF87XG4gICAgLy8gRXhwb3J0IGZvciBDb21tb25KUyBzdXBwb3J0LlxuICAgIGZyZWVFeHBvcnRzLl8gPSBfO1xuICB9XG4gIGVsc2Uge1xuICAgIC8vIEV4cG9ydCB0byB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuICB9XG59LmNhbGwodGhpcykpO1xuIiwiaW1wb3J0IHsgaW5qZWN0YWJsZSB9IGZyb20gJ3RzeXJpbmdlJztcclxuaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tICdsdXhvbic7XHJcbmltcG9ydCB7IERhdGVUaW1lUHJvdmlkZXIgfSBmcm9tICcuL0RhdGVUaW1lUHJvdmlkZXInO1xyXG5cclxuQGluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRGF0ZVRpbWVGaWx0ZXJzIHtcclxuXHJcblx0Y29uc3RydWN0b3IocHJpdmF0ZSBfZGF0ZXRpbWU6IERhdGVUaW1lUHJvdmlkZXIpIHtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBmb3JtYXQoaW5wdXQ6IERhdGVUaW1lLCBmb3JtYXQ6IHN0cmluZyk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gdGhpcy5fZGF0ZXRpbWUuYXBwbHkoaW5wdXQpLnRvRm9ybWF0KGZvcm1hdCk7XHJcblx0fVxyXG59XHJcbiIsImltcG9ydCAqIGFzIG5qayBmcm9tICdudW5qdWNrcyc7XHJcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcclxuaW1wb3J0IHsgSVRlbXBsZVByb3ZpZGVyIH0gZnJvbSAnLi9wcm92aWRlcnMvSVRlbXBsZVByb3ZpZGVyJztcclxuaW1wb3J0IHsgVGVtcGxlQ29udGV4dCB9IGZyb20gJy4vcHJvdmlkZXJzL1RlbXBsZUNvbnRleHQnO1xyXG5pbXBvcnQgeyBpbmplY3RhYmxlLCBpbmplY3RBbGwgfSBmcm9tICd0c3lyaW5nZSc7XHJcbmltcG9ydCB7IFN5bWJvbHMgfSBmcm9tICcuL1N5bWJvbHMnO1xyXG5pbXBvcnQgeyBEYXRlVGltZSB9IGZyb20gJ2x1eG9uJztcclxuaW1wb3J0IHsgRGF0ZVRpbWVGaWx0ZXJzIH0gZnJvbSAnLi9wcm92aWRlcnMvRGF0ZVRpbWVGaWx0ZXJzJztcclxuaW1wb3J0IHsgRU9MIH0gZnJvbSAnb3MnO1xyXG5pbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAndXRpbCc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElBZ2dyZWdhdGVkQ29udGV4dCB7XHJcblx0W25hbWU6IHN0cmluZ106IFRlbXBsZUNvbnRleHQ8YW55PjtcclxufVxyXG5cclxuQGluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgVGVtcGxlU2VydmljZSB7XHJcblx0cHJpdmF0ZSBfZW52OiBuamsuRW52aXJvbm1lbnQ7XHJcblx0Y29uc3RydWN0b3IocHJpdmF0ZSBfZGF0ZVRpbWVGaWx0ZXJzOiBEYXRlVGltZUZpbHRlcnMsIEBpbmplY3RBbGwoU3ltYm9scy5JVGVtcGxlUHJvdmlkZXIpIHByaXZhdGUgX3Byb3ZpZGVyczogSVRlbXBsZVByb3ZpZGVyPGFueT5bXSkge1xyXG5cdFx0dGhpcy5fZW52ID0gbmV3IG5qay5FbnZpcm9ubWVudCgpO1xyXG5cdFx0dGhpcy5pbnN0YWxsRmlsdGVycygpO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBpbnN0YWxsRmlsdGVycygpIHtcclxuXHRcdFxyXG5cdFx0Ly8gc2VlbXMgbGlrZSB0aGlzIHdvbid0IHByb3Blcmx5IGNhcHR1cmUgdGhlIHZhcmlhYmxlXHJcblx0XHQvLyB0aGlzLl9lbnYuYWRkRmlsdGVyKCdkYXRlRm9ybWF0JywgdGhpcy5fZGF0ZVRpbWVGaWx0ZXJzLmZvcm1hdCk7XHJcblxyXG5cdFx0dGhpcy5fZW52LmFkZEZpbHRlcignZGF0ZUZvcm1hdCcsIChpbnB1dDogRGF0ZVRpbWUsIGZvcm1hdDogc3RyaW5nKSA9PiB7XHJcblx0XHRcdHJldHVybiB0aGlzLl9kYXRlVGltZUZpbHRlcnMuZm9ybWF0KGlucHV0LCBmb3JtYXQpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0dGhpcy5fZW52LmFkZEZpbHRlcignaW5zcGVjdCcsIChpbnB1dDogYW55LCBkZXB0aDogbnVsbCkgPT4ge1xyXG5cdFx0XHRyZXR1cm4gaW5zcGVjdChpbnB1dCwgdW5kZWZpbmVkLCBkZXB0aCk7XHJcblx0XHR9KVxyXG5cdH1cclxuXHJcblx0YXN5bmMgcmVzb2x2ZSgpOiBQcm9taXNlPElBZ2dyZWdhdGVkQ29udGV4dD4ge1xyXG5cdFx0Y29uc3QgY29udGV4dHMgPSAoYXdhaXQgUHJvbWlzZS5hbGwodGhpcy5fcHJvdmlkZXJzXHJcblx0XHRcdC5tYXAoYXN5bmMgcHJvdmlkZXIgPT4gKHsgbmFtZTogcHJvdmlkZXIubmFtZSwgdmFsdWU6IGF3YWl0IHByb3ZpZGVyLnByb3ZpZGUoKSB9KSkpKVxyXG5cdFx0XHQuZmlsdGVyKGMgPT4gYy52YWx1ZSAhPSBudWxsKVxyXG5cdFx0XHQubWFwKGMgPT4gKHsgW2MubmFtZV06IGMudmFsdWUgfSkpO1xyXG5cdFx0cmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIC4uLmNvbnRleHRzKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIHJlbmRlcih0ZW1wbGF0ZTogc3RyaW5nLCBhZ2dyZWdhdGVkOiBJQWdncmVnYXRlZENvbnRleHQgfCBudWxsID0gbnVsbCk6IFByb21pc2U8c3RyaW5nPiB7XHJcblx0XHRhZ2dyZWdhdGVkID8/PSBhd2FpdCB0aGlzLnJlc29sdmUoKTtcclxuXHRcdC8vIG9ubHkgdGFrZSB0aGUgY29udGV4dCBmcm9tIGVhY2ggVGVtcGxlQ29udGV4dCBmb3IgbnVuanVja3NcclxuXHRcdGNvbnN0IGNvbnRleHQgPSBfLm1hcFZhbHVlcyhhZ2dyZWdhdGVkLCBjID0+IGMuY29udGV4dCk7XHJcblx0XHRyZXR1cm4gdGhpcy5fZW52LnJlbmRlclN0cmluZyh0ZW1wbGF0ZSwgY29udGV4dCk7XHJcblx0fVxyXG5cclxuXHRhc3luYyByZW5kZXJEb2MoKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuXHRcdFxyXG5cdFx0Y29uc3QgZG9jID0gKGF3YWl0IFByb21pc2UuYWxsKHRoaXMuX3Byb3ZpZGVyc1xyXG5cdFx0XHQubWFwKGFzeW5jIHByb3ZpZGVyID0+IHtcclxuXHRcdFx0XHRjb25zdCBkb2MgPSBhd2FpdCBwcm92aWRlci5kb2NzKCk7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuX2Vudi5yZW5kZXJTdHJpbmcoZG9jLnRlbXBsYXRlLCAoe1xyXG5cdFx0XHRcdFx0W3Byb3ZpZGVyLm5hbWVdOiBkb2MuY29udGV4dC5jb250ZXh0XHJcblx0XHRcdFx0fSkpO1xyXG5cdFx0XHR9KSkpXHJcblx0XHRcdC5qb2luKGAke0VPTH0tLS0ke0VPTH1gKTtcclxuXHJcblx0XHRyZXR1cm4gZG9jO1xyXG5cdH1cclxufSIsImltcG9ydCB7IGRlZmluZUluamVjdGlvblRva2VuTWV0YWRhdGEgfSBmcm9tIFwiLi4vcmVmbGVjdGlvbi1oZWxwZXJzXCI7XG5mdW5jdGlvbiBpbmplY3RBbGwodG9rZW4pIHtcbiAgICB2YXIgZGF0YSA9IHsgdG9rZW46IHRva2VuLCBtdWx0aXBsZTogdHJ1ZSB9O1xuICAgIHJldHVybiBkZWZpbmVJbmplY3Rpb25Ub2tlbk1ldGFkYXRhKGRhdGEpO1xufVxuZXhwb3J0IGRlZmF1bHQgaW5qZWN0QWxsO1xuIiwiZXhwb3J0IGNvbnN0IERFRkFVTFRfU0VUVElOR1M6IFRlbXBsZVNldHRpbmdzID0ge1xyXG4gICAgdGVtcGxhdGVzRGlyOiAnL190ZW1wbGF0ZXMnLFxyXG4gICAgemV0dGVsOiB7XHJcbiAgICAgICAgcmVnZXg6ICcnXHJcbiAgICB9LFxyXG4gICAgZGF0ZXRpbWU6IHtcclxuICAgICAgICBsb2NhbGU6ICcnLFxyXG4gICAgICAgIHRpbWV6b25lOiAnJ1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRlbXBsZVNldHRpbmdzIHtcclxuICAgIHRlbXBsYXRlc0Rpcjogc3RyaW5nO1xyXG4gICAgemV0dGVsOiB7XHJcbiAgICAgICAgcmVnZXg6IHN0cmluZ1xyXG4gICAgfTtcclxuICAgIGRhdGV0aW1lOiB7XHJcbiAgICAgICAgbG9jYWxlOiBzdHJpbmcsXHJcbiAgICAgICAgdGltZXpvbmU6IHN0cmluZ1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgUGx1Z2luXzIgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IFN5bWJvbHMgfSBmcm9tICdzcmMvU3ltYm9scyc7XHJcbmltcG9ydCB7IGluamVjdCwgaW5qZWN0YWJsZSB9IGZyb20gJ3RzeXJpbmdlJztcclxuaW1wb3J0IHsgVGVtcGxlU2V0dGluZ3MsIERFRkFVTFRfU0VUVElOR1MgfSBmcm9tICcuL1RlbXBsZVNldHRpbmdzJztcclxuXHJcbkBpbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFRlbXBsZVNldHRpbmdzUHJvdmlkZXIge1xyXG4gICAgcHVibGljIHZhbHVlOiBUZW1wbGVTZXR0aW5ncztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihAaW5qZWN0KFN5bWJvbHMuUGx1Z2luKSBwcml2YXRlIF9wbHVnaW46IFBsdWdpbl8yKSB7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIGxvYWQoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IE9iamVjdC5hc3NpZ24oREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5fcGx1Z2luLmxvYWREYXRhKCkpO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyBzYXZlKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuX3BsdWdpbi5zYXZlRGF0YSh0aGlzLnZhbHVlKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBEYXRlVGltZSB9IGZyb20gJ2x1eG9uJztcclxuaW1wb3J0IHsgQXBwLCBQbHVnaW5TZXR0aW5nVGFiLCBQbHVnaW5fMiwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgU3ltYm9scyB9IGZyb20gJ3NyYy9TeW1ib2xzJztcclxuaW1wb3J0IHsgaW5qZWN0LCBpbmplY3RhYmxlIH0gZnJvbSAndHN5cmluZ2UnO1xyXG5pbXBvcnQgeyBUZW1wbGVTZXR0aW5nc1Byb3ZpZGVyIH0gZnJvbSAnLi9UZW1wbGVTZXR0aW5nc1Byb3ZpZGVyJztcclxuXHJcbkBpbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFRlbXBsZVNldHRpbmdzVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBAaW5qZWN0KFN5bWJvbHMuUGx1Z2luKSBwcml2YXRlIF9wbHVnaW46IFBsdWdpbl8yLCBwcml2YXRlIF9zZXR0aW5nczogVGVtcGxlU2V0dGluZ3NQcm92aWRlcikge1xyXG5cdFx0c3VwZXIoYXBwLCBfcGx1Z2luKTtcclxuXHR9XHJcblxyXG5cdGRpc3BsYXkoKTogdm9pZCB7XHJcblx0XHRjb25zdCB7IGNvbnRhaW5lckVsOiBlIH0gPSB0aGlzO1xyXG5cclxuXHRcdGUuZW1wdHkoKTtcclxuXHJcblx0XHRlLmNyZWF0ZUVsKCdoMScsIHsgdGV4dDogdGhpcy5fcGx1Z2luLm1hbmlmZXN0LmlkIH0pO1xyXG5cdFx0ZS5jcmVhdGVFbCgncCcsIHsgdGV4dDogdGhpcy5fcGx1Z2luLm1hbmlmZXN0LmRlc2NyaXB0aW9uIH0pO1xyXG5cdFx0ZS5jcmVhdGVFbCgnYnInKTtcclxuXHJcblx0XHR0aGlzLmNyZWF0ZVNlY3Rpb24oZSwgJ2NvbW1vbicpO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGUpXHJcblx0XHRcdC5zZXROYW1lKCdUZW1wbGF0ZXMgZGlyZWN0b3J5IGxvY2F0aW9uJylcclxuXHRcdFx0LnNldERlc2MoJ0RpcmVjdG9yeSB0aGF0IHN0b3JlcyBudW5qdWNrcyB0ZW1wbGF0ZXMuJylcclxuXHRcdFx0LmFkZFRleHQocGF0aCA9PiBwYXRoXHJcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCdFeGFtcGxlOiAvX3RlbXBsYXRlcycpXHJcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMuX3NldHRpbmdzLnZhbHVlLnRlbXBsYXRlc0RpcilcclxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHQvLyB0cmltIC8gYW5kIFxcIGZyb20gYm90aCBlbmRzXHJcblx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL14oXFwvfFxcXFwpK3woXFwvfFxcXFwpKyQvZywgJycpO1xyXG5cdFx0XHRcdFx0dGhpcy5fc2V0dGluZ3MudmFsdWUudGVtcGxhdGVzRGlyID0gdmFsdWU7XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLl9zZXR0aW5ncy5zYXZlKCk7XHJcblx0XHRcdFx0fSkpO1xyXG5cclxuXHRcdHRoaXMuY3JlYXRlU2VjdGlvbihlLCAnemV0dGVsJyk7XHJcblxyXG5cdFx0bmV3IFNldHRpbmcoZSlcclxuXHRcdFx0LnNldE5hbWUoJ092ZXJyaWRlIGV4dHJhY3Rpb24gcmVnZXgnKVxyXG5cdFx0XHQuc2V0RGVzYygnT3ZlcnJpZGUgdGhlIHJlZ2V4IGZvciBleHRyYWN0aW5nIFVJRCBhbmQgdGl0bGUgZnJvbSBmaWxlbmFtZS4gUmVnZXggbXVzdCByZXR1cm4gY2FwdHVyZSBncm91cHMgbmFtZWQgXCJ1aWRcIiBhbmQgXCJ0aXRsZVwiLiBGb3IgZXhhbXBsZTogKD88dWlkPl5cXFxcZCspKFxcXFxzKD88dGl0bGU+LiokKSk/JylcclxuXHRcdFx0LmFkZFRleHQocmVnZXggPT4gcmVnZXhcclxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5fc2V0dGluZ3MudmFsdWUuemV0dGVsLnJlZ2V4KVxyXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMuX3NldHRpbmdzLnZhbHVlLnpldHRlbC5yZWdleCA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5fc2V0dGluZ3Muc2F2ZSgpO1xyXG5cdFx0XHRcdH0pKTtcclxuXHJcblx0XHRlLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ2RhdGV0aW1lJyB9KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhlKVxyXG5cdFx0XHQuc2V0TmFtZSgnT3ZlcnJpZGUgdGltZXpvbmUnKVxyXG5cdFx0XHQuc2V0RGVzYyhgRGVmYXVsdHMgdG8gc3lzdGVtIHRpbWV6b25lIChcIiR7RGF0ZVRpbWUubG9jYWwoKS56b25lTmFtZX1cIikuYClcclxuXHRcdFx0LmFkZFRleHQodHogPT4gdHpcclxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5fc2V0dGluZ3MudmFsdWUuZGF0ZXRpbWUudGltZXpvbmUpXHJcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0dGhpcy5fc2V0dGluZ3MudmFsdWUuZGF0ZXRpbWUudGltZXpvbmUgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMuX3NldHRpbmdzLnNhdmUoKTtcclxuXHRcdFx0XHR9KSk7XHJcblxyXG5cdFx0bmV3IFNldHRpbmcoZSlcclxuXHRcdFx0LnNldE5hbWUoJ092ZXJyaWRlIGxvY2FsZScpXHJcblx0XHRcdC5zZXREZXNjKGBEZWZhdWx0cyB0byBzeXN0ZW0gbG9jYWwgKFwiJHtEYXRlVGltZS5sb2NhbCgpLmxvY2FsZX1cIikuYClcclxuXHRcdFx0LmFkZFRleHQodHogPT4gdHpcclxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5fc2V0dGluZ3MudmFsdWUuZGF0ZXRpbWUubG9jYWxlKVxyXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMuX3NldHRpbmdzLnZhbHVlLmRhdGV0aW1lLmxvY2FsZSA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5fc2V0dGluZ3Muc2F2ZSgpO1xyXG5cdFx0XHRcdH0pKTtcclxuXHJcblx0fVxyXG5cclxuXHJcblx0cHJpdmF0ZSBjcmVhdGVTZWN0aW9uKGU6IEhUTUxFbGVtZW50LCB0aXRsZTogc3RyaW5nKSB7XHJcblx0XHRlLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogdGl0bGUgfSk7XHJcblx0fVxyXG59XHJcbiIsImltcG9ydCB7IEFwcCwgRnV6enlTdWdnZXN0TW9kYWwgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IE9ic2lkaWFuU2VydmljZSB9IGZyb20gJy4vT2JzaWRpYW5TZXJ2aWNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBUZW1wbGVGdXp6eVN1Z2dlc3RNb2RhbCBleHRlbmRzIEZ1enp5U3VnZ2VzdE1vZGFsPHN0cmluZz4ge1xyXG5cclxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcHJpdmF0ZSBfb2JzOiBPYnNpZGlhblNlcnZpY2UpIHtcclxuXHRcdHN1cGVyKGFwcCk7XHJcblx0fVxyXG5cclxuXHRnZXRJdGVtcygpOiBzdHJpbmdbXSB7XHJcblx0XHRyZXR1cm4gdGhpcy5fb2JzLmdldFRlbXBsYXRlUGF0aHMoKTtcclxuXHR9XHJcblx0Z2V0SXRlbVRleHQoaXRlbTogc3RyaW5nKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiBpdGVtO1xyXG5cdH1cclxuXHRvbkNob29zZUl0ZW0oaXRlbTogc3RyaW5nLCBldnQ6IE1vdXNlRXZlbnQgfCBLZXlib2FyZEV2ZW50KTogdm9pZCB7XHJcblx0XHR0aGlzLl9vYnMuaW5zZXJ0VGVtcGxhdGUoaXRlbSk7XHJcblx0fVxyXG59XHJcbiIsImltcG9ydCB7IE1hcmtkb3duU291cmNlVmlldywgTWFya2Rvd25WaWV3LCBOb3RpY2UsIFBsdWdpbl8yLCBURmlsZSwgVEZvbGRlciwgVmF1bHQgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IGluamVjdCwgaW5qZWN0YWJsZSB9IGZyb20gJ3RzeXJpbmdlJztcclxuaW1wb3J0IHsgVGVtcGxlU2V0dGluZ3MgfSBmcm9tICcuL3NldHRpbmdzL1RlbXBsZVNldHRpbmdzJztcclxuaW1wb3J0IHsgU3ltYm9scyB9IGZyb20gJy4vU3ltYm9scyc7XHJcbmltcG9ydCB7IFRlbXBsZUZ1enp5U3VnZ2VzdE1vZGFsIH0gZnJvbSAnLi9UZW1wbGVGdXp6eVN1Z2dlc3RNb2RhbCc7XHJcbmltcG9ydCB7IFRlbXBsZVNlcnZpY2UgfSBmcm9tICcuL1RlbXBsZVNlcnZpY2UnO1xyXG5cclxuQGluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgT2JzaWRpYW5TZXJ2aWNlIHtcclxuXHRwcml2YXRlIF9wcm9tcHQ6IFRlbXBsZUZ1enp5U3VnZ2VzdE1vZGFsO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihAaW5qZWN0KFN5bWJvbHMuUGx1Z2luKSBwcml2YXRlIF9vYnM6IFBsdWdpbl8yLCBwcml2YXRlIF90ZW1wbGU6IFRlbXBsZVNlcnZpY2UsIEBpbmplY3QoU3ltYm9scy5UZW1wbGVTZXR0aW5ncykgcHJpdmF0ZSBfc2V0dGluZ3M6IFRlbXBsZVNldHRpbmdzKSB7XHJcblx0XHR0aGlzLl9wcm9tcHQgPSBuZXcgVGVtcGxlRnV6enlTdWdnZXN0TW9kYWwoX29icy5hcHAsIHRoaXMpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQXNrIHVzZXIgdG8gc2VsZWN0IGEgdGVtcGxhdGUgaWYgdGhlcmUgYXJlIG11bHRpcGxlIGRlZmluZWQuXHJcblx0ICovXHJcblx0cHVibGljIGFzeW5jIHByb21wdFRlbXBsYXRlKCk6IFByb21pc2U8dm9pZD4ge1xyXG5cdFx0Y29uc3QgdGVtcGxhdGVzID0gdGhpcy5nZXRUZW1wbGF0ZVBhdGhzKCk7XHJcblx0XHRpZiAodGVtcGxhdGVzLmxlbmd0aCA+IDEpIHtcclxuXHRcdFx0dGhpcy5fcHJvbXB0Lm9wZW4oKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGF3YWl0IHRoaXMuaW5zZXJ0VGVtcGxhdGUodGVtcGxhdGVzWzBdKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldCB0aGUgcGF0aHMgb2YgYWxsIHRlbXBsYXRlcyBkZWZpbmVkIGluIHRoZSB0ZW1wbGF0ZSBkaXJlY3RvcnkuXHJcblx0ICovXHJcblx0cHVibGljIGdldFRlbXBsYXRlUGF0aHMoKTogc3RyaW5nW10ge1xyXG5cdFx0Y29uc3QgdGVtcGxhdGVzOiBzdHJpbmdbXSA9IFtdO1xyXG5cdFx0Y29uc3QgZGlyID0gdGhpcy5fb2JzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgodGhpcy5fc2V0dGluZ3MudGVtcGxhdGVzRGlyKTtcclxuXHRcdGlmIChkaXIgaW5zdGFuY2VvZiBURm9sZGVyKSB7XHJcblx0XHRcdFZhdWx0LnJlY3Vyc2VDaGlsZHJlbihkaXIsIGZpbGUgPT4ge1xyXG5cdFx0XHRcdGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcclxuXHRcdFx0XHRcdHRlbXBsYXRlcy5wdXNoKGZpbGUucGF0aCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGVtcGxhdGVzO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUmVuZGVyIGFuZCBpbnNlcnQgdGhlIHNlbGVjdGVkIHRlbXBsYXRlLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBhc3luYyBpbnNlcnRUZW1wbGF0ZShwYXRoOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuXHRcdGNvbnN0IHRlbXBsYXRlID0gYXdhaXQgdGhpcy5yZWFkRmlsZShwYXRoKTtcclxuXHRcdGNvbnN0IHJlbmRlcmVkID0gYXdhaXQgdGhpcy5fdGVtcGxlLnJlbmRlcih0ZW1wbGF0ZSk7XHJcblxyXG5cdFx0dGhpcy5pbnNlcnRBdEN1cnNvcihyZW5kZXJlZCk7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIGluc2VydEF0Q3Vyc29yKHRleHQ6IHN0cmluZyk6IHZvaWQge1xyXG5cdFx0Y29uc3QgdmlldyA9IHRoaXMuX29icy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcclxuXHRcdGlmICh2aWV3ICYmIHZpZXcuY3VycmVudE1vZGUgaW5zdGFuY2VvZiBNYXJrZG93blNvdXJjZVZpZXcpIHtcclxuXHRcdFx0Y29uc3QgZWRpdG9yID0gdmlldy5zb3VyY2VNb2RlLmNtRWRpdG9yO1xyXG5cdFx0XHRjb25zdCBkb2MgPSBlZGl0b3IuZ2V0RG9jKCk7XHJcblx0XHRcdGRvYy5yZXBsYWNlU2VsZWN0aW9uKHRleHQpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogSW5zZXJ0IHRoZSBkb2N1bWVudGF0aW9uIG9mIGFsbCBwcm92aWRlcnMuXHJcblx0ICovXHJcblx0cHVibGljIGFzeW5jIGluc2VydERvY3MoKTogUHJvbWlzZTx2b2lkPiB7XHJcblx0XHRjb25zdCBkb2MgPSBhd2FpdCB0aGlzLl90ZW1wbGUucmVuZGVyRG9jKCk7XHJcblx0XHR0aGlzLmluc2VydEF0Q3Vyc29yKGRvYyk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgYXN5bmMgcmVhZEZpbGUocGF0aDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuXHRcdGNvbnN0IGZpbGUgPSB0aGlzLl9vYnMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChwYXRoKTtcclxuXHRcdGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcclxuXHRcdFx0cmV0dXJuIGF3YWl0IHRoaXMuX29icy5hcHAudmF1bHQucmVhZChmaWxlKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIHJlYWQgJyR7ZmlsZT8ucGF0aH0nYCk7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcbiIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgY29uc3Qgd3JpdGUgPSBhc3luYyB0ZXh0ID0+IHtcblx0YXdhaXQgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQodGV4dCk7XG59O1xuXG5leHBvcnQgY29uc3QgcmVhZCA9IGFzeW5jICgpID0+IG5hdmlnYXRvci5jbGlwYm9hcmQucmVhZFRleHQoKTtcblxuZXhwb3J0IGNvbnN0IHJlYWRTeW5jID0gKCkgPT4ge1xuXHR0aHJvdyBuZXcgRXJyb3IoJ2AucmVhZFN5bmMoKWAgaXMgbm90IHN1cHBvcnRlZCBpbiBicm93c2VycyEnKTtcbn07XG5cbmV4cG9ydCBjb25zdCB3cml0ZVN5bmMgPSAoKSA9PiB7XG5cdHRocm93IG5ldyBFcnJvcignYC53cml0ZVN5bmMoKWAgaXMgbm90IHN1cHBvcnRlZCBpbiBicm93c2VycyEnKTtcbn07XG4iLCJcclxuZXhwb3J0IGNsYXNzIENsaXBib2FyZENvbnRleHQge1xyXG5cdGNvbnN0cnVjdG9yKHB1YmxpYyB0ZXh0OiBzdHJpbmcpIHsgfVxyXG59IiwiaW1wb3J0IHsgcmVhZCB9IGZyb20gJ2NsaXBib2FyZHknO1xyXG5pbXBvcnQgeyBJVGVtcGxlUHJvdmlkZXIgfSBmcm9tICcuL0lUZW1wbGVQcm92aWRlcic7XHJcbmltcG9ydCB7IFRlbXBsZUNvbnRleHQgfSBmcm9tICcuL1RlbXBsZUNvbnRleHQnO1xyXG5pbXBvcnQgeyBDbGlwYm9hcmRDb250ZXh0IH0gZnJvbSAnLi9DbGlwYm9hcmRDb250ZXh0JztcclxuaW1wb3J0IHsgaW5qZWN0YWJsZSB9IGZyb20gJ3RzeXJpbmdlJztcclxuaW1wb3J0IHsgVGVtcGxlRG9jc0NvbnRleHQgfSBmcm9tICcuL1RlbXBsZURvY3NDb250ZXh0JztcclxuXHJcbkBpbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIENsaXBib2FyZFRlbXBsZVByb3ZpZGVyIGltcGxlbWVudHMgSVRlbXBsZVByb3ZpZGVyPENsaXBib2FyZENvbnRleHQ+IHtcclxuXHRuYW1lID0gJ2NsaXBib2FyZCc7XHJcblxyXG5cdGFzeW5jIGRvY3MoKTogUHJvbWlzZTxUZW1wbGVEb2NzQ29udGV4dDxDbGlwYm9hcmRDb250ZXh0Pj4ge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0Y29udGV4dDogYXdhaXQgdGhpcy5wcm92aWRlKCksXHJcblx0XHRcdHRlbXBsYXRlOiBgXHJcbiMgXFxgY2xpcGJvYXJkXFxgXHJcbkV4dHJhY3RzIGRhdGEgZnJvbSB5b3VyIHN5c3RlbSBjbGlwYm9hcmQuIFVzZXMgW3NpbmRyZXNvcmh1cy9jbGlwYm9hcmR5XShodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2NsaXBib2FyZHkpLlxyXG5cclxuIyMgVXNhZ2VzXHJcblxyXG57JSByYXcgJX1cXGBcXGBcXGBcclxudGV4dDoge3sgY2xpcGJvYXJkLnRleHQgfX1cclxuXFxgXFxgXFxgeyUgZW5kcmF3ICV9XHJcblxyXG5vdXRwdXRzOlxyXG5cclxuXFxgXFxgXFxgXHJcbnRleHQ6IHt7IGNsaXBib2FyZC50ZXh0IH19XHJcblxcYFxcYFxcYFxyXG5gLFxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0YXN5bmMgcHJvdmlkZSgpOiBQcm9taXNlPFRlbXBsZUNvbnRleHQ8Q2xpcGJvYXJkQ29udGV4dD4+IHtcclxuXHRcdGNvbnN0IHRleHQgPSBhd2FpdCByZWFkKCk7XHJcblx0XHRyZXR1cm4gbmV3IFRlbXBsZUNvbnRleHQobmV3IENsaXBib2FyZENvbnRleHQoXHJcblx0XHRcdHRleHRcclxuXHRcdCkpO1xyXG5cdH1cclxuXHJcbn1cclxuIiwiaW1wb3J0ICdyZWZsZWN0LW1ldGFkYXRhJztcclxuaW1wb3J0IHsgYWRkSWNvbiwgQXBwLCBNYXJrZG93blNvdXJjZVZpZXcsIE1hcmtkb3duVmlldywgUGx1Z2luLCBQbHVnaW5NYW5pZmVzdCwgUGx1Z2luXzIsIFdvcmtzcGFjZSB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgSUNPTiB9IGZyb20gJy4vY29uc3RhbnRzJztcclxuaW1wb3J0IHsgRmlsZUluZm9UZW1wbGVQcm92aWRlciB9IGZyb20gJy4vcHJvdmlkZXJzL0ZpbGVJbmZvVGVtcGxlUHJvdmlkZXInO1xyXG5pbXBvcnQgeyBEYXRlVGltZVRlbXBsZVByb3ZpZGVyIH0gZnJvbSAnLi9wcm92aWRlcnMvRGF0ZVRpbWVUZW1wbGVQcm92aWRlcic7XHJcbmltcG9ydCB7IFpldHRlbFRlbXBsZVByb3ZpZGVyIH0gZnJvbSAnLi9wcm92aWRlcnMvWmV0dGVsVGVtcGxlUHJvdmlkZXInO1xyXG5pbXBvcnQgeyBUZW1wbGVTZXJ2aWNlIH0gZnJvbSAnLi9UZW1wbGVTZXJ2aWNlJztcclxuaW1wb3J0IHsgRGF0ZVRpbWVGaWx0ZXJzIH0gZnJvbSAnLi9wcm92aWRlcnMvRGF0ZVRpbWVGaWx0ZXJzJztcclxuaW1wb3J0IHsgVGVtcGxlU2V0dGluZ3NUYWIgfSBmcm9tICcuL3NldHRpbmdzL1RlbXBsZVNldHRpbmdzVGFiJztcclxuaW1wb3J0IHsgT2JzaWRpYW5TZXJ2aWNlIH0gZnJvbSAnLi9PYnNpZGlhblNlcnZpY2UnO1xyXG5pbXBvcnQgeyBUZW1wbGVTZXR0aW5ncyB9IGZyb20gJy4vc2V0dGluZ3MvVGVtcGxlU2V0dGluZ3MnO1xyXG5pbXBvcnQgeyBUZW1wbGVTZXR0aW5nc1Byb3ZpZGVyIH0gZnJvbSAnLi9zZXR0aW5ncy9UZW1wbGVTZXR0aW5nc1Byb3ZpZGVyJztcclxuaW1wb3J0IHsgQ2xpcGJvYXJkVGVtcGxlUHJvdmlkZXIgfSBmcm9tICcuL3Byb3ZpZGVycy9DbGlwYm9hcmRUZW1wbGVQcm92aWRlcic7XHJcbmltcG9ydCB7IElUZW1wbGVQcm92aWRlciB9IGZyb20gJy4vcHJvdmlkZXJzL0lUZW1wbGVQcm92aWRlcic7XHJcbmltcG9ydCB7IGNvbnRhaW5lciB9IGZyb20gJ3RzeXJpbmdlJztcclxuaW1wb3J0IHsgU3ltYm9scyB9IGZyb20gJy4vU3ltYm9scyc7XHJcbmltcG9ydCB7IERhdGVUaW1lUHJvdmlkZXIgfSBmcm9tICcuL3Byb3ZpZGVycy9EYXRlVGltZVByb3ZpZGVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRlbXBsZVBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XHJcblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbk1hbmlmZXN0OiBQbHVnaW5NYW5pZmVzdCkge1xyXG5cdFx0c3VwZXIoYXBwLCBwbHVnaW5NYW5pZmVzdCk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBvbmxvYWQoKTogUHJvbWlzZTx2b2lkPiB7XHJcblxyXG5cdFx0Y29udGFpbmVyLnJlZ2lzdGVySW5zdGFuY2U8UGx1Z2luXzI+KFN5bWJvbHMuUGx1Z2luLCB0aGlzKTtcclxuXHRcdGNvbnRhaW5lci5yZWdpc3RlclNpbmdsZXRvbjxUZW1wbGVTZXR0aW5nc1Byb3ZpZGVyPihUZW1wbGVTZXR0aW5nc1Byb3ZpZGVyLCBUZW1wbGVTZXR0aW5nc1Byb3ZpZGVyKTtcclxuXHJcblx0XHRjb25zdCBzZXR0aW5nc1Byb3ZpZGVyID0gY29udGFpbmVyLnJlc29sdmU8VGVtcGxlU2V0dGluZ3NQcm92aWRlcj4oVGVtcGxlU2V0dGluZ3NQcm92aWRlcik7XHJcblx0XHRhd2FpdCBzZXR0aW5nc1Byb3ZpZGVyLmxvYWQoKTtcclxuXHJcblx0XHRjb250YWluZXIucmVnaXN0ZXJJbnN0YW5jZTxBcHA+KEFwcCwgdGhpcy5hcHApO1xyXG5cdFx0Y29udGFpbmVyLnJlZ2lzdGVySW5zdGFuY2U8V29ya3NwYWNlPihXb3Jrc3BhY2UsIHRoaXMuYXBwLndvcmtzcGFjZSk7XHJcblxyXG5cdFx0Y29udGFpbmVyLnJlZ2lzdGVySW5zdGFuY2U8VGVtcGxlU2V0dGluZ3M+KFN5bWJvbHMuVGVtcGxlU2V0dGluZ3MsIHNldHRpbmdzUHJvdmlkZXIudmFsdWUpO1xyXG5cdFx0Y29udGFpbmVyLnJlZ2lzdGVyU2luZ2xldG9uPFRlbXBsZVNldHRpbmdzVGFiPihUZW1wbGVTZXR0aW5nc1RhYiwgVGVtcGxlU2V0dGluZ3NUYWIpO1xyXG5cclxuXHRcdGNvbnRhaW5lci5yZWdpc3RlclNpbmdsZXRvbjxEYXRlVGltZVByb3ZpZGVyPihEYXRlVGltZVByb3ZpZGVyKTtcclxuXHRcdGNvbnRhaW5lci5yZWdpc3RlclNpbmdsZXRvbjxEYXRlVGltZUZpbHRlcnM+KERhdGVUaW1lRmlsdGVycyk7XHJcblxyXG5cdFx0Y29udGFpbmVyLnJlZ2lzdGVyU2luZ2xldG9uPFRlbXBsZVNlcnZpY2U+KFRlbXBsZVNlcnZpY2UsIFRlbXBsZVNlcnZpY2UpO1xyXG5cdFx0Y29udGFpbmVyLnJlZ2lzdGVyU2luZ2xldG9uPElUZW1wbGVQcm92aWRlcjxhbnk+PihTeW1ib2xzLklUZW1wbGVQcm92aWRlciwgRmlsZUluZm9UZW1wbGVQcm92aWRlcik7XHJcblx0XHRjb250YWluZXIucmVnaXN0ZXJTaW5nbGV0b248SVRlbXBsZVByb3ZpZGVyPGFueT4+KFN5bWJvbHMuSVRlbXBsZVByb3ZpZGVyLCBEYXRlVGltZVRlbXBsZVByb3ZpZGVyKTtcclxuXHRcdGNvbnRhaW5lci5yZWdpc3RlclNpbmdsZXRvbjxJVGVtcGxlUHJvdmlkZXI8YW55Pj4oU3ltYm9scy5JVGVtcGxlUHJvdmlkZXIsIFpldHRlbFRlbXBsZVByb3ZpZGVyKTtcclxuXHRcdGNvbnRhaW5lci5yZWdpc3RlclNpbmdsZXRvbjxJVGVtcGxlUHJvdmlkZXI8YW55Pj4oU3ltYm9scy5JVGVtcGxlUHJvdmlkZXIsIENsaXBib2FyZFRlbXBsZVByb3ZpZGVyKTtcclxuXHJcblx0XHRjb25zdCBvYnMgPSBjb250YWluZXIucmVzb2x2ZTxPYnNpZGlhblNlcnZpY2U+KE9ic2lkaWFuU2VydmljZSk7XHJcblxyXG5cdFx0YWRkSWNvbigndGVtcGxlJywgSUNPTik7XHJcblxyXG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKGNvbnRhaW5lci5yZXNvbHZlPFRlbXBsZVNldHRpbmdzVGFiPihUZW1wbGVTZXR0aW5nc1RhYikpO1xyXG5cdFx0dGhpcy5hZGRSaWJib25JY29uKCd0ZW1wbGUnLCAnVGVtcGxlJywgYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHRhd2FpdCBvYnMucHJvbXB0VGVtcGxhdGUoKTtcclxuXHRcdH0pO1xyXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcclxuXHRcdFx0aWQ6ICdvYnNpZGlhbi10ZW1wbGUtaW5zZXJ0JyxcclxuXHRcdFx0bmFtZTogJ0luc2VydCB0ZW1wbGF0ZScsXHJcblx0XHRcdGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XHJcblx0XHRcdFx0YXdhaXQgb2JzLnByb21wdFRlbXBsYXRlKCk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdGlkOiAnb2JzaWRpYW4tdGVtcGxlLWluc2VydC1kb2MnLFxyXG5cdFx0XHRuYW1lOiAnSW5zZXJ0IGRvY3VtZW50YXRpb24gb2YgYWxsIHByb3ZpZGVycycsXHJcblx0XHRcdGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XHJcblx0XHRcdFx0YXdhaXQgb2JzLmluc2VydERvY3MoKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG59Il0sIm5hbWVzIjpbImV4dGVuZFN0YXRpY3MiLCJkIiwiYiIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiX19leHRlbmRzIiwiX18iLCJ0aGlzIiwiY29uc3RydWN0b3IiLCJjcmVhdGUiLCJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsInRhcmdldCIsImtleSIsImRlc2MiLCJjIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsImkiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fcGFyYW0iLCJwYXJhbUluZGV4IiwiZGVjb3JhdG9yIiwiX19tZXRhZGF0YSIsIm1ldGFkYXRhS2V5IiwibWV0YWRhdGFWYWx1ZSIsIm1ldGFkYXRhIiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIl9fZ2VuZXJhdG9yIiwiYm9keSIsImYiLCJ5IiwidCIsImciLCJfIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsInZlcmIiLCJ0aHJvdyIsInJldHVybiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwibiIsInYiLCJvcCIsIlR5cGVFcnJvciIsInBvcCIsInB1c2giLCJfX3ZhbHVlcyIsIm8iLCJzIiwibSIsIl9fcmVhZCIsImFyIiwiZXJyb3IiLCJfX3NwcmVhZCIsImNvbmNhdCIsIl9fc3ByZWFkQXJyYXlzIiwiaWwiLCJrIiwiYSIsImoiLCJqbCIsImZhY3RvcnkiLCJyb290IiwiZ2xvYmFsIiwic2VsZiIsIkZ1bmN0aW9uIiwiZXhwb3J0ZXIiLCJtYWtlRXhwb3J0ZXIiLCJwcmV2aW91cyIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiaGFzT3duIiwic3VwcG9ydHNTeW1ib2wiLCJ0b1ByaW1pdGl2ZVN5bWJvbCIsInRvUHJpbWl0aXZlIiwiaXRlcmF0b3JTeW1ib2wiLCJzdXBwb3J0c0NyZWF0ZSIsInN1cHBvcnRzUHJvdG8iLCJkb3duTGV2ZWwiLCJIYXNoTWFwIiwiTWFrZURpY3Rpb25hcnkiLCJoYXMiLCJtYXAiLCJnZXQiLCJ1bmRlZmluZWQiLCJmdW5jdGlvblByb3RvdHlwZSIsImdldFByb3RvdHlwZU9mIiwidXNlUG9seWZpbGwiLCJwcm9jZXNzIiwiZW52IiwiX01hcCIsIk1hcCIsImVudHJpZXMiLCJDcmVhdGVNYXBQb2x5ZmlsbCIsIl9TZXQiLCJTZXQiLCJDcmVhdGVTZXRQb2x5ZmlsbCIsIk1ldGFkYXRhIiwiV2Vha01hcCIsIkNyZWF0ZVdlYWtNYXBQb2x5ZmlsbCIsInByb3BlcnR5S2V5IiwiYXR0cmlidXRlcyIsIklzVW5kZWZpbmVkIiwiSXNBcnJheSIsIklzQ29uc3RydWN0b3IiLCJEZWNvcmF0ZUNvbnN0cnVjdG9yIiwiSXNPYmplY3QiLCJJc051bGwiLCJEZWNvcmF0ZVByb3BlcnR5IiwiVG9Qcm9wZXJ0eUtleSIsIklzUHJvcGVydHlLZXkiLCJPcmRpbmFyeURlZmluZU93bk1ldGFkYXRhIiwiZGVmaW5lTWV0YWRhdGEiLCJoYXNNZXRhZGF0YSIsIk9yZGluYXJ5SGFzTWV0YWRhdGEiLCJoYXNPd25NZXRhZGF0YSIsIk9yZGluYXJ5SGFzT3duTWV0YWRhdGEiLCJnZXRNZXRhZGF0YSIsIk9yZGluYXJ5R2V0TWV0YWRhdGEiLCJnZXRPd25NZXRhZGF0YSIsIk9yZGluYXJ5R2V0T3duTWV0YWRhdGEiLCJnZXRNZXRhZGF0YUtleXMiLCJPcmRpbmFyeU1ldGFkYXRhS2V5cyIsImdldE93bk1ldGFkYXRhS2V5cyIsIk9yZGluYXJ5T3duTWV0YWRhdGFLZXlzIiwiZGVsZXRlTWV0YWRhdGEiLCJtZXRhZGF0YU1hcCIsIkdldE9yQ3JlYXRlTWV0YWRhdGFNYXAiLCJkZWxldGUiLCJzaXplIiwidGFyZ2V0TWV0YWRhdGEiLCJkZWNvcmF0ZWQiLCJkZXNjcmlwdG9yIiwiTyIsIkNyZWF0ZSIsInNldCIsIk1ldGFkYXRhS2V5IiwicGFyZW50IiwiT3JkaW5hcnlHZXRQcm90b3R5cGVPZiIsIlRvQm9vbGVhbiIsIk1ldGFkYXRhVmFsdWUiLCJvd25LZXlzIiwicGFyZW50S2V5cyIsImtleXMiLCJfaSIsIm93bktleXNfMSIsImFkZCIsIl9hIiwicGFyZW50S2V5c18xIiwiR2V0SXRlcmF0b3IiLCJJdGVyYXRvclN0ZXAiLCJuZXh0VmFsdWUiLCJJdGVyYXRvclZhbHVlIiwiSXRlcmF0b3JDbG9zZSIsIlR5cGUiLCJ4IiwiSXNTeW1ib2wiLCJUb1ByaW1pdGl2ZSIsImlucHV0IiwiUHJlZmVycmVkVHlwZSIsImhpbnQiLCJleG90aWNUb1ByaW0iLCJHZXRNZXRob2QiLCJPcmRpbmFyeVRvUHJpbWl0aXZlIiwidG9TdHJpbmdfMSIsInRvU3RyaW5nIiwiSXNDYWxsYWJsZSIsInZhbHVlT2YiLCJ0b1N0cmluZ18yIiwiYXJndW1lbnQiLCJUb1N0cmluZyIsImlzQXJyYXkiLCJWIiwiZnVuYyIsIm9iaiIsIm1ldGhvZCIsIml0ZXJSZXN1bHQiLCJwcm90byIsInByb3RvdHlwZVByb3RvIiwiY2FjaGVTZW50aW5lbCIsImFycmF5U2VudGluZWwiLCJNYXBJdGVyYXRvciIsInZhbHVlcyIsInNlbGVjdG9yIiwiX2luZGV4IiwiX2tleXMiLCJfdmFsdWVzIiwiX3NlbGVjdG9yIiwiaW5kZXgiLCJfY2FjaGVLZXkiLCJfY2FjaGVJbmRleCIsImVudW1lcmFibGUiLCJfZmluZCIsImNsZWFyIiwiZ2V0S2V5IiwiZ2V0VmFsdWUiLCJnZXRFbnRyeSIsImluc2VydCIsImluZGV4T2YiLCJfbWFwIiwiVVVJRF9TSVpFIiwicm9vdEtleSIsIkNyZWF0ZVVuaXF1ZUtleSIsIl9rZXkiLCJ0YWJsZSIsIkdldE9yQ3JlYXRlV2Vha01hcFRhYmxlIiwiQ3JlYXRlVVVJRCIsIkZpbGxSYW5kb21CeXRlcyIsImJ1ZmZlciIsIk1hdGgiLCJyYW5kb20iLCJHZW5SYW5kb21CeXRlcyIsIlVpbnQ4QXJyYXkiLCJjcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJtc0NyeXB0byIsImRhdGEiLCJvZmZzZXQiLCJieXRlIiwidG9Mb3dlckNhc2UiLCJMaWZlY3ljbGUiLCJjb250ZXh0IiwiZGVmaW5lSW5qZWN0aW9uVG9rZW5NZXRhZGF0YSIsInRyYW5zZm9ybSIsIl9wcm9wZXJ0eUtleSIsInBhcmFtZXRlckluZGV4IiwiZGVzY3JpcHRvcnMiLCJ0b2tlbiIsInRyYW5zZm9ybVRva2VuIiwidHJhbnNmb3JtQXJncyIsImFyZ3MiLCJpc0NsYXNzUHJvdmlkZXIiLCJwcm92aWRlciIsInVzZUNsYXNzIiwiaXNGYWN0b3J5UHJvdmlkZXIiLCJ1c2VGYWN0b3J5IiwiRGVsYXllZENvbnN0cnVjdG9yIiwid3JhcCIsInJlZmxlY3RNZXRob2RzIiwiY3JlYXRlUHJveHkiLCJjcmVhdGVPYmplY3QiLCJfdGhpcyIsImluaXQiLCJQcm94eSIsImNyZWF0ZUhhbmRsZXIiLCJkZWxheWVkT2JqZWN0IiwiaGFuZGxlciIsImZvckVhY2giLCJuYW1lIiwiaXNOb3JtYWxUb2tlbiIsImlzVHJhbnNmb3JtRGVzY3JpcHRvciIsImlzVG9rZW5Qcm92aWRlciIsInVzZVRva2VuIiwiaXNWYWx1ZVByb3ZpZGVyIiwidXNlVmFsdWUiLCJSZWdpc3RyeUJhc2UiLCJfcmVnaXN0cnlNYXAiLCJnZXRBbGwiLCJlbnN1cmUiLCJzZXRBbGwiLCJSZWdpc3RyeSIsIl9zdXBlciIsIlJlc29sdXRpb25Db250ZXh0Iiwic2NvcGVkUmVzb2x1dGlvbnMiLCJmb3JtYXRFcnJvckN0b3IiLCJjdG9yIiwicGFyYW1JZHgiLCJtc2ciLCJpbmRlbnQiLCJfYiIsIm1hdGNoIiwiZGVwIiwicGFyYW1zIiwiaWR4Iiwic3BsaXQiLCJ0cmltIiwiZm9ybWF0RGVwZW5kZW5jeSIsIm1lc3NhZ2UiLCJsIiwiam9pbiIsIlByZVJlc29sdXRpb25JbnRlcmNlcHRvcnMiLCJQb3N0UmVzb2x1dGlvbkludGVyY2VwdG9ycyIsIkludGVyY2VwdG9ycyIsInByZVJlc29sdXRpb24iLCJwb3N0UmVzb2x1dGlvbiIsInR5cGVJbmZvIiwiaW5zdGFuY2UiLCJJbnRlcm5hbERlcGVuZGVuY3lDb250YWluZXIiLCJfcmVnaXN0cnkiLCJpbnRlcmNlcHRvcnMiLCJyZWdpc3RlciIsInByb3ZpZGVyT3JDb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJsaWZlY3ljbGUiLCJUcmFuc2llbnQiLCJpc1Byb3ZpZGVyIiwicGF0aCIsInRva2VuUHJvdmlkZXIiLCJjdXJyZW50VG9rZW4iLCJpbmNsdWRlcyIsIkVycm9yIiwicmVnaXN0cmF0aW9uIiwiU2luZ2xldG9uIiwiQ29udGFpbmVyU2NvcGVkIiwiUmVzb2x1dGlvblNjb3BlZCIsInJlZ2lzdGVyVHlwZSIsImZyb20iLCJ0byIsInJlZ2lzdGVySW5zdGFuY2UiLCJyZWdpc3RlclNpbmdsZXRvbiIsImdldFJlZ2lzdHJhdGlvbiIsImV4ZWN1dGVQcmVSZXNvbHV0aW9uSW50ZXJjZXB0b3IiLCJyZXNvbHZlUmVnaXN0cmF0aW9uIiwiZXhlY3V0ZVBvc3RSZXNvbHV0aW9uSW50ZXJjZXB0b3IiLCJpc0NvbnN0cnVjdG9yVG9rZW4iLCJjb25zdHJ1Y3QiLCJyZXNvbHV0aW9uVHlwZSIsImVfMSIsInJlbWFpbmluZ0ludGVyY2VwdG9ycyIsIl9jIiwiaW50ZXJjZXB0b3IiLCJmcmVxdWVuY3kiLCJjYWxsYmFjayIsImVfMV8xIiwiZV8yIiwiZV8yXzEiLCJyZXNvbHZlZCIsImlzU2luZ2xldG9uIiwiaXNDb250YWluZXJTY29wZWQiLCJyZXR1cm5JbnN0YW5jZSIsInJlc29sdmVBbGwiLCJyZWdpc3RyYXRpb25zIiwiZ2V0QWxsUmVnaXN0cmF0aW9ucyIsInJlc3VsdF8xIiwiaXRlbSIsImlzUmVnaXN0ZXJlZCIsInJlY3Vyc2l2ZSIsInJlc2V0IiwiY2xlYXJJbnN0YW5jZXMiLCJlXzMiLCJfZCIsImZpbHRlciIsImVfM18xIiwiY3JlYXRlQ2hpbGRDb250YWluZXIiLCJlXzQiLCJjaGlsZENvbnRhaW5lciIsInNvbWUiLCJlXzRfMSIsImJlZm9yZVJlc29sdXRpb24iLCJhZnRlclJlc29sdXRpb24iLCJwYXJhbUluZm8iLCJyZXNvbHZlUGFyYW1zIiwiYmluZCIsInBhcmFtIiwibXVsdGlwbGUiLCJpbmplY3QiLCJpbmplY3RhYmxlIiwiaW5qZWN0aW9uVG9rZW5zIiwiZ2V0UGFyYW1JbmZvIiwiX3dvcmtzcGFjZSIsIkZpbGVJbmZvVGVtcGxlUHJvdmlkZXIiLCJwcm92aWRlIiwiZmlsZSIsImdldEFjdGl2ZUZpbGUiLCJUZW1wbGVDb250ZXh0IiwiV29ya3NwYWNlIiwibm93IiwiU3ltYm9scyIsIlRlbXBsZVNldHRpbmdzIiwiZm9yIiwiSVRlbXBsZVByb3ZpZGVyIiwiUGx1Z2luIiwiX2RlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsIl9jcmVhdGVDbGFzcyIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfZ2V0UHJvdG90eXBlT2YiLCJfc2V0UHJvdG90eXBlT2YiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0Iiwic2hhbSIsIkRhdGUiLCJfY29uc3RydWN0IiwiUGFyZW50IiwiQ2xhc3MiLCJfd3JhcE5hdGl2ZVN1cGVyIiwiX2NhY2hlIiwiZm4iLCJXcmFwcGVyIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJhcnIyIiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZSIsIm1pbkxlbiIsInNsaWNlIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsImV4cG9ydHMiLCJMdXhvbkVycm9yIiwiX0Vycm9yIiwiSW52YWxpZERhdGVUaW1lRXJyb3IiLCJfTHV4b25FcnJvciIsInJlYXNvbiIsInRvTWVzc2FnZSIsIkludmFsaWRJbnRlcnZhbEVycm9yIiwiX0x1eG9uRXJyb3IyIiwiSW52YWxpZER1cmF0aW9uRXJyb3IiLCJfTHV4b25FcnJvcjMiLCJDb25mbGljdGluZ1NwZWNpZmljYXRpb25FcnJvciIsIl9MdXhvbkVycm9yNCIsIkludmFsaWRVbml0RXJyb3IiLCJfTHV4b25FcnJvcjUiLCJ1bml0IiwiSW52YWxpZEFyZ3VtZW50RXJyb3IiLCJfTHV4b25FcnJvcjYiLCJab25lSXNBYnN0cmFjdEVycm9yIiwiX0x1eG9uRXJyb3I3IiwiREFURV9TSE9SVCIsInllYXIiLCJtb250aCIsImRheSIsIkRBVEVfTUVEIiwiREFURV9NRURfV0lUSF9XRUVLREFZIiwid2Vla2RheSIsIkRBVEVfRlVMTCIsIkRBVEVfSFVHRSIsIlRJTUVfU0lNUExFIiwiaG91ciIsIm1pbnV0ZSIsIlRJTUVfV0lUSF9TRUNPTkRTIiwic2Vjb25kIiwiVElNRV9XSVRIX1NIT1JUX09GRlNFVCIsInRpbWVab25lTmFtZSIsIlRJTUVfV0lUSF9MT05HX09GRlNFVCIsIlRJTUVfMjRfU0lNUExFIiwiaG91cjEyIiwiVElNRV8yNF9XSVRIX1NFQ09ORFMiLCJUSU1FXzI0X1dJVEhfU0hPUlRfT0ZGU0VUIiwiVElNRV8yNF9XSVRIX0xPTkdfT0ZGU0VUIiwiREFURVRJTUVfU0hPUlQiLCJEQVRFVElNRV9TSE9SVF9XSVRIX1NFQ09ORFMiLCJEQVRFVElNRV9NRUQiLCJEQVRFVElNRV9NRURfV0lUSF9TRUNPTkRTIiwiREFURVRJTUVfTUVEX1dJVEhfV0VFS0RBWSIsIkRBVEVUSU1FX0ZVTEwiLCJEQVRFVElNRV9GVUxMX1dJVEhfU0VDT05EUyIsIkRBVEVUSU1FX0hVR0UiLCJEQVRFVElNRV9IVUdFX1dJVEhfU0VDT05EUyIsImlzVW5kZWZpbmVkIiwiaXNOdW1iZXIiLCJpc0ludGVnZXIiLCJoYXNJbnRsIiwiSW50bCIsIkRhdGVUaW1lRm9ybWF0IiwiaGFzRm9ybWF0VG9QYXJ0cyIsImZvcm1hdFRvUGFydHMiLCJoYXNSZWxhdGl2ZSIsIlJlbGF0aXZlVGltZUZvcm1hdCIsImJlc3RCeSIsImJ5IiwiY29tcGFyZSIsInJlZHVjZSIsImJlc3QiLCJwYWlyIiwicGljayIsInByb3AiLCJpbnRlZ2VyQmV0d2VlbiIsInRoaW5nIiwiYm90dG9tIiwidG9wIiwicGFkU3RhcnQiLCJyZXBlYXQiLCJwYXJzZUludGVnZXIiLCJzdHJpbmciLCJwYXJzZUludCIsInBhcnNlTWlsbGlzIiwiZnJhY3Rpb24iLCJwYXJzZUZsb2F0IiwiZmxvb3IiLCJyb3VuZFRvIiwibnVtYmVyIiwiZGlnaXRzIiwidG93YXJkWmVybyIsImZhY3RvciIsInBvdyIsInRydW5jIiwicm91bmQiLCJpc0xlYXBZZWFyIiwiZGF5c0luWWVhciIsImRheXNJbk1vbnRoIiwibW9kTW9udGgiLCJmbG9vck1vZCIsIm9ialRvTG9jYWxUUyIsIlVUQyIsIm1pbGxpc2Vjb25kIiwic2V0VVRDRnVsbFllYXIiLCJnZXRVVENGdWxsWWVhciIsIndlZWtzSW5XZWVrWWVhciIsIndlZWtZZWFyIiwicDEiLCJsYXN0IiwicDIiLCJ1bnRydW5jYXRlWWVhciIsInBhcnNlWm9uZUluZm8iLCJ0cyIsIm9mZnNldEZvcm1hdCIsImxvY2FsZSIsInRpbWVab25lIiwiZGF0ZSIsImludGxPcHRzIiwibW9kaWZpZWQiLCJhc3NpZ24iLCJpbnRsIiwicGFyc2VkIiwiZmluZCIsInR5cGUiLCJ3aXRob3V0IiwiZm9ybWF0Iiwic3Vic3RyaW5nIiwicmVwbGFjZSIsInNpZ25lZE9mZnNldCIsIm9mZkhvdXJTdHIiLCJvZmZNaW51dGVTdHIiLCJvZmZIb3VyIiwiTnVtYmVyIiwiaXNOYU4iLCJvZmZNaW4iLCJpcyIsImFzTnVtYmVyIiwibnVtZXJpY1ZhbHVlIiwibm9ybWFsaXplT2JqZWN0Iiwibm9ybWFsaXplciIsIm5vblVuaXRLZXlzIiwibm9ybWFsaXplZCIsInUiLCJmb3JtYXRPZmZzZXQiLCJob3VycyIsImFicyIsIm1pbnV0ZXMiLCJzaWduIiwiUmFuZ2VFcnJvciIsInRpbWVPYmplY3QiLCJpYW5hUmVnZXgiLCJzdHJpbmdpZnkiLCJKU09OIiwic29ydCIsIm1vbnRoc0xvbmciLCJtb250aHNTaG9ydCIsIm1vbnRoc05hcnJvdyIsIm1vbnRocyIsIndlZWtkYXlzTG9uZyIsIndlZWtkYXlzU2hvcnQiLCJ3ZWVrZGF5c05hcnJvdyIsIndlZWtkYXlzIiwibWVyaWRpZW1zIiwiZXJhc0xvbmciLCJlcmFzU2hvcnQiLCJlcmFzTmFycm93IiwiZXJhcyIsInN0cmluZ2lmeVRva2VucyIsInNwbGl0cyIsInRva2VuVG9TdHJpbmciLCJfc3RlcCIsIl9pdGVyYXRvciIsImxpdGVyYWwiLCJ2YWwiLCJfbWFjcm9Ub2tlblRvRm9ybWF0T3B0cyIsIkQiLCJERCIsIkRERCIsIkREREQiLCJ0dCIsInR0dCIsInR0dHQiLCJUIiwiVFQiLCJUVFQiLCJUVFRUIiwiZmYiLCJmZmYiLCJmZmZmIiwiRiIsIkZGIiwiRkZGIiwiRkZGRiIsIkZvcm1hdHRlciIsImZvcm1hdE9wdHMiLCJvcHRzIiwibG9jIiwic3lzdGVtTG9jIiwicGFyc2VGb3JtYXQiLCJmbXQiLCJjdXJyZW50IiwiY3VycmVudEZ1bGwiLCJicmFja2V0ZWQiLCJjaGFyQXQiLCJtYWNyb1Rva2VuVG9Gb3JtYXRPcHRzIiwiX3Byb3RvIiwiZm9ybWF0V2l0aFN5c3RlbURlZmF1bHQiLCJkdCIsInJlZGVmYXVsdFRvU3lzdGVtIiwiZHRGb3JtYXR0ZXIiLCJmb3JtYXREYXRlVGltZSIsImZvcm1hdERhdGVUaW1lUGFydHMiLCJyZXNvbHZlZE9wdGlvbnMiLCJudW0iLCJmb3JjZVNpbXBsZSIsInBhZFRvIiwibnVtYmVyRm9ybWF0dGVyIiwiZm9ybWF0RGF0ZVRpbWVGcm9tU3RyaW5nIiwia25vd25FbmdsaXNoIiwibGlzdGluZ01vZGUiLCJ1c2VEYXRlVGltZUZvcm1hdHRlciIsIm91dHB1dENhbGVuZGFyIiwiZXh0cmFjdCIsImlzT2Zmc2V0Rml4ZWQiLCJhbGxvd1oiLCJpc1ZhbGlkIiwiem9uZSIsIm1lcmlkaWVtIiwibWVyaWRpZW1Gb3JEYXRlVGltZSIsInN0YW5kYWxvbmUiLCJtb250aEZvckRhdGVUaW1lIiwid2Vla2RheUZvckRhdGVUaW1lIiwiZXJhIiwiZXJhRm9yRGF0ZVRpbWUiLCJvZmZzZXROYW1lIiwiem9uZU5hbWUiLCJ3ZWVrTnVtYmVyIiwib3JkaW5hbCIsInF1YXJ0ZXIiLCJtYXliZU1hY3JvIiwiZm9ybWF0RHVyYXRpb25Gcm9tU3RyaW5nIiwiZHVyIiwibGlsZHVyIiwiX3RoaXMyIiwidG9rZW5Ub0ZpZWxkIiwidG9rZW5zIiwicmVhbFRva2VucyIsImZvdW5kIiwiX3JlZiIsImNvbGxhcHNlZCIsInNoaWZ0VG8iLCJtYXBwZWQiLCJJbnZhbGlkIiwiZXhwbGFuYXRpb24iLCJab25lIiwiZXF1YWxzIiwib3RoZXJab25lIiwic2luZ2xldG9uIiwiTG9jYWxab25lIiwiX1pvbmUiLCJnZXRUaW1lem9uZU9mZnNldCIsIm1hdGNoaW5nUmVnZXgiLCJSZWdFeHAiLCJzb3VyY2UiLCJkdGZDYWNoZSIsInR5cGVUb1BvcyIsImlhbmFab25lQ2FjaGUiLCJJQU5BWm9uZSIsInZhbGlkIiwiaXNWYWxpZFpvbmUiLCJyZXNldENhY2hlIiwiaXNWYWxpZFNwZWNpZmllciIsInBhcnNlR01UT2Zmc2V0Iiwic3BlY2lmaWVyIiwiZHRmIiwiX3JlZjIiLCJmb3JtYXR0ZWQiLCJmaWxsZWQiLCJfZm9ybWF0dGVkJGkiLCJwb3MiLCJwYXJ0c09mZnNldCIsImV4ZWMiLCJmTW9udGgiLCJmRGF5IiwiaGFja3lPZmZzZXQiLCJhc1RTIiwib3ZlciIsInNpbmdsZXRvbiQxIiwiRml4ZWRPZmZzZXRab25lIiwiZml4ZWQiLCJ1dGNJbnN0YW5jZSIsInBhcnNlU3BlY2lmaWVyIiwiSW52YWxpZFpvbmUiLCJOYU4iLCJub3JtYWxpemVab25lIiwiZGVmYXVsdFpvbmUiLCJsb3dlcmVkIiwiZGVmYXVsdExvY2FsZSIsImRlZmF1bHROdW1iZXJpbmdTeXN0ZW0iLCJkZWZhdWx0T3V0cHV0Q2FsZW5kYXIiLCJ0aHJvd09uSW52YWxpZCIsIlNldHRpbmdzIiwicmVzZXRDYWNoZXMiLCJMb2NhbGUiLCJ6IiwibnVtYmVyaW5nU3lzdGVtIiwiaW50bERUQ2FjaGUiLCJnZXRDYWNoZWREVEYiLCJsb2NTdHJpbmciLCJpbnRsTnVtQ2FjaGUiLCJpbnRsUmVsQ2FjaGUiLCJnZXRDYWNoZWRSVEYiLCJfb3B0cyIsImNhY2hlS2V5T3B0cyIsImJhc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImluZiIsInN5c0xvY2FsZUNhY2hlIiwibGlzdFN0dWZmIiwiZGVmYXVsdE9LIiwiZW5nbGlzaEZuIiwiaW50bEZuIiwibW9kZSIsIlBvbHlOdW1iZXJGb3JtYXR0ZXIiLCJ1c2VHcm91cGluZyIsIm1pbmltdW1JbnRlZ2VyRGlnaXRzIiwiTnVtYmVyRm9ybWF0IiwiZ2V0Q2FjaGVkSU5GIiwiUG9seURhdGVGb3JtYXR0ZXIiLCJ1bml2ZXJzYWwiLCJEYXRlVGltZSIsImZyb21NaWxsaXMiLCJfcHJvdG8yIiwidG9KU0RhdGUiLCJ0b2tlbkZvcm1hdCIsImtub3duRm9ybWF0IiwiZGF0ZVRpbWVIdWdlIiwiZm9ybWF0U3RyaW5nIiwiUG9seVJlbEZvcm1hdHRlciIsImlzRW5nbGlzaCIsInN0eWxlIiwicnRmIiwiX3Byb3RvMyIsImNvdW50IiwibnVtZXJpYyIsIm5hcnJvdyIsInVuaXRzIiwieWVhcnMiLCJxdWFydGVycyIsIndlZWtzIiwiZGF5cyIsInNlY29uZHMiLCJsYXN0YWJsZSIsImlzRGF5IiwiaXNJblBhc3QiLCJmbXRWYWx1ZSIsInNpbmd1bGFyIiwibGlsVW5pdHMiLCJmbXRVbml0IiwiZm9ybWF0UmVsYXRpdmVUaW1lIiwibnVtYmVyaW5nIiwic3BlY2lmaWVkTG9jYWxlIiwiX3BhcnNlTG9jYWxlU3RyaW5nIiwibG9jYWxlU3RyIiwidUluZGV4Iiwic21hbGxlciIsIl9vcHRpb25zIiwiY2FsZW5kYXIiLCJwYXJzZUxvY2FsZVN0cmluZyIsInBhcnNlZExvY2FsZSIsInBhcnNlZE51bWJlcmluZ1N5c3RlbSIsInBhcnNlZE91dHB1dENhbGVuZGFyIiwiaW50bENvbmZpZ1N0cmluZyIsIndlZWtkYXlzQ2FjaGUiLCJtb250aHNDYWNoZSIsIm1lcmlkaWVtQ2FjaGUiLCJlcmFDYWNoZSIsImZhc3ROdW1iZXJzQ2FjaGVkIiwiZnJvbU9wdHMiLCJkZWZhdWx0VG9FTiIsImNvbXB1dGVkU3lzIiwic3lzdGVtTG9jYWxlIiwiZnJvbU9iamVjdCIsIl90ZW1wIiwiX3Byb3RvNCIsImhhc0ZUUCIsImlzQWN0dWFsbHlFbiIsImhhc05vV2VpcmRuZXNzIiwiY2xvbmUiLCJhbHRzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInJlZGVmYXVsdFRvRU4iLCJmb3JtYXRTdHIiLCJtcyIsInV0YyIsIm1hcE1vbnRocyIsIm1hcFdlZWtkYXlzIiwiX3RoaXMzIiwiX3RoaXM0IiwiZmllbGQiLCJtYXRjaGluZyIsImZhc3ROdW1iZXJzIiwicmVsRm9ybWF0dGVyIiwic3RhcnRzV2l0aCIsIm90aGVyIiwiY29tYmluZVJlZ2V4ZXMiLCJfbGVuIiwicmVnZXhlcyIsImZ1bGwiLCJjb21iaW5lRXh0cmFjdG9ycyIsIl9sZW4yIiwiZXh0cmFjdG9ycyIsIl9rZXkyIiwiZXgiLCJtZXJnZWRWYWxzIiwibWVyZ2VkWm9uZSIsImN1cnNvciIsIl9leCIsInBhcnNlIiwiX2xlbjMiLCJwYXR0ZXJucyIsIl9rZXkzIiwiX3BhdHRlcm5zIiwiX3BhdHRlcm5zJF9pIiwicmVnZXgiLCJleHRyYWN0b3IiLCJzaW1wbGVQYXJzZSIsIl9sZW40IiwiX2tleTQiLCJyZXQiLCJvZmZzZXRSZWdleCIsImlzb1RpbWVCYXNlUmVnZXgiLCJpc29UaW1lUmVnZXgiLCJpc29UaW1lRXh0ZW5zaW9uUmVnZXgiLCJleHRyYWN0SVNPV2Vla0RhdGEiLCJleHRyYWN0SVNPT3JkaW5hbERhdGEiLCJzcWxUaW1lUmVnZXgiLCJzcWxUaW1lRXh0ZW5zaW9uUmVnZXgiLCJpbnQiLCJmYWxsYmFjayIsImV4dHJhY3RJU09ZbWQiLCJleHRyYWN0SVNPVGltZSIsImV4dHJhY3RJU09PZmZzZXQiLCJsb2NhbCIsImZ1bGxPZmZzZXQiLCJleHRyYWN0SUFOQVpvbmUiLCJpc29EdXJhdGlvbiIsImV4dHJhY3RJU09EdXJhdGlvbiIsInllYXJTdHIiLCJtb250aFN0ciIsIndlZWtTdHIiLCJkYXlTdHIiLCJob3VyU3RyIiwibWludXRlU3RyIiwic2Vjb25kU3RyIiwibWlsbGlzZWNvbmRzU3RyIiwiaGFzTmVnYXRpdmVQcmVmaXgiLCJtYXliZU5lZ2F0ZSIsIm1pbGxpc2Vjb25kcyIsIm9ic09mZnNldHMiLCJHTVQiLCJFRFQiLCJFU1QiLCJDRFQiLCJDU1QiLCJNRFQiLCJNU1QiLCJQRFQiLCJQU1QiLCJmcm9tU3RyaW5ncyIsIndlZWtkYXlTdHIiLCJyZmMyODIyIiwiZXh0cmFjdFJGQzI4MjIiLCJvYnNPZmZzZXQiLCJtaWxPZmZzZXQiLCJyZmMxMTIzIiwicmZjODUwIiwiYXNjaWkiLCJleHRyYWN0UkZDMTEyM09yODUwIiwiZXh0cmFjdEFTQ0lJIiwiaXNvWW1kV2l0aFRpbWVFeHRlbnNpb25SZWdleCIsImlzb1dlZWtXaXRoVGltZUV4dGVuc2lvblJlZ2V4IiwiaXNvT3JkaW5hbFdpdGhUaW1lRXh0ZW5zaW9uUmVnZXgiLCJpc29UaW1lQ29tYmluZWRSZWdleCIsImV4dHJhY3RJU09ZbWRUaW1lQW5kT2Zmc2V0IiwiZXh0cmFjdElTT1dlZWtUaW1lQW5kT2Zmc2V0IiwiZXh0cmFjdElTT09yZGluYWxEYXRhQW5kVGltZSIsImV4dHJhY3RJU09UaW1lQW5kT2Zmc2V0Iiwic3FsWW1kV2l0aFRpbWVFeHRlbnNpb25SZWdleCIsInNxbFRpbWVDb21iaW5lZFJlZ2V4IiwiZXh0cmFjdElTT1ltZFRpbWVPZmZzZXRBbmRJQU5BWm9uZSIsImV4dHJhY3RJU09UaW1lT2Zmc2V0QW5kSUFOQVpvbmUiLCJsb3dPcmRlck1hdHJpeCIsImNhc3VhbE1hdHJpeCIsImRheXNJblllYXJBY2N1cmF0ZSIsImRheXNJbk1vbnRoQWNjdXJhdGUiLCJhY2N1cmF0ZU1hdHJpeCIsIm9yZGVyZWRVbml0cyIsInJldmVyc2VVbml0cyIsInJldmVyc2UiLCJjb25mIiwiY29udmVyc2lvbkFjY3VyYWN5IiwiRHVyYXRpb24iLCJjb252ZXJ0IiwibWF0cml4IiwiZnJvbU1hcCIsImZyb21Vbml0IiwidG9NYXAiLCJ0b1VuaXQiLCJjb252IiwicmF3IiwiYWRkZWQiLCJjZWlsIiwiYW50aVRydW5jIiwiY29uZmlnIiwiYWNjdXJhdGUiLCJpbnZhbGlkIiwiaXNMdXhvbkR1cmF0aW9uIiwibm9ybWFsaXplVW5pdCIsImZyb21JU08iLCJ0ZXh0IiwicGFyc2VJU09EdXJhdGlvbiIsIndlZWsiLCJpc0R1cmF0aW9uIiwidG9Gb3JtYXQiLCJmbXRPcHRzIiwidG9PYmplY3QiLCJpbmNsdWRlQ29uZmlnIiwidG9JU08iLCJ0b0pTT04iLCJhcyIsInBsdXMiLCJkdXJhdGlvbiIsImZyaWVuZGx5RHVyYXRpb24iLCJtaW51cyIsIm5lZ2F0ZSIsIm1hcFVuaXRzIiwiX09iamVjdCRrZXlzIiwicmVjb25maWd1cmUiLCJub3JtYWxpemUiLCJ2YWxzIiwibm9ybWFsaXplVmFsdWVzIiwibGFzdFVuaXQiLCJfc3RlcDIiLCJidWlsdCIsImFjY3VtdWxhdGVkIiwiX2l0ZXJhdG9yMiIsIm93biIsImFrIiwiZG93biIsIm5lZ2F0ZWQiLCJfaTIiLCJfT2JqZWN0JGtleXMyIiwiX3N0ZXAzIiwiX2l0ZXJhdG9yMyIsImR1cmF0aW9uaXNoIiwiSU5WQUxJRCQxIiwidmFsaWRhdGVTdGFydEVuZCIsInN0YXJ0IiwiZW5kIiwiSW50ZXJ2YWwiLCJpc0x1eG9uSW50ZXJ2YWwiLCJmcm9tRGF0ZVRpbWVzIiwiYnVpbHRTdGFydCIsImZyaWVuZGx5RGF0ZVRpbWUiLCJidWlsdEVuZCIsInZhbGlkYXRlRXJyb3IiLCJhZnRlciIsImJlZm9yZSIsIl9zcGxpdCIsInN0YXJ0SXNWYWxpZCIsImVuZElzVmFsaWQiLCJfZHVyIiwiaXNJbnRlcnZhbCIsInRvRHVyYXRpb24iLCJzdGFydE9mIiwiZGlmZiIsImhhc1NhbWUiLCJpc0VtcHR5IiwiaXNBZnRlciIsImRhdGVUaW1lIiwiaXNCZWZvcmUiLCJjb250YWlucyIsInNwbGl0QXQiLCJkYXRlVGltZXMiLCJzb3J0ZWQiLCJyZXN1bHRzIiwic3BsaXRCeSIsImRpdmlkZUVxdWFsbHkiLCJudW1iZXJPZlBhcnRzIiwib3ZlcmxhcHMiLCJhYnV0c1N0YXJ0IiwiYWJ1dHNFbmQiLCJlbmd1bGZzIiwiaW50ZXJzZWN0aW9uIiwidW5pb24iLCJtZXJnZSIsImludGVydmFscyIsIl9pbnRlcnZhbHMkc29ydCRyZWR1YyIsInNvZmFyIiwiZmluYWwiLCJ4b3IiLCJfQXJyYXkkcHJvdG90eXBlIiwiY3VycmVudENvdW50IiwiZW5kcyIsInRpbWUiLCJkaWZmZXJlbmNlIiwidG9JU09EYXRlIiwidG9JU09UaW1lIiwiZGF0ZUZvcm1hdCIsIl90ZW1wMiIsIl9yZWYzJHNlcGFyYXRvciIsInNlcGFyYXRvciIsImludmFsaWRSZWFzb24iLCJtYXBFbmRwb2ludHMiLCJtYXBGbiIsIkluZm8iLCJoYXNEU1QiLCJzZXRab25lIiwiaXNWYWxpZElBTkFab25lIiwiX3JlZiRsb2NhbGUiLCJfcmVmJG51bWJlcmluZ1N5c3RlbSIsIl9yZWYkb3V0cHV0Q2FsZW5kYXIiLCJtb250aHNGb3JtYXQiLCJfcmVmMiRsb2NhbGUiLCJfcmVmMiRudW1iZXJpbmdTeXN0ZW0iLCJfcmVmMiRvdXRwdXRDYWxlbmRhciIsIl90ZW1wMyIsIl9yZWYzIiwiX3JlZjMkbG9jYWxlIiwiX3JlZjMkbnVtYmVyaW5nU3lzdGVtIiwid2Vla2RheXNGb3JtYXQiLCJfdGVtcDQiLCJfcmVmNCIsIl9yZWY0JGxvY2FsZSIsIl9yZWY0JG51bWJlcmluZ1N5c3RlbSIsIl90ZW1wNSIsIl9yZWY1JGxvY2FsZSIsIl90ZW1wNiIsIl9yZWY2JGxvY2FsZSIsImZlYXR1cmVzIiwiaW50bFRva2VucyIsInpvbmVzIiwicmVsYXRpdmUiLCJkYXlEaWZmIiwiZWFybGllciIsImxhdGVyIiwidXRjRGF5U3RhcnQiLCJ0b1VUQyIsImtlZXBMb2NhbFRpbWUiLCJfZGlmZiIsIl9oaWdoT3JkZXJEaWZmcyIsImxvd2VzdE9yZGVyIiwiaGlnaFdhdGVyIiwiX2RpZmZlcnMiLCJfZGlmZmVycyRfaSIsImRpZmZlciIsIl9jdXJzb3IkcGx1cyIsIl9jdXJzb3IkcGx1czIiLCJkZWx0YSIsImhpZ2hPcmRlckRpZmZzIiwicmVtYWluaW5nTWlsbGlzIiwibG93ZXJPcmRlclVuaXRzIiwiX2N1cnNvciRwbHVzMyIsIl9EdXJhdGlvbiRmcm9tTWlsbGlzIiwibnVtYmVyaW5nU3lzdGVtcyIsImFyYWIiLCJhcmFiZXh0IiwiYmFsaSIsImJlbmciLCJkZXZhIiwiZnVsbHdpZGUiLCJndWpyIiwiaGFuaWRlYyIsImtobXIiLCJrbmRhIiwibGFvbyIsImxpbWIiLCJtbHltIiwibW9uZyIsIm15bXIiLCJvcnlhIiwidGFtbGRlYyIsInRlbHUiLCJ0aGFpIiwidGlidCIsImxhdG4iLCJudW1iZXJpbmdTeXN0ZW1zVVRGMTYiLCJoYW5pZGVjQ2hhcnMiLCJkaWdpdFJlZ2V4IiwiYXBwZW5kIiwiaW50VW5pdCIsInBvc3QiLCJkZXNlciIsInN0ciIsImNvZGUiLCJjaGFyQ29kZUF0Iiwic2VhcmNoIiwiX251bWJlcmluZ1N5c3RlbXNVVEYiLCJtaW4iLCJtYXgiLCJwYXJzZURpZ2l0cyIsInNwYWNlT3JOQlNQIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwic3BhY2VPck5CU1BSZWdFeHAiLCJmaXhMaXN0UmVnZXgiLCJzdHJpcEluc2Vuc2l0aXZpdGllcyIsIm9uZU9mIiwic3RyaW5ncyIsInN0YXJ0SW5kZXgiLCJmaW5kSW5kZXgiLCJncm91cHMiLCJzaW1wbGUiLCJwYXJ0VHlwZVN0eWxlVG9Ub2tlblZhbCIsIjItZGlnaXQiLCJzaG9ydCIsImxvbmciLCJkYXlwZXJpb2QiLCJkYXlQZXJpb2QiLCJkdW1teURhdGVUaW1lQ2FjaGUiLCJtYXliZUV4cGFuZE1hY3JvVG9rZW4iLCJwYXJ0IiwidG9rZW5Gb3JQYXJ0IiwiZXhwbGFpbkZyb21Ub2tlbnMiLCJleHBhbmRNYWNyb1Rva2VucyIsIm9uZSIsInR3byIsInRocmVlIiwiZm91ciIsInNpeCIsIm9uZU9yVHdvIiwib25lVG9UaHJlZSIsIm9uZVRvU2l4Iiwib25lVG9OaW5lIiwidHdvVG9Gb3VyIiwiZm91clRvU2l4IiwiX3JlZjUiLCJ1bml0YXRlIiwiZGlzcXVhbGlmeWluZ1VuaXQiLCJfYnVpbGRSZWdleCIsImJ1aWxkUmVnZXgiLCJyZWdleFN0cmluZyIsImhhbmRsZXJzIiwiX21hdGNoIiwibWF0Y2hlcyIsImFsbCIsIm1hdGNoSW5kZXgiLCJoIiwicmF3TWF0Y2hlcyIsIl9yZWY2IiwiWiIsInEiLCJNIiwiRyIsIlMiLCJ0b0ZpZWxkIiwiZGF0ZVRpbWVGcm9tTWF0Y2hlcyIsIm5vbkxlYXBMYWRkZXIiLCJsZWFwTGFkZGVyIiwidW5pdE91dE9mUmFuZ2UiLCJkYXlPZldlZWsiLCJqcyIsImdldFVUQ0RheSIsImNvbXB1dGVPcmRpbmFsIiwidW5jb21wdXRlT3JkaW5hbCIsIm1vbnRoMCIsImdyZWdvcmlhblRvV2VlayIsImdyZWdPYmoiLCJ3ZWVrVG9HcmVnb3JpYW4iLCJ3ZWVrRGF0YSIsIndlZWtkYXlPZkphbjQiLCJ5ZWFySW5EYXlzIiwiX3VuY29tcHV0ZU9yZGluYWwiLCJncmVnb3JpYW5Ub09yZGluYWwiLCJncmVnRGF0YSIsIm9yZGluYWxUb0dyZWdvcmlhbiIsIm9yZGluYWxEYXRhIiwiX3VuY29tcHV0ZU9yZGluYWwyIiwiaGFzSW52YWxpZEdyZWdvcmlhbkRhdGEiLCJ2YWxpZFllYXIiLCJ2YWxpZE1vbnRoIiwidmFsaWREYXkiLCJoYXNJbnZhbGlkVGltZURhdGEiLCJ2YWxpZEhvdXIiLCJ2YWxpZE1pbnV0ZSIsInZhbGlkU2Vjb25kIiwidmFsaWRNaWxsaXNlY29uZCIsIklOVkFMSUQkMiIsIk1BWF9EQVRFIiwidW5zdXBwb3J0ZWRab25lIiwicG9zc2libHlDYWNoZWRXZWVrRGF0YSIsImNsb25lJDEiLCJpbnN0Iiwib2xkIiwiZml4T2Zmc2V0IiwibG9jYWxUUyIsInR6IiwidXRjR3Vlc3MiLCJvMiIsIm8zIiwidHNUb09iaiIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJvYmpUb1RTIiwiYWRqdXN0VGltZSIsIm9QcmUiLCJtaWxsaXNUb0FkZCIsIl9maXhPZmZzZXQiLCJwYXJzZURhdGFUb0RhdGVUaW1lIiwicGFyc2VkWm9uZSIsImludGVycHJldGF0aW9uWm9uZSIsInRvVGVjaEZvcm1hdCIsInRvVGVjaFRpbWVGb3JtYXQiLCJfcmVmJHN1cHByZXNzU2Vjb25kcyIsInN1cHByZXNzU2Vjb25kcyIsIl9yZWYkc3VwcHJlc3NNaWxsaXNlYyIsInN1cHByZXNzTWlsbGlzZWNvbmRzIiwiaW5jbHVkZU9mZnNldCIsIl9yZWYkaW5jbHVkZVpvbmUiLCJpbmNsdWRlWm9uZSIsIl9yZWYkc3BhY2Vab25lIiwic3BhY2Vab25lIiwiX3JlZiRmb3JtYXQiLCJkZWZhdWx0VW5pdFZhbHVlcyIsImRlZmF1bHRXZWVrVW5pdFZhbHVlcyIsImRlZmF1bHRPcmRpbmFsVW5pdFZhbHVlcyIsIm9yZGVyZWRVbml0cyQxIiwib3JkZXJlZFdlZWtVbml0cyIsIm9yZGVyZWRPcmRpbmFsVW5pdHMiLCJ3ZWVrbnVtYmVyIiwid2Vla3NudW1iZXIiLCJ3ZWVrbnVtYmVycyIsIndlZWt5ZWFyIiwid2Vla3llYXJzIiwicXVpY2tEVCIsInRzTm93IiwiX29ialRvVFMiLCJkaWZmUmVsYXRpdmUiLCJjYWxlbmRhcnkiLCJvdCIsIl96b25lIiwiaXNMdXhvbkRhdGVUaW1lIiwiZnJvbUpTRGF0ZSIsInpvbmVUb1VzZSIsImZyb21TZWNvbmRzIiwib2Zmc2V0UHJvdmlzIiwiY29udGFpbnNPcmRpbmFsIiwiY29udGFpbnNHcmVnb3JZZWFyIiwiY29udGFpbnNHcmVnb3JNRCIsImNvbnRhaW5zR3JlZ29yIiwiZGVmaW5pdGVXZWVrRGVmIiwiZGVmYXVsdFZhbHVlcyIsInVzZVdlZWtEYXRhIiwib2JqTm93IiwiZm91bmRGaXJzdCIsInZhbGlkV2VlayIsInZhbGlkV2Vla2RheSIsImhhc0ludmFsaWRXZWVrRGF0YSIsInZhbGlkT3JkaW5hbCIsImhhc0ludmFsaWRPcmRpbmFsRGF0YSIsIl9vYmpUb1RTMiIsIl9wYXJzZUlTT0RhdGUiLCJwYXJzZUlTT0RhdGUiLCJmcm9tUkZDMjgyMiIsIl9wYXJzZVJGQzI4MjJEYXRlIiwicHJlcHJvY2Vzc1JGQzI4MjIiLCJwYXJzZVJGQzI4MjJEYXRlIiwiZnJvbUhUVFAiLCJfcGFyc2VIVFRQRGF0ZSIsInBhcnNlSFRUUERhdGUiLCJmcm9tRm9ybWF0IiwiX29wdHMkbG9jYWxlIiwiX29wdHMkbnVtYmVyaW5nU3lzdGVtIiwiX3BhcnNlRnJvbVRva2VucyIsIl9leHBsYWluRnJvbVRva2VucyIsInBhcnNlRnJvbVRva2VucyIsImZyb21TdHJpbmciLCJmcm9tU1FMIiwiX3BhcnNlU1FMIiwicGFyc2VTUUwiLCJpc0RhdGVUaW1lIiwicmVzb2x2ZWRMb2NhbGVPcHRzIiwiX0Zvcm1hdHRlciRjcmVhdGUkcmVzIiwidG9Mb2NhbCIsIl9yZWYzJGtlZXBMb2NhbFRpbWUiLCJfcmVmMyRrZWVwQ2FsZW5kYXJUaW0iLCJrZWVwQ2FsZW5kYXJUaW1lIiwibmV3VFMiLCJvZmZzZXRHdWVzcyIsInNldExvY2FsZSIsIm1peGVkIiwiX29ialRvVFM0Iiwibm9ybWFsaXplZFVuaXQiLCJlbmRPZiIsIl90aGlzJHBsdXMiLCJ0b0xvY2FsZVN0cmluZyIsInRvTG9jYWxlUGFydHMiLCJfcmVmNSRmb3JtYXQiLCJ0b0lTT1dlZWtEYXRlIiwiX3JlZjYkc3VwcHJlc3NNaWxsaXNlIiwiX3JlZjYkc3VwcHJlc3NTZWNvbmRzIiwiX3JlZjYkaW5jbHVkZU9mZnNldCIsIl9yZWY2JGZvcm1hdCIsInRvUkZDMjgyMiIsInRvSFRUUCIsInRvU1FMRGF0ZSIsInRvU1FMVGltZSIsIl9yZWY3IiwiX3JlZjckaW5jbHVkZU9mZnNldCIsIl9yZWY3JGluY2x1ZGVab25lIiwidG9TUUwiLCJ0b01pbGxpcyIsInRvU2Vjb25kcyIsInRvQlNPTiIsIm90aGVyRGF0ZVRpbWUiLCJkdXJPcHRzIiwib3RoZXJJc0xhdGVyIiwiZGlmZmVkIiwiZGlmZk5vdyIsInVudGlsIiwiaW5wdXRNcyIsInRvUmVsYXRpdmUiLCJwYWRkaW5nIiwidG9SZWxhdGl2ZUNhbGVuZGFyIiwiZXZlcnkiLCJmcm9tRm9ybWF0RXhwbGFpbiIsIl9vcHRpb25zJGxvY2FsZSIsIl9vcHRpb25zJG51bWJlcmluZ1N5cyIsImZyb21TdHJpbmdFeHBsYWluIiwiZGF0ZVRpbWVpc2giLCJfc2V0dGluZ3MiLCJEYXRlVGltZVByb3ZpZGVyIiwiZGF0ZXRpbWUiLCJ0aW1lem9uZSIsIl9kYXRldGltZSIsIkRhdGVUaW1lVGVtcGxlUHJvdmlkZXIiLCJEYXRlVGltZUNvbnRleHQiLCJ1aWQiLCJ0aXRsZSIsIlpldHRlbFRlbXBsZVByb3ZpZGVyIiwidGVtcGxhdGUiLCJiYXNlbmFtZSIsImV4dHJhY3RQcmVmaXgiLCJleHRyYWN0U3VmZml4IiwiemV0dGVsIiwiZXh0cmFjdEN1c3RvbSIsImV4dHJhY3RSZWdleCIsIlpldHRlbENvbnRleHQiLCJtb2R1bGVzIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsIm1vZHVsZSIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsIkFycmF5UHJvdG8iLCJPYmpQcm90byIsImVzY2FwZU1hcCIsIiYiLCJcIiIsIiciLCI8IiwiPiIsImVzY2FwZVJlZ2V4IiwiaGFzT3duUHJvcCIsImxvb2t1cEVzY2FwZSIsImNoIiwiVGVtcGxhdGVFcnJvciIsImxpbmVubyIsImNvbG5vIiwiZXJyIiwiY2F1c2UiLCJnZXRTdGFjayIsImNhcHR1cmVTdGFja1RyYWNlIiwic3RhY2tEZXNjcmlwdG9yIiwic3RhY2siLCJmaXJzdFVwZGF0ZSIsIlVwZGF0ZSIsImlzRnVuY3Rpb24iLCJpc1N0cmluZyIsImlzT2JqZWN0IiwidG9BcnJheSIsInNlYXJjaEVsZW1lbnQiLCJmcm9tSW5kZXgiLCJrZXlzXyIsIl9wcmV0dGlmeUVycm9yIiwid2l0aEludGVybmFscyIsImVzY2FwZSIsImdyb3VwQnkiLCJ0aHJvd09uVW5kZWZpbmVkIiwiYXR0ciIsInBhcnRzIiwiX2l0ZW0iLCJhcnJheSIsImNoYXJfIiwiZWFjaCIsImFzeW5jSXRlciIsIml0ZXIiLCJjYiIsImFzeW5jRm9yIiwiX2VudHJpZXMiLCJfYXNzaWduIiwiZXh0ZW5kIiwib2JqMSIsIm9iajIiLCJpbk9wZXJhdG9yIiwiRXZlbnRFbWl0dGVyIiwibGliIiwiZXh0ZW5kQ2xhc3MiLCJjbHMiLCJ0bXAiLCJyZXMiLCJzdWJjbGFzcyIsIl9jbHMiLCJPYmoiLCJFbWl0dGVyT2JqIiwiX0V2ZW50RW1pdHRlciIsImFycmF5RnJvbSIsInN1cHBvcnRzSXRlcmF0b3JzIiwiRnJhbWUiLCJpc29sYXRlV3JpdGVzIiwidmFyaWFibGVzIiwidG9wTGV2ZWwiLCJyZXNvbHZlVXAiLCJmcmFtZSIsImlkIiwibG9va3VwIiwiZm9yV3JpdGUiLCJpc0tleXdvcmRBcmdzIiwiZ2V0S2V5d29yZEFyZ3MiLCJsYXN0QXJnIiwibnVtQXJncyIsIlNhZmVTdHJpbmciLCJtYWtlTWFjcm8iLCJhcmdOYW1lcyIsImt3YXJnTmFtZXMiLCJtYWNyb0FyZ3MiLCJhcmdDb3VudCIsImt3YXJncyIsImFyZyIsIm1ha2VLZXl3b3JkQXJncyIsIl9fa2V5d29yZHMiLCJzdXBwcmVzc1ZhbHVlIiwiYXV0b2VzY2FwZSIsImVuc3VyZURlZmluZWQiLCJtZW1iZXJMb29rdXAiLCJjb250ZXh0T3JGcmFtZUxvb2t1cCIsImNhbGxXcmFwIiwiaGFuZGxlRXJyb3IiLCJjb3B5U2FmZW5lc3MiLCJkZXN0IiwibWFya1NhZmUiLCJhc3luY0VhY2giLCJkaW1lbiIsImFzeW5jQWxsIiwib3V0cHV0QXJyIiwiZmluaXNoZWQiLCJvdXRwdXQiLCJmcm9tSXRlcmF0b3IiLCJ0cmF2ZXJzZUFuZENoZWNrIiwiTm9kZSIsImZpbmRBbGwiLCJfT2JqIiwiZmllbGRzIiwiTm9kZUxpc3QiLCJjaGlsZHJlbiIsImNoaWxkIiwiaXRlckZpZWxkcyIsIlZhbHVlIiwiX05vZGUiLCJfTm9kZTIiLCJub2RlcyIsImFkZENoaWxkIiwibm9kZSIsIlJvb3QiLCJMaXRlcmFsIiwiR3JvdXAiLCJBcnJheU5vZGUiLCJQYWlyIiwiRGljdCIsIkxvb2t1cFZhbCIsIklmIiwiSWZBc3luYyIsIklubGluZUlmIiwiRm9yIiwiQXN5bmNFYWNoIiwiQXN5bmNBbGwiLCJNYWNybyIsIkNhbGxlciIsIkltcG9ydCIsIkZyb21JbXBvcnQiLCJfTm9kZTMiLCJuYW1lcyIsIndpdGhDb250ZXh0IiwiRnVuQ2FsbCIsIkZpbHRlciIsIkZpbHRlckFzeW5jIiwiS2V5d29yZEFyZ3MiLCJCbG9jayIsIlN1cGVyIiwiRXh0ZW5kcyIsIkluY2x1ZGUiLCJTd2l0Y2giLCJDYXNlIiwiT3V0cHV0IiwiQ2FwdHVyZSIsIlRlbXBsYXRlRGF0YSIsIlVuYXJ5T3AiLCJCaW5PcCIsIkluIiwiSXMiLCJPciIsIkFuZCIsIk5vdCIsIkFkZCIsIkNvbmNhdCIsIlN1YiIsIk11bCIsIkRpdiIsIkZsb29yRGl2IiwiTW9kIiwiUG93IiwiTmVnIiwiUG9zIiwiQ29tcGFyZSIsIkNvbXBhcmVPcGVyYW5kIiwiQ2FsbEV4dGVuc2lvbiIsImV4dCIsImNvbnRlbnRBcmdzIiwiZXh0TmFtZSIsIl9fbmFtZSIsIkNhbGxFeHRlbnNpb25Bc3luYyIsInByaW50IiwiaW5saW5lIiwibGluZXMiLCJsaW5lIiwic3Rkb3V0Iiwid3JpdGUiLCJubCIsInByaW50Tm9kZXMiLCJ0eXBlbmFtZSIsImZpZWxkTmFtZSIsInBhcnNlciIsInRyYW5zZm9ybWVyIiwiY29tcGFyZU9wcyIsIj09IiwiPT09IiwiIT0iLCIhPT0iLCI8PSIsIj49IiwiQ29tcGlsZXIiLCJ0ZW1wbGF0ZU5hbWUiLCJjb2RlYnVmIiwibGFzdElkIiwiYnVmZmVyU3RhY2siLCJfc2NvcGVDbG9zZXJzIiwiaW5CbG9jayIsImZhaWwiLCJfcHVzaEJ1ZmZlciIsIl90bXBpZCIsIl9lbWl0IiwiX3BvcEJ1ZmZlciIsIl9lbWl0TGluZSIsIl9lbWl0TGluZXMiLCJfZW1pdEZ1bmNCZWdpbiIsIl9lbWl0RnVuY0VuZCIsIm5vUmV0dXJuIiwiX2Nsb3NlU2NvcGVMZXZlbHMiLCJfYWRkU2NvcGVMZXZlbCIsIl93aXRoU2NvcGVkU3ludGF4IiwiX21ha2VDYWxsYmFjayIsIl90ZW1wbGF0ZU5hbWUiLCJfY29tcGlsZUNoaWxkcmVuIiwiY29tcGlsZSIsIl9jb21waWxlQWdncmVnYXRlIiwic3RhcnRDaGFyIiwiZW5kQ2hhciIsIl9jb21waWxlRXhwcmVzc2lvbiIsImFzc2VydFR5cGUiLCJ0eXBlcyIsImNvbXBpbGVDYWxsRXh0ZW5zaW9uIiwiYXN5bmMiLCJjb21waWxlQ2FsbEV4dGVuc2lvbkFzeW5jIiwiY29tcGlsZU5vZGVMaXN0IiwiY29tcGlsZUxpdGVyYWwiLCJjb21waWxlU3ltYm9sIiwiY29tcGlsZUdyb3VwIiwiY29tcGlsZUFycmF5IiwiY29tcGlsZURpY3QiLCJjb21waWxlUGFpciIsImNvbXBpbGVJbmxpbmVJZiIsImNvbmQiLCJlbHNlXyIsImNvbXBpbGVJbiIsImxlZnQiLCJyaWdodCIsImNvbXBpbGVJcyIsIl9iaW5PcEVtaXR0ZXIiLCJjb21waWxlT3IiLCJjb21waWxlQW5kIiwiY29tcGlsZUFkZCIsImNvbXBpbGVDb25jYXQiLCJjb21waWxlU3ViIiwiY29tcGlsZU11bCIsImNvbXBpbGVEaXYiLCJjb21waWxlTW9kIiwiY29tcGlsZU5vdCIsImNvbXBpbGVGbG9vckRpdiIsImNvbXBpbGVQb3ciLCJjb21waWxlTmVnIiwiY29tcGlsZVBvcyIsImNvbXBpbGVDb21wYXJlIiwiX3RoaXM1IiwiZXhwciIsImNvbXBpbGVMb29rdXBWYWwiLCJfZ2V0Tm9kZU5hbWUiLCJjb21waWxlRnVuQ2FsbCIsImNvbXBpbGVGaWx0ZXIiLCJjb21waWxlRmlsdGVyQXN5bmMiLCJzeW1ib2wiLCJjb21waWxlS2V5d29yZEFyZ3MiLCJjb21waWxlU2V0IiwiX3RoaXM2IiwiaWRzIiwidGFyZ2V0cyIsImNvbXBpbGVTd2l0Y2giLCJfdGhpczciLCJjYXNlcyIsImRlZmF1bHQiLCJjb21waWxlSWYiLCJfdGhpczgiLCJjb21waWxlSWZBc3luYyIsIl9lbWl0TG9vcEJpbmRpbmdzIiwiX3RoaXM5IiwiY29tcGlsZUZvciIsIl90aGlzMTAiLCJ0aWQiLCJfbm9kZSRuYW1lJGNoaWxkcmVuIiwiX3YiLCJfY29tcGlsZUFzeW5jTG9vcCIsInBhcmFsbGVsIiwiX3RoaXMxMSIsImFzeW5jTWV0aG9kIiwiYXJyYXlMZW4iLCJidWYiLCJjb21waWxlQXN5bmNFYWNoIiwiY29tcGlsZUFzeW5jQWxsIiwiX2NvbXBpbGVNYWNybyIsIl90aGlzMTIiLCJmdW5jSWQiLCJrZWVwRnJhbWUiLCJjdXJyRnJhbWUiLCJyZWFsTmFtZXMiLCJidWZmZXJJZCIsImNvbXBpbGVNYWNybyIsImNvbXBpbGVDYWxsZXIiLCJfY29tcGlsZUdldFRlbXBsYXRlIiwiZWFnZXJDb21waWxlIiwiaWdub3JlTWlzc2luZyIsInBhcmVudFRlbXBsYXRlSWQiLCJwYXJlbnROYW1lIiwiZWFnZXJDb21waWxlQXJnIiwiaWdub3JlTWlzc2luZ0FyZyIsImNvbXBpbGVJbXBvcnQiLCJjb21waWxlRnJvbUltcG9ydCIsIl90aGlzMTMiLCJpbXBvcnRlZElkIiwibmFtZU5vZGUiLCJhbGlhcyIsImNvbXBpbGVCbG9jayIsImNvbXBpbGVTdXBlciIsImJsb2NrTmFtZSIsImNvbXBpbGVFeHRlbmRzIiwiY29tcGlsZUluY2x1ZGUiLCJpZDIiLCJjb21waWxlVGVtcGxhdGVEYXRhIiwiY29tcGlsZUNhcHR1cmUiLCJfdGhpczE0IiwiY29tcGlsZU91dHB1dCIsIl90aGlzMTUiLCJjb21waWxlUm9vdCIsIl90aGlzMTYiLCJibG9ja05hbWVzIiwiYmxvY2tzIiwiYmxvY2siLCJ0bXBGcmFtZSIsIl9jb21waWxlIiwiZ2V0Q29kZSIsInNyYyIsImFzeW5jRmlsdGVycyIsImV4dGVuc2lvbnMiLCJwcm9jZXNzZWRTcmMiLCJwcmVwcm9jZXNzIiwicHJvY2Vzc29yIiwiX0VtaXR0ZXJPYmoiLCJMb2FkZXIiLCJkaXJuYW1lIiwiaXNSZWxhdGl2ZSIsImZpbGVuYW1lIiwiYXNhcCIsIl93YXRlcmZhbGwiLCJjb21waWxlciIsImZpbHRlcnMiLCJfcmVxdWlyZSIsIkZpbGVTeXN0ZW1Mb2FkZXIiLCJXZWJMb2FkZXIiLCJQcmVjb21waWxlZExvYWRlciIsInRlc3RzIiwiZ2xvYmFscyIsIl9yZXF1aXJlMiIsImdsb2JhbFJ1bnRpbWUiLCJleHByZXNzQXBwIiwiY2FsbGJhY2tBc2FwIiwibm9vcFRtcGxTcmMiLCJydW50aW1lIiwiRW52aXJvbm1lbnQiLCJsb2FkZXJzIiwiZGV2IiwidHJpbUJsb2NrcyIsImxzdHJpcEJsb2NrcyIsIndpbmRvdyIsIm51bmp1Y2tzUHJlY29tcGlsZWQiLCJ1bnNoaWZ0IiwiX2luaXRMb2FkZXJzIiwiZXh0ZW5zaW9uc0xpc3QiLCJhZGRGaWx0ZXIiLCJhZGRUZXN0IiwibG9hZGVyIiwiY2FjaGUiLCJvbiIsImZ1bGxuYW1lIiwiZW1pdCIsImludmFsaWRhdGVDYWNoZSIsImFkZEV4dGVuc2lvbiIsImV4dGVuc2lvbiIsInJlbW92ZUV4dGVuc2lvbiIsImdldEV4dGVuc2lvbiIsImhhc0V4dGVuc2lvbiIsImFkZEdsb2JhbCIsImdldEdsb2JhbCIsIndyYXBwZWQiLCJnZXRGaWx0ZXIiLCJnZXRUZXN0IiwicmVzb2x2ZVRlbXBsYXRlIiwiZ2V0VGVtcGxhdGUiLCJzeW5jUmVzdWx0IiwidGhhdCIsInRtcGwiLCJUZW1wbGF0ZSIsImhhbmRsZSIsImdldFNvdXJjZSIsImluZm8iLCJuZXdUbXBsIiwibm9DYWNoZSIsImV4cHJlc3MiLCJhcHAiLCJyZW5kZXIiLCJjdHgiLCJyZW5kZXJTdHJpbmciLCJ3YXRlcmZhbGwiLCJ0YXNrcyIsImZvcmNlQXN5bmMiLCJDb250ZXh0IiwiZXhwb3J0ZWQiLCJhZGRCbG9jayIsInNldFZhcmlhYmxlIiwiZ2V0VmFyaWFibGVzIiwiZ2V0QmxvY2siLCJnZXRTdXBlciIsImJsayIsImFkZEV4cG9ydCIsImdldEV4cG9ydGVkIiwiX09iajIiLCJ0bXBsUHJvcHMiLCJ0bXBsU3RyIiwiY29tcGlsZWQiLCJwYXJlbnRGcmFtZSIsImRpZEVycm9yIiwicm9vdFJlbmRlckZ1bmMiLCJfZ2V0QmxvY2tzIiwibGV4ZXIiLCJQYXJzZXIiLCJwZWVrZWQiLCJicmVha09uQmxvY2tzIiwiZHJvcExlYWRpbmdXaGl0ZXNwYWNlIiwibmV4dFRva2VuIiwid2l0aFdoaXRlc3BhY2UiLCJ0b2siLCJUT0tFTl9XSElURVNQQUNFIiwicGVla1Rva2VuIiwicHVzaFRva2VuIiwic2tpcCIsImV4cGVjdCIsInNraXBWYWx1ZSIsInNraXBTeW1ib2wiLCJUT0tFTl9TWU1CT0wiLCJhZHZhbmNlQWZ0ZXJCbG9ja0VuZCIsIlRPS0VOX0JMT0NLX0VORCIsImFkdmFuY2VBZnRlclZhcmlhYmxlRW5kIiwiVE9LRU5fVkFSSUFCTEVfRU5EIiwidGFncyIsIlZBUklBQkxFX0VORCIsInBhcnNlRm9yIiwiZW5kQmxvY2siLCJmb3JUb2siLCJwYXJzZVByaW1hcnkiLCJUT0tFTl9DT01NQSIsInByaW0iLCJwYXJzZUV4cHJlc3Npb24iLCJwYXJzZVVudGlsQmxvY2tzIiwicGFyc2VNYWNybyIsIm1hY3JvVG9rIiwicGFyc2VTaWduYXR1cmUiLCJwYXJzZUNhbGwiLCJjYWxsVG9rIiwiY2FsbGVyQXJncyIsIm1hY3JvQ2FsbCIsImNhbGxlck5hbWUiLCJjYWxsZXJOb2RlIiwicGFyc2VXaXRoQ29udGV4dCIsInBhcnNlSW1wb3J0IiwiaW1wb3J0VG9rIiwicGFyc2VGcm9tIiwiZnJvbVRvayIsIm5leHRUb2siLCJwYXJzZUJsb2NrIiwidGFnIiwicGFyc2VFeHRlbmRzIiwidGFnTmFtZSIsInBhcnNlSW5jbHVkZSIsInBhcnNlSWYiLCJwYXJzZVNldCIsIlRPS0VOX09QRVJBVE9SIiwicGFyc2VTd2l0Y2giLCJzd2l0Y2hTdGFydCIsInN3aXRjaEVuZCIsImNhc2VTdGFydCIsImNhc2VEZWZhdWx0IiwiZGVmYXVsdENhc2UiLCJjb2wiLCJwYXJzZVN0YXRlbWVudCIsInBhcnNlUmF3IiwicGFyc2VGaWx0ZXJTdGF0ZW1lbnQiLCJlbmRUYWdOYW1lIiwicmF3QmxvY2tSZWdleCIsInJhd0xldmVsIiwiYmVndW4iLCJfZXh0cmFjdFJlZ2V4IiwicHJlIiwiYmFja04iLCJwYXJzZVBvc3RmaXgiLCJUT0tFTl9MRUZUX1BBUkVOIiwiVE9LRU5fTEVGVF9CUkFDS0VUIiwicGFyc2VBZ2dyZWdhdGUiLCJwYXJzZUlubGluZUlmIiwicGFyc2VPciIsImNvbmROb2RlIiwiYm9keU5vZGUiLCJwYXJzZUFuZCIsIm5vZGUyIiwicGFyc2VOb3QiLCJwYXJzZUluIiwicGFyc2VJcyIsImludmVydCIsInBhcnNlQ29tcGFyZSIsIm5vdCIsInBhcnNlQ29uY2F0IiwicGFyc2VBZGQiLCJUT0tFTl9USUxERSIsInBhcnNlU3ViIiwicGFyc2VNdWwiLCJwYXJzZURpdiIsInBhcnNlRmxvb3JEaXYiLCJwYXJzZU1vZCIsInBhcnNlUG93IiwicGFyc2VVbmFyeSIsIm5vRmlsdGVycyIsInBhcnNlRmlsdGVyIiwibm9Qb3N0Zml4IiwiVE9LRU5fU1RSSU5HIiwiVE9LRU5fSU5UIiwiVE9LRU5fRkxPQVQiLCJUT0tFTl9CT09MRUFOIiwiVE9LRU5fTk9ORSIsIlRPS0VOX1JFR0VYIiwiZmxhZ3MiLCJwYXJzZUZpbHRlck5hbWUiLCJwYXJzZUZpbHRlckFyZ3MiLCJUT0tFTl9QSVBFIiwiZmlsdGVyVG9rIiwiVE9LRU5fTEVGVF9DVVJMWSIsIlRPS0VOX1JJR0hUX1BBUkVOIiwiVE9LRU5fUklHSFRfQlJBQ0tFVCIsIlRPS0VOX1JJR0hUX0NVUkxZIiwiVE9LRU5fQ09MT04iLCJ0b2xlcmFudCIsIm5vUGFyZW5zIiwiY2hlY2tDb21tYSIsInByZXYiLCJwYXJzZU5vZGVzIiwiVE9LRU5fREFUQSIsIm5leHRWYWwiLCJUT0tFTl9CTE9DS19TVEFSVCIsIlRPS0VOX1ZBUklBQkxFX1NUQVJUIiwiVkFSSUFCTEVfU1RBUlQiLCJUT0tFTl9DT01NRU5UIiwiQ09NTUVOVF9TVEFSVCIsIkNPTU1FTlRfRU5EIiwicGFyc2VBc1Jvb3QiLCJsZXgiLCJ3aGl0ZXNwYWNlQ2hhcnMiLCJkZWxpbUNoYXJzIiwiVG9rZW5pemVyIiwiaW5fY29kZSIsIkJMT0NLX1NUQVJUIiwiYmxvY2tTdGFydCIsIkJMT0NLX0VORCIsImJsb2NrRW5kIiwidmFyaWFibGVTdGFydCIsInZhcmlhYmxlRW5kIiwiY29tbWVudFN0YXJ0IiwiY29tbWVudEVuZCIsImN1ciIsImlzRmluaXNoZWQiLCJfcGFyc2VTdHJpbmciLCJfZXh0cmFjdCIsIl9leHRyYWN0U3RyaW5nIiwiZm9yd2FyZCIsImJhY2siLCJmb3J3YXJkTiIsInJlZ2V4Qm9keSIsIlBPU1NJQkxFX0ZMQUdTIiwicmVnZXhGbGFncyIsImNvbXBsZXhPcHMiLCJjdXJDb21wbGV4IiwiX2V4dHJhY3RVbnRpbCIsImRlYyIsImJlZ2luQ2hhcnMiLCJpbkNvbW1lbnQiLCJfbWF0Y2hlcyIsImxhc3RMaW5lIiwiZGVsaW1pdGVyIiwiY2hhclN0cmluZyIsIl9leHRyYWN0TWF0Y2hpbmciLCJicmVha09uTWF0Y2giLCJmaXJzdCIsImN1cnJlbnRTdHIiLCJsYXN0SW5kZXhPZiIsInN1YnN0ciIsIlRPS0VOX1NQRUNJQUwiLCJfTG9hZGVyIiwiYmFzZVVSTCIsInVzZUNhY2hlIiwiZmV0Y2giLCJjb250ZW50Iiwic3RhdHVzIiwidXJsIiwiYWpheCIsIlhNTEh0dHBSZXF1ZXN0IiwibG9hZGluZyIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVRleHQiLCJnZXRUaW1lIiwib3BlbiIsInNlbmQiLCJwcmVjb21waWxlIiwiaW5zdGFsbEppbmphQ29tcGF0IiwiY29uZmlndXJlIiwidGVtcGxhdGVzUGF0aCIsIlRlbXBsYXRlTG9hZGVyIiwid2F0Y2giLCJ3ZWIiLCJOb2RlUmVzb2x2ZUxvYWRlciIsInByZWNvbXBpbGVTdHJpbmciLCJyYXdBc2FwIiwiZnJlZVRhc2tzIiwicGVuZGluZ0Vycm9ycyIsInJlcXVlc3RFcnJvclRocm93IiwibWFrZVJlcXVlc3RDYWxsRnJvbVRpbWVyIiwic2hpZnQiLCJ0YXNrIiwicmF3VGFzayIsIlJhd1Rhc2siLCJvbmVycm9yIiwicXVldWUiLCJyZXF1ZXN0Rmx1c2giLCJmbHVzaCIsImN1cnJlbnRJbmRleCIsInNjYW4iLCJuZXdMZW5ndGgiLCJ0b2dnbGUiLCJvYnNlcnZlciIsInNjb3BlIiwiQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsInRpbWVvdXRIYW5kbGUiLCJzZXRUaW1lb3V0IiwiaGFuZGxlVGltZXIiLCJpbnRlcnZhbEhhbmRsZSIsInNldEludGVydmFsIiwiY2xlYXJUaW1lb3V0IiwiY2xlYXJJbnRlcnZhbCIsImRvY3VtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsImV2YWwiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImV4ZWN1dGVTeW5jIiwiZXhlY3V0ZUFzeW5jIiwiX2lzQXJyYXkiLCJzcGxpY2UiLCJzZXRJbW1lZGlhdGUiLCJuZXh0VGljayIsIm1heWJlQXJyYXkiLCJ3cmFwSXRlcmF0b3IiLCJtYWtlQ2FsbGJhY2siLCJtYWtlSXRlcmF0b3IiLCJSZWZsZWN0T3duS2V5cyIsIlIiLCJSZWZsZWN0QXBwbHkiLCJyZWNlaXZlciIsImdldE93blByb3BlcnR5U3ltYm9scyIsIk51bWJlcklzTmFOIiwiX2V2ZW50cyIsIl9ldmVudHNDb3VudCIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwiY2hlY2tMaXN0ZW5lciIsImxpc3RlbmVyIiwiX2dldE1heExpc3RlbmVycyIsIl9hZGRMaXN0ZW5lciIsInByZXBlbmQiLCJldmVudHMiLCJleGlzdGluZyIsIndhcm5pbmciLCJuZXdMaXN0ZW5lciIsIndhcm5lZCIsInciLCJlbWl0dGVyIiwiY29uc29sZSIsIndhcm4iLCJvbmNlV3JhcHBlciIsImZpcmVkIiwicmVtb3ZlTGlzdGVuZXIiLCJ3cmFwRm4iLCJfb25jZVdyYXAiLCJzdGF0ZSIsIl9saXN0ZW5lcnMiLCJ1bndyYXAiLCJldmxpc3RlbmVyIiwidW53cmFwTGlzdGVuZXJzIiwiYXJyYXlDbG9uZSIsImxpc3RlbmVyQ291bnQiLCJjb3B5Iiwic2V0TWF4TGlzdGVuZXJzIiwiZ2V0TWF4TGlzdGVuZXJzIiwiZG9FcnJvciIsImVyIiwibGlzdGVuZXJzIiwiYWRkTGlzdGVuZXIiLCJwcmVwZW5kTGlzdGVuZXIiLCJvbmNlIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3QiLCJwb3NpdGlvbiIsIm9yaWdpbmFsTGlzdGVuZXIiLCJzcGxpY2VPbmUiLCJvZmYiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJyYXdMaXN0ZW5lcnMiLCJldmVudE5hbWVzIiwic3ltIiwiZ2Vuc3ltIiwibWFwQ09XIiwid2FsayIsImFzdCIsImRlcHRoRmlyc3QiLCJhc3RUIiwicHJvcHNUIiwiZGVwdGhXYWxrIiwiX2xpZnRGaWx0ZXJzIiwid2Fsa2VkIiwiZGVzY05vZGUiLCJjcHMiLCJjb252ZXJ0U3RhdGVtZW50cyIsImJsb2NrTm9kZSIsImhhc1N1cGVyIiwibGlmdFN1cGVyIiwibGlmdEZpbHRlcnMiLCJkZWZhdWx0VmFsdWUiLCJjYXBpdGFsaXplIiwidG9VcHBlckNhc2UiLCJnZXRTZWxlY3RPclJlamVjdCIsImV4cGVjdGVkVGVzdFJlc3VsdCIsInRlc3ROYW1lIiwic2Vjb25kQXJnIiwiYmF0Y2giLCJsaW5lY291bnQiLCJmaWxsV2l0aCIsImNlbnRlciIsIndpZHRoIiwic3BhY2VzIiwiZGVmIiwiYm9vbCIsImRpY3Rzb3J0IiwiY2FzZVNlbnNpdGl2ZSIsInNpIiwidDEiLCJ0MiIsImR1bXAiLCJzYWZlIiwiZm9yY2Vlc2NhcGUiLCJncm91cGJ5IiwiaW5kZW50Zmlyc3QiLCJzcCIsImRlbCIsImxvd2VyIiwibmwyYnIiLCJyZWplY3RhdHRyIiwic2VsZWN0Iiwic2VsZWN0YXR0ciIsIm5ld18iLCJtYXhDb3VudCIsIm9yaWdpbmFsU3RyIiwibmV4dEluZGV4IiwicHJlY2lzaW9uIiwic2xpY2VzIiwic2xpY2VMZW5ndGgiLCJleHRyYSIsImN1cnJTbGljZSIsInN1bSIsInJldmVyc2VkIiwiY2FzZVNlbnMiLCJzdHJpcHRhZ3MiLCJwcmVzZXJ2ZUxpbmVicmVha3MiLCJ0cmltbWVkSW5wdXQiLCJ3b3JkcyIsIndvcmQiLCJ0cnVuY2F0ZSIsImtpbGx3b3JkcyIsIm9yaWciLCJ1cHBlciIsInVybGVuY29kZSIsImVuYyIsImVuY29kZVVSSUNvbXBvbmVudCIsInB1bmNSZSIsImVtYWlsUmUiLCJodHRwSHR0cHNSZSIsInd3d1JlIiwidGxkUmUiLCJ1cmxpemUiLCJub2ZvbGxvdyIsIkluZmluaXR5Iiwibm9Gb2xsb3dBdHRyIiwicG9zc2libGVVcmwiLCJzaG9ydFVybCIsIndvcmRjb3VudCIsImZsb2F0IiwiY29tcGlsZWRUZW1wbGF0ZXMiLCJwcmVjb21waWxlZCIsImNhbGxhYmxlIiwiZGVmaW5lZCIsImRpdmlzaWJsZWJ5IiwiZXNjYXBlZCIsImVxdWFsdG8iLCJlcSIsInNhbWVhcyIsImV2ZW4iLCJmYWxzeSIsImdlIiwiZ3JlYXRlcnRoYW4iLCJndCIsImxlIiwibGVzc3RoYW4iLCJsdCIsIm5lIiwibnVsbCIsIm9kZCIsInRydXRoeSIsIml0ZXJhYmxlIiwibWFwcGluZyIsIl9jeWNsZXIiLCJpdGVtcyIsInJhbmdlIiwic3RvcCIsImN5Y2xlciIsImpvaW5lciIsInNlcCIsIl9qb2luZXIiLCJOdW5qdWNrc1ZpZXciLCJkZWZhdWx0RW5naW5lIiwiZXh0bmFtZSIsImZzIiwicHJlY29tcGlsZUdsb2JhbCIsInBhdHRlcm4iLCJ3cmFwcGVyIiwiX3ByZWNvbXBpbGUiLCJwYXRoU3RhdHMiLCJleGlzdHNTeW5jIiwic3RhdFN5bmMiLCJ0ZW1wbGF0ZXMiLCJpc0ZpbGUiLCJyZWFkRmlsZVN5bmMiLCJpc0RpcmVjdG9yeSIsImFkZFRlbXBsYXRlcyIsImRpciIsInJlYWRkaXJTeW5jIiwiZmlsZXBhdGgiLCJzdWJwYXRoIiwic3RhdCIsImV4Y2x1ZGUiLCJpbmNsdWRlIiwiZm9yY2UiLCJvdXQiLCJhc0Z1bmN0aW9uIiwib3JpZ19Db21waWxlcl9hc3NlcnRUeXBlIiwib3JpZ19QYXJzZXJfcGFyc2VBZ2dyZWdhdGUiLCJvcmlnX2NvbnRleHRPckZyYW1lTG9va3VwIiwib3JpZ19tZW1iZXJMb29rdXAiLCJnZXRUb2tlbnNTdGF0ZSIsIlNsaWNlIiwiY29tcGlsZVNsaWNlIiwib3JpZ1N0YXRlIiwiZXJyU3RhdGUiLCJyZXRocm93IiwiaXNTbGljZSIsInNsaWNlTG9va3VwIiwiQVJSQVlfTUVNQkVSUyIsImVsZW1lbnQiLCJyZW1vdmUiLCJlbGVtIiwiT0JKRUNUX01FTUJFUlMiLCJoYXNfa2V5IiwicG9waXRlbSIsInNldGRlZmF1bHQiLCJ1cGRhdGUiLCJpdGVyaXRlbXMiLCJpdGVydmFsdWVzIiwiaXRlcmtleXMiLCJGVU5DX0VSUk9SX1RFWFQiLCJIQVNIX1VOREVGSU5FRCIsIlBMQUNFSE9MREVSIiwiV1JBUF9DVVJSWV9SSUdIVF9GTEFHIiwiV1JBUF9QQVJUSUFMX0ZMQUciLCJXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyIsIldSQVBfQVJZX0ZMQUciLCJXUkFQX1JFQVJHX0ZMQUciLCJJTkZJTklUWSIsIk1BWF9TQUZFX0lOVEVHRVIiLCJOQU4iLCJNQVhfQVJSQVlfTEVOR1RIIiwid3JhcEZsYWdzIiwiYXJnc1RhZyIsImFycmF5VGFnIiwiYm9vbFRhZyIsImRhdGVUYWciLCJlcnJvclRhZyIsImZ1bmNUYWciLCJnZW5UYWciLCJtYXBUYWciLCJudW1iZXJUYWciLCJvYmplY3RUYWciLCJwcm9taXNlVGFnIiwicmVnZXhwVGFnIiwic2V0VGFnIiwic3RyaW5nVGFnIiwic3ltYm9sVGFnIiwid2Vha01hcFRhZyIsImFycmF5QnVmZmVyVGFnIiwiZGF0YVZpZXdUYWciLCJmbG9hdDMyVGFnIiwiZmxvYXQ2NFRhZyIsImludDhUYWciLCJpbnQxNlRhZyIsImludDMyVGFnIiwidWludDhUYWciLCJ1aW50OENsYW1wZWRUYWciLCJ1aW50MTZUYWciLCJ1aW50MzJUYWciLCJyZUVtcHR5U3RyaW5nTGVhZGluZyIsInJlRW1wdHlTdHJpbmdNaWRkbGUiLCJyZUVtcHR5U3RyaW5nVHJhaWxpbmciLCJyZUVzY2FwZWRIdG1sIiwicmVVbmVzY2FwZWRIdG1sIiwicmVIYXNFc2NhcGVkSHRtbCIsInJlSGFzVW5lc2NhcGVkSHRtbCIsInJlRXNjYXBlIiwicmVFdmFsdWF0ZSIsInJlSW50ZXJwb2xhdGUiLCJyZUlzRGVlcFByb3AiLCJyZUlzUGxhaW5Qcm9wIiwicmVQcm9wTmFtZSIsInJlUmVnRXhwQ2hhciIsInJlSGFzUmVnRXhwQ2hhciIsInJlVHJpbSIsInJlVHJpbVN0YXJ0IiwicmVUcmltRW5kIiwicmVXcmFwQ29tbWVudCIsInJlV3JhcERldGFpbHMiLCJyZVNwbGl0RGV0YWlscyIsInJlQXNjaWlXb3JkIiwicmVFc2NhcGVDaGFyIiwicmVFc1RlbXBsYXRlIiwicmVGbGFncyIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc0hvc3RDdG9yIiwicmVJc09jdGFsIiwicmVJc1VpbnQiLCJyZUxhdGluIiwicmVOb01hdGNoIiwicmVVbmVzY2FwZWRTdHJpbmciLCJyc0NvbWJvUmFuZ2UiLCJyc0NvbWJvTWFya3NSYW5nZSIsInJzRGluZ2JhdFJhbmdlIiwicnNMb3dlclJhbmdlIiwicnNVcHBlclJhbmdlIiwicnNWYXJSYW5nZSIsInJzQnJlYWtSYW5nZSIsInJzTWF0aE9wUmFuZ2UiLCJyc0Fwb3MiLCJyc0FzdHJhbCIsInJzQnJlYWsiLCJyc0NvbWJvIiwicnNEaWdpdHMiLCJyc0RpbmdiYXQiLCJyc0xvd2VyIiwicnNNaXNjIiwicnNGaXR6IiwicnNOb25Bc3RyYWwiLCJyc1JlZ2lvbmFsIiwicnNTdXJyUGFpciIsInJzVXBwZXIiLCJyc01pc2NMb3dlciIsInJzTWlzY1VwcGVyIiwicnNPcHRDb250ckxvd2VyIiwicnNPcHRDb250clVwcGVyIiwicmVPcHRNb2QiLCJyc09wdFZhciIsInJzU2VxIiwicnNFbW9qaSIsInJzU3ltYm9sIiwicmVBcG9zIiwicmVDb21ib01hcmsiLCJyZVVuaWNvZGUiLCJyZVVuaWNvZGVXb3JkIiwicmVIYXNVbmljb2RlIiwicmVIYXNVbmljb2RlV29yZCIsImNvbnRleHRQcm9wcyIsInRlbXBsYXRlQ291bnRlciIsInR5cGVkQXJyYXlUYWdzIiwiY2xvbmVhYmxlVGFncyIsInN0cmluZ0VzY2FwZXMiLCJcXCIsIlxuIiwiXHIiLCLigKgiLCLigKkiLCJmcmVlUGFyc2VGbG9hdCIsImZyZWVQYXJzZUludCIsImZyZWVHbG9iYWwiLCJmcmVlU2VsZiIsImZyZWVFeHBvcnRzIiwibm9kZVR5cGUiLCJmcmVlTW9kdWxlIiwibW9kdWxlRXhwb3J0cyIsImZyZWVQcm9jZXNzIiwibm9kZVV0aWwiLCJyZXF1aXJlIiwiYmluZGluZyIsIm5vZGVJc0FycmF5QnVmZmVyIiwiaXNBcnJheUJ1ZmZlciIsIm5vZGVJc0RhdGUiLCJpc0RhdGUiLCJub2RlSXNNYXAiLCJpc01hcCIsIm5vZGVJc1JlZ0V4cCIsImlzUmVnRXhwIiwibm9kZUlzU2V0IiwiaXNTZXQiLCJub2RlSXNUeXBlZEFycmF5IiwiaXNUeXBlZEFycmF5IiwiYXJyYXlBZ2dyZWdhdG9yIiwic2V0dGVyIiwiaXRlcmF0ZWUiLCJhY2N1bXVsYXRvciIsImFycmF5RWFjaCIsImFycmF5RWFjaFJpZ2h0IiwiYXJyYXlFdmVyeSIsInByZWRpY2F0ZSIsImFycmF5RmlsdGVyIiwicmVzSW5kZXgiLCJhcnJheUluY2x1ZGVzIiwiYmFzZUluZGV4T2YiLCJhcnJheUluY2x1ZGVzV2l0aCIsImNvbXBhcmF0b3IiLCJhcnJheU1hcCIsImFycmF5UHVzaCIsImFycmF5UmVkdWNlIiwiaW5pdEFjY3VtIiwiYXJyYXlSZWR1Y2VSaWdodCIsImFycmF5U29tZSIsImFzY2lpU2l6ZSIsImJhc2VQcm9wZXJ0eSIsImJhc2VGaW5kS2V5IiwiY29sbGVjdGlvbiIsImVhY2hGdW5jIiwiYmFzZUZpbmRJbmRleCIsImZyb21SaWdodCIsInN0cmljdEluZGV4T2YiLCJiYXNlSXNOYU4iLCJiYXNlSW5kZXhPZldpdGgiLCJiYXNlTWVhbiIsImJhc2VTdW0iLCJiYXNlUHJvcGVydHlPZiIsImJhc2VSZWR1Y2UiLCJiYXNlVGltZXMiLCJiYXNlVW5hcnkiLCJiYXNlVmFsdWVzIiwiY2FjaGVIYXMiLCJjaGFyc1N0YXJ0SW5kZXgiLCJzdHJTeW1ib2xzIiwiY2hyU3ltYm9scyIsImNoYXJzRW5kSW5kZXgiLCJjb3VudEhvbGRlcnMiLCJwbGFjZWhvbGRlciIsImRlYnVyckxldHRlciIsIsOAIiwiw4EiLCLDgiIsIsODIiwiw4QiLCLDhSIsIsOgIiwiw6EiLCLDoiIsIsOjIiwiw6QiLCLDpSIsIsOHIiwiw6ciLCLDkCIsIsOwIiwiw4giLCLDiSIsIsOKIiwiw4siLCLDqCIsIsOpIiwiw6oiLCLDqyIsIsOMIiwiw40iLCLDjiIsIsOPIiwiw6wiLCLDrSIsIsOuIiwiw68iLCLDkSIsIsOxIiwiw5IiLCLDkyIsIsOUIiwiw5UiLCLDliIsIsOYIiwiw7IiLCLDsyIsIsO0Iiwiw7UiLCLDtiIsIsO4Iiwiw5kiLCLDmiIsIsObIiwiw5wiLCLDuSIsIsO6Iiwiw7siLCLDvCIsIsOdIiwiw70iLCLDvyIsIsOGIiwiw6YiLCLDniIsIsO+Iiwiw58iLCLEgCIsIsSCIiwixIQiLCLEgSIsIsSDIiwixIUiLCLEhiIsIsSIIiwixIoiLCLEjCIsIsSHIiwixIkiLCLEiyIsIsSNIiwixI4iLCLEkCIsIsSPIiwixJEiLCLEkiIsIsSUIiwixJYiLCLEmCIsIsSaIiwixJMiLCLElSIsIsSXIiwixJkiLCLEmyIsIsScIiwixJ4iLCLEoCIsIsSiIiwixJ0iLCLEnyIsIsShIiwixKMiLCLEpCIsIsSmIiwixKUiLCLEpyIsIsSoIiwixKoiLCLErCIsIsSuIiwixLAiLCLEqSIsIsSrIiwixK0iLCLEryIsIsSxIiwixLQiLCLEtSIsIsS2IiwixLciLCLEuCIsIsS5IiwixLsiLCLEvSIsIsS/IiwixYEiLCLEuiIsIsS8IiwixL4iLCLFgCIsIsWCIiwixYMiLCLFhSIsIsWHIiwixYoiLCLFhCIsIsWGIiwixYgiLCLFiyIsIsWMIiwixY4iLCLFkCIsIsWNIiwixY8iLCLFkSIsIsWUIiwixZYiLCLFmCIsIsWVIiwixZciLCLFmSIsIsWaIiwixZwiLCLFniIsIsWgIiwixZsiLCLFnSIsIsWfIiwixaEiLCLFoiIsIsWkIiwixaYiLCLFoyIsIsWlIiwixaciLCLFqCIsIsWqIiwixawiLCLFriIsIsWwIiwixbIiLCLFqSIsIsWrIiwixa0iLCLFryIsIsWxIiwixbMiLCLFtCIsIsW1IiwixbYiLCLFtyIsIsW4IiwixbkiLCLFuyIsIsW9IiwixboiLCLFvCIsIsW+IiwixLIiLCLEsyIsIsWSIiwixZMiLCLFiSIsIsW/IiwiZXNjYXBlSHRtbENoYXIiLCJlc2NhcGVTdHJpbmdDaGFyIiwiY2hyIiwiaGFzVW5pY29kZSIsIm1hcFRvQXJyYXkiLCJvdmVyQXJnIiwicmVwbGFjZUhvbGRlcnMiLCJzZXRUb0FycmF5Iiwic2V0VG9QYWlycyIsInN0cmluZ1NpemUiLCJsYXN0SW5kZXgiLCJ1bmljb2RlU2l6ZSIsInN0cmluZ1RvQXJyYXkiLCJ1bmljb2RlVG9BcnJheSIsImFzY2lpVG9BcnJheSIsInVuZXNjYXBlSHRtbENoYXIiLCImYW1wOyIsIiZsdDsiLCImZ3Q7IiwiJnF1b3Q7IiwiJiMzOTsiLCJydW5JbkNvbnRleHQiLCJkZWZhdWx0cyIsImFycmF5UHJvdG8iLCJmdW5jUHJvdG8iLCJvYmplY3RQcm90byIsImNvcmVKc0RhdGEiLCJmdW5jVG9TdHJpbmciLCJpZENvdW50ZXIiLCJtYXNrU3JjS2V5IiwiSUVfUFJPVE8iLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsIm9iamVjdEN0b3JTdHJpbmciLCJvbGREYXNoIiwicmVJc05hdGl2ZSIsIkJ1ZmZlciIsImFsbG9jVW5zYWZlIiwiZ2V0UHJvdG90eXBlIiwib2JqZWN0Q3JlYXRlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzcHJlYWRhYmxlU3ltYm9sIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwic3ltSXRlcmF0b3IiLCJzeW1Ub1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwiZ2V0TmF0aXZlIiwiY3R4Q2xlYXJUaW1lb3V0IiwiY3R4Tm93IiwiY3R4U2V0VGltZW91dCIsIm5hdGl2ZUNlaWwiLCJuYXRpdmVGbG9vciIsIm5hdGl2ZUdldFN5bWJvbHMiLCJuYXRpdmVJc0J1ZmZlciIsImlzQnVmZmVyIiwibmF0aXZlSXNGaW5pdGUiLCJpc0Zpbml0ZSIsIm5hdGl2ZUpvaW4iLCJuYXRpdmVLZXlzIiwibmF0aXZlTWF4IiwibmF0aXZlTWluIiwibmF0aXZlTm93IiwibmF0aXZlUGFyc2VJbnQiLCJuYXRpdmVSYW5kb20iLCJuYXRpdmVSZXZlcnNlIiwiRGF0YVZpZXciLCJuYXRpdmVDcmVhdGUiLCJtZXRhTWFwIiwiZGF0YVZpZXdDdG9yU3RyaW5nIiwidG9Tb3VyY2UiLCJtYXBDdG9yU3RyaW5nIiwicHJvbWlzZUN0b3JTdHJpbmciLCJzZXRDdG9yU3RyaW5nIiwid2Vha01hcEN0b3JTdHJpbmciLCJzeW1ib2xQcm90byIsInN5bWJvbFZhbHVlT2YiLCJzeW1ib2xUb1N0cmluZyIsImxvZGFzaCIsImlzT2JqZWN0TGlrZSIsIkxhenlXcmFwcGVyIiwiTG9kYXNoV3JhcHBlciIsIndyYXBwZXJDbG9uZSIsImJhc2VDcmVhdGUiLCJiYXNlTG9kYXNoIiwiY2hhaW5BbGwiLCJfX3dyYXBwZWRfXyIsIl9fYWN0aW9uc19fIiwiX19jaGFpbl9fIiwiX19pbmRleF9fIiwiX192YWx1ZXNfXyIsIl9fZGlyX18iLCJfX2ZpbHRlcmVkX18iLCJfX2l0ZXJhdGVlc19fIiwiX190YWtlQ291bnRfXyIsIl9fdmlld3NfXyIsIkhhc2giLCJlbnRyeSIsIkxpc3RDYWNoZSIsIk1hcENhY2hlIiwiU2V0Q2FjaGUiLCJfX2RhdGFfXyIsIlN0YWNrIiwiYXJyYXlMaWtlS2V5cyIsImluaGVyaXRlZCIsImlzQXJyIiwiaXNBcmciLCJpc0FyZ3VtZW50cyIsImlzQnVmZiIsImlzVHlwZSIsInNraXBJbmRleGVzIiwiaXNJbmRleCIsImFycmF5U2FtcGxlIiwiYmFzZVJhbmRvbSIsImFycmF5U2FtcGxlU2l6ZSIsInNodWZmbGVTZWxmIiwiY29weUFycmF5IiwiYmFzZUNsYW1wIiwiYXJyYXlTaHVmZmxlIiwiYXNzaWduTWVyZ2VWYWx1ZSIsImJhc2VBc3NpZ25WYWx1ZSIsImFzc2lnblZhbHVlIiwib2JqVmFsdWUiLCJhc3NvY0luZGV4T2YiLCJiYXNlQWdncmVnYXRvciIsImJhc2VFYWNoIiwiYmFzZUFzc2lnbiIsImNvcHlPYmplY3QiLCJiYXNlQXQiLCJwYXRocyIsImJhc2VDbG9uZSIsImJpdG1hc2siLCJjdXN0b21pemVyIiwiaXNEZWVwIiwiaXNGbGF0IiwiaXNGdWxsIiwiaW5pdENsb25lQXJyYXkiLCJnZXRUYWciLCJpc0Z1bmMiLCJjbG9uZUJ1ZmZlciIsImluaXRDbG9uZU9iamVjdCIsImdldFN5bWJvbHNJbiIsImNvcHlTeW1ib2xzSW4iLCJrZXlzSW4iLCJiYXNlQXNzaWduSW4iLCJnZXRTeW1ib2xzIiwiY29weVN5bWJvbHMiLCJDdG9yIiwiY2xvbmVBcnJheUJ1ZmZlciIsImRhdGFWaWV3IiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJjbG9uZURhdGFWaWV3IiwiY2xvbmVUeXBlZEFycmF5IiwicmVnZXhwIiwiY2xvbmVSZWdFeHAiLCJpbml0Q2xvbmVCeVRhZyIsInN0YWNrZWQiLCJzdWJWYWx1ZSIsImdldEFsbEtleXNJbiIsImdldEFsbEtleXMiLCJiYXNlQ29uZm9ybXNUbyIsImJhc2VEZWxheSIsIndhaXQiLCJiYXNlRGlmZmVyZW5jZSIsImlzQ29tbW9uIiwidmFsdWVzTGVuZ3RoIiwib3V0ZXIiLCJjb21wdXRlZCIsInZhbHVlc0luZGV4IiwidGVtcGxhdGVTZXR0aW5ncyIsImV2YWx1YXRlIiwiaW50ZXJwb2xhdGUiLCJ2YXJpYWJsZSIsImltcG9ydHMiLCJoYXNoIiwiZ2V0TWFwRGF0YSIsInBhaXJzIiwiTEFSR0VfQVJSQVlfU0laRSIsImNyZWF0ZUJhc2VFYWNoIiwiYmFzZUZvck93biIsImJhc2VFYWNoUmlnaHQiLCJiYXNlRm9yT3duUmlnaHQiLCJiYXNlRXZlcnkiLCJiYXNlRXh0cmVtdW0iLCJpc1N5bWJvbCIsImJhc2VGaWx0ZXIiLCJiYXNlRmxhdHRlbiIsImRlcHRoIiwiaXNTdHJpY3QiLCJpc0ZsYXR0ZW5hYmxlIiwiYmFzZUZvciIsImNyZWF0ZUJhc2VGb3IiLCJiYXNlRm9yUmlnaHQiLCJiYXNlRnVuY3Rpb25zIiwiYmFzZUdldCIsImNhc3RQYXRoIiwidG9LZXkiLCJiYXNlR2V0QWxsS2V5cyIsImtleXNGdW5jIiwic3ltYm9sc0Z1bmMiLCJiYXNlR2V0VGFnIiwiaXNPd24iLCJ1bm1hc2tlZCIsImdldFJhd1RhZyIsIm9iamVjdFRvU3RyaW5nIiwiYmFzZUd0IiwiYmFzZUhhcyIsImJhc2VIYXNJbiIsImJhc2VJbnRlcnNlY3Rpb24iLCJhcnJheXMiLCJvdGhMZW5ndGgiLCJvdGhJbmRleCIsImNhY2hlcyIsIm1heExlbmd0aCIsInNlZW4iLCJiYXNlSW52b2tlIiwiYmFzZUlzQXJndW1lbnRzIiwiYmFzZUlzRXF1YWwiLCJlcXVhbEZ1bmMiLCJvYmpJc0FyciIsIm90aElzQXJyIiwib2JqVGFnIiwib3RoVGFnIiwib2JqSXNPYmoiLCJvdGhJc09iaiIsImlzU2FtZVRhZyIsImVxdWFsQXJyYXlzIiwiaXNQYXJ0aWFsIiwiZXF1YWxCeVRhZyIsIm9iaklzV3JhcHBlZCIsIm90aElzV3JhcHBlZCIsIm9ialVud3JhcHBlZCIsIm90aFVud3JhcHBlZCIsIm9ialByb3BzIiwib2JqTGVuZ3RoIiwib2JqU3RhY2tlZCIsIm90aFN0YWNrZWQiLCJza2lwQ3RvciIsIm90aFZhbHVlIiwiY29tcGFyZWQiLCJvYmpDdG9yIiwib3RoQ3RvciIsImVxdWFsT2JqZWN0cyIsImJhc2VJc0VxdWFsRGVlcCIsImJhc2VJc01hdGNoIiwibWF0Y2hEYXRhIiwibm9DdXN0b21pemVyIiwic3JjVmFsdWUiLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsImJhc2VJc05hdGl2ZSIsImJhc2VJdGVyYXRlZSIsImlkZW50aXR5IiwiYmFzZU1hdGNoZXNQcm9wZXJ0eSIsImJhc2VNYXRjaGVzIiwiYmFzZUtleXMiLCJpc1Byb3RvdHlwZSIsImJhc2VLZXlzSW4iLCJuYXRpdmVLZXlzSW4iLCJpc1Byb3RvIiwiYmFzZUx0IiwiYmFzZU1hcCIsImlzQXJyYXlMaWtlIiwiZ2V0TWF0Y2hEYXRhIiwibWF0Y2hlc1N0cmljdENvbXBhcmFibGUiLCJpc0tleSIsImlzU3RyaWN0Q29tcGFyYWJsZSIsImhhc0luIiwiYmFzZU1lcmdlIiwic3JjSW5kZXgiLCJtZXJnZUZ1bmMiLCJzYWZlR2V0IiwibmV3VmFsdWUiLCJpc1R5cGVkIiwiaXNBcnJheUxpa2VPYmplY3QiLCJpc1BsYWluT2JqZWN0IiwidG9QbGFpbk9iamVjdCIsImJhc2VNZXJnZURlZXAiLCJiYXNlTnRoIiwiYmFzZU9yZGVyQnkiLCJpdGVyYXRlZXMiLCJvcmRlcnMiLCJnZXRJdGVyYXRlZSIsImNvbXBhcmVyIiwiYmFzZVNvcnRCeSIsImNyaXRlcmlhIiwib2JqQ3JpdGVyaWEiLCJvdGhDcml0ZXJpYSIsIm9yZGVyc0xlbmd0aCIsImNvbXBhcmVBc2NlbmRpbmciLCJjb21wYXJlTXVsdGlwbGUiLCJiYXNlUGlja0J5IiwiYmFzZVNldCIsImJhc2VQdWxsQWxsIiwiYmFzZVB1bGxBdCIsImluZGV4ZXMiLCJiYXNlVW5zZXQiLCJiYXNlUmVwZWF0IiwiYmFzZVJlc3QiLCJzZXRUb1N0cmluZyIsIm92ZXJSZXN0IiwiYmFzZVNhbXBsZSIsImJhc2VTYW1wbGVTaXplIiwibmVzdGVkIiwiYmFzZVNldERhdGEiLCJiYXNlU2V0VG9TdHJpbmciLCJjb25zdGFudCIsImJhc2VTaHVmZmxlIiwiYmFzZVNsaWNlIiwiYmFzZVNvbWUiLCJiYXNlU29ydGVkSW5kZXgiLCJyZXRIaWdoZXN0IiwibG93IiwiaGlnaCIsIm1pZCIsImJhc2VTb3J0ZWRJbmRleEJ5IiwidmFsSXNOYU4iLCJ2YWxJc051bGwiLCJ2YWxJc1N5bWJvbCIsInZhbElzVW5kZWZpbmVkIiwib3RoSXNEZWZpbmVkIiwib3RoSXNOdWxsIiwib3RoSXNSZWZsZXhpdmUiLCJvdGhJc1N5bWJvbCIsInNldExvdyIsImJhc2VTb3J0ZWRVbmlxIiwiYmFzZVRvTnVtYmVyIiwiYmFzZVRvU3RyaW5nIiwiYmFzZVVuaXEiLCJjcmVhdGVTZXQiLCJzZWVuSW5kZXgiLCJiYXNlVXBkYXRlIiwidXBkYXRlciIsImJhc2VXaGlsZSIsImlzRHJvcCIsImJhc2VXcmFwcGVyVmFsdWUiLCJhY3Rpb25zIiwiYWN0aW9uIiwiYmFzZVhvciIsImJhc2VaaXBPYmplY3QiLCJhc3NpZ25GdW5jIiwidmFsc0xlbmd0aCIsImNhc3RBcnJheUxpa2VPYmplY3QiLCJjYXN0RnVuY3Rpb24iLCJzdHJpbmdUb1BhdGgiLCJjYXN0UmVzdCIsImNhc3RTbGljZSIsImFycmF5QnVmZmVyIiwidHlwZWRBcnJheSIsInZhbElzRGVmaW5lZCIsInZhbElzUmVmbGV4aXZlIiwiY29tcG9zZUFyZ3MiLCJwYXJ0aWFscyIsImhvbGRlcnMiLCJpc0N1cnJpZWQiLCJhcmdzSW5kZXgiLCJhcmdzTGVuZ3RoIiwiaG9sZGVyc0xlbmd0aCIsImxlZnRJbmRleCIsImxlZnRMZW5ndGgiLCJyYW5nZUxlbmd0aCIsImlzVW5jdXJyaWVkIiwiY29tcG9zZUFyZ3NSaWdodCIsImhvbGRlcnNJbmRleCIsInJpZ2h0SW5kZXgiLCJyaWdodExlbmd0aCIsImlzTmV3IiwiY3JlYXRlQWdncmVnYXRvciIsImluaXRpYWxpemVyIiwiY3JlYXRlQXNzaWduZXIiLCJhc3NpZ25lciIsInNvdXJjZXMiLCJndWFyZCIsImlzSXRlcmF0ZWVDYWxsIiwiY3JlYXRlQ2FzZUZpcnN0IiwibWV0aG9kTmFtZSIsInRyYWlsaW5nIiwiY3JlYXRlQ29tcG91bmRlciIsImRlYnVyciIsImNyZWF0ZUN0b3IiLCJ0aGlzQmluZGluZyIsImNyZWF0ZUZpbmQiLCJmaW5kSW5kZXhGdW5jIiwiY3JlYXRlRmxvdyIsImZsYXRSZXN0IiwiZnVuY3MiLCJwcmVyZXEiLCJ0aHJ1IiwiZ2V0RnVuY05hbWUiLCJmdW5jTmFtZSIsImdldERhdGEiLCJpc0xhemlhYmxlIiwicGxhbnQiLCJjcmVhdGVIeWJyaWQiLCJwYXJ0aWFsc1JpZ2h0IiwiaG9sZGVyc1JpZ2h0IiwiYXJnUG9zIiwiYXJ5IiwiYXJpdHkiLCJpc0FyeSIsImlzQmluZCIsImlzQmluZEtleSIsImlzRmxpcCIsImdldEhvbGRlciIsImhvbGRlcnNDb3VudCIsIm5ld0hvbGRlcnMiLCJjcmVhdGVSZWN1cnJ5IiwicmVvcmRlciIsImNyZWF0ZUludmVydGVyIiwidG9JdGVyYXRlZSIsImJhc2VJbnZlcnRlciIsImNyZWF0ZU1hdGhPcGVyYXRpb24iLCJvcGVyYXRvciIsImNyZWF0ZU92ZXIiLCJhcnJheUZ1bmMiLCJjcmVhdGVQYWRkaW5nIiwiY2hhcnMiLCJjaGFyc0xlbmd0aCIsImNyZWF0ZVJhbmdlIiwidG9GaW5pdGUiLCJiYXNlUmFuZ2UiLCJjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uIiwidG9OdW1iZXIiLCJ3cmFwRnVuYyIsImlzQ3VycnkiLCJuZXdEYXRhIiwic2V0RGF0YSIsInNldFdyYXBUb1N0cmluZyIsImNyZWF0ZVJvdW5kIiwidG9JbnRlZ2VyIiwibm9vcCIsImNyZWF0ZVRvUGFpcnMiLCJiYXNlVG9QYWlycyIsImNyZWF0ZVdyYXAiLCJzcmNCaXRtYXNrIiwibmV3Qml0bWFzayIsImlzQ29tYm8iLCJtZXJnZURhdGEiLCJjcmVhdGVDdXJyeSIsImNyZWF0ZVBhcnRpYWwiLCJjcmVhdGVCaW5kIiwiY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiIsImN1c3RvbURlZmF1bHRzTWVyZ2UiLCJjdXN0b21PbWl0Q2xvbmUiLCJhcnJMZW5ndGgiLCJhcnJTdGFja2VkIiwiYXJyVmFsdWUiLCJmbGF0dGVuIiwib3RoZXJGdW5jIiwic3R1YkFycmF5IiwiaGFzUGF0aCIsImhhc0Z1bmMiLCJpc0xlbmd0aCIsIkFycmF5QnVmZmVyIiwiY3RvclN0cmluZyIsImlzTWFza2FibGUiLCJzdHViRmFsc2UiLCJvdGhlckFyZ3MiLCJvbGRBcnJheSIsInNob3J0T3V0IiwicmVmZXJlbmNlIiwiZGV0YWlscyIsImluc2VydFdyYXBEZXRhaWxzIiwidXBkYXRlV3JhcERldGFpbHMiLCJnZXRXcmFwRGV0YWlscyIsImxhc3RDYWxsZWQiLCJzdGFtcCIsInJlbWFpbmluZyIsInJhbmQiLCJtZW1vaXplIiwibWVtb2l6ZUNhcHBlZCIsInF1b3RlIiwic3ViU3RyaW5nIiwiZGlmZmVyZW5jZUJ5IiwiZGlmZmVyZW5jZVdpdGgiLCJmaW5kTGFzdEluZGV4IiwiaGVhZCIsImludGVyc2VjdGlvbkJ5IiwiaW50ZXJzZWN0aW9uV2l0aCIsInB1bGwiLCJwdWxsQWxsIiwicHVsbEF0IiwidW5pb25CeSIsInVuaW9uV2l0aCIsInVuemlwIiwiZ3JvdXAiLCJ1bnppcFdpdGgiLCJ4b3JCeSIsInhvcldpdGgiLCJ6aXAiLCJ6aXBXaXRoIiwiY2hhaW4iLCJ3cmFwcGVyQXQiLCJjb3VudEJ5IiwiZmluZExhc3QiLCJmb3JFYWNoUmlnaHQiLCJpbnZva2VNYXAiLCJrZXlCeSIsInBhcnRpdGlvbiIsInNvcnRCeSIsImJpbmRLZXkiLCJXUkFQX0JJTkRfRkxBRyIsImRlYm91bmNlIiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJsZWFkaW5nIiwibWF4aW5nIiwiaW52b2tlRnVuYyIsImxlYWRpbmdFZGdlIiwidGltZXJFeHBpcmVkIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0cmFpbGluZ0VkZ2UiLCJ0aW1lV2FpdGluZyIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwiY2FuY2VsIiwiZGVmZXIiLCJkZWxheSIsInJlc29sdmVyIiwibWVtb2l6ZWQiLCJDYWNoZSIsIm92ZXJBcmdzIiwidHJhbnNmb3JtcyIsImZ1bmNzTGVuZ3RoIiwicGFydGlhbCIsInBhcnRpYWxSaWdodCIsInJlYXJnIiwiZ3RlIiwiaXNFcnJvciIsImx0ZSIsIml0ZXJhdG9yVG9BcnJheSIsInJlbWFpbmRlciIsInRvTGVuZ3RoIiwiaXNCaW5hcnkiLCJhc3NpZ25JbiIsImFzc2lnbkluV2l0aCIsImFzc2lnbldpdGgiLCJhdCIsInByb3BzSW5kZXgiLCJwcm9wc0xlbmd0aCIsImRlZmF1bHRzRGVlcCIsIm1lcmdlV2l0aCIsImludmVydEJ5IiwiaW52b2tlIiwib21pdCIsIkNMT05FX0RFRVBfRkxBRyIsImJhc2VQaWNrIiwicGlja0J5IiwidG9QYWlycyIsInRvUGFpcnNJbiIsImNhbWVsQ2FzZSIsInVwcGVyRmlyc3QiLCJrZWJhYkNhc2UiLCJsb3dlckNhc2UiLCJsb3dlckZpcnN0Iiwic25ha2VDYXNlIiwic3RhcnRDYXNlIiwidXBwZXJDYXNlIiwiaGFzVW5pY29kZVdvcmQiLCJ1bmljb2RlV29yZHMiLCJhc2NpaVdvcmRzIiwiYXR0ZW1wdCIsImJpbmRBbGwiLCJtZXRob2ROYW1lcyIsImZsb3ciLCJmbG93UmlnaHQiLCJtZXRob2RPZiIsIm1peGluIiwib3ZlckV2ZXJ5Iiwib3ZlclNvbWUiLCJiYXNlUHJvcGVydHlEZWVwIiwicmFuZ2VSaWdodCIsImF1Z2VuZCIsImFkZGVuZCIsImRpdmlkZSIsImRpdmlkZW5kIiwiZGl2aXNvciIsIm11bHRpcGx5IiwibXVsdGlwbGllciIsIm11bHRpcGxpY2FuZCIsInN1YnRyYWN0IiwibWludWVuZCIsInN1YnRyYWhlbmQiLCJjYXN0QXJyYXkiLCJjaHVuayIsImNvbXBhY3QiLCJjb25mb3JtcyIsImJhc2VDb25mb3JtcyIsInByb3BlcnRpZXMiLCJjdXJyeSIsImN1cnJ5UmlnaHQiLCJkcm9wIiwiZHJvcFJpZ2h0IiwiZHJvcFJpZ2h0V2hpbGUiLCJkcm9wV2hpbGUiLCJmaWxsIiwiYmFzZUZpbGwiLCJmbGF0TWFwIiwiZmxhdE1hcERlZXAiLCJmbGF0TWFwRGVwdGgiLCJmbGF0dGVuRGVlcCIsImZsYXR0ZW5EZXB0aCIsImZsaXAiLCJmcm9tUGFpcnMiLCJmdW5jdGlvbnMiLCJmdW5jdGlvbnNJbiIsImluaXRpYWwiLCJtYXBLZXlzIiwibWFwVmFsdWVzIiwibWF0Y2hlc1Byb3BlcnR5IiwibnRoQXJnIiwib21pdEJ5Iiwib3JkZXJCeSIsInByb3BlcnR5T2YiLCJwdWxsQWxsQnkiLCJwdWxsQWxsV2l0aCIsInJlc3QiLCJzYW1wbGVTaXplIiwic2V0V2l0aCIsInNodWZmbGUiLCJzb3J0ZWRVbmlxIiwic29ydGVkVW5pcUJ5IiwibGltaXQiLCJzcHJlYWQiLCJ0YWlsIiwidGFrZSIsInRha2VSaWdodCIsInRha2VSaWdodFdoaWxlIiwidGFrZVdoaWxlIiwidGFwIiwidGhyb3R0bGUiLCJ0b1BhdGgiLCJpc0Fyckxpa2UiLCJ1bmFyeSIsInVuaXEiLCJ1bmlxQnkiLCJ1bmlxV2l0aCIsInVuc2V0IiwidXBkYXRlV2l0aCIsInZhbHVlc0luIiwiemlwT2JqZWN0IiwiemlwT2JqZWN0RGVlcCIsImVudHJpZXNJbiIsImV4dGVuZFdpdGgiLCJjbGFtcCIsImNsb25lRGVlcCIsImNsb25lRGVlcFdpdGgiLCJjbG9uZVdpdGgiLCJjb25mb3Jtc1RvIiwiZGVmYXVsdFRvIiwiZW5kc1dpdGgiLCJlc2NhcGVSZWdFeHAiLCJmaW5kS2V5IiwiZmluZExhc3RLZXkiLCJmb3JJbiIsImZvckluUmlnaHQiLCJmb3JPd24iLCJmb3JPd25SaWdodCIsImluUmFuZ2UiLCJiYXNlSW5SYW5nZSIsImlzQm9vbGVhbiIsImlzRWxlbWVudCIsImlzRXF1YWwiLCJpc0VxdWFsV2l0aCIsImlzTWF0Y2giLCJpc01hdGNoV2l0aCIsImlzTmF0aXZlIiwiaXNOaWwiLCJpc051bGwiLCJpc1NhZmVJbnRlZ2VyIiwiaXNXZWFrTWFwIiwiaXNXZWFrU2V0Iiwic3RyaWN0TGFzdEluZGV4T2YiLCJtYXhCeSIsIm1lYW4iLCJtZWFuQnkiLCJtaW5CeSIsInN0dWJPYmplY3QiLCJzdHViU3RyaW5nIiwic3R1YlRydWUiLCJudGgiLCJub0NvbmZsaWN0IiwicGFkIiwic3RyTGVuZ3RoIiwicGFkRW5kIiwicmFkaXgiLCJmbG9hdGluZyIsInRlbXAiLCJyZWR1Y2VSaWdodCIsInNhbXBsZSIsInNvcnRlZEluZGV4Iiwic29ydGVkSW5kZXhCeSIsInNvcnRlZEluZGV4T2YiLCJzb3J0ZWRMYXN0SW5kZXgiLCJzb3J0ZWRMYXN0SW5kZXhCeSIsInNvcnRlZExhc3RJbmRleE9mIiwic3VtQnkiLCJzZXR0aW5ncyIsImlzRXNjYXBpbmciLCJpc0V2YWx1YXRpbmciLCJpbXBvcnRzS2V5cyIsImltcG9ydHNWYWx1ZXMiLCJyZURlbGltaXRlcnMiLCJzb3VyY2VVUkwiLCJlc2NhcGVWYWx1ZSIsImludGVycG9sYXRlVmFsdWUiLCJlc1RlbXBsYXRlVmFsdWUiLCJldmFsdWF0ZVZhbHVlIiwidGltZXMiLCJ0b0xvd2VyIiwidG9TYWZlSW50ZWdlciIsInRvVXBwZXIiLCJ0cmltRW5kIiwidHJpbVN0YXJ0Iiwib21pc3Npb24iLCJuZXdFbmQiLCJ1bmVzY2FwZSIsInVuaXF1ZUlkIiwicHJlZml4IiwiZWFjaFJpZ2h0IiwiVkVSU0lPTiIsImlzRmlsdGVyIiwidGFrZU5hbWUiLCJkcm9wTmFtZSIsImNoZWNrSXRlcmF0ZWUiLCJpc1Rha2VyIiwibG9kYXNoRnVuYyIsInJldFVud3JhcHBlZCIsImlzTGF6eSIsInVzZUxhenkiLCJpc0h5YnJpZCIsImlzVW53cmFwcGVkIiwib25seUxhenkiLCJjaGFpbk5hbWUiLCJpc1JpZ2h0IiwidmlldyIsImdldFZpZXciLCJpdGVyTGVuZ3RoIiwidGFrZUNvdW50IiwiaXRlckluZGV4IiwiY29tbWl0IiwiRGF0ZVRpbWVGaWx0ZXJzIiwiX2RhdGVUaW1lRmlsdGVycyIsIl9wcm92aWRlcnMiLCJfZW52IiwibmprLkVudmlyb25tZW50IiwiaW5zdGFsbEZpbHRlcnMiLCJUZW1wbGVTZXJ2aWNlIiwiaW5zcGVjdCIsImNvbnRleHRzIiwiYWdncmVnYXRlZCIsIl8ubWFwVmFsdWVzIiwiZG9jcyIsImRvYyIsIkVPTCIsIkRFRkFVTFRfU0VUVElOR1MiLCJ0ZW1wbGF0ZXNEaXIiLCJfcGx1Z2luIiwiVGVtcGxlU2V0dGluZ3NQcm92aWRlciIsImxvYWREYXRhIiwiX2UiLCJzYXZlRGF0YSIsIlBsdWdpbl8yIiwiVGVtcGxlU2V0dGluZ3NUYWIiLCJlbXB0eSIsImNyZWF0ZUVsIiwibWFuaWZlc3QiLCJkZXNjcmlwdGlvbiIsImNyZWF0ZVNlY3Rpb24iLCJTZXR0aW5nIiwic2V0TmFtZSIsInNldERlc2MiLCJhZGRUZXh0Iiwic2V0UGxhY2Vob2xkZXIiLCJzZXRWYWx1ZSIsIm9uQ2hhbmdlIiwic2F2ZSIsIkFwcCIsIlBsdWdpblNldHRpbmdUYWIiLCJfb2JzIiwiVGVtcGxlRnV6enlTdWdnZXN0TW9kYWwiLCJnZXRUZW1wbGF0ZVBhdGhzIiwiZXZ0IiwiaW5zZXJ0VGVtcGxhdGUiLCJGdXp6eVN1Z2dlc3RNb2RhbCIsIl90ZW1wbGUiLCJfcHJvbXB0IiwiT2JzaWRpYW5TZXJ2aWNlIiwidmF1bHQiLCJnZXRBYnN0cmFjdEZpbGVCeVBhdGgiLCJURm9sZGVyIiwiVmF1bHQiLCJyZWN1cnNlQ2hpbGRyZW4iLCJURmlsZSIsInJlYWRGaWxlIiwicmVuZGVyZWQiLCJpbnNlcnRBdEN1cnNvciIsIndvcmtzcGFjZSIsImdldEFjdGl2ZVZpZXdPZlR5cGUiLCJNYXJrZG93blZpZXciLCJjdXJyZW50TW9kZSIsIk1hcmtkb3duU291cmNlVmlldyIsInNvdXJjZU1vZGUiLCJjbUVkaXRvciIsImdldERvYyIsInJlcGxhY2VTZWxlY3Rpb24iLCJyZW5kZXJEb2MiLCJyZWFkIiwibmF2aWdhdG9yIiwiY2xpcGJvYXJkIiwicmVhZFRleHQiLCJDbGlwYm9hcmRUZW1wbGVQcm92aWRlciIsIkNsaXBib2FyZENvbnRleHQiLCJwbHVnaW5NYW5pZmVzdCIsIlRlbXBsZVBsdWdpbiIsImNvbnRhaW5lciIsInNldHRpbmdzUHJvdmlkZXIiLCJsb2FkIiwib2JzIiwiYWRkSWNvbiIsImFkZFNldHRpbmdUYWIiLCJhZGRSaWJib25JY29uIiwicHJvbXB0VGVtcGxhdGUiLCJhZGRDb21tYW5kIiwiaW5zZXJ0RG9jcyJdLCJtYXBwaW5ncyI6InlFQWdCSUEsRUFBZ0IsU0FBU0MsRUFBR0MsR0FJNUIsT0FIQUYsRUFBZ0JHLE9BQU9DLGdCQUNsQixDQUFFQyxVQUFXLGNBQWdCQyxPQUFTLFNBQVVMLEVBQUdDLEdBQUtELEVBQUVJLFVBQVlILElBQ3ZFLFNBQVVELEVBQUdDLEdBQUssSUFBSyxJQUFJSyxLQUFLTCxFQUFPQyxPQUFPSyxVQUFVQyxlQUFlQyxLQUFLUixFQUFHSyxLQUFJTixFQUFFTSxHQUFLTCxFQUFFSyxNQUMzRU4sRUFBR0MsSUFHckIsU0FBU1MsRUFBVVYsRUFBR0MsR0FFekIsU0FBU1UsSUFBT0MsS0FBS0MsWUFBY2IsRUFEbkNELEVBQWNDLEVBQUdDLEdBRWpCRCxFQUFFTyxVQUFrQixPQUFOTixFQUFhQyxPQUFPWSxPQUFPYixJQUFNVSxFQUFHSixVQUFZTixFQUFFTSxVQUFXLElBQUlJLEdBMEI1RSxTQUFTSSxFQUFXQyxFQUFZQyxFQUFRQyxFQUFLQyxHQUNoRCxJQUEySG5CLEVBQXZIb0IsRUFBSUMsVUFBVUMsT0FBUUMsRUFBSUgsRUFBSSxFQUFJSCxFQUFrQixPQUFURSxFQUFnQkEsRUFBT2pCLE9BQU9zQix5QkFBeUJQLEVBQVFDLEdBQU9DLEVBQ3JILEdBQXVCLGlCQUFaTSxTQUFvRCxtQkFBckJBLFFBQVFDLFNBQXlCSCxFQUFJRSxRQUFRQyxTQUFTVixFQUFZQyxFQUFRQyxFQUFLQyxRQUNwSCxJQUFLLElBQUlRLEVBQUlYLEVBQVdNLE9BQVMsRUFBR0ssR0FBSyxFQUFHQSxLQUFTM0IsRUFBSWdCLEVBQVdXLE1BQUlKLEdBQUtILEVBQUksRUFBSXBCLEVBQUV1QixHQUFLSCxFQUFJLEVBQUlwQixFQUFFaUIsRUFBUUMsRUFB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QUtDLElBQVUsSUFDeERDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFDeERDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUN2RUMsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3ZFQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3hEQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3hEQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3hEQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFDdkVDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUN2RUMsSUFBVSxJQUFNQyxJQUFVLElBQzFCQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUN6Q0MsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3ZFQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFDdkVDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFDeERDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFDeERDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQ3pDQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUN6Q0MsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFDekNDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQ3pDQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3hEQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElB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
